
Indenter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bdc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08011d64  08011d64  00021d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012344  08012344  00030278  2**0
                  CONTENTS
  4 .ARM          00000008  08012344  08012344  00022344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801234c  0801234c  00030278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801234c  0801234c  0002234c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012350  08012350  00022350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  08012354  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007654  20000278  080125cc  00030278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200078cc  080125cc  000378cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030278  2**0
                  CONTENTS, READONLY
 12 .debug_info   000251ae  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004699  00000000  00000000  00055456  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001990  00000000  00000000  00059af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001790  00000000  00000000  0005b480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000274c5  00000000  00000000  0005cc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a8c8  00000000  00000000  000840d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dade4  00000000  00000000  0009e99d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00179781  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cf0  00000000  00000000  001797fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000278 	.word	0x20000278
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08011d4c 	.word	0x08011d4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000027c 	.word	0x2000027c
 80001c4:	08011d4c 	.word	0x08011d4c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a78:	f000 b972 	b.w	8000d60 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9e08      	ldr	r6, [sp, #32]
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4688      	mov	r8, r1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d14b      	bne.n	8000b3a <__udivmoddi4+0xa6>
 8000aa2:	428a      	cmp	r2, r1
 8000aa4:	4615      	mov	r5, r2
 8000aa6:	d967      	bls.n	8000b78 <__udivmoddi4+0xe4>
 8000aa8:	fab2 f282 	clz	r2, r2
 8000aac:	b14a      	cbz	r2, 8000ac2 <__udivmoddi4+0x2e>
 8000aae:	f1c2 0720 	rsb	r7, r2, #32
 8000ab2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ab6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aba:	4095      	lsls	r5, r2
 8000abc:	ea47 0803 	orr.w	r8, r7, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ac6:	0c23      	lsrs	r3, r4, #16
 8000ac8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000acc:	fa1f fc85 	uxth.w	ip, r5
 8000ad0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ad4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad8:	fb07 f10c 	mul.w	r1, r7, ip
 8000adc:	4299      	cmp	r1, r3
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x60>
 8000ae0:	18eb      	adds	r3, r5, r3
 8000ae2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000ae6:	f080 811b 	bcs.w	8000d20 <__udivmoddi4+0x28c>
 8000aea:	4299      	cmp	r1, r3
 8000aec:	f240 8118 	bls.w	8000d20 <__udivmoddi4+0x28c>
 8000af0:	3f02      	subs	r7, #2
 8000af2:	442b      	add	r3, r5
 8000af4:	1a5b      	subs	r3, r3, r1
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000afc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b08:	45a4      	cmp	ip, r4
 8000b0a:	d909      	bls.n	8000b20 <__udivmoddi4+0x8c>
 8000b0c:	192c      	adds	r4, r5, r4
 8000b0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b12:	f080 8107 	bcs.w	8000d24 <__udivmoddi4+0x290>
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	f240 8104 	bls.w	8000d24 <__udivmoddi4+0x290>
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	442c      	add	r4, r5
 8000b20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b24:	eba4 040c 	sub.w	r4, r4, ip
 8000b28:	2700      	movs	r7, #0
 8000b2a:	b11e      	cbz	r6, 8000b34 <__udivmoddi4+0xa0>
 8000b2c:	40d4      	lsrs	r4, r2
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e9c6 4300 	strd	r4, r3, [r6]
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0xbe>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	f000 80eb 	beq.w	8000d1a <__udivmoddi4+0x286>
 8000b44:	2700      	movs	r7, #0
 8000b46:	e9c6 0100 	strd	r0, r1, [r6]
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f783 	clz	r7, r3
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d147      	bne.n	8000bea <__udivmoddi4+0x156>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xd0>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80fa 	bhi.w	8000d58 <__udivmoddi4+0x2c4>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0303 	sbc.w	r3, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d0e0      	beq.n	8000b34 <__udivmoddi4+0xa0>
 8000b72:	e9c6 4800 	strd	r4, r8, [r6]
 8000b76:	e7dd      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000b78:	b902      	cbnz	r2, 8000b7c <__udivmoddi4+0xe8>
 8000b7a:	deff      	udf	#255	; 0xff
 8000b7c:	fab2 f282 	clz	r2, r2
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	f040 808f 	bne.w	8000ca4 <__udivmoddi4+0x210>
 8000b86:	1b49      	subs	r1, r1, r5
 8000b88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8c:	fa1f f885 	uxth.w	r8, r5
 8000b90:	2701      	movs	r7, #1
 8000b92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b96:	0c23      	lsrs	r3, r4, #16
 8000b98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x122>
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2bc>
 8000bb6:	4684      	mov	ip, r0
 8000bb8:	1a59      	subs	r1, r3, r1
 8000bba:	b2a3      	uxth	r3, r4
 8000bbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc8:	fb08 f800 	mul.w	r8, r8, r0
 8000bcc:	45a0      	cmp	r8, r4
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x14c>
 8000bd0:	192c      	adds	r4, r5, r4
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x14a>
 8000bd8:	45a0      	cmp	r8, r4
 8000bda:	f200 80b6 	bhi.w	8000d4a <__udivmoddi4+0x2b6>
 8000bde:	4618      	mov	r0, r3
 8000be0:	eba4 0408 	sub.w	r4, r4, r8
 8000be4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be8:	e79f      	b.n	8000b2a <__udivmoddi4+0x96>
 8000bea:	f1c7 0c20 	rsb	ip, r7, #32
 8000bee:	40bb      	lsls	r3, r7
 8000bf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c08:	4325      	orrs	r5, r4
 8000c0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c0e:	0c2c      	lsrs	r4, r5, #16
 8000c10:	fb08 3319 	mls	r3, r8, r9, r3
 8000c14:	fa1f fa8e 	uxth.w	sl, lr
 8000c18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c20:	429c      	cmp	r4, r3
 8000c22:	fa02 f207 	lsl.w	r2, r2, r7
 8000c26:	fa00 f107 	lsl.w	r1, r0, r7
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c30:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c34:	f080 8087 	bcs.w	8000d46 <__udivmoddi4+0x2b2>
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	f240 8084 	bls.w	8000d46 <__udivmoddi4+0x2b2>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4473      	add	r3, lr
 8000c44:	1b1b      	subs	r3, r3, r4
 8000c46:	b2ad      	uxth	r5, r5
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c58:	45a2      	cmp	sl, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1da>
 8000c5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c60:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c64:	d26b      	bcs.n	8000d3e <__udivmoddi4+0x2aa>
 8000c66:	45a2      	cmp	sl, r4
 8000c68:	d969      	bls.n	8000d3e <__udivmoddi4+0x2aa>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4474      	add	r4, lr
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	fba0 8902 	umull	r8, r9, r0, r2
 8000c76:	eba4 040a 	sub.w	r4, r4, sl
 8000c7a:	454c      	cmp	r4, r9
 8000c7c:	46c2      	mov	sl, r8
 8000c7e:	464b      	mov	r3, r9
 8000c80:	d354      	bcc.n	8000d2c <__udivmoddi4+0x298>
 8000c82:	d051      	beq.n	8000d28 <__udivmoddi4+0x294>
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d069      	beq.n	8000d5c <__udivmoddi4+0x2c8>
 8000c88:	ebb1 050a 	subs.w	r5, r1, sl
 8000c8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c94:	40fd      	lsrs	r5, r7
 8000c96:	40fc      	lsrs	r4, r7
 8000c98:	ea4c 0505 	orr.w	r5, ip, r5
 8000c9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	e747      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000ca4:	f1c2 0320 	rsb	r3, r2, #32
 8000ca8:	fa20 f703 	lsr.w	r7, r0, r3
 8000cac:	4095      	lsls	r5, r2
 8000cae:	fa01 f002 	lsl.w	r0, r1, r2
 8000cb2:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	4338      	orrs	r0, r7
 8000cbc:	0c01      	lsrs	r1, r0, #16
 8000cbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cc2:	fa1f f885 	uxth.w	r8, r5
 8000cc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb07 f308 	mul.w	r3, r7, r8
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d907      	bls.n	8000cea <__udivmoddi4+0x256>
 8000cda:	1869      	adds	r1, r5, r1
 8000cdc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ce0:	d22f      	bcs.n	8000d42 <__udivmoddi4+0x2ae>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d92d      	bls.n	8000d42 <__udivmoddi4+0x2ae>
 8000ce6:	3f02      	subs	r7, #2
 8000ce8:	4429      	add	r1, r5
 8000cea:	1acb      	subs	r3, r1, r3
 8000cec:	b281      	uxth	r1, r0
 8000cee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfa:	fb00 f308 	mul.w	r3, r0, r8
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x27e>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d08:	d217      	bcs.n	8000d3a <__udivmoddi4+0x2a6>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d915      	bls.n	8000d3a <__udivmoddi4+0x2a6>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1ac9      	subs	r1, r1, r3
 8000d14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d18:	e73b      	b.n	8000b92 <__udivmoddi4+0xfe>
 8000d1a:	4637      	mov	r7, r6
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	e709      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000d20:	4607      	mov	r7, r0
 8000d22:	e6e7      	b.n	8000af4 <__udivmoddi4+0x60>
 8000d24:	4618      	mov	r0, r3
 8000d26:	e6fb      	b.n	8000b20 <__udivmoddi4+0x8c>
 8000d28:	4541      	cmp	r1, r8
 8000d2a:	d2ab      	bcs.n	8000c84 <__udivmoddi4+0x1f0>
 8000d2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d30:	eb69 020e 	sbc.w	r2, r9, lr
 8000d34:	3801      	subs	r0, #1
 8000d36:	4613      	mov	r3, r2
 8000d38:	e7a4      	b.n	8000c84 <__udivmoddi4+0x1f0>
 8000d3a:	4660      	mov	r0, ip
 8000d3c:	e7e9      	b.n	8000d12 <__udivmoddi4+0x27e>
 8000d3e:	4618      	mov	r0, r3
 8000d40:	e795      	b.n	8000c6e <__udivmoddi4+0x1da>
 8000d42:	4667      	mov	r7, ip
 8000d44:	e7d1      	b.n	8000cea <__udivmoddi4+0x256>
 8000d46:	4681      	mov	r9, r0
 8000d48:	e77c      	b.n	8000c44 <__udivmoddi4+0x1b0>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	442c      	add	r4, r5
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0x14c>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	442b      	add	r3, r5
 8000d56:	e72f      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d58:	4638      	mov	r0, r7
 8000d5a:	e708      	b.n	8000b6e <__udivmoddi4+0xda>
 8000d5c:	4637      	mov	r7, r6
 8000d5e:	e6e9      	b.n	8000b34 <__udivmoddi4+0xa0>

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <DHT_Start>:

uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2;
uint16_t SUM; uint8_t Presence = 0;

void DHT_Start (void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
	set_gpio_mode(OUTPUT);  // set the pin as output
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f000 f90b 	bl	8000f84 <set_gpio_mode>
	HAL_GPIO_WritePin (DHT_GPIO_Port, DHT_Pin, 0);   // pull the pin low
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <DHT_Start+0x38>)
 8000d76:	f00c f86f 	bl	800ce58 <HAL_GPIO_WritePin>
	HAL_Delay(18);   // wait for 18ms
 8000d7a:	2012      	movs	r0, #18
 8000d7c:	f00a fe0c 	bl	800b998 <HAL_Delay>
	HAL_GPIO_WritePin (DHT_GPIO_Port, DHT_Pin, 1);   // pull the pin low
 8000d80:	2201      	movs	r2, #1
 8000d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <DHT_Start+0x38>)
 8000d88:	f00c f866 	bl	800ce58 <HAL_GPIO_WritePin>
	DWT_Delay(20);
 8000d8c:	2014      	movs	r0, #20
 8000d8e:	f000 f931 	bl	8000ff4 <DWT_Delay>
	set_gpio_mode(INPUT);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f000 f8f6 	bl	8000f84 <set_gpio_mode>
}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40020800 	.word	0x40020800

08000da0 <DHT_GetData>:
void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
    DHT_Start ();
 8000da8:	f7ff ffdc 	bl	8000d64 <DHT_Start>
	Presence = Check_Response();
 8000dac:	f000 f8b4 	bl	8000f18 <Check_Response>
 8000db0:	4603      	mov	r3, r0
 8000db2:	461a      	mov	r2, r3
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <DHT_GetData+0x9c>)
 8000db6:	701a      	strb	r2, [r3, #0]
	if(Presence)
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <DHT_GetData+0x9c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d038      	beq.n	8000e32 <DHT_GetData+0x92>
	{
		Rh_byte1 = DHT_Read();
 8000dc0:	f000 f848 	bl	8000e54 <DHT_Read>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <DHT_GetData+0xa0>)
 8000dca:	701a      	strb	r2, [r3, #0]
		Rh_byte2 = DHT_Read();
 8000dcc:	f000 f842 	bl	8000e54 <DHT_Read>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <DHT_GetData+0xa4>)
 8000dd6:	701a      	strb	r2, [r3, #0]
		Temp_byte1 = DHT_Read();
 8000dd8:	f000 f83c 	bl	8000e54 <DHT_Read>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	461a      	mov	r2, r3
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <DHT_GetData+0xa8>)
 8000de2:	701a      	strb	r2, [r3, #0]
		Temp_byte2 = DHT_Read();
 8000de4:	f000 f836 	bl	8000e54 <DHT_Read>
 8000de8:	4603      	mov	r3, r0
 8000dea:	461a      	mov	r2, r3
 8000dec:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <DHT_GetData+0xac>)
 8000dee:	701a      	strb	r2, [r3, #0]
		SUM = DHT_Read();
 8000df0:	f000 f830 	bl	8000e54 <DHT_Read>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <DHT_GetData+0xb0>)
 8000dfa:	801a      	strh	r2, [r3, #0]

		if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <DHT_GetData+0xb0>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <DHT_GetData+0xa0>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <DHT_GetData+0xa4>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <DHT_GetData+0xa8>)
 8000e10:	7812      	ldrb	r2, [r2, #0]
 8000e12:	4413      	add	r3, r2
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <DHT_GetData+0xac>)
 8000e16:	7812      	ldrb	r2, [r2, #0]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d109      	bne.n	8000e32 <DHT_GetData+0x92>
		{
			#if defined(TYPE_DHT11)
				DHT_Data->Temperature = Temp_byte1;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <DHT_GetData+0xa8>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	601a      	str	r2, [r3, #0]
				DHT_Data->Humidity = Rh_byte1;
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <DHT_GetData+0xa0>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	605a      	str	r2, [r3, #4]
				DHT_Data->Humidity =Rh_byte1;
				DHT_Data->Humidityf=Rh_byte2;
			#endif
		}
	}
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000294 	.word	0x20000294
 8000e40:	200018c4 	.word	0x200018c4
 8000e44:	200018c6 	.word	0x200018c6
 8000e48:	200018c5 	.word	0x200018c5
 8000e4c:	200018ca 	.word	0x200018ca
 8000e50:	200018c8 	.word	0x200018c8

08000e54 <DHT_Read>:
uint8_t DHT_Read (void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	uint8_t i=0,j=0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	71fb      	strb	r3, [r7, #7]
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71bb      	strb	r3, [r7, #6]
	uint32_t time;
	for (j=0;j<8;j++)
 8000e62:	2300      	movs	r3, #0
 8000e64:	71bb      	strb	r3, [r7, #6]
 8000e66:	e04c      	b.n	8000f02 <DHT_Read+0xae>
	{
		time = HAL_GetTick();
 8000e68:	f00a fd8a 	bl	800b980 <HAL_GetTick>
 8000e6c:	6038      	str	r0, [r7, #0]
		while ((!HAL_GPIO_ReadPin (DHT_GPIO_Port, DHT_Pin)) && (time >= HAL_GetTick()) ){
 8000e6e:	bf00      	nop
 8000e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e74:	4827      	ldr	r0, [pc, #156]	; (8000f14 <DHT_Read+0xc0>)
 8000e76:	f00b ffd7 	bl	800ce28 <HAL_GPIO_ReadPin>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d105      	bne.n	8000e8c <DHT_Read+0x38>
 8000e80:	f00a fd7e 	bl	800b980 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d2f1      	bcs.n	8000e70 <DHT_Read+0x1c>
			// wait for the pin to go high
		}
		DWT_Delay(40);   // wait for 40 us!!!!
 8000e8c:	2028      	movs	r0, #40	; 0x28
 8000e8e:	f000 f8b1 	bl	8000ff4 <DWT_Delay>
		if (!(HAL_GPIO_ReadPin (DHT_GPIO_Port, DHT_Pin)))   // if the pin is low
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	481f      	ldr	r0, [pc, #124]	; (8000f14 <DHT_Read+0xc0>)
 8000e98:	f00b ffc6 	bl	800ce28 <HAL_GPIO_ReadPin>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d10e      	bne.n	8000ec0 <DHT_Read+0x6c>
		{
			i&= ~(1<<(7-j));   // write 0
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	f1c3 0307 	rsb	r3, r3, #7
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	b25a      	sxtb	r2, r3
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	b25b      	sxtb	r3, r3
 8000ebc:	71fb      	strb	r3, [r7, #7]
 8000ebe:	e00b      	b.n	8000ed8 <DHT_Read+0x84>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000ec0:	79bb      	ldrb	r3, [r7, #6]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	b25a      	sxtb	r2, r3
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	71fb      	strb	r3, [r7, #7]
		time = HAL_GetTick();
 8000ed8:	f00a fd52 	bl	800b980 <HAL_GetTick>
 8000edc:	6038      	str	r0, [r7, #0]
		while ((HAL_GPIO_ReadPin (DHT_GPIO_Port, DHT_Pin)) && (time >= HAL_GetTick())){
 8000ede:	bf00      	nop
 8000ee0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ee4:	480b      	ldr	r0, [pc, #44]	; (8000f14 <DHT_Read+0xc0>)
 8000ee6:	f00b ff9f 	bl	800ce28 <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d005      	beq.n	8000efc <DHT_Read+0xa8>
 8000ef0:	f00a fd46 	bl	800b980 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d2f1      	bcs.n	8000ee0 <DHT_Read+0x8c>
	for (j=0;j<8;j++)
 8000efc:	79bb      	ldrb	r3, [r7, #6]
 8000efe:	3301      	adds	r3, #1
 8000f00:	71bb      	strb	r3, [r7, #6]
 8000f02:	79bb      	ldrb	r3, [r7, #6]
 8000f04:	2b07      	cmp	r3, #7
 8000f06:	d9af      	bls.n	8000e68 <DHT_Read+0x14>
// wait for the pin to go low
		}
	}
	return i;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40020800 	.word	0x40020800

08000f18 <Check_Response>:
uint8_t Check_Response (void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	71fb      	strb	r3, [r7, #7]
	uint32_t time;
	if (!(HAL_GPIO_ReadPin (DHT_GPIO_Port, DHT_Pin)))
 8000f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f26:	4816      	ldr	r0, [pc, #88]	; (8000f80 <Check_Response+0x68>)
 8000f28:	f00b ff7e 	bl	800ce28 <HAL_GPIO_ReadPin>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d10f      	bne.n	8000f52 <Check_Response+0x3a>
	{
		DWT_Delay(80);//!!!
 8000f32:	2050      	movs	r0, #80	; 0x50
 8000f34:	f000 f85e 	bl	8000ff4 <DWT_Delay>
		if ((HAL_GPIO_ReadPin (DHT_GPIO_Port, DHT_Pin))){
 8000f38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3c:	4810      	ldr	r0, [pc, #64]	; (8000f80 <Check_Response+0x68>)
 8000f3e:	f00b ff73 	bl	800ce28 <HAL_GPIO_ReadPin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <Check_Response+0x36>
			Response = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	e001      	b.n	8000f52 <Check_Response+0x3a>
		}
		else {
			Response = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	71fb      	strb	r3, [r7, #7]
		}
	}
	time = HAL_GetTick();
 8000f52:	f00a fd15 	bl	800b980 <HAL_GetTick>
 8000f56:	6038      	str	r0, [r7, #0]
	while ((HAL_GPIO_ReadPin (DHT_GPIO_Port, DHT_Pin)) && (time >= HAL_GetTick())){
 8000f58:	bf00      	nop
 8000f5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f5e:	4808      	ldr	r0, [pc, #32]	; (8000f80 <Check_Response+0x68>)
 8000f60:	f00b ff62 	bl	800ce28 <HAL_GPIO_ReadPin>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <Check_Response+0x5e>
 8000f6a:	f00a fd09 	bl	800b980 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d2f1      	bcs.n	8000f5a <Check_Response+0x42>
// wait for the pin to go low
	}
	return Response;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40020800 	.word	0x40020800

08000f84 <set_gpio_mode>:
void set_gpio_mode(uint8_t pMode)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]

	//if direction parameter OUTPUT
	if(pMode == OUTPUT)
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d10f      	bne.n	8000fc4 <set_gpio_mode+0x40>
	{
	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	  GPIO_InitStruct.Pin = DHT_Pin;
 8000fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000faa:	2311      	movs	r3, #17
 8000fac:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	4619      	mov	r1, r3
 8000fbc:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <set_gpio_mode+0x6c>)
 8000fbe:	f00b fd99 	bl	800caf4 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
	}
}
 8000fc2:	e011      	b.n	8000fe8 <set_gpio_mode+0x64>
	}else if(pMode == INPUT)   //else if direction parameter INPUT
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10e      	bne.n	8000fe8 <set_gpio_mode+0x64>
	  GPIO_InitStruct.Pin = DHT_Pin;
 8000fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fce:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <set_gpio_mode+0x6c>)
 8000fe4:	f00b fd86 	bl	800caf4 <HAL_GPIO_Init>
}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40020800 	.word	0x40020800

08000ff4 <DWT_Delay>:
void DWT_Delay(uint32_t us) // microseconds
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	RESET_CYCLE_COUNTER();
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <DWT_Delay+0x68>)
 8000ffe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001008:	4a15      	ldr	r2, [pc, #84]	; (8001060 <DWT_Delay+0x6c>)
 800100a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <DWT_Delay+0x70>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <DWT_Delay+0x70>)
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <DWT_Delay+0x70>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <DWT_Delay+0x70>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]
    uint32_t startTick = DWT->CYCCNT,
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <DWT_Delay+0x70>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <DWT_Delay+0x74>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <DWT_Delay+0x78>)
 8001032:	fba2 2303 	umull	r2, r3, r2, r3
 8001036:	0c9a      	lsrs	r2, r3, #18
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	fb02 f303 	mul.w	r3, r2, r3
 800103e:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8001040:	bf00      	nop
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <DWT_Delay+0x70>)
 8001044:	685a      	ldr	r2, [r3, #4]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	429a      	cmp	r2, r3
 800104e:	d8f8      	bhi.n	8001042 <DWT_Delay+0x4e>
}
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000edf0 	.word	0xe000edf0
 8001060:	c5acce55 	.word	0xc5acce55
 8001064:	e0001000 	.word	0xe0001000
 8001068:	20000074 	.word	0x20000074
 800106c:	431bde83 	.word	0x431bde83

08001070 <HX711_Init>:
 */
#include "HX711.h"


void HX711_Init(HX711 data)
{
 8001070:	b084      	sub	sp, #16
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
 8001076:	f107 0c08 	add.w	ip, r7, #8
 800107a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
//	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//	GPIO_InitStruct.Pull = GPIO_PULLUP;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
//	HAL_GPIO_Init(data.gpioData, &GPIO_InitStruct);

	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	8a39      	ldrh	r1, [r7, #16]
 8001082:	2201      	movs	r2, #1
 8001084:	4618      	mov	r0, r3
 8001086:	f00b fee7 	bl	800ce58 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800108a:	2032      	movs	r0, #50	; 0x32
 800108c:	f00a fc84 	bl	800b998 <HAL_Delay>
	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	8a39      	ldrh	r1, [r7, #16]
 8001094:	2200      	movs	r2, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f00b fede 	bl	800ce58 <HAL_GPIO_WritePin>

}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010a4:	b004      	add	sp, #16
 80010a6:	4770      	bx	lr

080010a8 <HX711_Average_Value>:

int HX711_Average_Value(HX711 data, uint8_t times)
{
 80010a8:	b084      	sub	sp, #16
 80010aa:	b5b0      	push	{r4, r5, r7, lr}
 80010ac:	b08e      	sub	sp, #56	; 0x38
 80010ae:	af04      	add	r7, sp, #16
 80010b0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80010b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int sum = 0,tmp;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t time;
    time=HAL_GetTick();
 80010bc:	f00a fc60 	bl	800b980 <HAL_GetTick>
 80010c0:	61b8      	str	r0, [r7, #24]
    for (int i = 0; i < times; i++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	e042      	b.n	800114e <HX711_Average_Value+0xa6>
    {
    	data=HX711_Value(data,0);
 80010c8:	2300      	movs	r3, #0
 80010ca:	9303      	str	r3, [sp, #12]
 80010cc:	466c      	mov	r4, sp
 80010ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010e0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80010e4:	f000 f844 	bl	8001170 <HX711_Value>
    	tmp = data.scalelive;
 80010e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ea:	623b      	str	r3, [r7, #32]
    	while(tmp==-1 && time*2000 >= HAL_GetTick())
 80010ec:	e01a      	b.n	8001124 <HX711_Average_Value+0x7c>
    	{
    		data=HX711_Value(data,0);
 80010ee:	463d      	mov	r5, r7
 80010f0:	2300      	movs	r3, #0
 80010f2:	9303      	str	r3, [sp, #12]
 80010f4:	466c      	mov	r4, sp
 80010f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001102:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001108:	4628      	mov	r0, r5
 800110a:	f000 f831 	bl	8001170 <HX711_Value>
 800110e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 8001112:	463c      	mov	r4, r7
 8001114:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001116:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001118:	e894 0003 	ldmia.w	r4, {r0, r1}
 800111c:	e885 0003 	stmia.w	r5, {r0, r1}
    		tmp = data.scalelive;
 8001120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001122:	623b      	str	r3, [r7, #32]
    	while(tmp==-1 && time*2000 >= HAL_GetTick())
 8001124:	6a3b      	ldr	r3, [r7, #32]
 8001126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800112a:	d109      	bne.n	8001140 <HX711_Average_Value+0x98>
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001132:	fb02 f403 	mul.w	r4, r2, r3
 8001136:	f00a fc23 	bl	800b980 <HAL_GetTick>
 800113a:	4603      	mov	r3, r0
 800113c:	429c      	cmp	r4, r3
 800113e:	d2d6      	bcs.n	80010ee <HX711_Average_Value+0x46>
    	}
        sum += tmp;
 8001140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	4413      	add	r3, r2
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
    for (int i = 0; i < times; i++)
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	3301      	adds	r3, #1
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001152:	69fa      	ldr	r2, [r7, #28]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbb7      	blt.n	80010c8 <HX711_Average_Value+0x20>
    }

    return sum / times;
 8001158:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800115c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800115e:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001162:	4618      	mov	r0, r3
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800116c:	b004      	add	sp, #16
 800116e:	4770      	bx	lr

08001170 <HX711_Value>:

HX711 HX711_Value(HX711 data, int av)
{
 8001170:	b084      	sub	sp, #16
 8001172:	b5b0      	push	{r4, r5, r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800117e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int buffer;
    buffer=-1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001186:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(data.gpioData, data.pinData)!=1)
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800118c:	4611      	mov	r1, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f00b fe4a 	bl	800ce28 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b01      	cmp	r3, #1
 8001198:	d049      	beq.n	800122e <HX711_Value+0xbe>
   {
	   	//__disable_irq();
	   	buffer=0;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
		for (uint8_t i = 0; i < 24; i++)
 800119e:	2300      	movs	r3, #0
 80011a0:	74fb      	strb	r3, [r7, #19]
 80011a2:	e01d      	b.n	80011e0 <HX711_Value+0x70>
		{
			HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 80011a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a6:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80011a8:	2201      	movs	r2, #1
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00b fe54 	bl	800ce58 <HAL_GPIO_WritePin>

			buffer = buffer << 1 ;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	617b      	str	r3, [r7, #20]

			if (HAL_GPIO_ReadPin(data.gpioData, data.pinData))
 80011b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f00b fe33 	bl	800ce28 <HAL_GPIO_ReadPin>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <HX711_Value+0x5e>
			{
				buffer ++;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
			}

			HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 80011ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d0:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80011d2:	2200      	movs	r2, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00b fe3f 	bl	800ce58 <HAL_GPIO_WritePin>
		for (uint8_t i = 0; i < 24; i++)
 80011da:	7cfb      	ldrb	r3, [r7, #19]
 80011dc:	3301      	adds	r3, #1
 80011de:	74fb      	strb	r3, [r7, #19]
 80011e0:	7cfb      	ldrb	r3, [r7, #19]
 80011e2:	2b17      	cmp	r3, #23
 80011e4:	d9de      	bls.n	80011a4 <HX711_Value+0x34>
		}

		for (int i = 0; i < data.gain; i++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	e00e      	b.n	800120a <HX711_Value+0x9a>
		{
			HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 80011ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ee:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80011f0:	2201      	movs	r2, #1
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00b fe30 	bl	800ce58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 80011f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fa:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80011fc:	2200      	movs	r2, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f00b fe2a 	bl	800ce58 <HAL_GPIO_WritePin>
		for (int i = 0; i < data.gain; i++)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	429a      	cmp	r2, r3
 8001210:	dbec      	blt.n	80011ec <HX711_Value+0x7c>
		}
		//__enable_irq();
		buffer = buffer ^ 0x800000;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001218:	617b      	str	r3, [r7, #20]
		if(av){
 800121a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800121c:	2b00      	cmp	r3, #0
 800121e:	d004      	beq.n	800122a <HX711_Value+0xba>
			data.scalelive=buffer-data.offset;
 8001220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
 8001228:	e001      	b.n	800122e <HX711_Value+0xbe>
		}
		else{
			data.scalelive=buffer;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	643b      	str	r3, [r7, #64]	; 0x40
		}
   	}
    if(buffer==-1&&!av){
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001234:	d104      	bne.n	8001240 <HX711_Value+0xd0>
 8001236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HX711_Value+0xd0>
    	data.scalelive=buffer;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	643b      	str	r3, [r7, #64]	; 0x40
    }
    return data;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	461d      	mov	r5, r3
 8001244:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800124a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800124c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001250:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800125e:	b004      	add	sp, #16
 8001260:	4770      	bx	lr

08001262 <HX711_Tare>:

HX711 HX711_Tare(HX711 data, uint8_t times)
{
 8001262:	b084      	sub	sp, #16
 8001264:	b5b0      	push	{r4, r5, r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af04      	add	r7, sp, #16
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001270:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int sum = HX711_Average_Value(data, times);
 8001274:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001278:	9302      	str	r3, [sp, #8]
 800127a:	466a      	mov	r2, sp
 800127c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001280:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001284:	e882 0003 	stmia.w	r2, {r0, r1}
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800128e:	f7ff ff0b 	bl	80010a8 <HX711_Average_Value>
 8001292:	60f8      	str	r0, [r7, #12]
    data.offset = sum;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
    return data;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	461d      	mov	r5, r3
 800129c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80012a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012a8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80012b6:	b004      	add	sp, #16
 80012b8:	4770      	bx	lr
	...

080012bc <HX711_Available>:

int HX711_Available(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(HXDAT_GPIO_Port, HXDAT_Pin)!=1)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <HX711_Available+0x1c>)
 80012c4:	f00b fdb0 	bl	800ce28 <HAL_GPIO_ReadPin>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d001      	beq.n	80012d2 <HX711_Available+0x16>
	{
		return 1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HX711_Available+0x18>
	}
	else
	{
		return 0;
 80012d2:	2300      	movs	r3, #0
	}
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	00000000 	.word	0x00000000

080012e0 <readMPU>:

float Ax,Ay,Az,Temper,Gx,Gy,Gz;
uint8_t data=0;
uint8_t Rec_Data[14];

void readMPU(uint16_t id, uint8_t filter, int duration){
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08b      	sub	sp, #44	; 0x2c
 80012e4:	af04      	add	r7, sp, #16
 80012e6:	4603      	mov	r3, r0
 80012e8:	603a      	str	r2, [r7, #0]
 80012ea:	80fb      	strh	r3, [r7, #6]
 80012ec:	460b      	mov	r3, r1
 80012ee:	717b      	strb	r3, [r7, #5]
	uint16_t Accel_X_RAW,Accel_Y_RAW,Accel_Z_RAW,Temp_RAW,Gyro_X_RAW,Gyro_Y_RAW,Gyro_Z_RAW;
	HAL_I2C_Mem_Read(&hi2c1, id, 0x75, 1, &data, 1, HAL_MAX_DELAY);//Who am I reg
 80012f0:	88f9      	ldrh	r1, [r7, #6]
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	2301      	movs	r3, #1
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	4ba4      	ldr	r3, [pc, #656]	; (8001590 <readMPU+0x2b0>)
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	2275      	movs	r2, #117	; 0x75
 8001304:	48a3      	ldr	r0, [pc, #652]	; (8001594 <readMPU+0x2b4>)
 8001306:	f00c f825 	bl	800d354 <HAL_I2C_Mem_Read>
	data=0x00;//Z Gyro PLL as clock source;set 0 for internal 8MHz
 800130a:	4ba1      	ldr	r3, [pc, #644]	; (8001590 <readMPU+0x2b0>)
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, id, 0x6B, 1,&data, 1, HAL_MAX_DELAY);//Wake Up reg
 8001310:	88f9      	ldrh	r1, [r7, #6]
 8001312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001316:	9302      	str	r3, [sp, #8]
 8001318:	2301      	movs	r3, #1
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	4b9c      	ldr	r3, [pc, #624]	; (8001590 <readMPU+0x2b0>)
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	2301      	movs	r3, #1
 8001322:	226b      	movs	r2, #107	; 0x6b
 8001324:	489b      	ldr	r0, [pc, #620]	; (8001594 <readMPU+0x2b4>)
 8001326:	f00b ff1b 	bl	800d160 <HAL_I2C_Mem_Write>
	data=0x07;//8kHz/1+LSB
 800132a:	4b99      	ldr	r3, [pc, #612]	; (8001590 <readMPU+0x2b0>)
 800132c:	2207      	movs	r2, #7
 800132e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, id, 0x19, 1,&data, 1, HAL_MAX_DELAY);//Sample Rate Divider reg for gyro
 8001330:	88f9      	ldrh	r1, [r7, #6]
 8001332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	4b94      	ldr	r3, [pc, #592]	; (8001590 <readMPU+0x2b0>)
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	2219      	movs	r2, #25
 8001344:	4893      	ldr	r0, [pc, #588]	; (8001594 <readMPU+0x2b4>)
 8001346:	f00b ff0b 	bl	800d160 <HAL_I2C_Mem_Write>
	data=0x06;//0x06Low pass filter5Hz-19msDelay -max of filters-
 800134a:	4b91      	ldr	r3, [pc, #580]	; (8001590 <readMPU+0x2b0>)
 800134c:	2206      	movs	r2, #6
 800134e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, id, 0x1A, 1,&data, 1, HAL_MAX_DELAY);//CONFIGLow pass filter
 8001350:	88f9      	ldrh	r1, [r7, #6]
 8001352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	2301      	movs	r3, #1
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	4b8c      	ldr	r3, [pc, #560]	; (8001590 <readMPU+0x2b0>)
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2301      	movs	r3, #1
 8001362:	221a      	movs	r2, #26
 8001364:	488b      	ldr	r0, [pc, #556]	; (8001594 <readMPU+0x2b4>)
 8001366:	f00b fefb 	bl	800d160 <HAL_I2C_Mem_Write>
	data=0x00;//+-250 interval set for gyro
 800136a:	4b89      	ldr	r3, [pc, #548]	; (8001590 <readMPU+0x2b0>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, id, 0x1B, 1,&data, 1, HAL_MAX_DELAY);
 8001370:	88f9      	ldrh	r1, [r7, #6]
 8001372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	2301      	movs	r3, #1
 800137a:	9301      	str	r3, [sp, #4]
 800137c:	4b84      	ldr	r3, [pc, #528]	; (8001590 <readMPU+0x2b0>)
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2301      	movs	r3, #1
 8001382:	221b      	movs	r2, #27
 8001384:	4883      	ldr	r0, [pc, #524]	; (8001594 <readMPU+0x2b4>)
 8001386:	f00b feeb 	bl	800d160 <HAL_I2C_Mem_Write>
	data=0x00;//+-2g interval set for accelerometer
 800138a:	4b81      	ldr	r3, [pc, #516]	; (8001590 <readMPU+0x2b0>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, id, 0x1C, 1,&data, 1, HAL_MAX_DELAY);
 8001390:	88f9      	ldrh	r1, [r7, #6]
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	2301      	movs	r3, #1
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	4b7c      	ldr	r3, [pc, #496]	; (8001590 <readMPU+0x2b0>)
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2301      	movs	r3, #1
 80013a2:	221c      	movs	r2, #28
 80013a4:	487b      	ldr	r0, [pc, #492]	; (8001594 <readMPU+0x2b4>)
 80013a6:	f00b fedb 	bl	800d160 <HAL_I2C_Mem_Write>
	//read values:
	Ax=0.;
 80013aa:	4b7b      	ldr	r3, [pc, #492]	; (8001598 <readMPU+0x2b8>)
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
	Ay=0.;
 80013b2:	4b7a      	ldr	r3, [pc, #488]	; (800159c <readMPU+0x2bc>)
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
	Az=0.;
 80013ba:	4b79      	ldr	r3, [pc, #484]	; (80015a0 <readMPU+0x2c0>)
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
	Gx=0.;
 80013c2:	4b78      	ldr	r3, [pc, #480]	; (80015a4 <readMPU+0x2c4>)
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
	Gy=0.;
 80013ca:	4b77      	ldr	r3, [pc, #476]	; (80015a8 <readMPU+0x2c8>)
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
	Gz=0.;
 80013d2:	4b76      	ldr	r3, [pc, #472]	; (80015ac <readMPU+0x2cc>)
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
	Temper=0.;
 80013da:	4b75      	ldr	r3, [pc, #468]	; (80015b0 <readMPU+0x2d0>)
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
	Rec_Data[0]=0;
 80013e2:	4b74      	ldr	r3, [pc, #464]	; (80015b4 <readMPU+0x2d4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Read (&hi2c1, id, 0x3B, 1, Rec_Data, 14, HAL_MAX_DELAY);
 80013e8:	88f9      	ldrh	r1, [r7, #6]
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	230e      	movs	r3, #14
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	4b6f      	ldr	r3, [pc, #444]	; (80015b4 <readMPU+0x2d4>)
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2301      	movs	r3, #1
 80013fa:	223b      	movs	r2, #59	; 0x3b
 80013fc:	4865      	ldr	r0, [pc, #404]	; (8001594 <readMPU+0x2b4>)
 80013fe:	f00b ffa9 	bl	800d354 <HAL_I2C_Mem_Read>
	Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 8001402:	4b6c      	ldr	r3, [pc, #432]	; (80015b4 <readMPU+0x2d4>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	4b6a      	ldr	r3, [pc, #424]	; (80015b4 <readMPU+0x2d4>)
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	b21b      	sxth	r3, r3
 8001410:	4313      	orrs	r3, r2
 8001412:	b21b      	sxth	r3, r3
 8001414:	82fb      	strh	r3, [r7, #22]
	Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 8001416:	4b67      	ldr	r3, [pc, #412]	; (80015b4 <readMPU+0x2d4>)
 8001418:	789b      	ldrb	r3, [r3, #2]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b65      	ldr	r3, [pc, #404]	; (80015b4 <readMPU+0x2d4>)
 8001420:	78db      	ldrb	r3, [r3, #3]
 8001422:	b21b      	sxth	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b21b      	sxth	r3, r3
 8001428:	82bb      	strh	r3, [r7, #20]
	Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 800142a:	4b62      	ldr	r3, [pc, #392]	; (80015b4 <readMPU+0x2d4>)
 800142c:	791b      	ldrb	r3, [r3, #4]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	4b60      	ldr	r3, [pc, #384]	; (80015b4 <readMPU+0x2d4>)
 8001434:	795b      	ldrb	r3, [r3, #5]
 8001436:	b21b      	sxth	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b21b      	sxth	r3, r3
 800143c:	827b      	strh	r3, [r7, #18]
	Temp_RAW = (int16_t)(Rec_Data[6] << 8 | Rec_Data [7]);
 800143e:	4b5d      	ldr	r3, [pc, #372]	; (80015b4 <readMPU+0x2d4>)
 8001440:	799b      	ldrb	r3, [r3, #6]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b5b      	ldr	r3, [pc, #364]	; (80015b4 <readMPU+0x2d4>)
 8001448:	79db      	ldrb	r3, [r3, #7]
 800144a:	b21b      	sxth	r3, r3
 800144c:	4313      	orrs	r3, r2
 800144e:	b21b      	sxth	r3, r3
 8001450:	823b      	strh	r3, [r7, #16]
	Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data [9]);
 8001452:	4b58      	ldr	r3, [pc, #352]	; (80015b4 <readMPU+0x2d4>)
 8001454:	7a1b      	ldrb	r3, [r3, #8]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	4b56      	ldr	r3, [pc, #344]	; (80015b4 <readMPU+0x2d4>)
 800145c:	7a5b      	ldrb	r3, [r3, #9]
 800145e:	b21b      	sxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b21b      	sxth	r3, r3
 8001464:	81fb      	strh	r3, [r7, #14]
	Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data [11]);
 8001466:	4b53      	ldr	r3, [pc, #332]	; (80015b4 <readMPU+0x2d4>)
 8001468:	7a9b      	ldrb	r3, [r3, #10]
 800146a:	021b      	lsls	r3, r3, #8
 800146c:	b21a      	sxth	r2, r3
 800146e:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <readMPU+0x2d4>)
 8001470:	7adb      	ldrb	r3, [r3, #11]
 8001472:	b21b      	sxth	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b21b      	sxth	r3, r3
 8001478:	81bb      	strh	r3, [r7, #12]
	Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data [13]);
 800147a:	4b4e      	ldr	r3, [pc, #312]	; (80015b4 <readMPU+0x2d4>)
 800147c:	7b1b      	ldrb	r3, [r3, #12]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	4b4c      	ldr	r3, [pc, #304]	; (80015b4 <readMPU+0x2d4>)
 8001484:	7b5b      	ldrb	r3, [r3, #13]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21b      	sxth	r3, r3
 800148c:	817b      	strh	r3, [r7, #10]
	Ax = Accel_X_RAW;
 800148e:	8afb      	ldrh	r3, [r7, #22]
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <readMPU+0x2b8>)
 800149a:	edc3 7a00 	vstr	s15, [r3]
	Ay = Accel_Y_RAW;
 800149e:	8abb      	ldrh	r3, [r7, #20]
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a8:	4b3c      	ldr	r3, [pc, #240]	; (800159c <readMPU+0x2bc>)
 80014aa:	edc3 7a00 	vstr	s15, [r3]
	Az = Accel_Z_RAW;
 80014ae:	8a7b      	ldrh	r3, [r7, #18]
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b8:	4b39      	ldr	r3, [pc, #228]	; (80015a0 <readMPU+0x2c0>)
 80014ba:	edc3 7a00 	vstr	s15, [r3]
	Gx = Gyro_X_RAW/131.0;
 80014be:	89fb      	ldrh	r3, [r7, #14]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe ffdb 	bl	800047c <__aeabi_i2d>
 80014c6:	a32e      	add	r3, pc, #184	; (adr r3, 8001580 <readMPU+0x2a0>)
 80014c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014cc:	f7ff f96a 	bl	80007a4 <__aeabi_ddiv>
 80014d0:	4603      	mov	r3, r0
 80014d2:	460c      	mov	r4, r1
 80014d4:	4618      	mov	r0, r3
 80014d6:	4621      	mov	r1, r4
 80014d8:	f7ff fa74 	bl	80009c4 <__aeabi_d2f>
 80014dc:	4602      	mov	r2, r0
 80014de:	4b31      	ldr	r3, [pc, #196]	; (80015a4 <readMPU+0x2c4>)
 80014e0:	601a      	str	r2, [r3, #0]
	Gy = Gyro_Y_RAW/131.0;
 80014e2:	89bb      	ldrh	r3, [r7, #12]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ffc9 	bl	800047c <__aeabi_i2d>
 80014ea:	a325      	add	r3, pc, #148	; (adr r3, 8001580 <readMPU+0x2a0>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff f958 	bl	80007a4 <__aeabi_ddiv>
 80014f4:	4603      	mov	r3, r0
 80014f6:	460c      	mov	r4, r1
 80014f8:	4618      	mov	r0, r3
 80014fa:	4621      	mov	r1, r4
 80014fc:	f7ff fa62 	bl	80009c4 <__aeabi_d2f>
 8001500:	4602      	mov	r2, r0
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <readMPU+0x2c8>)
 8001504:	601a      	str	r2, [r3, #0]
	Gz = Gyro_Z_RAW/131.0;
 8001506:	897b      	ldrh	r3, [r7, #10]
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe ffb7 	bl	800047c <__aeabi_i2d>
 800150e:	a31c      	add	r3, pc, #112	; (adr r3, 8001580 <readMPU+0x2a0>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f946 	bl	80007a4 <__aeabi_ddiv>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	4618      	mov	r0, r3
 800151e:	4621      	mov	r1, r4
 8001520:	f7ff fa50 	bl	80009c4 <__aeabi_d2f>
 8001524:	4602      	mov	r2, r0
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <readMPU+0x2cc>)
 8001528:	601a      	str	r2, [r3, #0]
	Temper= (Temp_RAW)/340.0+36.53;
 800152a:	8a3b      	ldrh	r3, [r7, #16]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ffa5 	bl	800047c <__aeabi_i2d>
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <readMPU+0x2d8>)
 8001538:	f7ff f934 	bl	80007a4 <__aeabi_ddiv>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	a310      	add	r3, pc, #64	; (adr r3, 8001588 <readMPU+0x2a8>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7fe fe4b 	bl	80001e4 <__adddf3>
 800154e:	4603      	mov	r3, r0
 8001550:	460c      	mov	r4, r1
 8001552:	4618      	mov	r0, r3
 8001554:	4621      	mov	r1, r4
 8001556:	f7ff fa35 	bl	80009c4 <__aeabi_d2f>
 800155a:	4602      	mov	r2, r0
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <readMPU+0x2d0>)
 800155e:	601a      	str	r2, [r3, #0]
	mpu[0]=Accel_X_RAW;
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <readMPU+0x2dc>)
 8001562:	8afb      	ldrh	r3, [r7, #22]
 8001564:	8013      	strh	r3, [r2, #0]
	mpu[1]=Accel_Y_RAW;
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <readMPU+0x2dc>)
 8001568:	8abb      	ldrh	r3, [r7, #20]
 800156a:	8053      	strh	r3, [r2, #2]
	mpu[2]=Accel_Z_RAW;
 800156c:	4a13      	ldr	r2, [pc, #76]	; (80015bc <readMPU+0x2dc>)
 800156e:	8a7b      	ldrh	r3, [r7, #18]
 8001570:	8093      	strh	r3, [r2, #4]
}
 8001572:	bf00      	nop
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	00000000 	.word	0x00000000
 8001584:	40606000 	.word	0x40606000
 8001588:	0a3d70a4 	.word	0x0a3d70a4
 800158c:	404243d7 	.word	0x404243d7
 8001590:	20000295 	.word	0x20000295
 8001594:	20006aa4 	.word	0x20006aa4
 8001598:	200018ec 	.word	0x200018ec
 800159c:	200018e4 	.word	0x200018e4
 80015a0:	200018f0 	.word	0x200018f0
 80015a4:	200018cc 	.word	0x200018cc
 80015a8:	200018e8 	.word	0x200018e8
 80015ac:	200018f4 	.word	0x200018f4
 80015b0:	200018d0 	.word	0x200018d0
 80015b4:	200018d4 	.word	0x200018d4
 80015b8:	40754000 	.word	0x40754000
 80015bc:	2000039c 	.word	0x2000039c

080015c0 <HAL_ADC_ConvCpltCallback>:
 * @brief  Conversion complete callback in non blocking mode
 * @param  hadc: ADC handle
 * @retval None
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <HAL_ADC_ConvCpltCallback+0x6c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d127      	bne.n	8001622 <HAL_ADC_ConvCpltCallback+0x62>
	{
		for(int i = 1299; i > 1286; i--)
 80015d2:	f240 5313 	movw	r3, #1299	; 0x513
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e00c      	b.n	80015f4 <HAL_ADC_ConvCpltCallback+0x34>
		{
			adcData[i-1287] = adcBuff[i];				//copy data to second buffer
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f2a3 5307 	subw	r3, r3, #1287	; 0x507
 80015e0:	4913      	ldr	r1, [pc, #76]	; (8001630 <HAL_ADC_ConvCpltCallback+0x70>)
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80015e8:	4a12      	ldr	r2, [pc, #72]	; (8001634 <HAL_ADC_ConvCpltCallback+0x74>)
 80015ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 1299; i > 1286; i--)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f240 5206 	movw	r2, #1286	; 0x506
 80015fa:	4293      	cmp	r3, r2
 80015fc:	dced      	bgt.n	80015da <HAL_ADC_ConvCpltCallback+0x1a>
		}
		convEnd = 1;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_ADC_ConvCpltCallback+0x78>)
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
		adctim++;
 8001604:	4b0d      	ldr	r3, [pc, #52]	; (800163c <HAL_ADC_ConvCpltCallback+0x7c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	3301      	adds	r3, #1
 800160a:	4a0c      	ldr	r2, [pc, #48]	; (800163c <HAL_ADC_ConvCpltCallback+0x7c>)
 800160c:	6013      	str	r3, [r2, #0]
		if(adctim==2){
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_ADC_ConvCpltCallback+0x7c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d105      	bne.n	8001622 <HAL_ADC_ConvCpltCallback+0x62>
			actadc(adcData);
 8001616:	4807      	ldr	r0, [pc, #28]	; (8001634 <HAL_ADC_ConvCpltCallback+0x74>)
 8001618:	f000 f812 	bl	8001640 <actadc>
			adctim=0;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <HAL_ADC_ConvCpltCallback+0x7c>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40012000 	.word	0x40012000
 8001630:	200003a4 	.word	0x200003a4
 8001634:	200017f4 	.word	0x200017f4
 8001638:	20000296 	.word	0x20000296
 800163c:	200018f8 	.word	0x200018f8

08001640 <actadc>:
void actadc(uint16_t* adcarray){
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	tempers[0]=adcData[1];
 8001648:	4b9c      	ldr	r3, [pc, #624]	; (80018bc <actadc+0x27c>)
 800164a:	885b      	ldrh	r3, [r3, #2]
 800164c:	461a      	mov	r2, r3
 800164e:	4b9c      	ldr	r3, [pc, #624]	; (80018c0 <actadc+0x280>)
 8001650:	601a      	str	r2, [r3, #0]
	tempers[1]=adcData[2];
 8001652:	4b9a      	ldr	r3, [pc, #616]	; (80018bc <actadc+0x27c>)
 8001654:	889b      	ldrh	r3, [r3, #4]
 8001656:	461a      	mov	r2, r3
 8001658:	4b99      	ldr	r3, [pc, #612]	; (80018c0 <actadc+0x280>)
 800165a:	605a      	str	r2, [r3, #4]
	tempers[2]=adcData[3];
 800165c:	4b97      	ldr	r3, [pc, #604]	; (80018bc <actadc+0x27c>)
 800165e:	88db      	ldrh	r3, [r3, #6]
 8001660:	461a      	mov	r2, r3
 8001662:	4b97      	ldr	r3, [pc, #604]	; (80018c0 <actadc+0x280>)
 8001664:	609a      	str	r2, [r3, #8]
	strain=adcData[9];
 8001666:	4b95      	ldr	r3, [pc, #596]	; (80018bc <actadc+0x27c>)
 8001668:	8a5b      	ldrh	r3, [r3, #18]
 800166a:	461a      	mov	r2, r3
 800166c:	4b95      	ldr	r3, [pc, #596]	; (80018c4 <actadc+0x284>)
 800166e:	601a      	str	r2, [r3, #0]
	adcVal1=adcData[4];
 8001670:	4b92      	ldr	r3, [pc, #584]	; (80018bc <actadc+0x27c>)
 8001672:	891b      	ldrh	r3, [r3, #8]
 8001674:	461a      	mov	r2, r3
 8001676:	4b94      	ldr	r3, [pc, #592]	; (80018c8 <actadc+0x288>)
 8001678:	601a      	str	r2, [r3, #0]
	int vref=adcData[12];
 800167a:	4b90      	ldr	r3, [pc, #576]	; (80018bc <actadc+0x27c>)
 800167c:	8b1b      	ldrh	r3, [r3, #24]
 800167e:	61bb      	str	r3, [r7, #24]
	int zcon=adcData[10];
 8001680:	4b8e      	ldr	r3, [pc, #568]	; (80018bc <actadc+0x27c>)
 8001682:	8a9b      	ldrh	r3, [r3, #20]
 8001684:	617b      	str	r3, [r7, #20]
	int ycon=adcData[6];
 8001686:	4b8d      	ldr	r3, [pc, #564]	; (80018bc <actadc+0x27c>)
 8001688:	899b      	ldrh	r3, [r3, #12]
 800168a:	613b      	str	r3, [r7, #16]
	int xcon=adcData[5];
 800168c:	4b8b      	ldr	r3, [pc, #556]	; (80018bc <actadc+0x27c>)
 800168e:	895b      	ldrh	r3, [r3, #10]
 8001690:	60fb      	str	r3, [r7, #12]
	adcsay=1;
 8001692:	4b8e      	ldr	r3, [pc, #568]	; (80018cc <actadc+0x28c>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
	if(adcVal1<1000&&adcVal2==0){
 8001698:	4b8b      	ldr	r3, [pc, #556]	; (80018c8 <actadc+0x288>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016a0:	da06      	bge.n	80016b0 <actadc+0x70>
 80016a2:	4b8b      	ldr	r3, [pc, #556]	; (80018d0 <actadc+0x290>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <actadc+0x70>
		//HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_ALL);
		adcVal2=1;
 80016aa:	4b89      	ldr	r3, [pc, #548]	; (80018d0 <actadc+0x290>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]
	}
	if(loadcon==0){
 80016b0:	4b88      	ldr	r3, [pc, #544]	; (80018d4 <actadc+0x294>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10c      	bne.n	80016d2 <actadc+0x92>
		if(control>=adcVal1){
 80016b8:	4b87      	ldr	r3, [pc, #540]	; (80018d8 <actadc+0x298>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b82      	ldr	r3, [pc, #520]	; (80018c8 <actadc+0x288>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	db03      	blt.n	80016cc <actadc+0x8c>
			sensdist=0;
 80016c4:	4b85      	ldr	r3, [pc, #532]	; (80018dc <actadc+0x29c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	e002      	b.n	80016d2 <actadc+0x92>
		}
		else{
			sensdist=1;
 80016cc:	4b83      	ldr	r3, [pc, #524]	; (80018dc <actadc+0x29c>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	601a      	str	r2, [r3, #0]
		}
	}
	if(joyen==1){
 80016d2:	4b83      	ldr	r3, [pc, #524]	; (80018e0 <actadc+0x2a0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	f040 80ad 	bne.w	8001836 <actadc+0x1f6>
		if(zcon<1850){
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	f240 7239 	movw	r2, #1849	; 0x739
 80016e2:	4293      	cmp	r3, r2
 80016e4:	dc12      	bgt.n	800170c <actadc+0xcc>
			if(joyint1==0){
 80016e6:	4b7f      	ldr	r3, [pc, #508]	; (80018e4 <actadc+0x2a4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d130      	bne.n	8001750 <actadc+0x110>
				automot=1;
 80016ee:	4b7e      	ldr	r3, [pc, #504]	; (80018e8 <actadc+0x2a8>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
				TimeSet(&htim9, 10000);
 80016f4:	f242 7110 	movw	r1, #10000	; 0x2710
 80016f8:	487c      	ldr	r0, [pc, #496]	; (80018ec <actadc+0x2ac>)
 80016fa:	f009 fd8d 	bl	800b218 <TimeSet>
				StepD(0);
 80016fe:	2000      	movs	r0, #0
 8001700:	f001 fece 	bl	80034a0 <StepD>
				joyint1=1;
 8001704:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <actadc+0x2a4>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	e021      	b.n	8001750 <actadc+0x110>
			}
		}
		else if(zcon>2300&&endstop==1){
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001712:	4293      	cmp	r3, r2
 8001714:	dd16      	ble.n	8001744 <actadc+0x104>
 8001716:	4b76      	ldr	r3, [pc, #472]	; (80018f0 <actadc+0x2b0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d112      	bne.n	8001744 <actadc+0x104>
			if(joyint1==0){
 800171e:	4b71      	ldr	r3, [pc, #452]	; (80018e4 <actadc+0x2a4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d114      	bne.n	8001750 <actadc+0x110>
				automot=1;
 8001726:	4b70      	ldr	r3, [pc, #448]	; (80018e8 <actadc+0x2a8>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]
				TimeSet(&htim9, 10000);
 800172c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001730:	486e      	ldr	r0, [pc, #440]	; (80018ec <actadc+0x2ac>)
 8001732:	f009 fd71 	bl	800b218 <TimeSet>
				StepD(1);
 8001736:	2001      	movs	r0, #1
 8001738:	f001 feb2 	bl	80034a0 <StepD>
				joyint1=2;
 800173c:	4b69      	ldr	r3, [pc, #420]	; (80018e4 <actadc+0x2a4>)
 800173e:	2202      	movs	r2, #2
 8001740:	601a      	str	r2, [r3, #0]
			if(joyint1==0){
 8001742:	e005      	b.n	8001750 <actadc+0x110>
			}
		}
		else{
			joyint1=0;
 8001744:	4b67      	ldr	r3, [pc, #412]	; (80018e4 <actadc+0x2a4>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
			stopmot=1;
 800174a:	4b6a      	ldr	r3, [pc, #424]	; (80018f4 <actadc+0x2b4>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]
		}
		if(xcon<1850){
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f240 7239 	movw	r2, #1849	; 0x739
 8001756:	4293      	cmp	r3, r2
 8001758:	dc14      	bgt.n	8001784 <actadc+0x144>
			if(joyint2 %2== 0){
 800175a:	4b67      	ldr	r3, [pc, #412]	; (80018f8 <actadc+0x2b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d132      	bne.n	80017cc <actadc+0x18c>
				if(joyint2<2){
 8001766:	4b64      	ldr	r3, [pc, #400]	; (80018f8 <actadc+0x2b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	dc2e      	bgt.n	80017cc <actadc+0x18c>
					moveXY(0, 0, 10000,5);
 800176e:	2305      	movs	r3, #5
 8001770:	f242 7210 	movw	r2, #10000	; 0x2710
 8001774:	2100      	movs	r1, #0
 8001776:	2000      	movs	r0, #0
 8001778:	f001 fd6c 	bl	8003254 <moveXY>
					isHXcom=1;
 800177c:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <actadc+0x2bc>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	e023      	b.n	80017cc <actadc+0x18c>
				}
			}
		}
		else if(xcon>2300){
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800178a:	4293      	cmp	r3, r2
 800178c:	dd1b      	ble.n	80017c6 <actadc+0x186>
			if(joyint2 %3== 0){
 800178e:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <actadc+0x2b8>)
 8001790:	6819      	ldr	r1, [r3, #0]
 8001792:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <actadc+0x2c0>)
 8001794:	fb83 3201 	smull	r3, r2, r3, r1
 8001798:	17cb      	asrs	r3, r1, #31
 800179a:	1ad2      	subs	r2, r2, r3
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	1aca      	subs	r2, r1, r3
 80017a4:	2a00      	cmp	r2, #0
 80017a6:	d111      	bne.n	80017cc <actadc+0x18c>
				if(joyint2<3){
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <actadc+0x2b8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	dc0d      	bgt.n	80017cc <actadc+0x18c>
					moveXY(0, 1, 10000,5);
 80017b0:	2305      	movs	r3, #5
 80017b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80017b6:	2101      	movs	r1, #1
 80017b8:	2000      	movs	r0, #0
 80017ba:	f001 fd4b 	bl	8003254 <moveXY>
					isHXcom=1;
 80017be:	4b4f      	ldr	r3, [pc, #316]	; (80018fc <actadc+0x2bc>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e002      	b.n	80017cc <actadc+0x18c>
				}
			}
		}
		else {
			xsteps=0;
 80017c6:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <actadc+0x2c4>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
		}
		if(ycon<1850){
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f240 7239 	movw	r2, #1849	; 0x739
 80017d2:	4293      	cmp	r3, r2
 80017d4:	dc11      	bgt.n	80017fa <actadc+0x1ba>
			if(joyint2 < 12){
 80017d6:	4b48      	ldr	r3, [pc, #288]	; (80018f8 <actadc+0x2b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2b0b      	cmp	r3, #11
 80017dc:	dc2b      	bgt.n	8001836 <actadc+0x1f6>
				if(joyint2<6){
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <actadc+0x2b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	dc27      	bgt.n	8001836 <actadc+0x1f6>
					moveXY(1, 1, 5,3);
 80017e6:	2303      	movs	r3, #3
 80017e8:	2205      	movs	r2, #5
 80017ea:	2101      	movs	r1, #1
 80017ec:	2001      	movs	r0, #1
 80017ee:	f001 fd31 	bl	8003254 <moveXY>
					isHXcom=1;
 80017f2:	4b42      	ldr	r3, [pc, #264]	; (80018fc <actadc+0x2bc>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	e01d      	b.n	8001836 <actadc+0x1f6>
				}
			}
		}
		else if(ycon>2300){
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8001800:	4293      	cmp	r3, r2
 8001802:	dd15      	ble.n	8001830 <actadc+0x1f0>
			if(joyint2 > 9 ||joyint2<6){
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <actadc+0x2b8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b09      	cmp	r3, #9
 800180a:	dc03      	bgt.n	8001814 <actadc+0x1d4>
 800180c:	4b3a      	ldr	r3, [pc, #232]	; (80018f8 <actadc+0x2b8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b05      	cmp	r3, #5
 8001812:	dc10      	bgt.n	8001836 <actadc+0x1f6>
				if(joyint2<12){
 8001814:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <actadc+0x2b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b0b      	cmp	r3, #11
 800181a:	dc0c      	bgt.n	8001836 <actadc+0x1f6>
					moveXY(1, 0, 5,3);
 800181c:	2303      	movs	r3, #3
 800181e:	2205      	movs	r2, #5
 8001820:	2100      	movs	r1, #0
 8001822:	2001      	movs	r0, #1
 8001824:	f001 fd16 	bl	8003254 <moveXY>
					isHXcom=1;
 8001828:	4b34      	ldr	r3, [pc, #208]	; (80018fc <actadc+0x2bc>)
 800182a:	2201      	movs	r2, #1
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e002      	b.n	8001836 <actadc+0x1f6>
				}
			}
		}
		else{
			ysteps=0;
 8001830:	4b35      	ldr	r3, [pc, #212]	; (8001908 <actadc+0x2c8>)
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
		}
	}
	for (int i=0;i<3;i++){
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e09f      	b.n	800197c <actadc+0x33c>
		if(heatDuty[i]!=0 &&heatFeed[i]==1){
 800183c:	4a33      	ldr	r2, [pc, #204]	; (800190c <actadc+0x2cc>)
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 8096 	beq.w	8001976 <actadc+0x336>
 800184a:	4a31      	ldr	r2, [pc, #196]	; (8001910 <actadc+0x2d0>)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	2b01      	cmp	r3, #1
 8001854:	f040 808f 	bne.w	8001976 <actadc+0x336>
			if(tempers[i]<temperset[i]-10){
 8001858:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <actadc+0x280>)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001860:	492c      	ldr	r1, [pc, #176]	; (8001914 <actadc+0x2d4>)
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001868:	3b0a      	subs	r3, #10
 800186a:	429a      	cmp	r2, r3
 800186c:	da56      	bge.n	800191c <actadc+0x2dc>
				heatDuty[i]=heatDuty[i]+1;
 800186e:	4a27      	ldr	r2, [pc, #156]	; (800190c <actadc+0x2cc>)
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	4924      	ldr	r1, [pc, #144]	; (800190c <actadc+0x2cc>)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(heatDuty[i]>5000){
 8001880:	4a22      	ldr	r2, [pc, #136]	; (800190c <actadc+0x2cc>)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001888:	f241 3288 	movw	r2, #5000	; 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	dd0a      	ble.n	80018a6 <actadc+0x266>
					heatDuty[i]=5000;
 8001890:	4a1e      	ldr	r2, [pc, #120]	; (800190c <actadc+0x2cc>)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f241 3188 	movw	r1, #5000	; 0x1388
 8001898:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					SendPc("ExceedHeat", 5, 2);
 800189c:	2202      	movs	r2, #2
 800189e:	2105      	movs	r1, #5
 80018a0:	481d      	ldr	r0, [pc, #116]	; (8001918 <actadc+0x2d8>)
 80018a2:	f003 fd0f 	bl	80052c4 <SendPc>
				}
				setHeater(i, heatDuty[i], 0);
 80018a6:	4a19      	ldr	r2, [pc, #100]	; (800190c <actadc+0x2cc>)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	2200      	movs	r2, #0
 80018b0:	4619      	mov	r1, r3
 80018b2:	69f8      	ldr	r0, [r7, #28]
 80018b4:	f002 f980 	bl	8003bb8 <setHeater>
 80018b8:	e05d      	b.n	8001976 <actadc+0x336>
 80018ba:	bf00      	nop
 80018bc:	200017f4 	.word	0x200017f4
 80018c0:	200002a4 	.word	0x200002a4
 80018c4:	200002bc 	.word	0x200002bc
 80018c8:	2000029c 	.word	0x2000029c
 80018cc:	200002a0 	.word	0x200002a0
 80018d0:	20000298 	.word	0x20000298
 80018d4:	20001824 	.word	0x20001824
 80018d8:	20000364 	.word	0x20000364
 80018dc:	20000040 	.word	0x20000040
 80018e0:	20001814 	.word	0x20001814
 80018e4:	20001818 	.word	0x20001818
 80018e8:	2000034c 	.word	0x2000034c
 80018ec:	20006d84 	.word	0x20006d84
 80018f0:	20000350 	.word	0x20000350
 80018f4:	2000033c 	.word	0x2000033c
 80018f8:	2000181c 	.word	0x2000181c
 80018fc:	20001830 	.word	0x20001830
 8001900:	55555556 	.word	0x55555556
 8001904:	20000374 	.word	0x20000374
 8001908:	20000378 	.word	0x20000378
 800190c:	20001844 	.word	0x20001844
 8001910:	20001838 	.word	0x20001838
 8001914:	200002b0 	.word	0x200002b0
 8001918:	08011d64 	.word	0x08011d64
			}
			else if(tempers[i]>temperset[i]+10){
 800191c:	4a1f      	ldr	r2, [pc, #124]	; (800199c <actadc+0x35c>)
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001924:	491e      	ldr	r1, [pc, #120]	; (80019a0 <actadc+0x360>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800192c:	330a      	adds	r3, #10
 800192e:	429a      	cmp	r2, r3
 8001930:	dd21      	ble.n	8001976 <actadc+0x336>
				heatDuty[i]=heatDuty[i]-1;
 8001932:	4a1c      	ldr	r2, [pc, #112]	; (80019a4 <actadc+0x364>)
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800193a:	1e5a      	subs	r2, r3, #1
 800193c:	4919      	ldr	r1, [pc, #100]	; (80019a4 <actadc+0x364>)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(heatDuty[i]<100)
 8001944:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <actadc+0x364>)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	2b63      	cmp	r3, #99	; 0x63
 800194e:	dc09      	bgt.n	8001964 <actadc+0x324>
				{
					heatDuty[i]=100;
 8001950:	4a14      	ldr	r2, [pc, #80]	; (80019a4 <actadc+0x364>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	2164      	movs	r1, #100	; 0x64
 8001956:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					SendPc("NotCool", 5, 2);
 800195a:	2202      	movs	r2, #2
 800195c:	2105      	movs	r1, #5
 800195e:	4812      	ldr	r0, [pc, #72]	; (80019a8 <actadc+0x368>)
 8001960:	f003 fcb0 	bl	80052c4 <SendPc>
				}
				setHeater(i, heatDuty[i], 0);
 8001964:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <actadc+0x364>)
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	69f8      	ldr	r0, [r7, #28]
 8001972:	f002 f921 	bl	8003bb8 <setHeater>
	for (int i=0;i<3;i++){
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b02      	cmp	r3, #2
 8001980:	f77f af5c 	ble.w	800183c <actadc+0x1fc>
			}
		}
	}
	if(loadFeed==1){
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <actadc+0x36c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d103      	bne.n	8001994 <actadc+0x354>
		loadnow=strain*1;
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <actadc+0x370>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <actadc+0x374>)
 8001992:	6013      	str	r3, [r2, #0]
	}
}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200002a4 	.word	0x200002a4
 80019a0:	200002b0 	.word	0x200002b0
 80019a4:	20001844 	.word	0x20001844
 80019a8:	08011d70 	.word	0x08011d70
 80019ac:	2000030c 	.word	0x2000030c
 80019b0:	200002bc 	.word	0x200002bc
 80019b4:	20000310 	.word	0x20000310

080019b8 <ftos>:
int sampleChannel=0;
extern int heatDuty[3];
extern int heatFeed[3];
extern long thresholdApp;

void ftos(long a, char*s){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0b8      	sub	sp, #224	; 0xe0
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
	char buf1;
	char buf2;
	int i=1;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	int eksis=0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	int eks=0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	itoa(a,s,10);
 80019d4:	220a      	movs	r2, #10
 80019d6:	6839      	ldr	r1, [r7, #0]
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f010 f8a1 	bl	8011b20 <itoa>
	int size=SizeOfArray(s);
 80019de:	6838      	ldr	r0, [r7, #0]
 80019e0:	f009 fd5c 	bl	800b49c <SizeOfArray>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	if(s[0]=='-'){
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b2d      	cmp	r3, #45	; 0x2d
 80019f0:	f040 8217 	bne.w	8001e22 <ftos+0x46a>
		if(size==8){

		}
		if(size==7){
 80019f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80019f8:	2b07      	cmp	r3, #7
 80019fa:	d152      	bne.n	8001aa2 <ftos+0xea>
			char buf4 [11]={'-','0',0,0,0,0,0,0,0,0,0};
 80019fc:	4ac4      	ldr	r2, [pc, #784]	; (8001d10 <ftos+0x358>)
 80019fe:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a02:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a04:	c303      	stmia	r3!, {r0, r1}
 8001a06:	801a      	strh	r2, [r3, #0]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	0c12      	lsrs	r2, r2, #16
 8001a0c:	701a      	strb	r2, [r3, #0]
			strcat(buf4,s);
 8001a0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a12:	6839      	ldr	r1, [r7, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f010 f898 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a20:	e03a      	b.n	8001a98 <ftos+0xe0>
				if(buf4[k]=='-'&&eksis==0){
 8001a22:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a2a:	4413      	add	r3, r2
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b2d      	cmp	r3, #45	; 0x2d
 8001a30:	d112      	bne.n	8001a58 <ftos+0xa0>
 8001a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d10e      	bne.n	8001a58 <ftos+0xa0>
					s[k]=buf4[k];
 8001a3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001a46:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a4a:	440a      	add	r2, r1
 8001a4c:	7812      	ldrb	r2, [r2, #0]
 8001a4e:	701a      	strb	r2, [r3, #0]
					eksis=1;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a56:	e01a      	b.n	8001a8e <ftos+0xd6>
				}
				else if(buf4[k]!='-'){
 8001a58:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a60:	4413      	add	r3, r2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b2d      	cmp	r3, #45	; 0x2d
 8001a66:	d00f      	beq.n	8001a88 <ftos+0xd0>
					s[k-eks]=buf4[k];
 8001a68:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	461a      	mov	r2, r3
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001a7c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a80:	440a      	add	r2, r1
 8001a82:	7812      	ldrb	r2, [r2, #0]
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e002      	b.n	8001a8e <ftos+0xd6>
				}
				else{
					eks=1;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			for(int k=0;k<10;k++){
 8001a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a92:	3301      	adds	r3, #1
 8001a94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a9c:	2b09      	cmp	r3, #9
 8001a9e:	ddc0      	ble.n	8001a22 <ftos+0x6a>
 8001aa0:	e1bb      	b.n	8001e1a <ftos+0x462>
				}
			}
		}
		else if(size==6){
 8001aa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001aa6:	2b06      	cmp	r3, #6
 8001aa8:	d152      	bne.n	8001b50 <ftos+0x198>
			char buf4 [11]={'-','0','0',0,0,0,0,0,0,0,0};
 8001aaa:	4a9a      	ldr	r2, [pc, #616]	; (8001d14 <ftos+0x35c>)
 8001aac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ab0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ab2:	c303      	stmia	r3!, {r0, r1}
 8001ab4:	801a      	strh	r2, [r3, #0]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	0c12      	lsrs	r2, r2, #16
 8001aba:	701a      	strb	r2, [r3, #0]
			strcat(buf4,s);
 8001abc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ac0:	6839      	ldr	r1, [r7, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f010 f841 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ace:	e03a      	b.n	8001b46 <ftos+0x18e>
				if(buf4[k]=='-'&&eksis==0){
 8001ad0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001ad4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ad8:	4413      	add	r3, r2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b2d      	cmp	r3, #45	; 0x2d
 8001ade:	d112      	bne.n	8001b06 <ftos+0x14e>
 8001ae0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10e      	bne.n	8001b06 <ftos+0x14e>
					s[k]=buf4[k];
 8001ae8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001af4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001af8:	440a      	add	r2, r1
 8001afa:	7812      	ldrb	r2, [r2, #0]
 8001afc:	701a      	strb	r2, [r3, #0]
					eksis=1;
 8001afe:	2301      	movs	r3, #1
 8001b00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001b04:	e01a      	b.n	8001b3c <ftos+0x184>
				}
				else if(buf4[k]!='-'){
 8001b06:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001b0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b0e:	4413      	add	r3, r2
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b2d      	cmp	r3, #45	; 0x2d
 8001b14:	d00f      	beq.n	8001b36 <ftos+0x17e>
					s[k-eks]=buf4[k];
 8001b16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001b1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	461a      	mov	r2, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8001b2a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8001b2e:	440a      	add	r2, r1
 8001b30:	7812      	ldrb	r2, [r2, #0]
 8001b32:	701a      	strb	r2, [r3, #0]
 8001b34:	e002      	b.n	8001b3c <ftos+0x184>
				}
				else{
					eks=1;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			for(int k=0;k<10;k++){
 8001b3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b40:	3301      	adds	r3, #1
 8001b42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001b46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b4a:	2b09      	cmp	r3, #9
 8001b4c:	ddc0      	ble.n	8001ad0 <ftos+0x118>
 8001b4e:	e164      	b.n	8001e1a <ftos+0x462>
				}
			}
		}
		else if(size==5){
 8001b50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b54:	2b05      	cmp	r3, #5
 8001b56:	d152      	bne.n	8001bfe <ftos+0x246>
			char buf4 [11]={'-','0','0','0',0,0,0,0,0,0,0};
 8001b58:	4a6f      	ldr	r2, [pc, #444]	; (8001d18 <ftos+0x360>)
 8001b5a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b60:	c303      	stmia	r3!, {r0, r1}
 8001b62:	801a      	strh	r2, [r3, #0]
 8001b64:	3302      	adds	r3, #2
 8001b66:	0c12      	lsrs	r2, r2, #16
 8001b68:	701a      	strb	r2, [r3, #0]
			strcat(buf4,s);
 8001b6a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b6e:	6839      	ldr	r1, [r7, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f00f ffea 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001b7c:	e03a      	b.n	8001bf4 <ftos+0x23c>
				if(buf4[k]=='-'&&eksis==0){
 8001b7e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001b82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b86:	4413      	add	r3, r2
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b2d      	cmp	r3, #45	; 0x2d
 8001b8c:	d112      	bne.n	8001bb4 <ftos+0x1fc>
 8001b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10e      	bne.n	8001bb4 <ftos+0x1fc>
					s[k]=buf4[k];
 8001b96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001ba6:	440a      	add	r2, r1
 8001ba8:	7812      	ldrb	r2, [r2, #0]
 8001baa:	701a      	strb	r2, [r3, #0]
					eksis=1;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001bb2:	e01a      	b.n	8001bea <ftos+0x232>
				}
				else if(buf4[k]!='-'){
 8001bb4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001bb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bbc:	4413      	add	r3, r2
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b2d      	cmp	r3, #45	; 0x2d
 8001bc2:	d00f      	beq.n	8001be4 <ftos+0x22c>
					s[k-eks]=buf4[k];
 8001bc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001bc8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8001bd8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001bdc:	440a      	add	r2, r1
 8001bde:	7812      	ldrb	r2, [r2, #0]
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	e002      	b.n	8001bea <ftos+0x232>
				}
				else{
					eks=1;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			for(int k=0;k<10;k++){
 8001bea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001bf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bf8:	2b09      	cmp	r3, #9
 8001bfa:	ddc0      	ble.n	8001b7e <ftos+0x1c6>
 8001bfc:	e10d      	b.n	8001e1a <ftos+0x462>
				}
			}
		}
		else if(size==4){
 8001bfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d152      	bne.n	8001cac <ftos+0x2f4>
			char buf4 [11]={'-','0','0','0','0',0,0,0,0,0,0};
 8001c06:	4a45      	ldr	r2, [pc, #276]	; (8001d1c <ftos+0x364>)
 8001c08:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c0e:	c303      	stmia	r3!, {r0, r1}
 8001c10:	801a      	strh	r2, [r3, #0]
 8001c12:	3302      	adds	r3, #2
 8001c14:	0c12      	lsrs	r2, r2, #16
 8001c16:	701a      	strb	r2, [r3, #0]
			strcat(buf4,s);
 8001c18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c1c:	6839      	ldr	r1, [r7, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f00f ff93 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c2a:	e03a      	b.n	8001ca2 <ftos+0x2ea>
				if(buf4[k]=='-'&&eksis==0){
 8001c2c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c34:	4413      	add	r3, r2
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b2d      	cmp	r3, #45	; 0x2d
 8001c3a:	d112      	bne.n	8001c62 <ftos+0x2aa>
 8001c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10e      	bne.n	8001c62 <ftos+0x2aa>
					s[k]=buf4[k];
 8001c44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001c50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001c54:	440a      	add	r2, r1
 8001c56:	7812      	ldrb	r2, [r2, #0]
 8001c58:	701a      	strb	r2, [r3, #0]
					eksis=1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c60:	e01a      	b.n	8001c98 <ftos+0x2e0>
				}
				else if(buf4[k]!='-'){
 8001c62:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001c66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b2d      	cmp	r3, #45	; 0x2d
 8001c70:	d00f      	beq.n	8001c92 <ftos+0x2da>
					s[k-eks]=buf4[k];
 8001c72:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001c76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	4413      	add	r3, r2
 8001c82:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001c86:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8001c8a:	440a      	add	r2, r1
 8001c8c:	7812      	ldrb	r2, [r2, #0]
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	e002      	b.n	8001c98 <ftos+0x2e0>
				}
				else{
					eks=1;
 8001c92:	2301      	movs	r3, #1
 8001c94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			for(int k=0;k<10;k++){
 8001c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ca2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ca6:	2b09      	cmp	r3, #9
 8001ca8:	ddc0      	ble.n	8001c2c <ftos+0x274>
 8001caa:	e0b6      	b.n	8001e1a <ftos+0x462>
				}
			}
		}
		else if(size==3){
 8001cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d15c      	bne.n	8001d6e <ftos+0x3b6>
			char buf4 [11]={'-','0','0','0','0','0',0,0,0,0,0};
 8001cb4:	4a1a      	ldr	r2, [pc, #104]	; (8001d20 <ftos+0x368>)
 8001cb6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cbc:	c303      	stmia	r3!, {r0, r1}
 8001cbe:	801a      	strh	r2, [r3, #0]
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	0c12      	lsrs	r2, r2, #16
 8001cc4:	701a      	strb	r2, [r3, #0]
			strcat(buf4,s);
 8001cc6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f00f ff3c 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001cd8:	e044      	b.n	8001d64 <ftos+0x3ac>
				if(buf4[k]=='-'&&eksis==0){
 8001cda:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001cde:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ce2:	4413      	add	r3, r2
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b2d      	cmp	r3, #45	; 0x2d
 8001ce8:	d11c      	bne.n	8001d24 <ftos+0x36c>
 8001cea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d118      	bne.n	8001d24 <ftos+0x36c>
					s[k]=buf4[k];
 8001cf2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001cfe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d02:	440a      	add	r2, r1
 8001d04:	7812      	ldrb	r2, [r2, #0]
 8001d06:	701a      	strb	r2, [r3, #0]
					eksis=1;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001d0e:	e024      	b.n	8001d5a <ftos+0x3a2>
 8001d10:	08011d78 	.word	0x08011d78
 8001d14:	08011d84 	.word	0x08011d84
 8001d18:	08011d90 	.word	0x08011d90
 8001d1c:	08011d9c 	.word	0x08011d9c
 8001d20:	08011da8 	.word	0x08011da8
				}
				else if(buf4[k]!='-'){
 8001d24:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001d28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d2c:	4413      	add	r3, r2
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b2d      	cmp	r3, #45	; 0x2d
 8001d32:	d00f      	beq.n	8001d54 <ftos+0x39c>
					s[k-eks]=buf4[k];
 8001d34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d38:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001d48:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d4c:	440a      	add	r2, r1
 8001d4e:	7812      	ldrb	r2, [r2, #0]
 8001d50:	701a      	strb	r2, [r3, #0]
 8001d52:	e002      	b.n	8001d5a <ftos+0x3a2>
				}
				else{
					eks=1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			for(int k=0;k<10;k++){
 8001d5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001d64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d68:	2b09      	cmp	r3, #9
 8001d6a:	ddb6      	ble.n	8001cda <ftos+0x322>
 8001d6c:	e055      	b.n	8001e1a <ftos+0x462>
				}
			}
		}
		else if(size==2){
 8001d6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d151      	bne.n	8001e1a <ftos+0x462>
			char buf4 [11]={'-','0','0','0','0','0','0',0,0,0,0};
 8001d76:	4ac5      	ldr	r2, [pc, #788]	; (800208c <ftos+0x6d4>)
 8001d78:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d7e:	c303      	stmia	r3!, {r0, r1}
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	3302      	adds	r3, #2
 8001d84:	0c12      	lsrs	r2, r2, #16
 8001d86:	701a      	strb	r2, [r3, #0]
			strcat(buf4,s);
 8001d88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f00f fedb 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d9a:	e03a      	b.n	8001e12 <ftos+0x45a>
				if(buf4[k]=='-'&&eksis==0){
 8001d9c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001da0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001da4:	4413      	add	r3, r2
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b2d      	cmp	r3, #45	; 0x2d
 8001daa:	d112      	bne.n	8001dd2 <ftos+0x41a>
 8001dac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10e      	bne.n	8001dd2 <ftos+0x41a>
					s[k]=buf4[k];
 8001db4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001dc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001dc4:	440a      	add	r2, r1
 8001dc6:	7812      	ldrb	r2, [r2, #0]
 8001dc8:	701a      	strb	r2, [r3, #0]
					eksis=1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001dd0:	e01a      	b.n	8001e08 <ftos+0x450>
				}
				else if(buf4[k]!='-'){
 8001dd2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001dd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001dda:	4413      	add	r3, r2
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b2d      	cmp	r3, #45	; 0x2d
 8001de0:	d00f      	beq.n	8001e02 <ftos+0x44a>
					s[k-eks]=buf4[k];
 8001de2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001de6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001df6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8001dfa:	440a      	add	r2, r1
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e002      	b.n	8001e08 <ftos+0x450>
				}
				else{
					eks=1;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
			for(int k=0;k<10;k++){
 8001e08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e16:	2b09      	cmp	r3, #9
 8001e18:	ddc0      	ble.n	8001d9c <ftos+0x3e4>
				}
			}
		}
		i=2;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e20:	e0f7      	b.n	8002012 <ftos+0x65a>
	}
	else{
		if(size==7){
		}
		if(size==6){
 8001e22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d127      	bne.n	8001e7a <ftos+0x4c2>
			char buf4 [10]={'0',0,0,0,0,0,0,0,0,0};
 8001e2a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	811a      	strh	r2, [r3, #8]
 8001e36:	2330      	movs	r3, #48	; 0x30
 8001e38:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
			strcat(buf4,s);
 8001e3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001e40:	6839      	ldr	r1, [r7, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f00f fe81 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e4e:	e00f      	b.n	8001e70 <ftos+0x4b8>
				s[k]=buf4[k];
 8001e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001e5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001e60:	440a      	add	r2, r1
 8001e62:	7812      	ldrb	r2, [r2, #0]
 8001e64:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<10;k++){
 8001e66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e74:	2b09      	cmp	r3, #9
 8001e76:	ddeb      	ble.n	8001e50 <ftos+0x498>
 8001e78:	e0cb      	b.n	8002012 <ftos+0x65a>
			}
		}
		else if(size==5){
 8001e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d124      	bne.n	8001ecc <ftos+0x514>
			char buf4 [10]={'0','0',0,0,0,0,0,0,0,0};
 8001e82:	4a83      	ldr	r2, [pc, #524]	; (8002090 <ftos+0x6d8>)
 8001e84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e88:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e8a:	c303      	stmia	r3!, {r0, r1}
 8001e8c:	801a      	strh	r2, [r3, #0]
			strcat(buf4,s);
 8001e8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e92:	6839      	ldr	r1, [r7, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00f fe58 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ea0:	e00f      	b.n	8001ec2 <ftos+0x50a>
				s[k]=buf4[k];
 8001ea2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001eae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8001eb2:	440a      	add	r2, r1
 8001eb4:	7812      	ldrb	r2, [r2, #0]
 8001eb6:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<10;k++){
 8001eb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001ec2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ec6:	2b09      	cmp	r3, #9
 8001ec8:	ddeb      	ble.n	8001ea2 <ftos+0x4ea>
 8001eca:	e0a2      	b.n	8002012 <ftos+0x65a>
			}
		}
		else if(size==4){
 8001ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ed0:	2b04      	cmp	r3, #4
 8001ed2:	d124      	bne.n	8001f1e <ftos+0x566>
			char buf4 [10]={'0','0','0',0,0,0,0,0,0,0};
 8001ed4:	4a6f      	ldr	r2, [pc, #444]	; (8002094 <ftos+0x6dc>)
 8001ed6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eda:	ca07      	ldmia	r2, {r0, r1, r2}
 8001edc:	c303      	stmia	r3!, {r0, r1}
 8001ede:	801a      	strh	r2, [r3, #0]
			strcat(buf4,s);
 8001ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ee4:	6839      	ldr	r1, [r7, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f00f fe2f 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001ef2:	e00f      	b.n	8001f14 <ftos+0x55c>
				s[k]=buf4[k];
 8001ef4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001f00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8001f04:	440a      	add	r2, r1
 8001f06:	7812      	ldrb	r2, [r2, #0]
 8001f08:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<10;k++){
 8001f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001f14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	ddeb      	ble.n	8001ef4 <ftos+0x53c>
 8001f1c:	e079      	b.n	8002012 <ftos+0x65a>
			}
		}
		else if(size==3){
 8001f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f22:	2b03      	cmp	r3, #3
 8001f24:	d124      	bne.n	8001f70 <ftos+0x5b8>
			char buf4 [10]={'0','0','0','0',0,0,0,0,0,0};
 8001f26:	4a5c      	ldr	r2, [pc, #368]	; (8002098 <ftos+0x6e0>)
 8001f28:	f107 0320 	add.w	r3, r7, #32
 8001f2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f2e:	c303      	stmia	r3!, {r0, r1}
 8001f30:	801a      	strh	r2, [r3, #0]
			strcat(buf4,s);
 8001f32:	f107 0320 	add.w	r3, r7, #32
 8001f36:	6839      	ldr	r1, [r7, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f00f fe06 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f44:	e00f      	b.n	8001f66 <ftos+0x5ae>
				s[k]=buf4[k];
 8001f46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f107 0120 	add.w	r1, r7, #32
 8001f52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f56:	440a      	add	r2, r1
 8001f58:	7812      	ldrb	r2, [r2, #0]
 8001f5a:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<10;k++){
 8001f5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f60:	3301      	adds	r3, #1
 8001f62:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f66:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f6a:	2b09      	cmp	r3, #9
 8001f6c:	ddeb      	ble.n	8001f46 <ftos+0x58e>
 8001f6e:	e050      	b.n	8002012 <ftos+0x65a>
			}
		}
		else if(size==2){
 8001f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d124      	bne.n	8001fc2 <ftos+0x60a>
			char buf4 [10]={'0','0','0','0','0',0,0,0,0,0};
 8001f78:	4a48      	ldr	r2, [pc, #288]	; (800209c <ftos+0x6e4>)
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f80:	c303      	stmia	r3!, {r0, r1}
 8001f82:	801a      	strh	r2, [r3, #0]
			strcat(buf4,s);
 8001f84:	f107 0314 	add.w	r3, r7, #20
 8001f88:	6839      	ldr	r1, [r7, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f00f fddd 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001f96:	e00f      	b.n	8001fb8 <ftos+0x600>
				s[k]=buf4[k];
 8001f98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f107 0114 	add.w	r1, r7, #20
 8001fa4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001fa8:	440a      	add	r2, r1
 8001faa:	7812      	ldrb	r2, [r2, #0]
 8001fac:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<10;k++){
 8001fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001fb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fbc:	2b09      	cmp	r3, #9
 8001fbe:	ddeb      	ble.n	8001f98 <ftos+0x5e0>
 8001fc0:	e027      	b.n	8002012 <ftos+0x65a>
			}
		}
		else if(size==1){
 8001fc2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d123      	bne.n	8002012 <ftos+0x65a>
			char buf4 [10]={'0','0','0','0','0','0',0,0,0,0};
 8001fca:	4a35      	ldr	r2, [pc, #212]	; (80020a0 <ftos+0x6e8>)
 8001fcc:	f107 0308 	add.w	r3, r7, #8
 8001fd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fd2:	c303      	stmia	r3!, {r0, r1}
 8001fd4:	801a      	strh	r2, [r3, #0]
			strcat(buf4,s);
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	6839      	ldr	r1, [r7, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00f fdb4 	bl	8011b4a <strcat>
			for(int k=0;k<10;k++){
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001fe8:	e00f      	b.n	800200a <ftos+0x652>
				s[k]=buf4[k];
 8001fea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f107 0108 	add.w	r1, r7, #8
 8001ff6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001ffa:	440a      	add	r2, r1
 8001ffc:	7812      	ldrb	r2, [r2, #0]
 8001ffe:	701a      	strb	r2, [r3, #0]
			for(int k=0;k<10;k++){
 8002000:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002004:	3301      	adds	r3, #1
 8002006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800200a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800200e:	2b09      	cmp	r3, #9
 8002010:	ddeb      	ble.n	8001fea <ftos+0x632>
			}
		}
	}
	buf1=s[i];//2
 8002012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	s[i]='.';//1.345
 8002020:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	4413      	add	r3, r2
 8002028:	222e      	movs	r2, #46	; 0x2e
 800202a:	701a      	strb	r2, [r3, #0]
	for(int j=i;j<i+6;j++){//12345
 800202c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002030:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002034:	e018      	b.n	8002068 <ftos+0x6b0>
		buf2=s[j+1];//34
 8002036:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800203a:	3301      	adds	r3, #1
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	4413      	add	r3, r2
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		s[j+1]=buf1;//1.234
 8002046:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800204a:	3301      	adds	r3, #1
 800204c:	683a      	ldr	r2, [r7, #0]
 800204e:	4413      	add	r3, r2
 8002050:	f897 20df 	ldrb.w	r2, [r7, #223]	; 0xdf
 8002054:	701a      	strb	r2, [r3, #0]
		buf1=buf2;
 8002056:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800205a:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
	for(int j=i;j<i+6;j++){//12345
 800205e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002062:	3301      	adds	r3, #1
 8002064:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002068:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800206c:	3306      	adds	r3, #6
 800206e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002072:	429a      	cmp	r2, r3
 8002074:	dbdf      	blt.n	8002036 <ftos+0x67e>
	}
	s[i+7]=0;
 8002076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800207a:	3307      	adds	r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
}
 8002084:	bf00      	nop
 8002086:	37e0      	adds	r7, #224	; 0xe0
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	08011db4 	.word	0x08011db4
 8002090:	08011dc0 	.word	0x08011dc0
 8002094:	08011dcc 	.word	0x08011dcc
 8002098:	08011dd8 	.word	0x08011dd8
 800209c:	08011de4 	.word	0x08011de4
 80020a0:	08011df0 	.word	0x08011df0

080020a4 <ParaInt>:
void ParaInt(uint8_t * param){
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	int i =0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
	if(param[0]=='W'){
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b57      	cmp	r3, #87	; 0x57
 80020b6:	d150      	bne.n	800215a <ParaInt+0xb6>
		int j=1;
 80020b8:	2301      	movs	r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
		i=1;
 80020bc:	2301      	movs	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 80020c0:	e033      	b.n	800212a <ParaInt+0x86>
			INIT0.voltage[i-1]=param[i];
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	441a      	add	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	7811      	ldrb	r1, [r2, #0]
 80020ce:	4a95      	ldr	r2, [pc, #596]	; (8002324 <ParaInt+0x280>)
 80020d0:	54d1      	strb	r1, [r2, r3]
			if(param[j]!='.'&&param[j]!='E'){
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b2e      	cmp	r3, #46	; 0x2e
 80020dc:	d00e      	beq.n	80020fc <ParaInt+0x58>
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	4413      	add	r3, r2
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b45      	cmp	r3, #69	; 0x45
 80020e8:	d008      	beq.n	80020fc <ParaInt+0x58>
				voltage[i-1]=param[j];
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	441a      	add	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	7811      	ldrb	r1, [r2, #0]
 80020f6:	4a8c      	ldr	r2, [pc, #560]	; (8002328 <ParaInt+0x284>)
 80020f8:	54d1      	strb	r1, [r2, r3]
 80020fa:	e010      	b.n	800211e <ParaInt+0x7a>
			}
			else if(param[j]=='.'){
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b2e      	cmp	r3, #46	; 0x2e
 8002106:	d10a      	bne.n	800211e <ParaInt+0x7a>
				j++;
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	3301      	adds	r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
				voltage[i-1]=param[j];
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	441a      	add	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	3b01      	subs	r3, #1
 8002118:	7811      	ldrb	r1, [r2, #0]
 800211a:	4a83      	ldr	r2, [pc, #524]	; (8002328 <ParaInt+0x284>)
 800211c:	54d1      	strb	r1, [r2, r3]
			}
			j++;
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3301      	adds	r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
			i++;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	3301      	adds	r3, #1
 8002128:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <ParaInt+0x9e>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b45      	cmp	r3, #69	; 0x45
 8002140:	d1bf      	bne.n	80020c2 <ParaInt+0x1e>
		}
		voltage[i-2]=0;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3b02      	subs	r3, #2
 8002146:	4a78      	ldr	r2, [pc, #480]	; (8002328 <ParaInt+0x284>)
 8002148:	2100      	movs	r1, #0
 800214a:	54d1      	strb	r1, [r2, r3]
		voltnow=atoi(voltage);
 800214c:	4876      	ldr	r0, [pc, #472]	; (8002328 <ParaInt+0x284>)
 800214e:	f00f fca6 	bl	8011a9e <atoi>
 8002152:	4602      	mov	r2, r0
 8002154:	4b75      	ldr	r3, [pc, #468]	; (800232c <ParaInt+0x288>)
 8002156:	601a      	str	r2, [r3, #0]
			i++;
		}
	}


}
 8002158:	e160      	b.n	800241c <ParaInt+0x378>
	else if(param[0]=='P'){
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b50      	cmp	r3, #80	; 0x50
 8002160:	d11b      	bne.n	800219a <ParaInt+0xf6>
		while(param[i]!=0&&param[i]!='E'){
 8002162:	e00c      	b.n	800217e <ParaInt+0xda>
			INIT0.kp[i]=param[i];
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	7819      	ldrb	r1, [r3, #0]
 800216c:	4a6d      	ldr	r2, [pc, #436]	; (8002324 <ParaInt+0x280>)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	330c      	adds	r3, #12
 8002174:	460a      	mov	r2, r1
 8002176:	701a      	strb	r2, [r3, #0]
			i++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3301      	adds	r3, #1
 800217c:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8148 	beq.w	800241c <ParaInt+0x378>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b45      	cmp	r3, #69	; 0x45
 8002196:	d1e5      	bne.n	8002164 <ParaInt+0xc0>
}
 8002198:	e140      	b.n	800241c <ParaInt+0x378>
	else if(param[0]=='I'){
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b49      	cmp	r3, #73	; 0x49
 80021a0:	d11b      	bne.n	80021da <ParaInt+0x136>
		while(param[i]!=0&&param[i]!='E'){
 80021a2:	e00c      	b.n	80021be <ParaInt+0x11a>
			INIT0.ki[i]=param[i];
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	7819      	ldrb	r1, [r3, #0]
 80021ac:	4a5d      	ldr	r2, [pc, #372]	; (8002324 <ParaInt+0x280>)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4413      	add	r3, r2
 80021b2:	3317      	adds	r3, #23
 80021b4:	460a      	mov	r2, r1
 80021b6:	701a      	strb	r2, [r3, #0]
			i++;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3301      	adds	r3, #1
 80021bc:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	f000 8128 	beq.w	800241c <ParaInt+0x378>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b45      	cmp	r3, #69	; 0x45
 80021d6:	d1e5      	bne.n	80021a4 <ParaInt+0x100>
}
 80021d8:	e120      	b.n	800241c <ParaInt+0x378>
	else if(param[0]=='D'){
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b44      	cmp	r3, #68	; 0x44
 80021e0:	d11b      	bne.n	800221a <ParaInt+0x176>
		while(param[i]!=0&&param[i]!='E'){
 80021e2:	e00c      	b.n	80021fe <ParaInt+0x15a>
			INIT0.kd[i]=param[i];
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	7819      	ldrb	r1, [r3, #0]
 80021ec:	4a4d      	ldr	r2, [pc, #308]	; (8002324 <ParaInt+0x280>)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4413      	add	r3, r2
 80021f2:	3326      	adds	r3, #38	; 0x26
 80021f4:	460a      	mov	r2, r1
 80021f6:	701a      	strb	r2, [r3, #0]
			i++;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3301      	adds	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8108 	beq.w	800241c <ParaInt+0x378>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b45      	cmp	r3, #69	; 0x45
 8002216:	d1e5      	bne.n	80021e4 <ParaInt+0x140>
}
 8002218:	e100      	b.n	800241c <ParaInt+0x378>
	else if(param[0]=='C'){
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b43      	cmp	r3, #67	; 0x43
 8002220:	d11b      	bne.n	800225a <ParaInt+0x1b6>
		while(param[i]!=0&&param[i]!='E'){
 8002222:	e00c      	b.n	800223e <ParaInt+0x19a>
			INIT0.filtertype[i]=param[i];
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	7819      	ldrb	r1, [r3, #0]
 800222c:	4a3d      	ldr	r2, [pc, #244]	; (8002324 <ParaInt+0x280>)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4413      	add	r3, r2
 8002232:	3330      	adds	r3, #48	; 0x30
 8002234:	460a      	mov	r2, r1
 8002236:	701a      	strb	r2, [r3, #0]
			i++;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3301      	adds	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 80e8 	beq.w	800241c <ParaInt+0x378>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b45      	cmp	r3, #69	; 0x45
 8002256:	d1e5      	bne.n	8002224 <ParaInt+0x180>
}
 8002258:	e0e0      	b.n	800241c <ParaInt+0x378>
	else if(param[0]=='F'){
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b46      	cmp	r3, #70	; 0x46
 8002260:	d11b      	bne.n	800229a <ParaInt+0x1f6>
		while(param[i]!=0&&param[i]!='E'){
 8002262:	e00c      	b.n	800227e <ParaInt+0x1da>
			INIT0.cutoff1[i]=param[i];
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4413      	add	r3, r2
 800226a:	7819      	ldrb	r1, [r3, #0]
 800226c:	4a2d      	ldr	r2, [pc, #180]	; (8002324 <ParaInt+0x280>)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	4413      	add	r3, r2
 8002272:	3333      	adds	r3, #51	; 0x33
 8002274:	460a      	mov	r2, r1
 8002276:	701a      	strb	r2, [r3, #0]
			i++;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3301      	adds	r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 80c8 	beq.w	800241c <ParaInt+0x378>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b45      	cmp	r3, #69	; 0x45
 8002296:	d1e5      	bne.n	8002264 <ParaInt+0x1c0>
}
 8002298:	e0c0      	b.n	800241c <ParaInt+0x378>
	else if(param[0]=='S'){
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b53      	cmp	r3, #83	; 0x53
 80022a0:	d11b      	bne.n	80022da <ParaInt+0x236>
		while(param[i]!=0&&param[i]!='E'){
 80022a2:	e00c      	b.n	80022be <ParaInt+0x21a>
			INIT0.cutoff2[i]=param[i];
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	7819      	ldrb	r1, [r3, #0]
 80022ac:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <ParaInt+0x280>)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4413      	add	r3, r2
 80022b2:	3342      	adds	r3, #66	; 0x42
 80022b4:	460a      	mov	r2, r1
 80022b6:	701a      	strb	r2, [r3, #0]
			i++;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3301      	adds	r3, #1
 80022bc:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 80a8 	beq.w	800241c <ParaInt+0x378>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b45      	cmp	r3, #69	; 0x45
 80022d6:	d1e5      	bne.n	80022a4 <ParaInt+0x200>
}
 80022d8:	e0a0      	b.n	800241c <ParaInt+0x378>
	else if(param[0]=='T'){
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b54      	cmp	r3, #84	; 0x54
 80022e0:	d11b      	bne.n	800231a <ParaInt+0x276>
		while(param[i]!=0&&param[i]!='E'){
 80022e2:	e00c      	b.n	80022fe <ParaInt+0x25a>
			INIT0.opmode[i]=param[i];
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	7819      	ldrb	r1, [r3, #0]
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <ParaInt+0x280>)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4413      	add	r3, r2
 80022f2:	3372      	adds	r3, #114	; 0x72
 80022f4:	460a      	mov	r2, r1
 80022f6:	701a      	strb	r2, [r3, #0]
			i++;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	f000 8088 	beq.w	800241c <ParaInt+0x378>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b45      	cmp	r3, #69	; 0x45
 8002316:	d1e5      	bne.n	80022e4 <ParaInt+0x240>
}
 8002318:	e080      	b.n	800241c <ParaInt+0x378>
	else if(param[0]=='M'){
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	2b4d      	cmp	r3, #77	; 0x4d
 8002320:	d120      	bne.n	8002364 <ParaInt+0x2c0>
		while(param[i]!=0&&param[i]!='E'){
 8002322:	e012      	b.n	800234a <ParaInt+0x2a6>
 8002324:	20001918 	.word	0x20001918
 8002328:	20000004 	.word	0x20000004
 800232c:	20000000 	.word	0x20000000
			INIT0.vmax[i]=param[i];
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	7819      	ldrb	r1, [r3, #0]
 8002338:	4a3a      	ldr	r2, [pc, #232]	; (8002424 <ParaInt+0x380>)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4413      	add	r3, r2
 800233e:	335c      	adds	r3, #92	; 0x5c
 8002340:	460a      	mov	r2, r1
 8002342:	701a      	strb	r2, [r3, #0]
			i++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3301      	adds	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d062      	beq.n	800241c <ParaInt+0x378>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	4413      	add	r3, r2
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b45      	cmp	r3, #69	; 0x45
 8002360:	d1e6      	bne.n	8002330 <ParaInt+0x28c>
}
 8002362:	e05b      	b.n	800241c <ParaInt+0x378>
	else if(param[0]=='N'){
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b4e      	cmp	r3, #78	; 0x4e
 800236a:	d11a      	bne.n	80023a2 <ParaInt+0x2fe>
		while(param[i]!=0&&param[i]!='E'){
 800236c:	e00c      	b.n	8002388 <ParaInt+0x2e4>
			INIT0.vmin[i]=param[i];
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	7819      	ldrb	r1, [r3, #0]
 8002376:	4a2b      	ldr	r2, [pc, #172]	; (8002424 <ParaInt+0x380>)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	3351      	adds	r3, #81	; 0x51
 800237e:	460a      	mov	r2, r1
 8002380:	701a      	strb	r2, [r3, #0]
			i++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3301      	adds	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d043      	beq.n	800241c <ParaInt+0x378>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b45      	cmp	r3, #69	; 0x45
 800239e:	d1e6      	bne.n	800236e <ParaInt+0x2ca>
}
 80023a0:	e03c      	b.n	800241c <ParaInt+0x378>
	else if(param[0]=='G'){
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b47      	cmp	r3, #71	; 0x47
 80023a8:	d11a      	bne.n	80023e0 <ParaInt+0x33c>
		while(param[i]!=0&&param[i]!='E'){
 80023aa:	e00c      	b.n	80023c6 <ParaInt+0x322>
			INIT0.deltaS[i]=param[i];
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	7819      	ldrb	r1, [r3, #0]
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <ParaInt+0x380>)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4413      	add	r3, r2
 80023ba:	3367      	adds	r3, #103	; 0x67
 80023bc:	460a      	mov	r2, r1
 80023be:	701a      	strb	r2, [r3, #0]
			i++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3301      	adds	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d024      	beq.n	800241c <ParaInt+0x378>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	4413      	add	r3, r2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b45      	cmp	r3, #69	; 0x45
 80023dc:	d1e6      	bne.n	80023ac <ParaInt+0x308>
}
 80023de:	e01d      	b.n	800241c <ParaInt+0x378>
	else if(param[0]=='B'){
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b42      	cmp	r3, #66	; 0x42
 80023e6:	d119      	bne.n	800241c <ParaInt+0x378>
		while(param[i]!=0&&param[i]!='E'){
 80023e8:	e00c      	b.n	8002404 <ParaInt+0x360>
			INIT0.clc[i]=param[i];
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	7819      	ldrb	r1, [r3, #0]
 80023f2:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <ParaInt+0x380>)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4413      	add	r3, r2
 80023f8:	3309      	adds	r3, #9
 80023fa:	460a      	mov	r2, r1
 80023fc:	701a      	strb	r2, [r3, #0]
			i++;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3301      	adds	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
		while(param[i]!=0&&param[i]!='E'){
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <ParaInt+0x378>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b45      	cmp	r3, #69	; 0x45
 800241a:	d1e6      	bne.n	80023ea <ParaInt+0x346>
}
 800241c:	bf00      	nop
 800241e:	3710      	adds	r7, #16
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20001918 	.word	0x20001918

08002428 <Cal>:

//Experiment Functions:
void Cal(long depth, int steps, long inter){
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
	caltime=50;
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <Cal+0xc0>)
 8002436:	2232      	movs	r2, #50	; 0x32
 8002438:	601a      	str	r2, [r3, #0]
	stepnum=steps;
 800243a:	4a2c      	ldr	r2, [pc, #176]	; (80024ec <Cal+0xc4>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	6013      	str	r3, [r2, #0]
	firstpt=voltnow;
 8002440:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <Cal+0xc8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a2b      	ldr	r2, [pc, #172]	; (80024f4 <Cal+0xcc>)
 8002446:	6013      	str	r3, [r2, #0]
	stepdepth=depth/stepnum;
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <Cal+0xc4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002452:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <Cal+0xd0>)
 8002454:	6013      	str	r3, [r2, #0]
	if(inter>50||(motorcon==1&&inter>0)){
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b32      	cmp	r3, #50	; 0x32
 800245a:	dc06      	bgt.n	800246a <Cal+0x42>
 800245c:	4b27      	ldr	r3, [pc, #156]	; (80024fc <Cal+0xd4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d109      	bne.n	8002478 <Cal+0x50>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	dd06      	ble.n	8002478 <Cal+0x50>
		caltime=inter/2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	0fda      	lsrs	r2, r3, #31
 800246e:	4413      	add	r3, r2
 8002470:	105b      	asrs	r3, r3, #1
 8002472:	461a      	mov	r2, r3
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <Cal+0xc0>)
 8002476:	601a      	str	r2, [r3, #0]
	}
	if(osc!=1){
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <Cal+0xd8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d002      	beq.n	8002486 <Cal+0x5e>
		eqstep=1;
 8002480:	4b20      	ldr	r3, [pc, #128]	; (8002504 <Cal+0xdc>)
 8002482:	2201      	movs	r2, #1
 8002484:	601a      	str	r2, [r3, #0]
	}
	if(motorcon==0){
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <Cal+0xd4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10a      	bne.n	80024a4 <Cal+0x7c>
		TimeSet(&htim10, caltime*1000);
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <Cal+0xc0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	4619      	mov	r1, r3
 800249c:	481a      	ldr	r0, [pc, #104]	; (8002508 <Cal+0xe0>)
 800249e:	f008 febb 	bl	800b218 <TimeSet>
		}
		else{
			StepD(0);
		}
	}
}
 80024a2:	e01d      	b.n	80024e0 <Cal+0xb8>
		HAL_TIM_Base_Stop_IT(&htim10);
 80024a4:	4818      	ldr	r0, [pc, #96]	; (8002508 <Cal+0xe0>)
 80024a6:	f00c fd5e 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
		eqstep=1;
 80024aa:	4b16      	ldr	r3, [pc, #88]	; (8002504 <Cal+0xdc>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	601a      	str	r2, [r3, #0]
		TimeSet(&htim9, caltime*1000);
 80024b0:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <Cal+0xc0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024b8:	fb02 f303 	mul.w	r3, r2, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	4813      	ldr	r0, [pc, #76]	; (800250c <Cal+0xe4>)
 80024c0:	f008 feaa 	bl	800b218 <TimeSet>
		stepsay=depth;
 80024c4:	4a12      	ldr	r2, [pc, #72]	; (8002510 <Cal+0xe8>)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6013      	str	r3, [r2, #0]
		if(firstdir==1){
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <Cal+0xec>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d103      	bne.n	80024da <Cal+0xb2>
			StepD(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f000 ffe4 	bl	80034a0 <StepD>
}
 80024d8:	e002      	b.n	80024e0 <Cal+0xb8>
			StepD(0);
 80024da:	2000      	movs	r0, #0
 80024dc:	f000 ffe0 	bl	80034a0 <StepD>
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000014 	.word	0x20000014
 80024ec:	200002f8 	.word	0x200002f8
 80024f0:	20000000 	.word	0x20000000
 80024f4:	20000018 	.word	0x20000018
 80024f8:	200002f0 	.word	0x200002f0
 80024fc:	20000340 	.word	0x20000340
 8002500:	20000314 	.word	0x20000314
 8002504:	200002e4 	.word	0x200002e4
 8002508:	20006af8 	.word	0x20006af8
 800250c:	20006d84 	.word	0x20006d84
 8002510:	20000334 	.word	0x20000334
 8002514:	20000304 	.word	0x20000304

08002518 <slopExt>:
void slopExt(int type, int xinter, int yinter, int threshold, int pull, int zinc){
 8002518:	b580      	push	{r7, lr}
 800251a:	b096      	sub	sp, #88	; 0x58
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
	int first=voltnow;
 8002526:	4baa      	ldr	r3, [pc, #680]	; (80027d0 <slopExt+0x2b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	63bb      	str	r3, [r7, #56]	; 0x38
	int touchpt[9];
	int cnt=0;
 800252c:	2300      	movs	r3, #0
 800252e:	657b      	str	r3, [r7, #84]	; 0x54
	if(type==0){//Actuator
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f040 8108 	bne.w	8002748 <slopExt+0x230>
		app=1;
 8002538:	4ba6      	ldr	r3, [pc, #664]	; (80027d4 <slopExt+0x2bc>)
 800253a:	2201      	movs	r2, #1
 800253c:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<3;i++){
 800253e:	2300      	movs	r3, #0
 8002540:	653b      	str	r3, [r7, #80]	; 0x50
 8002542:	e0ec      	b.n	800271e <slopExt+0x206>
			for(int j=0;j<3;j++){
 8002544:	2300      	movs	r3, #0
 8002546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002548:	e0cf      	b.n	80026ea <slopExt+0x1d2>
				while(instant.scalelive<threshold&&emergency==0){
					voltnow-=zinc;
 800254a:	4ba1      	ldr	r3, [pc, #644]	; (80027d0 <slopExt+0x2b8>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	4a9f      	ldr	r2, [pc, #636]	; (80027d0 <slopExt+0x2b8>)
 8002554:	6013      	str	r3, [r2, #0]
					ftos(voltnow,voltage);
 8002556:	4b9e      	ldr	r3, [pc, #632]	; (80027d0 <slopExt+0x2b8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	499f      	ldr	r1, [pc, #636]	; (80027d8 <slopExt+0x2c0>)
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fa2b 	bl	80019b8 <ftos>
					motsender[0]=0;
 8002562:	4b9e      	ldr	r3, [pc, #632]	; (80027dc <slopExt+0x2c4>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
					datasender[0]=0;
 8002568:	4b9d      	ldr	r3, [pc, #628]	; (80027e0 <slopExt+0x2c8>)
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
					itoa(instant.scalelive,motsender,10);
 800256e:	4b9d      	ldr	r3, [pc, #628]	; (80027e4 <slopExt+0x2cc>)
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	220a      	movs	r2, #10
 8002574:	4999      	ldr	r1, [pc, #612]	; (80027dc <slopExt+0x2c4>)
 8002576:	4618      	mov	r0, r3
 8002578:	f00f fad2 	bl	8011b20 <itoa>
					strcat(motsender,"LM\0");
 800257c:	4897      	ldr	r0, [pc, #604]	; (80027dc <slopExt+0x2c4>)
 800257e:	f7fd fe23 	bl	80001c8 <strlen>
 8002582:	4603      	mov	r3, r0
 8002584:	461a      	mov	r2, r3
 8002586:	4b95      	ldr	r3, [pc, #596]	; (80027dc <slopExt+0x2c4>)
 8002588:	4413      	add	r3, r2
 800258a:	4a97      	ldr	r2, [pc, #604]	; (80027e8 <slopExt+0x2d0>)
 800258c:	8811      	ldrh	r1, [r2, #0]
 800258e:	7892      	ldrb	r2, [r2, #2]
 8002590:	8019      	strh	r1, [r3, #0]
 8002592:	709a      	strb	r2, [r3, #2]
					strcat(datasender,voltage);
 8002594:	4990      	ldr	r1, [pc, #576]	; (80027d8 <slopExt+0x2c0>)
 8002596:	4892      	ldr	r0, [pc, #584]	; (80027e0 <slopExt+0x2c8>)
 8002598:	f00f fad7 	bl	8011b4a <strcat>
					strcat(datasender,"E\0");
 800259c:	4890      	ldr	r0, [pc, #576]	; (80027e0 <slopExt+0x2c8>)
 800259e:	f7fd fe13 	bl	80001c8 <strlen>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b8e      	ldr	r3, [pc, #568]	; (80027e0 <slopExt+0x2c8>)
 80025a8:	4413      	add	r3, r2
 80025aa:	4990      	ldr	r1, [pc, #576]	; (80027ec <slopExt+0x2d4>)
 80025ac:	461a      	mov	r2, r3
 80025ae:	460b      	mov	r3, r1
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	8013      	strh	r3, [r2, #0]
					strcat(motsender,datasender);
 80025b4:	498a      	ldr	r1, [pc, #552]	; (80027e0 <slopExt+0x2c8>)
 80025b6:	4889      	ldr	r0, [pc, #548]	; (80027dc <slopExt+0x2c4>)
 80025b8:	f00f fac7 	bl	8011b4a <strcat>
					SendPc(motsender, 5, 2);
 80025bc:	2202      	movs	r2, #2
 80025be:	2105      	movs	r1, #5
 80025c0:	4886      	ldr	r0, [pc, #536]	; (80027dc <slopExt+0x2c4>)
 80025c2:	f002 fe7f 	bl	80052c4 <SendPc>
					GiveVolt(voltage);
 80025c6:	4884      	ldr	r0, [pc, #528]	; (80027d8 <slopExt+0x2c0>)
 80025c8:	f001 f840 	bl	800364c <GiveVolt>
					DWT_Delay(100000);
 80025cc:	4888      	ldr	r0, [pc, #544]	; (80027f0 <slopExt+0x2d8>)
 80025ce:	f7fe fd11 	bl	8000ff4 <DWT_Delay>
					if(voltnow-zinc<-1000000){
 80025d2:	4b7f      	ldr	r3, [pc, #508]	; (80027d0 <slopExt+0x2b8>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	4a86      	ldr	r2, [pc, #536]	; (80027f4 <slopExt+0x2dc>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	da05      	bge.n	80025ec <slopExt+0xd4>
						SendPc("OUTRANG", 5, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2105      	movs	r1, #5
 80025e4:	4884      	ldr	r0, [pc, #528]	; (80027f8 <slopExt+0x2e0>)
 80025e6:	f002 fe6d 	bl	80052c4 <SendPc>
						break;
 80025ea:	e008      	b.n	80025fe <slopExt+0xe6>
				while(instant.scalelive<threshold&&emergency==0){
 80025ec:	4b7d      	ldr	r3, [pc, #500]	; (80027e4 <slopExt+0x2cc>)
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	dd03      	ble.n	80025fe <slopExt+0xe6>
 80025f6:	4b81      	ldr	r3, [pc, #516]	; (80027fc <slopExt+0x2e4>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0a5      	beq.n	800254a <slopExt+0x32>
					}
				}
				touchpt[cnt]=voltnow;
 80025fe:	4b74      	ldr	r3, [pc, #464]	; (80027d0 <slopExt+0x2b8>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800260a:	440b      	add	r3, r1
 800260c:	f843 2c44 	str.w	r2, [r3, #-68]
				while(first+pull!=voltnow&&emergency==0){
 8002610:	e050      	b.n	80026b4 <slopExt+0x19c>
					voltnow+=zinc;
 8002612:	4b6f      	ldr	r3, [pc, #444]	; (80027d0 <slopExt+0x2b8>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002618:	4413      	add	r3, r2
 800261a:	4a6d      	ldr	r2, [pc, #436]	; (80027d0 <slopExt+0x2b8>)
 800261c:	6013      	str	r3, [r2, #0]
					ftos(voltnow,voltage);
 800261e:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <slopExt+0x2b8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	496d      	ldr	r1, [pc, #436]	; (80027d8 <slopExt+0x2c0>)
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff f9c7 	bl	80019b8 <ftos>
					motsender[0]=0;
 800262a:	4b6c      	ldr	r3, [pc, #432]	; (80027dc <slopExt+0x2c4>)
 800262c:	2200      	movs	r2, #0
 800262e:	701a      	strb	r2, [r3, #0]
					datasender[0]=0;
 8002630:	4b6b      	ldr	r3, [pc, #428]	; (80027e0 <slopExt+0x2c8>)
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
					itoa(instant.scalelive,motsender,10);
 8002636:	4b6b      	ldr	r3, [pc, #428]	; (80027e4 <slopExt+0x2cc>)
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	220a      	movs	r2, #10
 800263c:	4967      	ldr	r1, [pc, #412]	; (80027dc <slopExt+0x2c4>)
 800263e:	4618      	mov	r0, r3
 8002640:	f00f fa6e 	bl	8011b20 <itoa>
					strcat(motsender,"LM\0");
 8002644:	4865      	ldr	r0, [pc, #404]	; (80027dc <slopExt+0x2c4>)
 8002646:	f7fd fdbf 	bl	80001c8 <strlen>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <slopExt+0x2c4>)
 8002650:	4413      	add	r3, r2
 8002652:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <slopExt+0x2d0>)
 8002654:	8811      	ldrh	r1, [r2, #0]
 8002656:	7892      	ldrb	r2, [r2, #2]
 8002658:	8019      	strh	r1, [r3, #0]
 800265a:	709a      	strb	r2, [r3, #2]
					strcat(datasender,voltage);
 800265c:	495e      	ldr	r1, [pc, #376]	; (80027d8 <slopExt+0x2c0>)
 800265e:	4860      	ldr	r0, [pc, #384]	; (80027e0 <slopExt+0x2c8>)
 8002660:	f00f fa73 	bl	8011b4a <strcat>
					strcat(datasender,"E\0");
 8002664:	485e      	ldr	r0, [pc, #376]	; (80027e0 <slopExt+0x2c8>)
 8002666:	f7fd fdaf 	bl	80001c8 <strlen>
 800266a:	4603      	mov	r3, r0
 800266c:	461a      	mov	r2, r3
 800266e:	4b5c      	ldr	r3, [pc, #368]	; (80027e0 <slopExt+0x2c8>)
 8002670:	4413      	add	r3, r2
 8002672:	495e      	ldr	r1, [pc, #376]	; (80027ec <slopExt+0x2d4>)
 8002674:	461a      	mov	r2, r3
 8002676:	460b      	mov	r3, r1
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	8013      	strh	r3, [r2, #0]
					strcat(motsender,datasender);
 800267c:	4958      	ldr	r1, [pc, #352]	; (80027e0 <slopExt+0x2c8>)
 800267e:	4857      	ldr	r0, [pc, #348]	; (80027dc <slopExt+0x2c4>)
 8002680:	f00f fa63 	bl	8011b4a <strcat>
					SendPc(motsender, 5, 2);
 8002684:	2202      	movs	r2, #2
 8002686:	2105      	movs	r1, #5
 8002688:	4854      	ldr	r0, [pc, #336]	; (80027dc <slopExt+0x2c4>)
 800268a:	f002 fe1b 	bl	80052c4 <SendPc>
					GiveVolt(voltage);
 800268e:	4852      	ldr	r0, [pc, #328]	; (80027d8 <slopExt+0x2c0>)
 8002690:	f000 ffdc 	bl	800364c <GiveVolt>
					DWT_Delay(100000);
 8002694:	4856      	ldr	r0, [pc, #344]	; (80027f0 <slopExt+0x2d8>)
 8002696:	f7fe fcad 	bl	8000ff4 <DWT_Delay>
					if(voltnow+zinc>7500000){
 800269a:	4b4d      	ldr	r3, [pc, #308]	; (80027d0 <slopExt+0x2b8>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a0:	4413      	add	r3, r2
 80026a2:	4a57      	ldr	r2, [pc, #348]	; (8002800 <slopExt+0x2e8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	dd05      	ble.n	80026b4 <slopExt+0x19c>
						SendPc("OUTRANG", 5, 2);
 80026a8:	2202      	movs	r2, #2
 80026aa:	2105      	movs	r1, #5
 80026ac:	4852      	ldr	r0, [pc, #328]	; (80027f8 <slopExt+0x2e0>)
 80026ae:	f002 fe09 	bl	80052c4 <SendPc>
						break;
 80026b2:	e00a      	b.n	80026ca <slopExt+0x1b2>
				while(first+pull!=voltnow&&emergency==0){
 80026b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026b8:	441a      	add	r2, r3
 80026ba:	4b45      	ldr	r3, [pc, #276]	; (80027d0 <slopExt+0x2b8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d003      	beq.n	80026ca <slopExt+0x1b2>
 80026c2:	4b4e      	ldr	r3, [pc, #312]	; (80027fc <slopExt+0x2e4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0a3      	beq.n	8002612 <slopExt+0xfa>
					}
				}
				if(emergency==0){
 80026ca:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <slopExt+0x2e4>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <slopExt+0x1cc>
					moveXY(0, 0, xinter,1);
 80026d2:	2301      	movs	r3, #1
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	2100      	movs	r1, #0
 80026d8:	2000      	movs	r0, #0
 80026da:	f000 fdbb 	bl	8003254 <moveXY>
					cnt++;
 80026de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026e0:	3301      	adds	r3, #1
 80026e2:	657b      	str	r3, [r7, #84]	; 0x54
			for(int j=0;j<3;j++){
 80026e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e6:	3301      	adds	r3, #1
 80026e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	f77f af7d 	ble.w	80025ec <slopExt+0xd4>
				}
			}
			if(emergency==0){
 80026f2:	4b42      	ldr	r3, [pc, #264]	; (80027fc <slopExt+0x2e4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10e      	bne.n	8002718 <slopExt+0x200>
				moveXY(0, 1, xinter*3,1);
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	441a      	add	r2, r3
 8002702:	2301      	movs	r3, #1
 8002704:	2101      	movs	r1, #1
 8002706:	2000      	movs	r0, #0
 8002708:	f000 fda4 	bl	8003254 <moveXY>
				moveXY(1, 0, yinter,1);
 800270c:	2301      	movs	r3, #1
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	2100      	movs	r1, #0
 8002712:	2001      	movs	r0, #1
 8002714:	f000 fd9e 	bl	8003254 <moveXY>
		for(int i=0;i<3;i++){
 8002718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271a:	3301      	adds	r3, #1
 800271c:	653b      	str	r3, [r7, #80]	; 0x50
 800271e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002720:	2b02      	cmp	r3, #2
 8002722:	f77f af0f 	ble.w	8002544 <slopExt+0x2c>
			}
		}
		if(emergency==0){
 8002726:	4b35      	ldr	r3, [pc, #212]	; (80027fc <slopExt+0x2e4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d108      	bne.n	8002740 <slopExt+0x228>
			moveXY(1, 1, yinter*3,1);
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	441a      	add	r2, r3
 8002736:	2301      	movs	r3, #1
 8002738:	2101      	movs	r1, #1
 800273a:	2001      	movs	r0, #1
 800273c:	f000 fd8a 	bl	8003254 <moveXY>
		}
		app=0;
 8002740:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <slopExt+0x2bc>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
			moveXY(1, 1, yinter*3,1);
		}
		app=0;
	}

}
 8002746:	e138      	b.n	80029ba <slopExt+0x4a2>
	else if(type==1){//step motor
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b01      	cmp	r3, #1
 800274c:	f040 80ac 	bne.w	80028a8 <slopExt+0x390>
		speedmode=5;//2209'da 5 olsun!
 8002750:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <slopExt+0x2ec>)
 8002752:	2205      	movs	r2, #5
 8002754:	601a      	str	r2, [r3, #0]
		app=1;
 8002756:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <slopExt+0x2bc>)
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
		TimeSet(&htim9, 100000);
 800275c:	4924      	ldr	r1, [pc, #144]	; (80027f0 <slopExt+0x2d8>)
 800275e:	482a      	ldr	r0, [pc, #168]	; (8002808 <slopExt+0x2f0>)
 8002760:	f008 fd5a 	bl	800b218 <TimeSet>
		for(int i=0;i<3;i++){
 8002764:	2300      	movs	r3, #0
 8002766:	64bb      	str	r3, [r7, #72]	; 0x48
 8002768:	e089      	b.n	800287e <slopExt+0x366>
			for(int j=0;j<3;j++){
 800276a:	2300      	movs	r3, #0
 800276c:	647b      	str	r3, [r7, #68]	; 0x44
 800276e:	e06d      	b.n	800284c <slopExt+0x334>
				automot=1;
 8002770:	4b26      	ldr	r3, [pc, #152]	; (800280c <slopExt+0x2f4>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]
				StepD(0);
 8002776:	2000      	movs	r0, #0
 8002778:	f000 fe92 	bl	80034a0 <StepD>
				while(instant.scalelive<threshold){
 800277c:	e007      	b.n	800278e <slopExt+0x276>
					if(emergency!=0){
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <slopExt+0x2e4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <slopExt+0x276>
						stopmot=1;
 8002786:	4b22      	ldr	r3, [pc, #136]	; (8002810 <slopExt+0x2f8>)
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]
						break;
 800278c:	e004      	b.n	8002798 <slopExt+0x280>
				while(instant.scalelive<threshold){
 800278e:	4b15      	ldr	r3, [pc, #84]	; (80027e4 <slopExt+0x2cc>)
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	429a      	cmp	r2, r3
 8002796:	dcf2      	bgt.n	800277e <slopExt+0x266>
				stopmot=1;
 8002798:	4b1d      	ldr	r3, [pc, #116]	; (8002810 <slopExt+0x2f8>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]
				touchpt[cnt]=motpos;
 800279e:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <slopExt+0x2fc>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80027aa:	440b      	add	r3, r1
 80027ac:	f843 2c44 	str.w	r2, [r3, #-68]
				automot=1;
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <slopExt+0x2f4>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]
				StepD(0);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f000 fe72 	bl	80034a0 <StepD>
				while(first+pull!=motpos){
 80027bc:	e02c      	b.n	8002818 <slopExt+0x300>
					if(emergency!=0){
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <slopExt+0x2e4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d028      	beq.n	8002818 <slopExt+0x300>
						stopmot=1;
 80027c6:	4b12      	ldr	r3, [pc, #72]	; (8002810 <slopExt+0x2f8>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
						break;
 80027cc:	e02b      	b.n	8002826 <slopExt+0x30e>
 80027ce:	bf00      	nop
 80027d0:	20000000 	.word	0x20000000
 80027d4:	20006964 	.word	0x20006964
 80027d8:	20000004 	.word	0x20000004
 80027dc:	20004ce0 	.word	0x20004ce0
 80027e0:	20006bd8 	.word	0x20006bd8
 80027e4:	20006bc0 	.word	0x20006bc0
 80027e8:	08011dfc 	.word	0x08011dfc
 80027ec:	08011e00 	.word	0x08011e00
 80027f0:	000186a0 	.word	0x000186a0
 80027f4:	fff0bdc0 	.word	0xfff0bdc0
 80027f8:	08011e04 	.word	0x08011e04
 80027fc:	200002cc 	.word	0x200002cc
 8002800:	007270e0 	.word	0x007270e0
 8002804:	20000354 	.word	0x20000354
 8002808:	20006d84 	.word	0x20006d84
 800280c:	2000034c 	.word	0x2000034c
 8002810:	2000033c 	.word	0x2000033c
 8002814:	20000360 	.word	0x20000360
				while(first+pull!=motpos){
 8002818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800281a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800281c:	441a      	add	r2, r3
 800281e:	4b69      	ldr	r3, [pc, #420]	; (80029c4 <slopExt+0x4ac>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d1cb      	bne.n	80027be <slopExt+0x2a6>
				stopmot=1;
 8002826:	4b68      	ldr	r3, [pc, #416]	; (80029c8 <slopExt+0x4b0>)
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]
				if(emergency==0){
 800282c:	4b67      	ldr	r3, [pc, #412]	; (80029cc <slopExt+0x4b4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d108      	bne.n	8002846 <slopExt+0x32e>
					moveXY(0, 0, xinter,1);
 8002834:	2301      	movs	r3, #1
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	2100      	movs	r1, #0
 800283a:	2000      	movs	r0, #0
 800283c:	f000 fd0a 	bl	8003254 <moveXY>
					cnt++;
 8002840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002842:	3301      	adds	r3, #1
 8002844:	657b      	str	r3, [r7, #84]	; 0x54
			for(int j=0;j<3;j++){
 8002846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002848:	3301      	adds	r3, #1
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
 800284c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284e:	2b02      	cmp	r3, #2
 8002850:	dd8e      	ble.n	8002770 <slopExt+0x258>
			if(emergency==0){
 8002852:	4b5e      	ldr	r3, [pc, #376]	; (80029cc <slopExt+0x4b4>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10e      	bne.n	8002878 <slopExt+0x360>
				moveXY(0, 1, xinter*3,1);
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	441a      	add	r2, r3
 8002862:	2301      	movs	r3, #1
 8002864:	2101      	movs	r1, #1
 8002866:	2000      	movs	r0, #0
 8002868:	f000 fcf4 	bl	8003254 <moveXY>
				moveXY(1, 0, yinter,1);
 800286c:	2301      	movs	r3, #1
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	2100      	movs	r1, #0
 8002872:	2001      	movs	r0, #1
 8002874:	f000 fcee 	bl	8003254 <moveXY>
		for(int i=0;i<3;i++){
 8002878:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800287a:	3301      	adds	r3, #1
 800287c:	64bb      	str	r3, [r7, #72]	; 0x48
 800287e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002880:	2b02      	cmp	r3, #2
 8002882:	f77f af72 	ble.w	800276a <slopExt+0x252>
		if(emergency==0){
 8002886:	4b51      	ldr	r3, [pc, #324]	; (80029cc <slopExt+0x4b4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d108      	bne.n	80028a0 <slopExt+0x388>
			moveXY(1, 1, yinter*3,1);
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	441a      	add	r2, r3
 8002896:	2301      	movs	r3, #1
 8002898:	2101      	movs	r1, #1
 800289a:	2001      	movs	r0, #1
 800289c:	f000 fcda 	bl	8003254 <moveXY>
		app=0;
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <slopExt+0x4b8>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
}
 80028a6:	e088      	b.n	80029ba <slopExt+0x4a2>
	else if(type==2){//step motor
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	f040 8085 	bne.w	80029ba <slopExt+0x4a2>
		speedmode=3;//5 de olmalı
 80028b0:	4b48      	ldr	r3, [pc, #288]	; (80029d4 <slopExt+0x4bc>)
 80028b2:	2203      	movs	r2, #3
 80028b4:	601a      	str	r2, [r3, #0]
		app=1;
 80028b6:	4b46      	ldr	r3, [pc, #280]	; (80029d0 <slopExt+0x4b8>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
		TimeSet(&htim9, 100000);
 80028bc:	4946      	ldr	r1, [pc, #280]	; (80029d8 <slopExt+0x4c0>)
 80028be:	4847      	ldr	r0, [pc, #284]	; (80029dc <slopExt+0x4c4>)
 80028c0:	f008 fcaa 	bl	800b218 <TimeSet>
		for(int i=0;i<3;i++){
 80028c4:	2300      	movs	r3, #0
 80028c6:	643b      	str	r3, [r7, #64]	; 0x40
 80028c8:	e064      	b.n	8002994 <slopExt+0x47c>
			for(int j=0;j<3;j++){
 80028ca:	2300      	movs	r3, #0
 80028cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ce:	e048      	b.n	8002962 <slopExt+0x44a>
				automot=1;
 80028d0:	4b43      	ldr	r3, [pc, #268]	; (80029e0 <slopExt+0x4c8>)
 80028d2:	2201      	movs	r2, #1
 80028d4:	601a      	str	r2, [r3, #0]
				StepD(0);
 80028d6:	2000      	movs	r0, #0
 80028d8:	f000 fde2 	bl	80034a0 <StepD>
				while(instant.scalelive<threshold){
 80028dc:	e007      	b.n	80028ee <slopExt+0x3d6>
					if(emergency!=0){
 80028de:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <slopExt+0x4b4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <slopExt+0x3d6>
						stopmot=1;
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <slopExt+0x4b0>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
						break;
 80028ec:	e004      	b.n	80028f8 <slopExt+0x3e0>
				while(instant.scalelive<threshold){
 80028ee:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <slopExt+0x4cc>)
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	dcf2      	bgt.n	80028de <slopExt+0x3c6>
				stopmot=1;
 80028f8:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <slopExt+0x4b0>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
				touchpt[cnt]=motpos;
 80028fe:	4b31      	ldr	r3, [pc, #196]	; (80029c4 <slopExt+0x4ac>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800290a:	440b      	add	r3, r1
 800290c:	f843 2c44 	str.w	r2, [r3, #-68]
				automot=1;
 8002910:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <slopExt+0x4c8>)
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]
				StepD(0);
 8002916:	2000      	movs	r0, #0
 8002918:	f000 fdc2 	bl	80034a0 <StepD>
				while(first+pull!=motpos){
 800291c:	e007      	b.n	800292e <slopExt+0x416>
					if(emergency!=0){
 800291e:	4b2b      	ldr	r3, [pc, #172]	; (80029cc <slopExt+0x4b4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <slopExt+0x416>
						stopmot=1;
 8002926:	4b28      	ldr	r3, [pc, #160]	; (80029c8 <slopExt+0x4b0>)
 8002928:	2201      	movs	r2, #1
 800292a:	601a      	str	r2, [r3, #0]
						break;
 800292c:	e006      	b.n	800293c <slopExt+0x424>
				while(first+pull!=motpos){
 800292e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002932:	441a      	add	r2, r3
 8002934:	4b23      	ldr	r3, [pc, #140]	; (80029c4 <slopExt+0x4ac>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d1f0      	bne.n	800291e <slopExt+0x406>
				stopmot=1;
 800293c:	4b22      	ldr	r3, [pc, #136]	; (80029c8 <slopExt+0x4b0>)
 800293e:	2201      	movs	r2, #1
 8002940:	601a      	str	r2, [r3, #0]
				if(emergency==0){
 8002942:	4b22      	ldr	r3, [pc, #136]	; (80029cc <slopExt+0x4b4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d108      	bne.n	800295c <slopExt+0x444>
					moveXY(0, 0, xinter,1);
 800294a:	2301      	movs	r3, #1
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	2100      	movs	r1, #0
 8002950:	2000      	movs	r0, #0
 8002952:	f000 fc7f 	bl	8003254 <moveXY>
					cnt++;
 8002956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002958:	3301      	adds	r3, #1
 800295a:	657b      	str	r3, [r7, #84]	; 0x54
			for(int j=0;j<3;j++){
 800295c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800295e:	3301      	adds	r3, #1
 8002960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002964:	2b02      	cmp	r3, #2
 8002966:	ddb3      	ble.n	80028d0 <slopExt+0x3b8>
			if(emergency==0){
 8002968:	4b18      	ldr	r3, [pc, #96]	; (80029cc <slopExt+0x4b4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10e      	bne.n	800298e <slopExt+0x476>
				moveXY(0, 1, xinter*3,1);
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	441a      	add	r2, r3
 8002978:	2301      	movs	r3, #1
 800297a:	2101      	movs	r1, #1
 800297c:	2000      	movs	r0, #0
 800297e:	f000 fc69 	bl	8003254 <moveXY>
				moveXY(1, 0, yinter,1);
 8002982:	2301      	movs	r3, #1
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	2100      	movs	r1, #0
 8002988:	2001      	movs	r0, #1
 800298a:	f000 fc63 	bl	8003254 <moveXY>
		for(int i=0;i<3;i++){
 800298e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002990:	3301      	adds	r3, #1
 8002992:	643b      	str	r3, [r7, #64]	; 0x40
 8002994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002996:	2b02      	cmp	r3, #2
 8002998:	dd97      	ble.n	80028ca <slopExt+0x3b2>
		if(emergency==0){
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <slopExt+0x4b4>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d108      	bne.n	80029b4 <slopExt+0x49c>
			moveXY(1, 1, yinter*3,1);
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	441a      	add	r2, r3
 80029aa:	2301      	movs	r3, #1
 80029ac:	2101      	movs	r1, #1
 80029ae:	2001      	movs	r0, #1
 80029b0:	f000 fc50 	bl	8003254 <moveXY>
		app=0;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <slopExt+0x4b8>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	701a      	strb	r2, [r3, #0]
}
 80029ba:	bf00      	nop
 80029bc:	3758      	adds	r7, #88	; 0x58
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	20000360 	.word	0x20000360
 80029c8:	2000033c 	.word	0x2000033c
 80029cc:	200002cc 	.word	0x200002cc
 80029d0:	20006964 	.word	0x20006964
 80029d4:	20000354 	.word	0x20000354
 80029d8:	000186a0 	.word	0x000186a0
 80029dc:	20006d84 	.word	0x20006d84
 80029e0:	2000034c 	.word	0x2000034c
 80029e4:	20006bc0 	.word	0x20006bc0

080029e8 <Indent>:
void Indent(long depth, long speed, int yon){
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
//her bir step için yapılacak dizi de açılabilir.
	if (speed!=0&&motorcon==0){
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d054      	beq.n	8002aa4 <Indent+0xbc>
 80029fa:	4b71      	ldr	r3, [pc, #452]	; (8002bc0 <Indent+0x1d8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d150      	bne.n	8002aa4 <Indent+0xbc>
		stepno=depth/(speed*0.05);
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7fd fd3a 	bl	800047c <__aeabi_i2d>
 8002a08:	4604      	mov	r4, r0
 8002a0a:	460d      	mov	r5, r1
 8002a0c:	68b8      	ldr	r0, [r7, #8]
 8002a0e:	f7fd fd35 	bl	800047c <__aeabi_i2d>
 8002a12:	a369      	add	r3, pc, #420	; (adr r3, 8002bb8 <Indent+0x1d0>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f7fd fd9a 	bl	8000550 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4620      	mov	r0, r4
 8002a22:	4629      	mov	r1, r5
 8002a24:	f7fd febe 	bl	80007a4 <__aeabi_ddiv>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	460c      	mov	r4, r1
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	4621      	mov	r1, r4
 8002a30:	f7fd ffa0 	bl	8000974 <__aeabi_d2iz>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b63      	ldr	r3, [pc, #396]	; (8002bc4 <Indent+0x1dc>)
 8002a38:	601a      	str	r2, [r3, #0]
		returncheck=0;
 8002a3a:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <Indent+0x1e0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
		if(yon==2){
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d103      	bne.n	8002a4e <Indent+0x66>
			firstdir=1;
 8002a46:	4b61      	ldr	r3, [pc, #388]	; (8002bcc <Indent+0x1e4>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	e002      	b.n	8002a54 <Indent+0x6c>
		}
		else{
			firstdir=0;
 8002a4e:	4b5f      	ldr	r3, [pc, #380]	; (8002bcc <Indent+0x1e4>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
		}
		if(expLoad==1){
 8002a54:	4b5e      	ldr	r3, [pc, #376]	; (8002bd0 <Indent+0x1e8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d115      	bne.n	8002a88 <Indent+0xa0>
			firstpt=voltnow;
 8002a5c:	4b5d      	ldr	r3, [pc, #372]	; (8002bd4 <Indent+0x1ec>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a5d      	ldr	r2, [pc, #372]	; (8002bd8 <Indent+0x1f0>)
 8002a62:	6013      	str	r3, [r2, #0]
			sendexp=0;
 8002a64:	4b5d      	ldr	r3, [pc, #372]	; (8002bdc <Indent+0x1f4>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	601a      	str	r2, [r3, #0]
			stepdepth=depth/stepno;
 8002a6a:	4b56      	ldr	r3, [pc, #344]	; (8002bc4 <Indent+0x1dc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a74:	4a5a      	ldr	r2, [pc, #360]	; (8002be0 <Indent+0x1f8>)
 8002a76:	6013      	str	r3, [r2, #0]
			TimeSet(&htim13, 100000);
 8002a78:	495a      	ldr	r1, [pc, #360]	; (8002be4 <Indent+0x1fc>)
 8002a7a:	485b      	ldr	r0, [pc, #364]	; (8002be8 <Indent+0x200>)
 8002a7c:	f008 fbcc 	bl	800b218 <TimeSet>
			loadIndent=1;
 8002a80:	4b5a      	ldr	r3, [pc, #360]	; (8002bec <Indent+0x204>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
		if(expLoad==1){
 8002a86:	e092      	b.n	8002bae <Indent+0x1c6>
		}
		else{
			eqstep=1;
 8002a88:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <Indent+0x208>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
			sendexp=0;
 8002a8e:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <Indent+0x1f4>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
			Cal(depth, stepno, 0);
 8002a94:	4b4b      	ldr	r3, [pc, #300]	; (8002bc4 <Indent+0x1dc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff fcc3 	bl	8002428 <Cal>
		if(expLoad==1){
 8002aa2:	e084      	b.n	8002bae <Indent+0x1c6>
			//set heater during indent!
		}
	}
	else if(motorcon==1){
 8002aa4:	4b46      	ldr	r3, [pc, #280]	; (8002bc0 <Indent+0x1d8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d135      	bne.n	8002b18 <Indent+0x130>
		HAL_TIM_Base_Stop_IT(&htim10);
 8002aac:	4851      	ldr	r0, [pc, #324]	; (8002bf4 <Indent+0x20c>)
 8002aae:	f00c fa5a 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
		uart2say=htim10.Instance->DMAR;
 8002ab2:	4b50      	ldr	r3, [pc, #320]	; (8002bf4 <Indent+0x20c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <Indent+0x210>)
 8002abc:	601a      	str	r2, [r3, #0]
		while(uart2say!=0){
 8002abe:	e008      	b.n	8002ad2 <Indent+0xea>
			uart2say=htim10.Instance->DMAR;
 8002ac0:	4b4c      	ldr	r3, [pc, #304]	; (8002bf4 <Indent+0x20c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b4b      	ldr	r3, [pc, #300]	; (8002bf8 <Indent+0x210>)
 8002aca:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim10);
 8002acc:	4849      	ldr	r0, [pc, #292]	; (8002bf4 <Indent+0x20c>)
 8002ace:	f00c fa4a 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
		while(uart2say!=0){
 8002ad2:	4b49      	ldr	r3, [pc, #292]	; (8002bf8 <Indent+0x210>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f2      	bne.n	8002ac0 <Indent+0xd8>
		}
		if(speed!=0){
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d009      	beq.n	8002af4 <Indent+0x10c>
			TimeSet(&htim9, speed*500);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ae6:	fb02 f303 	mul.w	r3, r2, r3
 8002aea:	4619      	mov	r1, r3
 8002aec:	4843      	ldr	r0, [pc, #268]	; (8002bfc <Indent+0x214>)
 8002aee:	f008 fb93 	bl	800b218 <TimeSet>
 8002af2:	e003      	b.n	8002afc <Indent+0x114>
		}
		else{
			TimeSet(&htim9, 200);
 8002af4:	21c8      	movs	r1, #200	; 0xc8
 8002af6:	4841      	ldr	r0, [pc, #260]	; (8002bfc <Indent+0x214>)
 8002af8:	f008 fb8e 	bl	800b218 <TimeSet>
		}
		stepsay=depth;
 8002afc:	4a40      	ldr	r2, [pc, #256]	; (8002c00 <Indent+0x218>)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6013      	str	r3, [r2, #0]
		//Setheater during indent
		if(yon==1){
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d103      	bne.n	8002b10 <Indent+0x128>
			StepD(0);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f000 fcc9 	bl	80034a0 <StepD>
		GiveVolt(voltage);
	}
	else{
		sendexp=1;
	}
}
 8002b0e:	e04e      	b.n	8002bae <Indent+0x1c6>
			StepD(1);
 8002b10:	2001      	movs	r0, #1
 8002b12:	f000 fcc5 	bl	80034a0 <StepD>
}
 8002b16:	e04a      	b.n	8002bae <Indent+0x1c6>
	else if(speed==0&&motorcon==0) {
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d143      	bne.n	8002ba6 <Indent+0x1be>
 8002b1e:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <Indent+0x1d8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d13f      	bne.n	8002ba6 <Indent+0x1be>
		setHeater(sampleChannel, heatDuty[sampleChannel], 0);//set heater during indent
 8002b26:	4b37      	ldr	r3, [pc, #220]	; (8002c04 <Indent+0x21c>)
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <Indent+0x21c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a36      	ldr	r2, [pc, #216]	; (8002c08 <Indent+0x220>)
 8002b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b34:	2200      	movs	r2, #0
 8002b36:	4619      	mov	r1, r3
 8002b38:	f001 f83e 	bl	8003bb8 <setHeater>
		sendexp=1;
 8002b3c:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <Indent+0x1f4>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
		if(yon==2){
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d106      	bne.n	8002b56 <Indent+0x16e>
			voltnow+=depth;
 8002b48:	4b22      	ldr	r3, [pc, #136]	; (8002bd4 <Indent+0x1ec>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4413      	add	r3, r2
 8002b50:	4a20      	ldr	r2, [pc, #128]	; (8002bd4 <Indent+0x1ec>)
 8002b52:	6013      	str	r3, [r2, #0]
 8002b54:	e005      	b.n	8002b62 <Indent+0x17a>
			voltnow-=depth;
 8002b56:	4b1f      	ldr	r3, [pc, #124]	; (8002bd4 <Indent+0x1ec>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <Indent+0x1ec>)
 8002b60:	6013      	str	r3, [r2, #0]
		ftos(voltnow,voltage);
 8002b62:	4b1c      	ldr	r3, [pc, #112]	; (8002bd4 <Indent+0x1ec>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4929      	ldr	r1, [pc, #164]	; (8002c0c <Indent+0x224>)
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fe ff25 	bl	80019b8 <ftos>
		motsender[0]=0;
 8002b6e:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <Indent+0x228>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
		strcat(motsender,voltage);
 8002b74:	4925      	ldr	r1, [pc, #148]	; (8002c0c <Indent+0x224>)
 8002b76:	4826      	ldr	r0, [pc, #152]	; (8002c10 <Indent+0x228>)
 8002b78:	f00e ffe7 	bl	8011b4a <strcat>
		strcat(motsender,"E\0");
 8002b7c:	4824      	ldr	r0, [pc, #144]	; (8002c10 <Indent+0x228>)
 8002b7e:	f7fd fb23 	bl	80001c8 <strlen>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <Indent+0x228>)
 8002b88:	4413      	add	r3, r2
 8002b8a:	4922      	ldr	r1, [pc, #136]	; (8002c14 <Indent+0x22c>)
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	460b      	mov	r3, r1
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	8013      	strh	r3, [r2, #0]
		SendPc(motsender, 5, 0);
 8002b94:	2200      	movs	r2, #0
 8002b96:	2105      	movs	r1, #5
 8002b98:	481d      	ldr	r0, [pc, #116]	; (8002c10 <Indent+0x228>)
 8002b9a:	f002 fb93 	bl	80052c4 <SendPc>
		GiveVolt(voltage);
 8002b9e:	481b      	ldr	r0, [pc, #108]	; (8002c0c <Indent+0x224>)
 8002ba0:	f000 fd54 	bl	800364c <GiveVolt>
 8002ba4:	e003      	b.n	8002bae <Indent+0x1c6>
		sendexp=1;
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	; (8002bdc <Indent+0x1f4>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
}
 8002bac:	e7ff      	b.n	8002bae <Indent+0x1c6>
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	9999999a 	.word	0x9999999a
 8002bbc:	3fa99999 	.word	0x3fa99999
 8002bc0:	20000340 	.word	0x20000340
 8002bc4:	20000300 	.word	0x20000300
 8002bc8:	200002ec 	.word	0x200002ec
 8002bcc:	20000304 	.word	0x20000304
 8002bd0:	20000308 	.word	0x20000308
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000018 	.word	0x20000018
 8002bdc:	20000010 	.word	0x20000010
 8002be0:	200002f0 	.word	0x200002f0
 8002be4:	000186a0 	.word	0x000186a0
 8002be8:	20006bf8 	.word	0x20006bf8
 8002bec:	2000038c 	.word	0x2000038c
 8002bf0:	200002e4 	.word	0x200002e4
 8002bf4:	20006af8 	.word	0x20006af8
 8002bf8:	200018b0 	.word	0x200018b0
 8002bfc:	20006d84 	.word	0x20006d84
 8002c00:	20000334 	.word	0x20000334
 8002c04:	20000394 	.word	0x20000394
 8002c08:	20001844 	.word	0x20001844
 8002c0c:	20000004 	.word	0x20000004
 8002c10:	20004ce0 	.word	0x20004ce0
 8002c14:	08011e00 	.word	0x08011e00

08002c18 <Hold>:
void Hold(long hold){
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	if(hold>50){
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b32      	cmp	r3, #50	; 0x32
 8002c24:	dd0e      	ble.n	8002c44 <Hold+0x2c>
		holder=hold/50;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a0f      	ldr	r2, [pc, #60]	; (8002c68 <Hold+0x50>)
 8002c2a:	fb82 1203 	smull	r1, r2, r2, r3
 8002c2e:	1112      	asrs	r2, r2, #4
 8002c30:	17db      	asrs	r3, r3, #31
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	4a0d      	ldr	r2, [pc, #52]	; (8002c6c <Hold+0x54>)
 8002c36:	6013      	str	r3, [r2, #0]
		TimeSet(&htim10, 50000);
 8002c38:	f24c 3150 	movw	r1, #50000	; 0xc350
 8002c3c:	480c      	ldr	r0, [pc, #48]	; (8002c70 <Hold+0x58>)
 8002c3e:	f008 faeb 	bl	800b218 <TimeSet>
 8002c42:	e007      	b.n	8002c54 <Hold+0x3c>
	}
	else{
		holder=0;
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <Hold+0x54>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
		TimeSet(&htim10, 50000);
 8002c4a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8002c4e:	4808      	ldr	r0, [pc, #32]	; (8002c70 <Hold+0x58>)
 8002c50:	f008 fae2 	bl	800b218 <TimeSet>
	}
	holdcount++;
 8002c54:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <Hold+0x5c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	4a06      	ldr	r2, [pc, #24]	; (8002c74 <Hold+0x5c>)
 8002c5c:	6013      	str	r3, [r2, #0]
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	51eb851f 	.word	0x51eb851f
 8002c6c:	200002d4 	.word	0x200002d4
 8002c70:	20006af8 	.word	0x20006af8
 8002c74:	20000324 	.word	0x20000324

08002c78 <autoApproach>:
void autoApproach(int typ){
 8002c78:	b590      	push	{r4, r7, lr}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	first=voltnow;
 8002c80:	4ba9      	ldr	r3, [pc, #676]	; (8002f28 <autoApproach+0x2b0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4aa9      	ldr	r2, [pc, #676]	; (8002f2c <autoApproach+0x2b4>)
 8002c86:	6013      	str	r3, [r2, #0]
	if(loadnow>thresholdApp && typ==2){
 8002c88:	4ba9      	ldr	r3, [pc, #676]	; (8002f30 <autoApproach+0x2b8>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4ba9      	ldr	r3, [pc, #676]	; (8002f34 <autoApproach+0x2bc>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	dd05      	ble.n	8002ca0 <autoApproach+0x28>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d102      	bne.n	8002ca0 <autoApproach+0x28>
		retracting=1;
 8002c9a:	4ba7      	ldr	r3, [pc, #668]	; (8002f38 <autoApproach+0x2c0>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
	}
	if(retracting==1 && typ!=3 && typ != -1 ){
 8002ca0:	4ba5      	ldr	r3, [pc, #660]	; (8002f38 <autoApproach+0x2c0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	f040 80b9 	bne.w	8002e1c <autoApproach+0x1a4>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	f000 80b5 	beq.w	8002e1c <autoApproach+0x1a4>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb8:	f000 80b0 	beq.w	8002e1c <autoApproach+0x1a4>
		TimeSet(&htim13, 200000);
 8002cbc:	499f      	ldr	r1, [pc, #636]	; (8002f3c <autoApproach+0x2c4>)
 8002cbe:	48a0      	ldr	r0, [pc, #640]	; (8002f40 <autoApproach+0x2c8>)
 8002cc0:	f008 faaa 	bl	800b218 <TimeSet>
		if(app==0){
 8002cc4:	4b9f      	ldr	r3, [pc, #636]	; (8002f44 <autoApproach+0x2cc>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d11a      	bne.n	8002d02 <autoApproach+0x8a>
			increment= expin[expcount].speed * 0.2;
 8002ccc:	4b9e      	ldr	r3, [pc, #632]	; (8002f48 <autoApproach+0x2d0>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	499e      	ldr	r1, [pc, #632]	; (8002f4c <autoApproach+0x2d4>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	3310      	adds	r3, #16
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fbcb 	bl	800047c <__aeabi_i2d>
 8002ce6:	a38e      	add	r3, pc, #568	; (adr r3, 8002f20 <autoApproach+0x2a8>)
 8002ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cec:	f7fd fc30 	bl	8000550 <__aeabi_dmul>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	f7fd fe3c 	bl	8000974 <__aeabi_d2iz>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b94      	ldr	r3, [pc, #592]	; (8002f50 <autoApproach+0x2d8>)
 8002d00:	601a      	str	r2, [r3, #0]
		}
		if(expin[expcount].stepret!=0){
 8002d02:	4b91      	ldr	r3, [pc, #580]	; (8002f48 <autoApproach+0x2d0>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4991      	ldr	r1, [pc, #580]	; (8002f4c <autoApproach+0x2d4>)
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	333d      	adds	r3, #61	; 0x3d
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d073      	beq.n	8002e02 <autoApproach+0x18a>
			if(expLoad){
 8002d1a:	4b8e      	ldr	r3, [pc, #568]	; (8002f54 <autoApproach+0x2dc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01f      	beq.n	8002d62 <autoApproach+0xea>
				holdPos=expin[expcount].removePer*expin[expcount].depth/100;
 8002d22:	4b89      	ldr	r3, [pc, #548]	; (8002f48 <autoApproach+0x2d0>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4989      	ldr	r1, [pc, #548]	; (8002f4c <autoApproach+0x2d4>)
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3344      	adds	r3, #68	; 0x44
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	4b83      	ldr	r3, [pc, #524]	; (8002f48 <autoApproach+0x2d0>)
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4983      	ldr	r1, [pc, #524]	; (8002f4c <autoApproach+0x2d4>)
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	330c      	adds	r3, #12
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	fb03 f300 	mul.w	r3, r3, r0
 8002d50:	4a81      	ldr	r2, [pc, #516]	; (8002f58 <autoApproach+0x2e0>)
 8002d52:	fb82 1203 	smull	r1, r2, r2, r3
 8002d56:	1152      	asrs	r2, r2, #5
 8002d58:	17db      	asrs	r3, r3, #31
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	4a7f      	ldr	r2, [pc, #508]	; (8002f5c <autoApproach+0x2e4>)
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	e036      	b.n	8002dd0 <autoApproach+0x158>
			}
			else if(loadcon){
 8002d62:	4b7f      	ldr	r3, [pc, #508]	; (8002f60 <autoApproach+0x2e8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d017      	beq.n	8002d9a <autoApproach+0x122>
				holdPos=expin[expcount].removePer*loadnow/100;
 8002d6a:	4b77      	ldr	r3, [pc, #476]	; (8002f48 <autoApproach+0x2d0>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4977      	ldr	r1, [pc, #476]	; (8002f4c <autoApproach+0x2d4>)
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	440b      	add	r3, r1
 8002d7a:	3344      	adds	r3, #68	; 0x44
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4b6b      	ldr	r3, [pc, #428]	; (8002f30 <autoApproach+0x2b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	fb03 f302 	mul.w	r3, r3, r2
 8002d88:	4a73      	ldr	r2, [pc, #460]	; (8002f58 <autoApproach+0x2e0>)
 8002d8a:	fb82 1203 	smull	r1, r2, r2, r3
 8002d8e:	1152      	asrs	r2, r2, #5
 8002d90:	17db      	asrs	r3, r3, #31
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	4a71      	ldr	r2, [pc, #452]	; (8002f5c <autoApproach+0x2e4>)
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	e01a      	b.n	8002dd0 <autoApproach+0x158>
			}
			else{
				holdPos=voltnow+(100-expin[expcount].removePer)*initialPos/100;
 8002d9a:	4b6b      	ldr	r3, [pc, #428]	; (8002f48 <autoApproach+0x2d0>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	496b      	ldr	r1, [pc, #428]	; (8002f4c <autoApproach+0x2d4>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	3344      	adds	r3, #68	; 0x44
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002db2:	4a6c      	ldr	r2, [pc, #432]	; (8002f64 <autoApproach+0x2ec>)
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a67      	ldr	r2, [pc, #412]	; (8002f58 <autoApproach+0x2e0>)
 8002dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8002dc0:	1152      	asrs	r2, r2, #5
 8002dc2:	17db      	asrs	r3, r3, #31
 8002dc4:	1ad2      	subs	r2, r2, r3
 8002dc6:	4b58      	ldr	r3, [pc, #352]	; (8002f28 <autoApproach+0x2b0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	4a63      	ldr	r2, [pc, #396]	; (8002f5c <autoApproach+0x2e4>)
 8002dce:	6013      	str	r3, [r2, #0]
			}
			holdRetDur=expin[expcount].removeHold/200;
 8002dd0:	4b5d      	ldr	r3, [pc, #372]	; (8002f48 <autoApproach+0x2d0>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	495d      	ldr	r1, [pc, #372]	; (8002f4c <autoApproach+0x2d4>)
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	440b      	add	r3, r1
 8002de0:	3340      	adds	r3, #64	; 0x40
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a5c      	ldr	r2, [pc, #368]	; (8002f58 <autoApproach+0x2e0>)
 8002de6:	fb82 1203 	smull	r1, r2, r2, r3
 8002dea:	1192      	asrs	r2, r2, #6
 8002dec:	17db      	asrs	r3, r3, #31
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	4a5d      	ldr	r2, [pc, #372]	; (8002f68 <autoApproach+0x2f0>)
 8002df2:	6013      	str	r3, [r2, #0]
			holdRet=0;
 8002df4:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <autoApproach+0x2f4>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]
			dxy=2;
 8002dfa:	4b5d      	ldr	r3, [pc, #372]	; (8002f70 <autoApproach+0x2f8>)
 8002dfc:	2202      	movs	r2, #2
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	e005      	b.n	8002e0e <autoApproach+0x196>
		}
		else{
			dxy=1;
 8002e02:	4b5b      	ldr	r3, [pc, #364]	; (8002f70 <autoApproach+0x2f8>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
			holdRet=2;
 8002e08:	4b58      	ldr	r3, [pc, #352]	; (8002f6c <autoApproach+0x2f4>)
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	601a      	str	r2, [r3, #0]
		}
		appOrret=0;
 8002e0e:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <autoApproach+0x2fc>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
		isAutoApproach=3;
 8002e14:	4b58      	ldr	r3, [pc, #352]	; (8002f78 <autoApproach+0x300>)
 8002e16:	2203      	movs	r2, #3
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e16a      	b.n	80030f2 <autoApproach+0x47a>
	}
	else if(typ!=3){//directly enter after any retract step; after xy move function used with typ=3 state
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b03      	cmp	r3, #3
 8002e20:	f000 8125 	beq.w	800306e <autoApproach+0x3f6>
		if(expin[expcount].xpst!=0){
 8002e24:	4b48      	ldr	r3, [pc, #288]	; (8002f48 <autoApproach+0x2d0>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4948      	ldr	r1, [pc, #288]	; (8002f4c <autoApproach+0x2d4>)
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	440b      	add	r3, r1
 8002e34:	3304      	adds	r3, #4
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d043      	beq.n	8002ec4 <autoApproach+0x24c>
			if(expin[expcount].xpst>6){
 8002e3c:	4b42      	ldr	r3, [pc, #264]	; (8002f48 <autoApproach+0x2d0>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4942      	ldr	r1, [pc, #264]	; (8002f4c <autoApproach+0x2d4>)
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b06      	cmp	r3, #6
 8002e52:	dd15      	ble.n	8002e80 <autoApproach+0x208>
				isAutoApproach=2;
 8002e54:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <autoApproach+0x300>)
 8002e56:	2202      	movs	r2, #2
 8002e58:	701a      	strb	r2, [r3, #0]
				moveXY(0, 0, 1, abs(expin[expcount].xpst));//should not be 0-6!!!
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <autoApproach+0x2d0>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	493b      	ldr	r1, [pc, #236]	; (8002f4c <autoApproach+0x2d4>)
 8002e60:	4613      	mov	r3, r2
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bfb8      	it	lt
 8002e72:	425b      	neglt	r3, r3
 8002e74:	2201      	movs	r2, #1
 8002e76:	2100      	movs	r1, #0
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f000 f9eb 	bl	8003254 <moveXY>
 8002e7e:	e021      	b.n	8002ec4 <autoApproach+0x24c>
			}
			else if(expin[expcount].xpst<-6){
 8002e80:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <autoApproach+0x2d0>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4931      	ldr	r1, [pc, #196]	; (8002f4c <autoApproach+0x2d4>)
 8002e86:	4613      	mov	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	440b      	add	r3, r1
 8002e90:	3304      	adds	r3, #4
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f113 0f06 	cmn.w	r3, #6
 8002e98:	da14      	bge.n	8002ec4 <autoApproach+0x24c>
				isAutoApproach=2;
 8002e9a:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <autoApproach+0x300>)
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	701a      	strb	r2, [r3, #0]
				moveXY(0, 1, 1, abs(expin[expcount].xpst));
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <autoApproach+0x2d0>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4929      	ldr	r1, [pc, #164]	; (8002f4c <autoApproach+0x2d4>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bfb8      	it	lt
 8002eb8:	425b      	neglt	r3, r3
 8002eba:	2201      	movs	r2, #1
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f000 f9c8 	bl	8003254 <moveXY>
			}
		}
		if(expin[expcount].ypst!=0){
 8002ec4:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <autoApproach+0x2d0>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4920      	ldr	r1, [pc, #128]	; (8002f4c <autoApproach+0x2d4>)
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3308      	adds	r3, #8
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d071      	beq.n	8002fc0 <autoApproach+0x348>
			if(expin[expcount].ypst>6){
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <autoApproach+0x2d0>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	491a      	ldr	r1, [pc, #104]	; (8002f4c <autoApproach+0x2d4>)
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	440b      	add	r3, r1
 8002eec:	3308      	adds	r3, #8
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b06      	cmp	r3, #6
 8002ef2:	dd43      	ble.n	8002f7c <autoApproach+0x304>
				isAutoApproach=2;
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <autoApproach+0x300>)
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	701a      	strb	r2, [r3, #0]
				moveXY(1, 0, 1, abs(expin[expcount].ypst));
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <autoApproach+0x2d0>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4913      	ldr	r1, [pc, #76]	; (8002f4c <autoApproach+0x2d4>)
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	440b      	add	r3, r1
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bfb8      	it	lt
 8002f12:	425b      	neglt	r3, r3
 8002f14:	2201      	movs	r2, #1
 8002f16:	2100      	movs	r1, #0
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f000 f99b 	bl	8003254 <moveXY>
 8002f1e:	e04f      	b.n	8002fc0 <autoApproach+0x348>
 8002f20:	9999999a 	.word	0x9999999a
 8002f24:	3fc99999 	.word	0x3fc99999
 8002f28:	20000000 	.word	0x20000000
 8002f2c:	20000384 	.word	0x20000384
 8002f30:	20000310 	.word	0x20000310
 8002f34:	20001858 	.word	0x20001858
 8002f38:	20000358 	.word	0x20000358
 8002f3c:	00030d40 	.word	0x00030d40
 8002f40:	20006bf8 	.word	0x20006bf8
 8002f44:	20006964 	.word	0x20006964
 8002f48:	2000001c 	.word	0x2000001c
 8002f4c:	20004d44 	.word	0x20004d44
 8002f50:	20000054 	.word	0x20000054
 8002f54:	20000308 	.word	0x20000308
 8002f58:	51eb851f 	.word	0x51eb851f
 8002f5c:	20000380 	.word	0x20000380
 8002f60:	20001824 	.word	0x20001824
 8002f64:	2000004c 	.word	0x2000004c
 8002f68:	2000188c 	.word	0x2000188c
 8002f6c:	20001884 	.word	0x20001884
 8002f70:	20000390 	.word	0x20000390
 8002f74:	20000388 	.word	0x20000388
 8002f78:	200002d8 	.word	0x200002d8
			}
			else if(expin[expcount].ypst<-6){
 8002f7c:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <autoApproach+0x484>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	495f      	ldr	r1, [pc, #380]	; (8003100 <autoApproach+0x488>)
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f113 0f06 	cmn.w	r3, #6
 8002f94:	da14      	bge.n	8002fc0 <autoApproach+0x348>
				isAutoApproach=2;
 8002f96:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <autoApproach+0x48c>)
 8002f98:	2202      	movs	r2, #2
 8002f9a:	701a      	strb	r2, [r3, #0]
				moveXY(1, 1, 1, abs(expin[expcount].ypst));
 8002f9c:	4b57      	ldr	r3, [pc, #348]	; (80030fc <autoApproach+0x484>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4957      	ldr	r1, [pc, #348]	; (8003100 <autoApproach+0x488>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	3308      	adds	r3, #8
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bfb8      	it	lt
 8002fb4:	425b      	neglt	r3, r3
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	2101      	movs	r1, #1
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f000 f94a 	bl	8003254 <moveXY>
			}
		}
		if(expin[expcount].xpst==0 && expin[expcount].ypst==0 && expcount!=0){// after retract; without any xy movement
 8002fc0:	4b4e      	ldr	r3, [pc, #312]	; (80030fc <autoApproach+0x484>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	494e      	ldr	r1, [pc, #312]	; (8003100 <autoApproach+0x488>)
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4413      	add	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	440b      	add	r3, r1
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d137      	bne.n	8003048 <autoApproach+0x3d0>
 8002fd8:	4b48      	ldr	r3, [pc, #288]	; (80030fc <autoApproach+0x484>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4948      	ldr	r1, [pc, #288]	; (8003100 <autoApproach+0x488>)
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	440b      	add	r3, r1
 8002fe8:	3308      	adds	r3, #8
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d12b      	bne.n	8003048 <autoApproach+0x3d0>
 8002ff0:	4b42      	ldr	r3, [pc, #264]	; (80030fc <autoApproach+0x484>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d027      	beq.n	8003048 <autoApproach+0x3d0>
			if(app!=0||retracting==2){
 8002ff8:	4b43      	ldr	r3, [pc, #268]	; (8003108 <autoApproach+0x490>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d103      	bne.n	8003008 <autoApproach+0x390>
 8003000:	4b42      	ldr	r3, [pc, #264]	; (800310c <autoApproach+0x494>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b02      	cmp	r3, #2
 8003006:	d10f      	bne.n	8003028 <autoApproach+0x3b0>
				SendPc("Retract_Complete\0", 5, 4);
 8003008:	2204      	movs	r2, #4
 800300a:	2105      	movs	r1, #5
 800300c:	4840      	ldr	r0, [pc, #256]	; (8003110 <autoApproach+0x498>)
 800300e:	f002 f959 	bl	80052c4 <SendPc>
				uart2say=1;
 8003012:	4b40      	ldr	r3, [pc, #256]	; (8003114 <autoApproach+0x49c>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12, 100000);
 8003018:	493f      	ldr	r1, [pc, #252]	; (8003118 <autoApproach+0x4a0>)
 800301a:	4840      	ldr	r0, [pc, #256]	; (800311c <autoApproach+0x4a4>)
 800301c:	f008 f8fc 	bl	800b218 <TimeSet>
		    	appOrret=1;
 8003020:	4b3f      	ldr	r3, [pc, #252]	; (8003120 <autoApproach+0x4a8>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]
			if(app!=0||retracting==2){
 8003026:	e064      	b.n	80030f2 <autoApproach+0x47a>
			}
			else{
				isAutoApproach=0;
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <autoApproach+0x48c>)
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
				SendPc("Retract_Complete\0", 5, 4);
 800302e:	2204      	movs	r2, #4
 8003030:	2105      	movs	r1, #5
 8003032:	4837      	ldr	r0, [pc, #220]	; (8003110 <autoApproach+0x498>)
 8003034:	f002 f946 	bl	80052c4 <SendPc>
				uart2say=1;
 8003038:	4b36      	ldr	r3, [pc, #216]	; (8003114 <autoApproach+0x49c>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12, 100000);;
 800303e:	4936      	ldr	r1, [pc, #216]	; (8003118 <autoApproach+0x4a0>)
 8003040:	4836      	ldr	r0, [pc, #216]	; (800311c <autoApproach+0x4a4>)
 8003042:	f008 f8e9 	bl	800b218 <TimeSet>
			if(app!=0||retracting==2){
 8003046:	e054      	b.n	80030f2 <autoApproach+0x47a>
			}
		}
		else if(expcount==0 && app!=0){//just for first step flow does not wait for REFIN message!
 8003048:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <autoApproach+0x484>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d150      	bne.n	80030f2 <autoApproach+0x47a>
 8003050:	4b2d      	ldr	r3, [pc, #180]	; (8003108 <autoApproach+0x490>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d04c      	beq.n	80030f2 <autoApproach+0x47a>
			TimeSet(&htim13, 200000);
 8003058:	4932      	ldr	r1, [pc, #200]	; (8003124 <autoApproach+0x4ac>)
 800305a:	4833      	ldr	r0, [pc, #204]	; (8003128 <autoApproach+0x4b0>)
 800305c:	f008 f8dc 	bl	800b218 <TimeSet>
			appOrret=1;
 8003060:	4b2f      	ldr	r3, [pc, #188]	; (8003120 <autoApproach+0x4a8>)
 8003062:	2201      	movs	r2, #1
 8003064:	601a      	str	r2, [r3, #0]
			isAutoApproach=3;
 8003066:	4b27      	ldr	r3, [pc, #156]	; (8003104 <autoApproach+0x48c>)
 8003068:	2203      	movs	r2, #3
 800306a:	701a      	strb	r2, [r3, #0]
			initialMotor=motpos;
			approaching=0;
		}
	}
	//app || retracting || int dir ||---sendexp--eqstep--osc--automot-:-
}
 800306c:	e041      	b.n	80030f2 <autoApproach+0x47a>
	else if(app!=0){// after retract + xy movement send completion of retract message
 800306e:	4b26      	ldr	r3, [pc, #152]	; (8003108 <autoApproach+0x490>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d017      	beq.n	80030a6 <autoApproach+0x42e>
		TimeSet(&htim13, 200000);
 8003076:	492b      	ldr	r1, [pc, #172]	; (8003124 <autoApproach+0x4ac>)
 8003078:	482b      	ldr	r0, [pc, #172]	; (8003128 <autoApproach+0x4b0>)
 800307a:	f008 f8cd 	bl	800b218 <TimeSet>
		appOrret=1;
 800307e:	4b28      	ldr	r3, [pc, #160]	; (8003120 <autoApproach+0x4a8>)
 8003080:	2201      	movs	r2, #1
 8003082:	601a      	str	r2, [r3, #0]
		if(expcount!=0){
 8003084:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <autoApproach+0x484>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d032      	beq.n	80030f2 <autoApproach+0x47a>
			SendPc("Retract_Complete\0", 5, 4);
 800308c:	2204      	movs	r2, #4
 800308e:	2105      	movs	r1, #5
 8003090:	481f      	ldr	r0, [pc, #124]	; (8003110 <autoApproach+0x498>)
 8003092:	f002 f917 	bl	80052c4 <SendPc>
			uart2say=1;
 8003096:	4b1f      	ldr	r3, [pc, #124]	; (8003114 <autoApproach+0x49c>)
 8003098:	2201      	movs	r2, #1
 800309a:	601a      	str	r2, [r3, #0]
			TimeSet(&htim12, 100000);
 800309c:	491e      	ldr	r1, [pc, #120]	; (8003118 <autoApproach+0x4a0>)
 800309e:	481f      	ldr	r0, [pc, #124]	; (800311c <autoApproach+0x4a4>)
 80030a0:	f008 f8ba 	bl	800b218 <TimeSet>
}
 80030a4:	e025      	b.n	80030f2 <autoApproach+0x47a>
		if(expcount!=0){
 80030a6:	4b15      	ldr	r3, [pc, #84]	; (80030fc <autoApproach+0x484>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00c      	beq.n	80030c8 <autoApproach+0x450>
			SendPc("Retract_Complete\0", 5, 4);
 80030ae:	2204      	movs	r2, #4
 80030b0:	2105      	movs	r1, #5
 80030b2:	4817      	ldr	r0, [pc, #92]	; (8003110 <autoApproach+0x498>)
 80030b4:	f002 f906 	bl	80052c4 <SendPc>
			uart2say=1;
 80030b8:	4b16      	ldr	r3, [pc, #88]	; (8003114 <autoApproach+0x49c>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	601a      	str	r2, [r3, #0]
			TimeSet(&htim12, 100000);
 80030be:	4916      	ldr	r1, [pc, #88]	; (8003118 <autoApproach+0x4a0>)
 80030c0:	4816      	ldr	r0, [pc, #88]	; (800311c <autoApproach+0x4a4>)
 80030c2:	f008 f8a9 	bl	800b218 <TimeSet>
}
 80030c6:	e014      	b.n	80030f2 <autoApproach+0x47a>
			isAutoApproach=0;
 80030c8:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <autoApproach+0x48c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim10);
 80030ce:	4817      	ldr	r0, [pc, #92]	; (800312c <autoApproach+0x4b4>)
 80030d0:	f00b ff25 	bl	800ef1e <HAL_TIM_Base_Start_IT>
			sendexp=1;
 80030d4:	4b16      	ldr	r3, [pc, #88]	; (8003130 <autoApproach+0x4b8>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
			initialPos=voltnow;
 80030da:	4b16      	ldr	r3, [pc, #88]	; (8003134 <autoApproach+0x4bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a16      	ldr	r2, [pc, #88]	; (8003138 <autoApproach+0x4c0>)
 80030e0:	6013      	str	r3, [r2, #0]
			initialMotor=motpos;
 80030e2:	4b16      	ldr	r3, [pc, #88]	; (800313c <autoApproach+0x4c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a16      	ldr	r2, [pc, #88]	; (8003140 <autoApproach+0x4c8>)
 80030e8:	6013      	str	r3, [r2, #0]
			approaching=0;
 80030ea:	4b16      	ldr	r3, [pc, #88]	; (8003144 <autoApproach+0x4cc>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
}
 80030f0:	e7ff      	b.n	80030f2 <autoApproach+0x47a>
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd90      	pop	{r4, r7, pc}
 80030fa:	bf00      	nop
 80030fc:	2000001c 	.word	0x2000001c
 8003100:	20004d44 	.word	0x20004d44
 8003104:	200002d8 	.word	0x200002d8
 8003108:	20006964 	.word	0x20006964
 800310c:	20000358 	.word	0x20000358
 8003110:	08011e0c 	.word	0x08011e0c
 8003114:	200018b0 	.word	0x200018b0
 8003118:	000186a0 	.word	0x000186a0
 800311c:	20006ec8 	.word	0x20006ec8
 8003120:	20000388 	.word	0x20000388
 8003124:	00030d40 	.word	0x00030d40
 8003128:	20006bf8 	.word	0x20006bf8
 800312c:	20006af8 	.word	0x20006af8
 8003130:	20000010 	.word	0x20000010
 8003134:	20000000 	.word	0x20000000
 8003138:	2000004c 	.word	0x2000004c
 800313c:	20000360 	.word	0x20000360
 8003140:	20001894 	.word	0x20001894
 8003144:	20001898 	.word	0x20001898

08003148 <Osc>:
void Osc(long amp, long period, long dur, int type){
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
	if(type==1){
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d14d      	bne.n	80031f8 <Osc+0xb0>
		if(oscdown==0){
 800315c:	4b33      	ldr	r3, [pc, #204]	; (800322c <Osc+0xe4>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d11b      	bne.n	800319c <Osc+0x54>
			firstpt=voltnow;
 8003164:	4b32      	ldr	r3, [pc, #200]	; (8003230 <Osc+0xe8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a32      	ldr	r2, [pc, #200]	; (8003234 <Osc+0xec>)
 800316a:	6013      	str	r3, [r2, #0]
			ftos(firstpt+amp,hivolt);
 800316c:	4b31      	ldr	r3, [pc, #196]	; (8003234 <Osc+0xec>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	4413      	add	r3, r2
 8003174:	4930      	ldr	r1, [pc, #192]	; (8003238 <Osc+0xf0>)
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fc1e 	bl	80019b8 <ftos>
			ftos(firstpt-amp,lovolt);
 800317c:	4b2d      	ldr	r3, [pc, #180]	; (8003234 <Osc+0xec>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	492d      	ldr	r1, [pc, #180]	; (800323c <Osc+0xf4>)
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe fc16 	bl	80019b8 <ftos>
			numosc=2*dur/period;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	005a      	lsls	r2, r3, #1
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	fb92 f3f3 	sdiv	r3, r2, r3
 8003196:	4a2a      	ldr	r2, [pc, #168]	; (8003240 <Osc+0xf8>)
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e019      	b.n	80031d0 <Osc+0x88>
		}
		else{
			firstpt=voltnow;
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <Osc+0xe8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a24      	ldr	r2, [pc, #144]	; (8003234 <Osc+0xec>)
 80031a2:	6013      	str	r3, [r2, #0]
			ftos(firstpt,hivolt);
 80031a4:	4b23      	ldr	r3, [pc, #140]	; (8003234 <Osc+0xec>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4923      	ldr	r1, [pc, #140]	; (8003238 <Osc+0xf0>)
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe fc04 	bl	80019b8 <ftos>
			ftos(firstpt-amp*2,lovolt);
 80031b0:	4b20      	ldr	r3, [pc, #128]	; (8003234 <Osc+0xec>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	4920      	ldr	r1, [pc, #128]	; (800323c <Osc+0xf4>)
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe fbfb 	bl	80019b8 <ftos>
			numosc=2*dur/period;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	005a      	lsls	r2, r3, #1
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80031cc:	4a1c      	ldr	r2, [pc, #112]	; (8003240 <Osc+0xf8>)
 80031ce:	6013      	str	r3, [r2, #0]
		}
		sqrmod=23*period/1000;//normalde 10* ancak haberleşme zaman farkı 50 ms için önleme yapıyoruz
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4613      	mov	r3, r2
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	4413      	add	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	4a19      	ldr	r2, [pc, #100]	; (8003244 <Osc+0xfc>)
 80031de:	fb82 1203 	smull	r1, r2, r2, r3
 80031e2:	1192      	asrs	r2, r2, #6
 80031e4:	17db      	asrs	r3, r3, #31
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	4a17      	ldr	r2, [pc, #92]	; (8003248 <Osc+0x100>)
 80031ea:	6013      	str	r3, [r2, #0]
		TimeSet(&htim10, 20000);//
 80031ec:	f644 6120 	movw	r1, #20000	; 0x4e20
 80031f0:	4816      	ldr	r0, [pc, #88]	; (800324c <Osc+0x104>)
 80031f2:	f008 f811 	bl	800b218 <TimeSet>
	}
	else if(type==2){
		numosc=dur/period;
		Cal(2*amp,period/200,0);
	}
}
 80031f6:	e015      	b.n	8003224 <Osc+0xdc>
	else if(type==2){
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d112      	bne.n	8003224 <Osc+0xdc>
		numosc=dur/period;
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	fb92 f3f3 	sdiv	r3, r2, r3
 8003206:	4a0e      	ldr	r2, [pc, #56]	; (8003240 <Osc+0xf8>)
 8003208:	6013      	str	r3, [r2, #0]
		Cal(2*amp,period/200,0);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	0058      	lsls	r0, r3, #1
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4a0f      	ldr	r2, [pc, #60]	; (8003250 <Osc+0x108>)
 8003212:	fb82 1203 	smull	r1, r2, r2, r3
 8003216:	1192      	asrs	r2, r2, #6
 8003218:	17db      	asrs	r3, r3, #31
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2200      	movs	r2, #0
 800321e:	4619      	mov	r1, r3
 8003220:	f7ff f902 	bl	8002428 <Cal>
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	200002dc 	.word	0x200002dc
 8003230:	20000000 	.word	0x20000000
 8003234:	20000018 	.word	0x20000018
 8003238:	20000020 	.word	0x20000020
 800323c:	2000002c 	.word	0x2000002c
 8003240:	20000318 	.word	0x20000318
 8003244:	10624dd3 	.word	0x10624dd3
 8003248:	20000328 	.word	0x20000328
 800324c:	20006af8 	.word	0x20006af8
 8003250:	51eb851f 	.word	0x51eb851f

08003254 <moveXY>:

//Movement Control Functions:

void moveXY(int direk, int delta, int speed, int stepsize){
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin) ;
	int time=1;
 8003262:	2301      	movs	r3, #1
 8003264:	617b      	str	r3, [r7, #20]
	switch(speed){
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3b01      	subs	r3, #1
 800326a:	2b04      	cmp	r3, #4
 800326c:	d83f      	bhi.n	80032ee <moveXY+0x9a>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <moveXY+0x20>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	08003289 	.word	0x08003289
 8003278:	0800329b 	.word	0x0800329b
 800327c:	080032af 	.word	0x080032af
 8003280:	080032c3 	.word	0x080032c3
 8003284:	080032d9 	.word	0x080032d9
	case 1:
		if(direk){
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <moveXY+0x40>
			time=200;
 800328e:	23c8      	movs	r3, #200	; 0xc8
 8003290:	617b      	str	r3, [r7, #20]
		}
		else{
			time=20;
		}
		break;
 8003292:	e02f      	b.n	80032f4 <moveXY+0xa0>
			time=20;
 8003294:	2314      	movs	r3, #20
 8003296:	617b      	str	r3, [r7, #20]
		break;
 8003298:	e02c      	b.n	80032f4 <moveXY+0xa0>
	case 2:
		if(direk){
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <moveXY+0x54>
			time=500;
 80032a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80032a4:	617b      	str	r3, [r7, #20]
		}
		else{
			time=50;
		}
		break;
 80032a6:	e025      	b.n	80032f4 <moveXY+0xa0>
			time=50;
 80032a8:	2332      	movs	r3, #50	; 0x32
 80032aa:	617b      	str	r3, [r7, #20]
		break;
 80032ac:	e022      	b.n	80032f4 <moveXY+0xa0>
	case 3:
		if(direk){
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <moveXY+0x68>
			time=1000;
 80032b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032b8:	617b      	str	r3, [r7, #20]
		}
		else{
			time=100;
		}
		break;
 80032ba:	e01b      	b.n	80032f4 <moveXY+0xa0>
			time=100;
 80032bc:	2364      	movs	r3, #100	; 0x64
 80032be:	617b      	str	r3, [r7, #20]
		break;
 80032c0:	e018      	b.n	80032f4 <moveXY+0xa0>
	case 4:
		if(direk){
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <moveXY+0x7c>
			time=5000;
 80032c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80032cc:	617b      	str	r3, [r7, #20]
		}
		else{
			time=500;
		}
		break;
 80032ce:	e011      	b.n	80032f4 <moveXY+0xa0>
			time=500;
 80032d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80032d4:	617b      	str	r3, [r7, #20]
		break;
 80032d6:	e00d      	b.n	80032f4 <moveXY+0xa0>
	case 5:
		if(direk){
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <moveXY+0x92>
			time=10000;
 80032de:	f242 7310 	movw	r3, #10000	; 0x2710
 80032e2:	617b      	str	r3, [r7, #20]
		}
		else{
			time=1000;
		}
		break;
 80032e4:	e006      	b.n	80032f4 <moveXY+0xa0>
			time=1000;
 80032e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ea:	617b      	str	r3, [r7, #20]
		break;
 80032ec:	e002      	b.n	80032f4 <moveXY+0xa0>
	default:
		time=speed;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	617b      	str	r3, [r7, #20]
		break;
 80032f2:	bf00      	nop
	}
	switch(stepsize){
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d844      	bhi.n	8003386 <moveXY+0x132>
 80032fc:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <moveXY+0xb0>)
 80032fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003302:	bf00      	nop
 8003304:	08003319 	.word	0x08003319
 8003308:	0800332f 	.word	0x0800332f
 800330c:	08003345 	.word	0x08003345
 8003310:	0800335b 	.word	0x0800335b
 8003314:	08003371 	.word	0x08003371
	case 1:
		if(direk){
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <moveXY+0xd2>
			xsteps=2;
 800331e:	4b57      	ldr	r3, [pc, #348]	; (800347c <moveXY+0x228>)
 8003320:	2202      	movs	r2, #2
 8003322:	601a      	str	r2, [r3, #0]
		}
		else{
			ysteps=2;
		}
		break;
 8003324:	e044      	b.n	80033b0 <moveXY+0x15c>
			ysteps=2;
 8003326:	4b56      	ldr	r3, [pc, #344]	; (8003480 <moveXY+0x22c>)
 8003328:	2202      	movs	r2, #2
 800332a:	601a      	str	r2, [r3, #0]
		break;
 800332c:	e040      	b.n	80033b0 <moveXY+0x15c>
	case 2:
		if(direk){
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <moveXY+0xe8>
			xsteps=10;
 8003334:	4b51      	ldr	r3, [pc, #324]	; (800347c <moveXY+0x228>)
 8003336:	220a      	movs	r2, #10
 8003338:	601a      	str	r2, [r3, #0]
		}
		else{
			ysteps=10;
		}
		break;
 800333a:	e039      	b.n	80033b0 <moveXY+0x15c>
			ysteps=10;
 800333c:	4b50      	ldr	r3, [pc, #320]	; (8003480 <moveXY+0x22c>)
 800333e:	220a      	movs	r2, #10
 8003340:	601a      	str	r2, [r3, #0]
		break;
 8003342:	e035      	b.n	80033b0 <moveXY+0x15c>
	case 3:
		if(direk){
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <moveXY+0xfe>
			xsteps=20;
 800334a:	4b4c      	ldr	r3, [pc, #304]	; (800347c <moveXY+0x228>)
 800334c:	2214      	movs	r2, #20
 800334e:	601a      	str	r2, [r3, #0]
		}
		else{
			ysteps=20;
		}
		break;
 8003350:	e02e      	b.n	80033b0 <moveXY+0x15c>
			ysteps=20;
 8003352:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <moveXY+0x22c>)
 8003354:	2214      	movs	r2, #20
 8003356:	601a      	str	r2, [r3, #0]
		break;
 8003358:	e02a      	b.n	80033b0 <moveXY+0x15c>
	case 4:
		if(direk){
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <moveXY+0x114>
			xsteps=50;
 8003360:	4b46      	ldr	r3, [pc, #280]	; (800347c <moveXY+0x228>)
 8003362:	2232      	movs	r2, #50	; 0x32
 8003364:	601a      	str	r2, [r3, #0]
		}
		else{
			ysteps=50;
		}
		break;
 8003366:	e023      	b.n	80033b0 <moveXY+0x15c>
			ysteps=50;
 8003368:	4b45      	ldr	r3, [pc, #276]	; (8003480 <moveXY+0x22c>)
 800336a:	2232      	movs	r2, #50	; 0x32
 800336c:	601a      	str	r2, [r3, #0]
		break;
 800336e:	e01f      	b.n	80033b0 <moveXY+0x15c>
	case 5:
		if(direk){
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <moveXY+0x12a>
			xsteps=100;
 8003376:	4b41      	ldr	r3, [pc, #260]	; (800347c <moveXY+0x228>)
 8003378:	2264      	movs	r2, #100	; 0x64
 800337a:	601a      	str	r2, [r3, #0]
		}
		else{
			ysteps=100;
		}
		break;
 800337c:	e018      	b.n	80033b0 <moveXY+0x15c>
			ysteps=100;
 800337e:	4b40      	ldr	r3, [pc, #256]	; (8003480 <moveXY+0x22c>)
 8003380:	2264      	movs	r2, #100	; 0x64
 8003382:	601a      	str	r2, [r3, #0]
		break;
 8003384:	e014      	b.n	80033b0 <moveXY+0x15c>
	default:
		if(direk){
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <moveXY+0x14a>
			xsteps=stepsize;
 800338c:	4a3b      	ldr	r2, [pc, #236]	; (800347c <moveXY+0x228>)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6013      	str	r3, [r2, #0]
			encodMove=encodMove+1;
 8003392:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <moveXY+0x230>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3301      	adds	r3, #1
 8003398:	4a3a      	ldr	r2, [pc, #232]	; (8003484 <moveXY+0x230>)
 800339a:	6013      	str	r3, [r2, #0]
		}
		else{
			ysteps=stepsize;
			encodMove=encodMove+2;
		}
		break;
 800339c:	e007      	b.n	80033ae <moveXY+0x15a>
			ysteps=stepsize;
 800339e:	4a38      	ldr	r2, [pc, #224]	; (8003480 <moveXY+0x22c>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	6013      	str	r3, [r2, #0]
			encodMove=encodMove+2;
 80033a4:	4b37      	ldr	r3, [pc, #220]	; (8003484 <moveXY+0x230>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3302      	adds	r3, #2
 80033aa:	4a36      	ldr	r2, [pc, #216]	; (8003484 <moveXY+0x230>)
 80033ac:	6013      	str	r3, [r2, #0]
		break;
 80033ae:	bf00      	nop
	}
	if(direk==1){//Xdir
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d12e      	bne.n	8003414 <moveXY+0x1c0>
		TIM8->CNT=32767;
 80033b6:	4b34      	ldr	r3, [pc, #208]	; (8003488 <moveXY+0x234>)
 80033b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24
		if(delta==0){//+X
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d113      	bne.n	80033ec <moveXY+0x198>
			joyint2 = joyint2+12;
 80033c4:	4b31      	ldr	r3, [pc, #196]	; (800348c <moveXY+0x238>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	4a30      	ldr	r2, [pc, #192]	; (800348c <moveXY+0x238>)
 80033cc:	6013      	str	r3, [r2, #0]
			if(movxy==0){
 80033ce:	4b30      	ldr	r3, [pc, #192]	; (8003490 <moveXY+0x23c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <moveXY+0x190>
				movxy=1;
 80033d6:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <moveXY+0x23c>)
 80033d8:	2201      	movs	r2, #1
 80033da:	601a      	str	r2, [r3, #0]
				TimeSet(&htim13, time);
 80033dc:	6979      	ldr	r1, [r7, #20]
 80033de:	482d      	ldr	r0, [pc, #180]	; (8003494 <moveXY+0x240>)
 80033e0:	f007 ff1a 	bl	800b218 <TimeSet>
			}
			xmov=1;
 80033e4:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <moveXY+0x244>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
				TimeSet(&htim13, time);
			}
			ymov=3;
		}
	}
}
 80033ea:	e042      	b.n	8003472 <moveXY+0x21e>
			joyint2 = joyint2+6;
 80033ec:	4b27      	ldr	r3, [pc, #156]	; (800348c <moveXY+0x238>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3306      	adds	r3, #6
 80033f2:	4a26      	ldr	r2, [pc, #152]	; (800348c <moveXY+0x238>)
 80033f4:	6013      	str	r3, [r2, #0]
			if(movxy==0){
 80033f6:	4b26      	ldr	r3, [pc, #152]	; (8003490 <moveXY+0x23c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <moveXY+0x1b8>
				movxy=1;
 80033fe:	4b24      	ldr	r3, [pc, #144]	; (8003490 <moveXY+0x23c>)
 8003400:	2201      	movs	r2, #1
 8003402:	601a      	str	r2, [r3, #0]
				TimeSet(&htim13, time);
 8003404:	6979      	ldr	r1, [r7, #20]
 8003406:	4823      	ldr	r0, [pc, #140]	; (8003494 <moveXY+0x240>)
 8003408:	f007 ff06 	bl	800b218 <TimeSet>
			xmov=3;
 800340c:	4b22      	ldr	r3, [pc, #136]	; (8003498 <moveXY+0x244>)
 800340e:	2203      	movs	r2, #3
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	e02e      	b.n	8003472 <moveXY+0x21e>
		TIM2->CNT=32767;
 8003414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003418:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800341c:	625a      	str	r2, [r3, #36]	; 0x24
		if(delta==0){//+Y
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d113      	bne.n	800344c <moveXY+0x1f8>
			joyint2 = joyint2+2;
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <moveXY+0x238>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3302      	adds	r3, #2
 800342a:	4a18      	ldr	r2, [pc, #96]	; (800348c <moveXY+0x238>)
 800342c:	6013      	str	r3, [r2, #0]
			if(movxy==0){
 800342e:	4b18      	ldr	r3, [pc, #96]	; (8003490 <moveXY+0x23c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <moveXY+0x1f0>
				movxy=1;
 8003436:	4b16      	ldr	r3, [pc, #88]	; (8003490 <moveXY+0x23c>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]
				TimeSet(&htim13, time);
 800343c:	6979      	ldr	r1, [r7, #20]
 800343e:	4815      	ldr	r0, [pc, #84]	; (8003494 <moveXY+0x240>)
 8003440:	f007 feea 	bl	800b218 <TimeSet>
			ymov=1;
 8003444:	4b15      	ldr	r3, [pc, #84]	; (800349c <moveXY+0x248>)
 8003446:	2201      	movs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]
}
 800344a:	e012      	b.n	8003472 <moveXY+0x21e>
			joyint2 = joyint2+3;
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <moveXY+0x238>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	3303      	adds	r3, #3
 8003452:	4a0e      	ldr	r2, [pc, #56]	; (800348c <moveXY+0x238>)
 8003454:	6013      	str	r3, [r2, #0]
			if(movxy==0){
 8003456:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <moveXY+0x23c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <moveXY+0x218>
				movxy=1;
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <moveXY+0x23c>)
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
				TimeSet(&htim13, time);
 8003464:	6979      	ldr	r1, [r7, #20]
 8003466:	480b      	ldr	r0, [pc, #44]	; (8003494 <moveXY+0x240>)
 8003468:	f007 fed6 	bl	800b218 <TimeSet>
			ymov=3;
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <moveXY+0x248>)
 800346e:	2203      	movs	r2, #3
 8003470:	601a      	str	r2, [r3, #0]
}
 8003472:	bf00      	nop
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000374 	.word	0x20000374
 8003480:	20000378 	.word	0x20000378
 8003484:	2000037c 	.word	0x2000037c
 8003488:	40010400 	.word	0x40010400
 800348c:	2000181c 	.word	0x2000181c
 8003490:	20000368 	.word	0x20000368
 8003494:	20006bf8 	.word	0x20006bf8
 8003498:	2000036c 	.word	0x2000036c
 800349c:	20000370 	.word	0x20000370

080034a0 <StepD>:

void StepD(int yon){
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
	stopmot=0;
 80034a8:	4b5c      	ldr	r3, [pc, #368]	; (800361c <StepD+0x17c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	601a      	str	r2, [r3, #0]
	endstop=HAL_GPIO_ReadPin(ENDSTOP_INPUT_GPIO_Port, ENDSTOP_INPUT_Pin);
 80034ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034b2:	485b      	ldr	r0, [pc, #364]	; (8003620 <StepD+0x180>)
 80034b4:	f009 fcb8 	bl	800ce28 <HAL_GPIO_ReadPin>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461a      	mov	r2, r3
 80034bc:	4b59      	ldr	r3, [pc, #356]	; (8003624 <StepD+0x184>)
 80034be:	601a      	str	r2, [r3, #0]
	if(yon==1){
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d10f      	bne.n	80034e6 <StepD+0x46>
		HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2108      	movs	r1, #8
 80034ca:	4857      	ldr	r0, [pc, #348]	; (8003628 <StepD+0x188>)
 80034cc:	f009 fcc4 	bl	800ce58 <HAL_GPIO_WritePin>
		if(endstop==0){
 80034d0:	4b54      	ldr	r3, [pc, #336]	; (8003624 <StepD+0x184>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <StepD+0x3e>
			stopmot=1;
 80034d8:	4b50      	ldr	r3, [pc, #320]	; (800361c <StepD+0x17c>)
 80034da:	2201      	movs	r2, #1
 80034dc:	601a      	str	r2, [r3, #0]
		}
		dir=1;
 80034de:	4b53      	ldr	r3, [pc, #332]	; (800362c <StepD+0x18c>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	e007      	b.n	80034f6 <StepD+0x56>
	}
	else{
		HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin,GPIO_PIN_SET);
 80034e6:	2201      	movs	r2, #1
 80034e8:	2108      	movs	r1, #8
 80034ea:	484f      	ldr	r0, [pc, #316]	; (8003628 <StepD+0x188>)
 80034ec:	f009 fcb4 	bl	800ce58 <HAL_GPIO_WritePin>
		dir=0;
 80034f0:	4b4e      	ldr	r3, [pc, #312]	; (800362c <StepD+0x18c>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	601a      	str	r2, [r3, #0]
	}
	durummot=1;
 80034f6:	4b4e      	ldr	r3, [pc, #312]	; (8003630 <StepD+0x190>)
 80034f8:	2201      	movs	r2, #1
 80034fa:	601a      	str	r2, [r3, #0]
	//sensdist=HAL_GPIO_ReadPin(SENSOR_GPIO_Port,SENSOR_Pin);
	if(sensdist==1&&speedmode==0){
 80034fc:	4b4d      	ldr	r3, [pc, #308]	; (8003634 <StepD+0x194>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d111      	bne.n	8003528 <StepD+0x88>
 8003504:	4b4c      	ldr	r3, [pc, #304]	; (8003638 <StepD+0x198>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10d      	bne.n	8003528 <StepD+0x88>
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 800350c:	2201      	movs	r2, #1
 800350e:	2108      	movs	r1, #8
 8003510:	484a      	ldr	r0, [pc, #296]	; (800363c <StepD+0x19c>)
 8003512:	f009 fca1 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET);
 8003516:	2200      	movs	r2, #0
 8003518:	2110      	movs	r1, #16
 800351a:	4843      	ldr	r0, [pc, #268]	; (8003628 <StepD+0x188>)
 800351c:	f009 fc9c 	bl	800ce58 <HAL_GPIO_WritePin>
		motgain=32;
 8003520:	4b47      	ldr	r3, [pc, #284]	; (8003640 <StepD+0x1a0>)
 8003522:	2220      	movs	r2, #32
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e06a      	b.n	80035fe <StepD+0x15e>
	}
	else if(sensdist==1&&speedmode==1){
 8003528:	4b42      	ldr	r3, [pc, #264]	; (8003634 <StepD+0x194>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d111      	bne.n	8003554 <StepD+0xb4>
 8003530:	4b41      	ldr	r3, [pc, #260]	; (8003638 <StepD+0x198>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10d      	bne.n	8003554 <StepD+0xb4>
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET);
 8003538:	2200      	movs	r2, #0
 800353a:	2108      	movs	r1, #8
 800353c:	483f      	ldr	r0, [pc, #252]	; (800363c <StepD+0x19c>)
 800353e:	f009 fc8b 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8003542:	2201      	movs	r2, #1
 8003544:	2110      	movs	r1, #16
 8003546:	4838      	ldr	r0, [pc, #224]	; (8003628 <StepD+0x188>)
 8003548:	f009 fc86 	bl	800ce58 <HAL_GPIO_WritePin>
		motgain=16;
 800354c:	4b3c      	ldr	r3, [pc, #240]	; (8003640 <StepD+0x1a0>)
 800354e:	2210      	movs	r2, #16
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e054      	b.n	80035fe <StepD+0x15e>
	}
	else if(speedmode==2){
 8003554:	4b38      	ldr	r3, [pc, #224]	; (8003638 <StepD+0x198>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d10d      	bne.n	8003578 <StepD+0xd8>
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET);
 800355c:	2200      	movs	r2, #0
 800355e:	2108      	movs	r1, #8
 8003560:	4836      	ldr	r0, [pc, #216]	; (800363c <StepD+0x19c>)
 8003562:	f009 fc79 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET);
 8003566:	2200      	movs	r2, #0
 8003568:	2110      	movs	r1, #16
 800356a:	482f      	ldr	r0, [pc, #188]	; (8003628 <StepD+0x188>)
 800356c:	f009 fc74 	bl	800ce58 <HAL_GPIO_WritePin>
		motgain=8;
 8003570:	4b33      	ldr	r3, [pc, #204]	; (8003640 <StepD+0x1a0>)
 8003572:	2208      	movs	r2, #8
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e042      	b.n	80035fe <StepD+0x15e>
	}
	else if(speedmode==3){
 8003578:	4b2f      	ldr	r3, [pc, #188]	; (8003638 <StepD+0x198>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b03      	cmp	r3, #3
 800357e:	d10d      	bne.n	800359c <StepD+0xfc>
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8003580:	2201      	movs	r2, #1
 8003582:	2108      	movs	r1, #8
 8003584:	482d      	ldr	r0, [pc, #180]	; (800363c <StepD+0x19c>)
 8003586:	f009 fc67 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 800358a:	2201      	movs	r2, #1
 800358c:	2110      	movs	r1, #16
 800358e:	4826      	ldr	r0, [pc, #152]	; (8003628 <StepD+0x188>)
 8003590:	f009 fc62 	bl	800ce58 <HAL_GPIO_WritePin>
		motgain=4;
 8003594:	4b2a      	ldr	r3, [pc, #168]	; (8003640 <StepD+0x1a0>)
 8003596:	2204      	movs	r2, #4
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	e030      	b.n	80035fe <StepD+0x15e>
	}
	else if(speedmode==4){
 800359c:	4b26      	ldr	r3, [pc, #152]	; (8003638 <StepD+0x198>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d10d      	bne.n	80035c0 <StepD+0x120>
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 80035a4:	2201      	movs	r2, #1
 80035a6:	2108      	movs	r1, #8
 80035a8:	4824      	ldr	r0, [pc, #144]	; (800363c <StepD+0x19c>)
 80035aa:	f009 fc55 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2110      	movs	r1, #16
 80035b2:	481d      	ldr	r0, [pc, #116]	; (8003628 <StepD+0x188>)
 80035b4:	f009 fc50 	bl	800ce58 <HAL_GPIO_WritePin>
		motgain=2;
 80035b8:	4b21      	ldr	r3, [pc, #132]	; (8003640 <StepD+0x1a0>)
 80035ba:	2202      	movs	r2, #2
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	e01e      	b.n	80035fe <StepD+0x15e>
	}
	else if(speedmode==5){
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <StepD+0x198>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b05      	cmp	r3, #5
 80035c6:	d10d      	bne.n	80035e4 <StepD+0x144>
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET);
 80035c8:	2200      	movs	r2, #0
 80035ca:	2108      	movs	r1, #8
 80035cc:	481b      	ldr	r0, [pc, #108]	; (800363c <StepD+0x19c>)
 80035ce:	f009 fc43 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 80035d2:	2201      	movs	r2, #1
 80035d4:	2110      	movs	r1, #16
 80035d6:	4814      	ldr	r0, [pc, #80]	; (8003628 <StepD+0x188>)
 80035d8:	f009 fc3e 	bl	800ce58 <HAL_GPIO_WritePin>
		motgain=1;
 80035dc:	4b18      	ldr	r3, [pc, #96]	; (8003640 <StepD+0x1a0>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e00c      	b.n	80035fe <StepD+0x15e>
	}
	else{
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 80035e4:	2201      	movs	r2, #1
 80035e6:	2108      	movs	r1, #8
 80035e8:	4814      	ldr	r0, [pc, #80]	; (800363c <StepD+0x19c>)
 80035ea:	f009 fc35 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 80035ee:	2201      	movs	r2, #1
 80035f0:	2110      	movs	r1, #16
 80035f2:	480d      	ldr	r0, [pc, #52]	; (8003628 <StepD+0x188>)
 80035f4:	f009 fc30 	bl	800ce58 <HAL_GPIO_WritePin>
		motgain=4;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <StepD+0x1a0>)
 80035fa:	2204      	movs	r2, #4
 80035fc:	601a      	str	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(TMC_EN_GPIO_Port,TMC_EN_Pin,GPIO_PIN_RESET);
 80035fe:	2200      	movs	r2, #0
 8003600:	2102      	movs	r1, #2
 8003602:	4809      	ldr	r0, [pc, #36]	; (8003628 <StepD+0x188>)
 8003604:	f009 fc28 	bl	800ce58 <HAL_GPIO_WritePin>
	upp=0;
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <StepD+0x1a4>)
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim9);
 800360e:	480e      	ldr	r0, [pc, #56]	; (8003648 <StepD+0x1a8>)
 8003610:	f00b fc85 	bl	800ef1e <HAL_TIM_Base_Start_IT>
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	2000033c 	.word	0x2000033c
 8003620:	40020800 	.word	0x40020800
 8003624:	20000350 	.word	0x20000350
 8003628:	40020c00 	.word	0x40020c00
 800362c:	20000338 	.word	0x20000338
 8003630:	20000330 	.word	0x20000330
 8003634:	20000040 	.word	0x20000040
 8003638:	20000354 	.word	0x20000354
 800363c:	40020400 	.word	0x40020400
 8003640:	20000048 	.word	0x20000048
 8003644:	2000035c 	.word	0x2000035c
 8003648:	20006d84 	.word	0x20006d84

0800364c <GiveVolt>:
void GiveVolt(char * value){
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
	for (int i=1;i<11;i++){
 8003654:	2301      	movs	r3, #1
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	e007      	b.n	800366a <GiveVolt+0x1e>
		voltageval[i]='\0';
 800365a:	4a09      	ldr	r2, [pc, #36]	; (8003680 <GiveVolt+0x34>)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
	for (int i=1;i<11;i++){
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	3301      	adds	r3, #1
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2b0a      	cmp	r3, #10
 800366e:	ddf4      	ble.n	800365a <GiveVolt+0xe>
	}
	SendAct(voltageval, value);
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4803      	ldr	r0, [pc, #12]	; (8003680 <GiveVolt+0x34>)
 8003674:	f008 f87e 	bl	800b774 <SendAct>
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000078 	.word	0x20000078

08003684 <Emergency>:
void Emergency(int type){
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	movxy=0;
 800368c:	4b50      	ldr	r3, [pc, #320]	; (80037d0 <Emergency+0x14c>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
	loadIndent=0;
 8003692:	4b50      	ldr	r3, [pc, #320]	; (80037d4 <Emergency+0x150>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
	isAutoApproach=0;
 8003698:	4b4f      	ldr	r3, [pc, #316]	; (80037d8 <Emergency+0x154>)
 800369a:	2200      	movs	r2, #0
 800369c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim10);
 800369e:	484f      	ldr	r0, [pc, #316]	; (80037dc <Emergency+0x158>)
 80036a0:	f00b fc61 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(L293DD_ENABLE1_GPIO_Port, L293DD_ENABLE1_Pin, GPIO_PIN_RESET);
 80036a4:	2200      	movs	r2, #0
 80036a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036aa:	484d      	ldr	r0, [pc, #308]	; (80037e0 <Emergency+0x15c>)
 80036ac:	f009 fbd4 	bl	800ce58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(L293DD_ENABLE2_GPIO_Port, L293DD_ENABLE1_Pin, GPIO_PIN_RESET);
 80036b0:	2200      	movs	r2, #0
 80036b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036b6:	484b      	ldr	r0, [pc, #300]	; (80037e4 <Emergency+0x160>)
 80036b8:	f009 fbce 	bl	800ce58 <HAL_GPIO_WritePin>
	xmov=0;
 80036bc:	4b4a      	ldr	r3, [pc, #296]	; (80037e8 <Emergency+0x164>)
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
	ymov=0;
 80036c2:	4b4a      	ldr	r3, [pc, #296]	; (80037ec <Emergency+0x168>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
	joyint1=0;
 80036c8:	4b49      	ldr	r3, [pc, #292]	; (80037f0 <Emergency+0x16c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
	joyint2=0;
 80036ce:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <Emergency+0x170>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
	eqstep=0;
 80036d4:	4b48      	ldr	r3, [pc, #288]	; (80037f8 <Emergency+0x174>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	601a      	str	r2, [r3, #0]
	expcount=-1;
 80036da:	4b48      	ldr	r3, [pc, #288]	; (80037fc <Emergency+0x178>)
 80036dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036e0:	601a      	str	r2, [r3, #0]
	osc=0;
 80036e2:	4b47      	ldr	r3, [pc, #284]	; (8003800 <Emergency+0x17c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
	osccount=0;
 80036e8:	4b46      	ldr	r3, [pc, #280]	; (8003804 <Emergency+0x180>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
	oscpass=0;
 80036ee:	4b46      	ldr	r3, [pc, #280]	; (8003808 <Emergency+0x184>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]
	oscdown=-1;
 80036f4:	4b45      	ldr	r3, [pc, #276]	; (800380c <Emergency+0x188>)
 80036f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036fa:	601a      	str	r2, [r3, #0]
	sendexp=-1;
 80036fc:	4b44      	ldr	r3, [pc, #272]	; (8003810 <Emergency+0x18c>)
 80036fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003702:	601a      	str	r2, [r3, #0]
	S=0;
 8003704:	4b43      	ldr	r3, [pc, #268]	; (8003814 <Emergency+0x190>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
	eqstepcounter=0;
 800370a:	4b43      	ldr	r3, [pc, #268]	; (8003818 <Emergency+0x194>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
	givecount=0;
 8003710:	4b42      	ldr	r3, [pc, #264]	; (800381c <Emergency+0x198>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
	stepnum=0;
 8003716:	4b42      	ldr	r3, [pc, #264]	; (8003820 <Emergency+0x19c>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
	if(type==0){
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d12a      	bne.n	8003778 <Emergency+0xf4>
		HAL_TIM_Base_Stop_IT(&htim11);
 8003722:	4840      	ldr	r0, [pc, #256]	; (8003824 <Emergency+0x1a0>)
 8003724:	f00b fc1f 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
		stopmot=1;
 8003728:	4b3f      	ldr	r3, [pc, #252]	; (8003828 <Emergency+0x1a4>)
 800372a:	2201      	movs	r2, #1
 800372c:	601a      	str	r2, [r3, #0]
		SendPc("ELECTRICAL PROTECTION", 5, 2);
 800372e:	2202      	movs	r2, #2
 8003730:	2105      	movs	r1, #5
 8003732:	483e      	ldr	r0, [pc, #248]	; (800382c <Emergency+0x1a8>)
 8003734:	f001 fdc6 	bl	80052c4 <SendPc>
		GiveVolt("0.000000");
 8003738:	483d      	ldr	r0, [pc, #244]	; (8003830 <Emergency+0x1ac>)
 800373a:	f7ff ff87 	bl	800364c <GiveVolt>
		SendPc("0.000000E", 5, 2);
 800373e:	2202      	movs	r2, #2
 8003740:	2105      	movs	r1, #5
 8003742:	483c      	ldr	r0, [pc, #240]	; (8003834 <Emergency+0x1b0>)
 8003744:	f001 fdbe 	bl	80052c4 <SendPc>
		uart2say=htim9.Instance->DMAR;
 8003748:	4b3b      	ldr	r3, [pc, #236]	; (8003838 <Emergency+0x1b4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800374e:	461a      	mov	r2, r3
 8003750:	4b3a      	ldr	r3, [pc, #232]	; (800383c <Emergency+0x1b8>)
 8003752:	601a      	str	r2, [r3, #0]
		while(uart2say!=0){
 8003754:	e00b      	b.n	800376e <Emergency+0xea>
			uart2say=htim9.Instance->DMAR;
 8003756:	4b38      	ldr	r3, [pc, #224]	; (8003838 <Emergency+0x1b4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375c:	461a      	mov	r2, r3
 800375e:	4b37      	ldr	r3, [pc, #220]	; (800383c <Emergency+0x1b8>)
 8003760:	601a      	str	r2, [r3, #0]
			stopmot=1;
 8003762:	4b31      	ldr	r3, [pc, #196]	; (8003828 <Emergency+0x1a4>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim9);
 8003768:	4833      	ldr	r0, [pc, #204]	; (8003838 <Emergency+0x1b4>)
 800376a:	f00b fbfc 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
		while(uart2say!=0){
 800376e:	4b33      	ldr	r3, [pc, #204]	; (800383c <Emergency+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ef      	bne.n	8003756 <Emergency+0xd2>
 8003776:	e021      	b.n	80037bc <Emergency+0x138>
		}
	}
	else{
		HAL_GPIO_WritePin(TMC_EN_GPIO_Port,TMC_EN_Pin,GPIO_PIN_RESET);
 8003778:	2200      	movs	r2, #0
 800377a:	2102      	movs	r1, #2
 800377c:	4819      	ldr	r0, [pc, #100]	; (80037e4 <Emergency+0x160>)
 800377e:	f009 fb6b 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin,GPIO_PIN_RESET);
 8003782:	2200      	movs	r2, #0
 8003784:	2110      	movs	r1, #16
 8003786:	4817      	ldr	r0, [pc, #92]	; (80037e4 <Emergency+0x160>)
 8003788:	f009 fb66 	bl	800ce58 <HAL_GPIO_WritePin>
		stepsay=1000;
 800378c:	4b2c      	ldr	r3, [pc, #176]	; (8003840 <Emergency+0x1bc>)
 800378e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003792:	601a      	str	r2, [r3, #0]
		TimeSet(&htim9, 200);
 8003794:	21c8      	movs	r1, #200	; 0xc8
 8003796:	4828      	ldr	r0, [pc, #160]	; (8003838 <Emergency+0x1b4>)
 8003798:	f007 fd3e 	bl	800b218 <TimeSet>
		StepD(1);
 800379c:	2001      	movs	r0, #1
 800379e:	f7ff fe7f 	bl	80034a0 <StepD>
		SendPc("TIP&SURFACE PROTECTION", 5, 2);
 80037a2:	2202      	movs	r2, #2
 80037a4:	2105      	movs	r1, #5
 80037a6:	4827      	ldr	r0, [pc, #156]	; (8003844 <Emergency+0x1c0>)
 80037a8:	f001 fd8c 	bl	80052c4 <SendPc>
		GiveVolt("7.500000");
 80037ac:	4826      	ldr	r0, [pc, #152]	; (8003848 <Emergency+0x1c4>)
 80037ae:	f7ff ff4d 	bl	800364c <GiveVolt>
		SendPc("7.500000E", 5, 2);
 80037b2:	2202      	movs	r2, #2
 80037b4:	2105      	movs	r1, #5
 80037b6:	4825      	ldr	r0, [pc, #148]	; (800384c <Emergency+0x1c8>)
 80037b8:	f001 fd84 	bl	80052c4 <SendPc>
	}
	emergency=0;
 80037bc:	4b24      	ldr	r3, [pc, #144]	; (8003850 <Emergency+0x1cc>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
	ProcessRx(3);
 80037c2:	2003      	movs	r0, #3
 80037c4:	f001 fe16 	bl	80053f4 <ProcessRx>
}
 80037c8:	bf00      	nop
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000368 	.word	0x20000368
 80037d4:	2000038c 	.word	0x2000038c
 80037d8:	200002d8 	.word	0x200002d8
 80037dc:	20006af8 	.word	0x20006af8
 80037e0:	40020400 	.word	0x40020400
 80037e4:	40020c00 	.word	0x40020c00
 80037e8:	2000036c 	.word	0x2000036c
 80037ec:	20000370 	.word	0x20000370
 80037f0:	20001818 	.word	0x20001818
 80037f4:	2000181c 	.word	0x2000181c
 80037f8:	200002e4 	.word	0x200002e4
 80037fc:	2000001c 	.word	0x2000001c
 8003800:	20000314 	.word	0x20000314
 8003804:	2000031c 	.word	0x2000031c
 8003808:	20000320 	.word	0x20000320
 800380c:	200002dc 	.word	0x200002dc
 8003810:	20000010 	.word	0x20000010
 8003814:	200002c8 	.word	0x200002c8
 8003818:	200002fc 	.word	0x200002fc
 800381c:	200002d0 	.word	0x200002d0
 8003820:	200002f8 	.word	0x200002f8
 8003824:	20006c78 	.word	0x20006c78
 8003828:	2000033c 	.word	0x2000033c
 800382c:	08011e20 	.word	0x08011e20
 8003830:	08011e38 	.word	0x08011e38
 8003834:	08011e44 	.word	0x08011e44
 8003838:	20006d84 	.word	0x20006d84
 800383c:	200018b0 	.word	0x200018b0
 8003840:	20000334 	.word	0x20000334
 8003844:	08011e50 	.word	0x08011e50
 8003848:	08011e68 	.word	0x08011e68
 800384c:	08011e74 	.word	0x08011e74
 8003850:	200002cc 	.word	0x200002cc

08003854 <HAL_GPIO_EXTI_Callback>:
extern int xmov;
extern char motsender [100];
extern char BUFSS [2];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	4603      	mov	r3, r0
 800385c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == TMC_IND_Pin){
 800385e:	88fb      	ldrh	r3, [r7, #6]
 8003860:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003864:	d102      	bne.n	800386c <HAL_GPIO_EXTI_Callback+0x18>
		TmcIndex();
 8003866:	f000 f82b 	bl	80038c0 <TmcIndex>
		EndYplus();
	}
	else if(GPIO_Pin == ESY_N_Pin){
		EndYmin();
	}
}
 800386a:	e025      	b.n	80038b8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == JS1_Pin){
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	2b04      	cmp	r3, #4
 8003870:	d102      	bne.n	8003878 <HAL_GPIO_EXTI_Callback+0x24>
		JoyBut1();
 8003872:	f000 f833 	bl	80038dc <JoyBut1>
}
 8003876:	e01f      	b.n	80038b8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == JS2_Pin){
 8003878:	88fb      	ldrh	r3, [r7, #6]
 800387a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800387e:	d102      	bne.n	8003886 <HAL_GPIO_EXTI_Callback+0x32>
		JoyBut2();
 8003880:	f000 f88a 	bl	8003998 <JoyBut2>
}
 8003884:	e018      	b.n	80038b8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == ESX_P_Pin ){
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d102      	bne.n	8003892 <HAL_GPIO_EXTI_Callback+0x3e>
		EndXplus();
 800388c:	f000 f8aa 	bl	80039e4 <EndXplus>
}
 8003890:	e012      	b.n	80038b8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == ESX_N_Pin){
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003898:	d102      	bne.n	80038a0 <HAL_GPIO_EXTI_Callback+0x4c>
		EndXmin();
 800389a:	f000 f915 	bl	8003ac8 <EndXmin>
}
 800389e:	e00b      	b.n	80038b8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == ESY_P_Pin ){
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	2b80      	cmp	r3, #128	; 0x80
 80038a4:	d102      	bne.n	80038ac <HAL_GPIO_EXTI_Callback+0x58>
		EndYplus();
 80038a6:	f000 f8d7 	bl	8003a58 <EndYplus>
}
 80038aa:	e005      	b.n	80038b8 <HAL_GPIO_EXTI_Callback+0x64>
	else if(GPIO_Pin == ESY_N_Pin){
 80038ac:	88fb      	ldrh	r3, [r7, #6]
 80038ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038b2:	d101      	bne.n	80038b8 <HAL_GPIO_EXTI_Callback+0x64>
		EndYmin();
 80038b4:	f000 f948 	bl	8003b48 <EndYmin>
}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <TmcIndex>:

void TmcSetIndex(uint32_t index){
	tmcIndexCnt=index;
}

void TmcIndex(void){
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
	tmcIndexCnt++;
 80038c4:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <TmcIndex+0x18>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3301      	adds	r3, #1
 80038ca:	4a03      	ldr	r2, [pc, #12]	; (80038d8 <TmcIndex+0x18>)
 80038cc:	6013      	str	r3, [r2, #0]
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	20000398 	.word	0x20000398

080038dc <JoyBut1>:
void JoyBut1(void){
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
	if(pccom!=1){
 80038e0:	4b26      	ldr	r3, [pc, #152]	; (800397c <JoyBut1+0xa0>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d017      	beq.n	8003918 <JoyBut1+0x3c>
		if(joyen==1){
 80038e8:	4b25      	ldr	r3, [pc, #148]	; (8003980 <JoyBut1+0xa4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10c      	bne.n	800390a <JoyBut1+0x2e>
			speedmode=speedmode+1;
 80038f0:	4b24      	ldr	r3, [pc, #144]	; (8003984 <JoyBut1+0xa8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	4a23      	ldr	r2, [pc, #140]	; (8003984 <JoyBut1+0xa8>)
 80038f8:	6013      	str	r3, [r2, #0]
			if(speedmode>5){
 80038fa:	4b22      	ldr	r3, [pc, #136]	; (8003984 <JoyBut1+0xa8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b05      	cmp	r3, #5
 8003900:	dd3a      	ble.n	8003978 <JoyBut1+0x9c>
				speedmode=2;
 8003902:	4b20      	ldr	r3, [pc, #128]	; (8003984 <JoyBut1+0xa8>)
 8003904:	2202      	movs	r2, #2
 8003906:	601a      	str	r2, [r3, #0]
			strcat(motsender,"MSP\0");
			strcat(motsender,BUFSS);
			SendPc(motsender, 5, 0);
		}
	}
}
 8003908:	e036      	b.n	8003978 <JoyBut1+0x9c>
			joyen=1;//normalde 1 olacak
 800390a:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <JoyBut1+0xa4>)
 800390c:	2201      	movs	r2, #1
 800390e:	601a      	str	r2, [r3, #0]
			extcon=1;
 8003910:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <JoyBut1+0xac>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
}
 8003916:	e02f      	b.n	8003978 <JoyBut1+0x9c>
		if(joyen==1){
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <JoyBut1+0xa4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d12b      	bne.n	8003978 <JoyBut1+0x9c>
			speedmode=speedmode+1;
 8003920:	4b18      	ldr	r3, [pc, #96]	; (8003984 <JoyBut1+0xa8>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3301      	adds	r3, #1
 8003926:	4a17      	ldr	r2, [pc, #92]	; (8003984 <JoyBut1+0xa8>)
 8003928:	6013      	str	r3, [r2, #0]
			if(speedmode>5){
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <JoyBut1+0xa8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b05      	cmp	r3, #5
 8003930:	dd02      	ble.n	8003938 <JoyBut1+0x5c>
				speedmode=2;
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <JoyBut1+0xa8>)
 8003934:	2202      	movs	r2, #2
 8003936:	601a      	str	r2, [r3, #0]
			motsender[0]=0;
 8003938:	4b14      	ldr	r3, [pc, #80]	; (800398c <JoyBut1+0xb0>)
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
			BUFSS[0]=0;
 800393e:	4b14      	ldr	r3, [pc, #80]	; (8003990 <JoyBut1+0xb4>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
			itoa(speedmode,BUFSS,10);
 8003944:	4b0f      	ldr	r3, [pc, #60]	; (8003984 <JoyBut1+0xa8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	220a      	movs	r2, #10
 800394a:	4911      	ldr	r1, [pc, #68]	; (8003990 <JoyBut1+0xb4>)
 800394c:	4618      	mov	r0, r3
 800394e:	f00e f8e7 	bl	8011b20 <itoa>
			strcat(motsender,"MSP\0");
 8003952:	480e      	ldr	r0, [pc, #56]	; (800398c <JoyBut1+0xb0>)
 8003954:	f7fc fc38 	bl	80001c8 <strlen>
 8003958:	4603      	mov	r3, r0
 800395a:	461a      	mov	r2, r3
 800395c:	4b0b      	ldr	r3, [pc, #44]	; (800398c <JoyBut1+0xb0>)
 800395e:	4413      	add	r3, r2
 8003960:	4a0c      	ldr	r2, [pc, #48]	; (8003994 <JoyBut1+0xb8>)
 8003962:	6810      	ldr	r0, [r2, #0]
 8003964:	6018      	str	r0, [r3, #0]
			strcat(motsender,BUFSS);
 8003966:	490a      	ldr	r1, [pc, #40]	; (8003990 <JoyBut1+0xb4>)
 8003968:	4808      	ldr	r0, [pc, #32]	; (800398c <JoyBut1+0xb0>)
 800396a:	f00e f8ee 	bl	8011b4a <strcat>
			SendPc(motsender, 5, 0);
 800396e:	2200      	movs	r2, #0
 8003970:	2105      	movs	r1, #5
 8003972:	4806      	ldr	r0, [pc, #24]	; (800398c <JoyBut1+0xb0>)
 8003974:	f001 fca6 	bl	80052c4 <SendPc>
}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200018b4 	.word	0x200018b4
 8003980:	20001814 	.word	0x20001814
 8003984:	20000354 	.word	0x20000354
 8003988:	20001810 	.word	0x20001810
 800398c:	20004ce0 	.word	0x20004ce0
 8003990:	20006f2c 	.word	0x20006f2c
 8003994:	08011e80 	.word	0x08011e80

08003998 <JoyBut2>:
void JoyBut2(void){
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
	if(pccom!=1){
 800399c:	4b0e      	ldr	r3, [pc, #56]	; (80039d8 <JoyBut2+0x40>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d014      	beq.n	80039ce <JoyBut2+0x36>
		if(pccom!=1&&joyen==1){
 80039a4:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <JoyBut2+0x40>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d00a      	beq.n	80039c2 <JoyBut2+0x2a>
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <JoyBut2+0x44>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d106      	bne.n	80039c2 <JoyBut2+0x2a>
			joyen=0;
 80039b4:	4b09      	ldr	r3, [pc, #36]	; (80039dc <JoyBut2+0x44>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
			extcon=0;
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <JoyBut2+0x48>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
		else{
			joyen=0;//normalde 1
			extcon=0;
		}
	}
}
 80039c0:	e005      	b.n	80039ce <JoyBut2+0x36>
			joyen=0;//normalde 1
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <JoyBut2+0x44>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
			extcon=0;
 80039c8:	4b05      	ldr	r3, [pc, #20]	; (80039e0 <JoyBut2+0x48>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
}
 80039ce:	bf00      	nop
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	200018b4 	.word	0x200018b4
 80039dc:	20001814 	.word	0x20001814
 80039e0:	20001810 	.word	0x20001810

080039e4 <EndXplus>:
void EndXplus(void){
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ESX_P_GPIO_Port, ESX_P_Pin)){
 80039e8:	2140      	movs	r1, #64	; 0x40
 80039ea:	4815      	ldr	r0, [pc, #84]	; (8003a40 <EndXplus+0x5c>)
 80039ec:	f009 fa1c 	bl	800ce28 <HAL_GPIO_ReadPin>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01d      	beq.n	8003a32 <EndXplus+0x4e>
		HAL_GPIO_WritePin(L293DD_ENABLE2_GPIO_Port, L293DD_ENABLE2_Pin, GPIO_PIN_RESET);
 80039f6:	2200      	movs	r2, #0
 80039f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039fc:	4811      	ldr	r0, [pc, #68]	; (8003a44 <EndXplus+0x60>)
 80039fe:	f009 fa2b 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YN_GPIO_Port, YN_Pin, GPIO_PIN_RESET);
 8003a02:	2200      	movs	r2, #0
 8003a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a08:	480e      	ldr	r0, [pc, #56]	; (8003a44 <EndXplus+0x60>)
 8003a0a:	f009 fa25 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YP_GPIO_Port, YP_Pin, GPIO_PIN_RESET);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003a14:	480b      	ldr	r0, [pc, #44]	; (8003a44 <EndXplus+0x60>)
 8003a16:	f009 fa1f 	bl	800ce58 <HAL_GPIO_WritePin>
		xsteps=0;
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <EndXplus+0x64>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
		xmov=0;
 8003a20:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <EndXplus+0x68>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
		SendPc("OutXP", 5, 0);
 8003a26:	2200      	movs	r2, #0
 8003a28:	2105      	movs	r1, #5
 8003a2a:	4809      	ldr	r0, [pc, #36]	; (8003a50 <EndXplus+0x6c>)
 8003a2c:	f001 fc4a 	bl	80052c4 <SendPc>
	}
	else{
		SendPc("InXP", 5, 0);
	}

}
 8003a30:	e004      	b.n	8003a3c <EndXplus+0x58>
		SendPc("InXP", 5, 0);
 8003a32:	2200      	movs	r2, #0
 8003a34:	2105      	movs	r1, #5
 8003a36:	4807      	ldr	r0, [pc, #28]	; (8003a54 <EndXplus+0x70>)
 8003a38:	f001 fc44 	bl	80052c4 <SendPc>
}
 8003a3c:	bf00      	nop
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40020400 	.word	0x40020400
 8003a44:	40020c00 	.word	0x40020c00
 8003a48:	20000374 	.word	0x20000374
 8003a4c:	2000036c 	.word	0x2000036c
 8003a50:	08011e88 	.word	0x08011e88
 8003a54:	08011e90 	.word	0x08011e90

08003a58 <EndYplus>:
void EndYplus(void){
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ESY_P_GPIO_Port, ESY_P_Pin)){
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	4814      	ldr	r0, [pc, #80]	; (8003ab0 <EndYplus+0x58>)
 8003a60:	f009 f9e2 	bl	800ce28 <HAL_GPIO_ReadPin>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01b      	beq.n	8003aa2 <EndYplus+0x4a>
		HAL_GPIO_WritePin(L293DD_ENABLE1_GPIO_Port, L293DD_ENABLE1_Pin, GPIO_PIN_RESET);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003a70:	480f      	ldr	r0, [pc, #60]	; (8003ab0 <EndYplus+0x58>)
 8003a72:	f009 f9f1 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(XN_GPIO_Port, XN_Pin, GPIO_PIN_RESET);
 8003a76:	2200      	movs	r2, #0
 8003a78:	2140      	movs	r1, #64	; 0x40
 8003a7a:	480e      	ldr	r0, [pc, #56]	; (8003ab4 <EndYplus+0x5c>)
 8003a7c:	f009 f9ec 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(XP_GPIO_Port, XP_Pin, GPIO_PIN_RESET);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2120      	movs	r1, #32
 8003a84:	480b      	ldr	r0, [pc, #44]	; (8003ab4 <EndYplus+0x5c>)
 8003a86:	f009 f9e7 	bl	800ce58 <HAL_GPIO_WritePin>
		ysteps=0;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <EndYplus+0x60>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
		ymov=0;
 8003a90:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <EndYplus+0x64>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
		SendPc("OutYP", 5, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	2105      	movs	r1, #5
 8003a9a:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <EndYplus+0x68>)
 8003a9c:	f001 fc12 	bl	80052c4 <SendPc>
	}
	else{
		SendPc("InYP", 5, 0);
	}

}
 8003aa0:	e004      	b.n	8003aac <EndYplus+0x54>
		SendPc("InYP", 5, 0);
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2105      	movs	r1, #5
 8003aa6:	4807      	ldr	r0, [pc, #28]	; (8003ac4 <EndYplus+0x6c>)
 8003aa8:	f001 fc0c 	bl	80052c4 <SendPc>
}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40020400 	.word	0x40020400
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	20000378 	.word	0x20000378
 8003abc:	20000370 	.word	0x20000370
 8003ac0:	08011e98 	.word	0x08011e98
 8003ac4:	08011ea0 	.word	0x08011ea0

08003ac8 <EndXmin>:
void EndXmin(void){
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ESY_P_GPIO_Port, ESY_P_Pin)){
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	4817      	ldr	r0, [pc, #92]	; (8003b2c <EndXmin+0x64>)
 8003ad0:	f009 f9aa 	bl	800ce28 <HAL_GPIO_ReadPin>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d020      	beq.n	8003b1c <EndXmin+0x54>
		HAL_GPIO_WritePin(L293DD_ENABLE2_GPIO_Port, L293DD_ENABLE2_Pin, GPIO_PIN_RESET);
 8003ada:	2200      	movs	r2, #0
 8003adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ae0:	4813      	ldr	r0, [pc, #76]	; (8003b30 <EndXmin+0x68>)
 8003ae2:	f009 f9b9 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YN_GPIO_Port, YN_Pin, GPIO_PIN_RESET);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003aec:	4810      	ldr	r0, [pc, #64]	; (8003b30 <EndXmin+0x68>)
 8003aee:	f009 f9b3 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YP_GPIO_Port, YP_Pin, GPIO_PIN_RESET);
 8003af2:	2200      	movs	r2, #0
 8003af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003af8:	480d      	ldr	r0, [pc, #52]	; (8003b30 <EndXmin+0x68>)
 8003afa:	f009 f9ad 	bl	800ce58 <HAL_GPIO_WritePin>
		xsteps=0;
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <EndXmin+0x6c>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
		ysteps=0;
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <EndXmin+0x70>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
		xmov=0;
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <EndXmin+0x74>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
		SendPc("OutXM", 5, 0);
 8003b10:	2200      	movs	r2, #0
 8003b12:	2105      	movs	r1, #5
 8003b14:	480a      	ldr	r0, [pc, #40]	; (8003b40 <EndXmin+0x78>)
 8003b16:	f001 fbd5 	bl	80052c4 <SendPc>
	}
	else{
		SendPc("InXM", 5, 0);
	}

}
 8003b1a:	e004      	b.n	8003b26 <EndXmin+0x5e>
		SendPc("InXM", 5, 0);
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	2105      	movs	r1, #5
 8003b20:	4808      	ldr	r0, [pc, #32]	; (8003b44 <EndXmin+0x7c>)
 8003b22:	f001 fbcf 	bl	80052c4 <SendPc>
}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40020400 	.word	0x40020400
 8003b30:	40020c00 	.word	0x40020c00
 8003b34:	20000374 	.word	0x20000374
 8003b38:	20000378 	.word	0x20000378
 8003b3c:	2000036c 	.word	0x2000036c
 8003b40:	08011ea8 	.word	0x08011ea8
 8003b44:	08011eb0 	.word	0x08011eb0

08003b48 <EndYmin>:
void EndYmin(void){
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ESY_P_GPIO_Port, ESY_P_Pin)){
 8003b4c:	2180      	movs	r1, #128	; 0x80
 8003b4e:	4814      	ldr	r0, [pc, #80]	; (8003ba0 <EndYmin+0x58>)
 8003b50:	f009 f96a 	bl	800ce28 <HAL_GPIO_ReadPin>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d01b      	beq.n	8003b92 <EndYmin+0x4a>
		HAL_GPIO_WritePin(L293DD_ENABLE1_GPIO_Port, L293DD_ENABLE1_Pin, GPIO_PIN_RESET);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b60:	480f      	ldr	r0, [pc, #60]	; (8003ba0 <EndYmin+0x58>)
 8003b62:	f009 f979 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(XN_GPIO_Port, XN_Pin, GPIO_PIN_RESET);
 8003b66:	2200      	movs	r2, #0
 8003b68:	2140      	movs	r1, #64	; 0x40
 8003b6a:	480e      	ldr	r0, [pc, #56]	; (8003ba4 <EndYmin+0x5c>)
 8003b6c:	f009 f974 	bl	800ce58 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(XP_GPIO_Port, XP_Pin, GPIO_PIN_RESET);
 8003b70:	2200      	movs	r2, #0
 8003b72:	2120      	movs	r1, #32
 8003b74:	480b      	ldr	r0, [pc, #44]	; (8003ba4 <EndYmin+0x5c>)
 8003b76:	f009 f96f 	bl	800ce58 <HAL_GPIO_WritePin>
		ysteps=0;
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ba8 <EndYmin+0x60>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
		ymov=0;
 8003b80:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <EndYmin+0x64>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
		SendPc("OutYM", 5, 0);
 8003b86:	2200      	movs	r2, #0
 8003b88:	2105      	movs	r1, #5
 8003b8a:	4809      	ldr	r0, [pc, #36]	; (8003bb0 <EndYmin+0x68>)
 8003b8c:	f001 fb9a 	bl	80052c4 <SendPc>
	}
	else{
		SendPc("InYM", 5, 0);
	}

}
 8003b90:	e004      	b.n	8003b9c <EndYmin+0x54>
		SendPc("InYM", 5, 0);
 8003b92:	2200      	movs	r2, #0
 8003b94:	2105      	movs	r1, #5
 8003b96:	4807      	ldr	r0, [pc, #28]	; (8003bb4 <EndYmin+0x6c>)
 8003b98:	f001 fb94 	bl	80052c4 <SendPc>
}
 8003b9c:	bf00      	nop
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40020400 	.word	0x40020400
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	20000378 	.word	0x20000378
 8003bac:	20000370 	.word	0x20000370
 8003bb0:	08011eb8 	.word	0x08011eb8
 8003bb4:	08011ec0 	.word	0x08011ec0

08003bb8 <setHeater>:


#include "heater.h"
extern TIM_HandleTypeDef htim1;
extern int heatDuty[3];
void setHeater(int channel, int duty, int opMode){
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
	uint32_t count;
	if(duty==0){
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <setHeater+0x18>
		count=0;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	617b      	str	r3, [r7, #20]
 8003bce:	e00a      	b.n	8003be6 <setHeater+0x2e>
	}
	else{
		count=((htim1.Init.Period+1)*duty)/10000;//duty 0.01*duty!!
 8003bd0:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <setHeater+0x70>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	4a13      	ldr	r2, [pc, #76]	; (8003c2c <setHeater+0x74>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0b5b      	lsrs	r3, r3, #13
 8003be4:	617b      	str	r3, [r7, #20]

	}
	else{

	}*/
	switch(channel){
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d008      	beq.n	8003bfe <setHeater+0x46>
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d00b      	beq.n	8003c08 <setHeater+0x50>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d10e      	bne.n	8003c12 <setHeater+0x5a>
	case	0:
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,count);
 8003bf4:	4b0c      	ldr	r3, [pc, #48]	; (8003c28 <setHeater+0x70>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8003bfc:	e009      	b.n	8003c12 <setHeater+0x5a>
	case	1:
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,count);
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <setHeater+0x70>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8003c06:	e004      	b.n	8003c12 <setHeater+0x5a>
	case	2:
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,count);
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <setHeater+0x70>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8003c10:	bf00      	nop
	}
	htim1.Instance->CNT=0;
 8003c12:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <setHeater+0x70>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003c1a:	bf00      	nop
 8003c1c:	371c      	adds	r7, #28
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20006d44 	.word	0x20006d44
 8003c2c:	d1b71759 	.word	0xd1b71759

08003c30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c32:	b08f      	sub	sp, #60	; 0x3c
 8003c34:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c36:	f007 fe3d 	bl	800b8b4 <HAL_Init>

  /* USER CODE BEGIN Init */
  UartInit();
 8003c3a:	f007 fbbf 	bl	800b3bc <UartInit>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c3e:	f000 fd7d 	bl	800473c <MX_GPIO_Init>
  MX_DMA_Init();
 8003c42:	f000 fd5b 	bl	80046fc <MX_DMA_Init>
  MX_TIM8_Init();
 8003c46:	f000 fba3 	bl	8004390 <MX_TIM8_Init>
  MX_I2C3_Init();
 8003c4a:	f000 f9d9 	bl	8004000 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8003c4e:	f000 fcd7 	bl	8004600 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003c52:	f000 f9a7 	bl	8003fa4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8003c56:	f000 fa21 	bl	800409c <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8003c5a:	f000 f9ff 	bl	800405c <MX_SDIO_SD_Init>
  MX_USART2_UART_Init();
 8003c5e:	f000 fcf9 	bl	8004654 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8003c62:	f000 fd21 	bl	80046a8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8003c66:	f000 faeb 	bl	8004240 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003c6a:	f000 fb3d 	bl	80042e8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8003c6e:	f000 f89f 	bl	8003db0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8003c72:	f000 fa49 	bl	8004108 <MX_TIM1_Init>
  MX_TIM9_Init();
 8003c76:	f000 fbe3 	bl	8004440 <MX_TIM9_Init>
  MX_TIM10_Init();
 8003c7a:	f000 fc1b 	bl	80044b4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003c7e:	f000 fc3d 	bl	80044fc <MX_TIM11_Init>
  MX_TIM12_Init();
 8003c82:	f000 fc5f 	bl	8004544 <MX_TIM12_Init>
  MX_FATFS_Init();
 8003c86:	f00d fd1f 	bl	80116c8 <MX_FATFS_Init>
  MX_TIM13_Init();
 8003c8a:	f000 fc95 	bl	80045b8 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  instant.gpioData = HXDAT_GPIO_Port;
 8003c8e:	4b3a      	ldr	r3, [pc, #232]	; (8003d78 <main+0x148>)
 8003c90:	4a3a      	ldr	r2, [pc, #232]	; (8003d7c <main+0x14c>)
 8003c92:	605a      	str	r2, [r3, #4]
  instant.gpioSck = HXSCK_GPIO_Port;
 8003c94:	4b38      	ldr	r3, [pc, #224]	; (8003d78 <main+0x148>)
 8003c96:	4a3a      	ldr	r2, [pc, #232]	; (8003d80 <main+0x150>)
 8003c98:	601a      	str	r2, [r3, #0]
  instant.pinData = HXDAT_Pin;
 8003c9a:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <main+0x148>)
 8003c9c:	2280      	movs	r2, #128	; 0x80
 8003c9e:	815a      	strh	r2, [r3, #10]
  instant.pinSck = HXSCK_Pin;
 8003ca0:	4b35      	ldr	r3, [pc, #212]	; (8003d78 <main+0x148>)
 8003ca2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ca6:	811a      	strh	r2, [r3, #8]
  instant.gain = 3;
 8003ca8:	4b33      	ldr	r3, [pc, #204]	; (8003d78 <main+0x148>)
 8003caa:	2203      	movs	r2, #3
 8003cac:	611a      	str	r2, [r3, #16]
  HX711_Init(instant);
 8003cae:	4b32      	ldr	r3, [pc, #200]	; (8003d78 <main+0x148>)
 8003cb0:	466c      	mov	r4, sp
 8003cb2:	f103 0210 	add.w	r2, r3, #16
 8003cb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cba:	e884 0003 	stmia.w	r4, {r0, r1}
 8003cbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003cc0:	f7fd f9d6 	bl	8001070 <HX711_Init>
  instant = HX711_Tare(instant, 15);
 8003cc4:	4e2c      	ldr	r6, [pc, #176]	; (8003d78 <main+0x148>)
 8003cc6:	463d      	mov	r5, r7
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <main+0x148>)
 8003cca:	220f      	movs	r2, #15
 8003ccc:	9203      	str	r2, [sp, #12]
 8003cce:	466c      	mov	r4, sp
 8003cd0:	f103 020c 	add.w	r2, r3, #12
 8003cd4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cdc:	4628      	mov	r0, r5
 8003cde:	f7fd fac0 	bl	8001262 <HX711_Tare>
 8003ce2:	4635      	mov	r5, r6
 8003ce4:	463c      	mov	r4, r7
 8003ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cee:	e885 0003 	stmia.w	r5, {r0, r1}
  uint32_t flashsize =*(uint32_t *) FLASHSIZE_BASE;
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <main+0x154>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
  UNUSED(flashsize);
  HAL_ADC_Start_DMA(&hadc1, adcBuff, 1300);
 8003cf8:	f240 5214 	movw	r2, #1300	; 0x514
 8003cfc:	4922      	ldr	r1, [pc, #136]	; (8003d88 <main+0x158>)
 8003cfe:	4823      	ldr	r0, [pc, #140]	; (8003d8c <main+0x15c>)
 8003d00:	f007 feb0 	bl	800ba64 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(TMC_EN_GPIO_Port, TMC_EN_Pin,GPIO_PIN_SET);
 8003d04:	2201      	movs	r2, #1
 8003d06:	2102      	movs	r1, #2
 8003d08:	4821      	ldr	r0, [pc, #132]	; (8003d90 <main+0x160>)
 8003d0a:	f009 f8a5 	bl	800ce58 <HAL_GPIO_WritePin>
  TimeSet(&htim11, 100000);
 8003d0e:	4921      	ldr	r1, [pc, #132]	; (8003d94 <main+0x164>)
 8003d10:	4821      	ldr	r0, [pc, #132]	; (8003d98 <main+0x168>)
 8003d12:	f007 fa81 	bl	800b218 <TimeSet>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8003d16:	213c      	movs	r1, #60	; 0x3c
 8003d18:	4820      	ldr	r0, [pc, #128]	; (8003d9c <main+0x16c>)
 8003d1a:	f00b fa4b 	bl	800f1b4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8003d1e:	213c      	movs	r1, #60	; 0x3c
 8003d20:	481f      	ldr	r0, [pc, #124]	; (8003da0 <main+0x170>)
 8003d22:	f00b fa47 	bl	800f1b4 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8003d26:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <main+0x174>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <main+0x174>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2200      	movs	r2, #0
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,0);
 8003d36:	4b1b      	ldr	r3, [pc, #108]	; (8003da4 <main+0x174>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4818      	ldr	r0, [pc, #96]	; (8003da4 <main+0x174>)
 8003d42:	f00b f967 	bl	800f014 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003d46:	2104      	movs	r1, #4
 8003d48:	4816      	ldr	r0, [pc, #88]	; (8003da4 <main+0x174>)
 8003d4a:	f00b f963 	bl	800f014 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003d4e:	2108      	movs	r1, #8
 8003d50:	4814      	ldr	r0, [pc, #80]	; (8003da4 <main+0x174>)
 8003d52:	f00b f95f 	bl	800f014 <HAL_TIM_PWM_Start>
  TimeSet(&htim13, 100000);
 8003d56:	490f      	ldr	r1, [pc, #60]	; (8003d94 <main+0x164>)
 8003d58:	4813      	ldr	r0, [pc, #76]	; (8003da8 <main+0x178>)
 8003d5a:	f007 fa5d 	bl	800b218 <TimeSet>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(isAutoApproach==1){
 8003d5e:	4b13      	ldr	r3, [pc, #76]	; (8003dac <main+0x17c>)
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d1fb      	bne.n	8003d5e <main+0x12e>
		  isAutoApproach=6;
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <main+0x17c>)
 8003d68:	2206      	movs	r2, #6
 8003d6a:	701a      	strb	r2, [r3, #0]
		  autoApproach(-1);
 8003d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d70:	f7fe ff82 	bl	8002c78 <autoApproach>
	  if(isAutoApproach==1){
 8003d74:	e7f3      	b.n	8003d5e <main+0x12e>
 8003d76:	bf00      	nop
 8003d78:	20006bc0 	.word	0x20006bc0
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40020800 	.word	0x40020800
 8003d84:	1fff7a22 	.word	0x1fff7a22
 8003d88:	200003a4 	.word	0x200003a4
 8003d8c:	20006b78 	.word	0x20006b78
 8003d90:	40020c00 	.word	0x40020c00
 8003d94:	000186a0 	.word	0x000186a0
 8003d98:	20006c78 	.word	0x20006c78
 8003d9c:	20006e48 	.word	0x20006e48
 8003da0:	20006a24 	.word	0x20006a24
 8003da4:	20006d44 	.word	0x20006d44
 8003da8:	20006bf8 	.word	0x20006bf8
 8003dac:	200002d8 	.word	0x200002d8

08003db0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003db6:	463b      	mov	r3, r7
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003dc2:	4b75      	ldr	r3, [pc, #468]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003dc4:	4a75      	ldr	r2, [pc, #468]	; (8003f9c <MX_ADC1_Init+0x1ec>)
 8003dc6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003dc8:	4b73      	ldr	r3, [pc, #460]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003dca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003dce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003dd0:	4b71      	ldr	r3, [pc, #452]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003dd6:	4b70      	ldr	r3, [pc, #448]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003dd8:	2201      	movs	r2, #1
 8003dda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003ddc:	4b6e      	ldr	r3, [pc, #440]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003de2:	4b6d      	ldr	r3, [pc, #436]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003dea:	4b6b      	ldr	r3, [pc, #428]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003df0:	4b69      	ldr	r3, [pc, #420]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003df2:	4a6b      	ldr	r2, [pc, #428]	; (8003fa0 <MX_ADC1_Init+0x1f0>)
 8003df4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003df6:	4b68      	ldr	r3, [pc, #416]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 13;
 8003dfc:	4b66      	ldr	r3, [pc, #408]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003dfe:	220d      	movs	r2, #13
 8003e00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003e02:	4b65      	ldr	r3, [pc, #404]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003e0a:	4b63      	ldr	r3, [pc, #396]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003e10:	4861      	ldr	r0, [pc, #388]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003e12:	f007 fde3 	bl	800b9dc <HAL_ADC_Init>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003e1c:	f000 fde0 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003e20:	2302      	movs	r3, #2
 8003e22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003e24:	2301      	movs	r3, #1
 8003e26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8003e28:	2302      	movs	r3, #2
 8003e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4859      	ldr	r0, [pc, #356]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003e32:	f007 ff1d 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003e3c:	f000 fdd0 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003e40:	2303      	movs	r3, #3
 8003e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003e44:	2302      	movs	r3, #2
 8003e46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e48:	463b      	mov	r3, r7
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4852      	ldr	r0, [pc, #328]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003e4e:	f007 ff0f 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003e58:	f000 fdc2 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003e60:	2303      	movs	r3, #3
 8003e62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e64:	463b      	mov	r3, r7
 8003e66:	4619      	mov	r1, r3
 8003e68:	484b      	ldr	r0, [pc, #300]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003e6a:	f007 ff01 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003e74:	f000 fdb4 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003e78:	2305      	movs	r3, #5
 8003e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003e7c:	2304      	movs	r3, #4
 8003e7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e80:	463b      	mov	r3, r7
 8003e82:	4619      	mov	r1, r3
 8003e84:	4844      	ldr	r0, [pc, #272]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003e86:	f007 fef3 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003e90:	f000 fda6 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003e94:	2306      	movs	r3, #6
 8003e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003e98:	2305      	movs	r3, #5
 8003e9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003e9c:	463b      	mov	r3, r7
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	483d      	ldr	r0, [pc, #244]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003ea2:	f007 fee5 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8003eac:	f000 fd98 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003eb0:	2308      	movs	r3, #8
 8003eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003eb4:	2306      	movs	r3, #6
 8003eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003eb8:	463b      	mov	r3, r7
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4836      	ldr	r0, [pc, #216]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003ebe:	f007 fed7 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8003ec8:	f000 fd8a 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003ecc:	2309      	movs	r3, #9
 8003ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003ed0:	2307      	movs	r3, #7
 8003ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ed4:	463b      	mov	r3, r7
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	482f      	ldr	r0, [pc, #188]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003eda:	f007 fec9 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8003ee4:	f000 fd7c 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003ee8:	230a      	movs	r3, #10
 8003eea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003eec:	2308      	movs	r3, #8
 8003eee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ef0:	463b      	mov	r3, r7
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4828      	ldr	r0, [pc, #160]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003ef6:	f007 febb 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8003f00:	f000 fd6e 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003f04:	230b      	movs	r3, #11
 8003f06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003f08:	2309      	movs	r3, #9
 8003f0a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f0c:	463b      	mov	r3, r7
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4821      	ldr	r0, [pc, #132]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003f12:	f007 fead 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8003f1c:	f000 fd60 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003f20:	230e      	movs	r3, #14
 8003f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003f24:	230a      	movs	r3, #10
 8003f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f28:	463b      	mov	r3, r7
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	481a      	ldr	r0, [pc, #104]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003f2e:	f007 fe9f 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8003f38:	f000 fd52 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003f3c:	230f      	movs	r3, #15
 8003f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003f40:	230b      	movs	r3, #11
 8003f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f44:	463b      	mov	r3, r7
 8003f46:	4619      	mov	r1, r3
 8003f48:	4813      	ldr	r0, [pc, #76]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003f4a:	f007 fe91 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8003f54:	f000 fd44 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003f58:	2310      	movs	r3, #16
 8003f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003f5c:	230c      	movs	r3, #12
 8003f5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f60:	463b      	mov	r3, r7
 8003f62:	4619      	mov	r1, r3
 8003f64:	480c      	ldr	r0, [pc, #48]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003f66:	f007 fe83 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_ADC1_Init+0x1c4>
  {
    Error_Handler();
 8003f70:	f000 fd36 	bl	80049e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003f74:	2311      	movs	r3, #17
 8003f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003f78:	230d      	movs	r3, #13
 8003f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f7c:	463b      	mov	r3, r7
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4805      	ldr	r0, [pc, #20]	; (8003f98 <MX_ADC1_Init+0x1e8>)
 8003f82:	f007 fe75 	bl	800bc70 <HAL_ADC_ConfigChannel>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_ADC1_Init+0x1e0>
  {
    Error_Handler();
 8003f8c:	f000 fd28 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20006b78 	.word	0x20006b78
 8003f9c:	40012000 	.word	0x40012000
 8003fa0:	0f000001 	.word	0x0f000001

08003fa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003fa8:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <MX_I2C1_Init+0x50>)
 8003faa:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <MX_I2C1_Init+0x54>)
 8003fac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003fae:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <MX_I2C1_Init+0x50>)
 8003fb0:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <MX_I2C1_Init+0x58>)
 8003fb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003fb4:	4b0f      	ldr	r3, [pc, #60]	; (8003ff4 <MX_I2C1_Init+0x50>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003fba:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <MX_I2C1_Init+0x50>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003fc0:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <MX_I2C1_Init+0x50>)
 8003fc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003fc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003fc8:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <MX_I2C1_Init+0x50>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <MX_I2C1_Init+0x50>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003fd4:	4b07      	ldr	r3, [pc, #28]	; (8003ff4 <MX_I2C1_Init+0x50>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003fda:	4b06      	ldr	r3, [pc, #24]	; (8003ff4 <MX_I2C1_Init+0x50>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003fe0:	4804      	ldr	r0, [pc, #16]	; (8003ff4 <MX_I2C1_Init+0x50>)
 8003fe2:	f008 ff85 	bl	800cef0 <HAL_I2C_Init>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003fec:	f000 fcf8 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ff0:	bf00      	nop
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	20006aa4 	.word	0x20006aa4
 8003ff8:	40005400 	.word	0x40005400
 8003ffc:	000186a0 	.word	0x000186a0

08004000 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004004:	4b12      	ldr	r3, [pc, #72]	; (8004050 <MX_I2C3_Init+0x50>)
 8004006:	4a13      	ldr	r2, [pc, #76]	; (8004054 <MX_I2C3_Init+0x54>)
 8004008:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800400a:	4b11      	ldr	r3, [pc, #68]	; (8004050 <MX_I2C3_Init+0x50>)
 800400c:	4a12      	ldr	r2, [pc, #72]	; (8004058 <MX_I2C3_Init+0x58>)
 800400e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004010:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <MX_I2C3_Init+0x50>)
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <MX_I2C3_Init+0x50>)
 8004018:	2200      	movs	r2, #0
 800401a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <MX_I2C3_Init+0x50>)
 800401e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004022:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004024:	4b0a      	ldr	r3, [pc, #40]	; (8004050 <MX_I2C3_Init+0x50>)
 8004026:	2200      	movs	r2, #0
 8004028:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <MX_I2C3_Init+0x50>)
 800402c:	2200      	movs	r2, #0
 800402e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004030:	4b07      	ldr	r3, [pc, #28]	; (8004050 <MX_I2C3_Init+0x50>)
 8004032:	2200      	movs	r2, #0
 8004034:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004036:	4b06      	ldr	r3, [pc, #24]	; (8004050 <MX_I2C3_Init+0x50>)
 8004038:	2200      	movs	r2, #0
 800403a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800403c:	4804      	ldr	r0, [pc, #16]	; (8004050 <MX_I2C3_Init+0x50>)
 800403e:	f008 ff57 	bl	800cef0 <HAL_I2C_Init>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004048:	f000 fcca 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800404c:	bf00      	nop
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20006978 	.word	0x20006978
 8004054:	40005c00 	.word	0x40005c00
 8004058:	000186a0 	.word	0x000186a0

0800405c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004060:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <MX_SDIO_SD_Init+0x38>)
 8004062:	4a0d      	ldr	r2, [pc, #52]	; (8004098 <MX_SDIO_SD_Init+0x3c>)
 8004064:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004066:	4b0b      	ldr	r3, [pc, #44]	; (8004094 <MX_SDIO_SD_Init+0x38>)
 8004068:	2200      	movs	r2, #0
 800406a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800406c:	4b09      	ldr	r3, [pc, #36]	; (8004094 <MX_SDIO_SD_Init+0x38>)
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004072:	4b08      	ldr	r3, [pc, #32]	; (8004094 <MX_SDIO_SD_Init+0x38>)
 8004074:	2200      	movs	r2, #0
 8004076:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <MX_SDIO_SD_Init+0x38>)
 800407a:	2200      	movs	r2, #0
 800407c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <MX_SDIO_SD_Init+0x38>)
 8004080:	2200      	movs	r2, #0
 8004082:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <MX_SDIO_SD_Init+0x38>)
 8004086:	2200      	movs	r2, #0
 8004088:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800408a:	bf00      	nop
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	20006dc4 	.word	0x20006dc4
 8004098:	40012c00 	.word	0x40012c00

0800409c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040a0:	4b17      	ldr	r3, [pc, #92]	; (8004100 <MX_SPI2_Init+0x64>)
 80040a2:	4a18      	ldr	r2, [pc, #96]	; (8004104 <MX_SPI2_Init+0x68>)
 80040a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <MX_SPI2_Init+0x64>)
 80040a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040ae:	4b14      	ldr	r3, [pc, #80]	; (8004100 <MX_SPI2_Init+0x64>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <MX_SPI2_Init+0x64>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040ba:	4b11      	ldr	r3, [pc, #68]	; (8004100 <MX_SPI2_Init+0x64>)
 80040bc:	2200      	movs	r2, #0
 80040be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <MX_SPI2_Init+0x64>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040c6:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <MX_SPI2_Init+0x64>)
 80040c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040ce:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <MX_SPI2_Init+0x64>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <MX_SPI2_Init+0x64>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <MX_SPI2_Init+0x64>)
 80040dc:	2200      	movs	r2, #0
 80040de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <MX_SPI2_Init+0x64>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <MX_SPI2_Init+0x64>)
 80040e8:	220a      	movs	r2, #10
 80040ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040ec:	4804      	ldr	r0, [pc, #16]	; (8004100 <MX_SPI2_Init+0x64>)
 80040ee:	f00a fe87 	bl	800ee00 <HAL_SPI_Init>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80040f8:	f000 fc72 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80040fc:	bf00      	nop
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	200069cc 	.word	0x200069cc
 8004104:	40003800 	.word	0x40003800

08004108 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b092      	sub	sp, #72	; 0x48
 800410c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800410e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	609a      	str	r2, [r3, #8]
 8004124:	60da      	str	r2, [r3, #12]
 8004126:	611a      	str	r2, [r3, #16]
 8004128:	615a      	str	r2, [r3, #20]
 800412a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800412c:	1d3b      	adds	r3, r7, #4
 800412e:	2220      	movs	r2, #32
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f00d fd01 	bl	8011b3a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004138:	4b3f      	ldr	r3, [pc, #252]	; (8004238 <MX_TIM1_Init+0x130>)
 800413a:	4a40      	ldr	r2, [pc, #256]	; (800423c <MX_TIM1_Init+0x134>)
 800413c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 199;
 800413e:	4b3e      	ldr	r3, [pc, #248]	; (8004238 <MX_TIM1_Init+0x130>)
 8004140:	22c7      	movs	r2, #199	; 0xc7
 8004142:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004144:	4b3c      	ldr	r3, [pc, #240]	; (8004238 <MX_TIM1_Init+0x130>)
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4199;
 800414a:	4b3b      	ldr	r3, [pc, #236]	; (8004238 <MX_TIM1_Init+0x130>)
 800414c:	f241 0267 	movw	r2, #4199	; 0x1067
 8004150:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004152:	4b39      	ldr	r3, [pc, #228]	; (8004238 <MX_TIM1_Init+0x130>)
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004158:	4b37      	ldr	r3, [pc, #220]	; (8004238 <MX_TIM1_Init+0x130>)
 800415a:	2200      	movs	r2, #0
 800415c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800415e:	4b36      	ldr	r3, [pc, #216]	; (8004238 <MX_TIM1_Init+0x130>)
 8004160:	2200      	movs	r2, #0
 8004162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004164:	4834      	ldr	r0, [pc, #208]	; (8004238 <MX_TIM1_Init+0x130>)
 8004166:	f00a ff29 	bl	800efbc <HAL_TIM_PWM_Init>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004170:	f000 fc36 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004174:	2300      	movs	r3, #0
 8004176:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004178:	2300      	movs	r3, #0
 800417a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800417c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004180:	4619      	mov	r1, r3
 8004182:	482d      	ldr	r0, [pc, #180]	; (8004238 <MX_TIM1_Init+0x130>)
 8004184:	f00b fe0c 	bl	800fda0 <HAL_TIMEx_MasterConfigSynchronization>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800418e:	f000 fc27 	bl	80049e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004192:	2360      	movs	r3, #96	; 0x60
 8004194:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800419a:	2300      	movs	r3, #0
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800419e:	2300      	movs	r3, #0
 80041a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041a6:	2300      	movs	r3, #0
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041aa:	2300      	movs	r3, #0
 80041ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b2:	2200      	movs	r2, #0
 80041b4:	4619      	mov	r1, r3
 80041b6:	4820      	ldr	r0, [pc, #128]	; (8004238 <MX_TIM1_Init+0x130>)
 80041b8:	f00b f93c 	bl	800f434 <HAL_TIM_PWM_ConfigChannel>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80041c2:	f000 fc0d 	bl	80049e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041ca:	2204      	movs	r2, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	481a      	ldr	r0, [pc, #104]	; (8004238 <MX_TIM1_Init+0x130>)
 80041d0:	f00b f930 	bl	800f434 <HAL_TIM_PWM_ConfigChannel>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80041da:	f000 fc01 	bl	80049e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041e2:	2208      	movs	r2, #8
 80041e4:	4619      	mov	r1, r3
 80041e6:	4814      	ldr	r0, [pc, #80]	; (8004238 <MX_TIM1_Init+0x130>)
 80041e8:	f00b f924 	bl	800f434 <HAL_TIM_PWM_ConfigChannel>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80041f2:	f000 fbf5 	bl	80049e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800420a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800420e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004210:	2300      	movs	r3, #0
 8004212:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	4619      	mov	r1, r3
 8004218:	4807      	ldr	r0, [pc, #28]	; (8004238 <MX_TIM1_Init+0x130>)
 800421a:	f00b fe3d 	bl	800fe98 <HAL_TIMEx_ConfigBreakDeadTime>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8004224:	f000 fbdc 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004228:	4803      	ldr	r0, [pc, #12]	; (8004238 <MX_TIM1_Init+0x130>)
 800422a:	f003 fa87 	bl	800773c <HAL_TIM_MspPostInit>

}
 800422e:	bf00      	nop
 8004230:	3748      	adds	r7, #72	; 0x48
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20006d44 	.word	0x20006d44
 800423c:	40010000 	.word	0x40010000

08004240 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08c      	sub	sp, #48	; 0x30
 8004244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004246:	f107 030c 	add.w	r3, r7, #12
 800424a:	2224      	movs	r2, #36	; 0x24
 800424c:	2100      	movs	r1, #0
 800424e:	4618      	mov	r0, r3
 8004250:	f00d fc73 	bl	8011b3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004254:	1d3b      	adds	r3, r7, #4
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800425c:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <MX_TIM2_Init+0xa4>)
 800425e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004262:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004264:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <MX_TIM2_Init+0xa4>)
 8004266:	2200      	movs	r2, #0
 8004268:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800426a:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <MX_TIM2_Init+0xa4>)
 800426c:	2200      	movs	r2, #0
 800426e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004270:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <MX_TIM2_Init+0xa4>)
 8004272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004276:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004278:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <MX_TIM2_Init+0xa4>)
 800427a:	2200      	movs	r2, #0
 800427c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800427e:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <MX_TIM2_Init+0xa4>)
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004284:	2303      	movs	r3, #3
 8004286:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004288:	2300      	movs	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800428c:	2301      	movs	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004290:	2300      	movs	r3, #0
 8004292:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004298:	2300      	movs	r3, #0
 800429a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800429c:	2301      	movs	r3, #1
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80042a0:	2300      	movs	r3, #0
 80042a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80042a8:	f107 030c 	add.w	r3, r7, #12
 80042ac:	4619      	mov	r1, r3
 80042ae:	480d      	ldr	r0, [pc, #52]	; (80042e4 <MX_TIM2_Init+0xa4>)
 80042b0:	f00a feee 	bl	800f090 <HAL_TIM_Encoder_Init>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80042ba:	f000 fb91 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042be:	2300      	movs	r3, #0
 80042c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80042c6:	1d3b      	adds	r3, r7, #4
 80042c8:	4619      	mov	r1, r3
 80042ca:	4806      	ldr	r0, [pc, #24]	; (80042e4 <MX_TIM2_Init+0xa4>)
 80042cc:	f00b fd68 	bl	800fda0 <HAL_TIMEx_MasterConfigSynchronization>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80042d6:	f000 fb83 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80042da:	bf00      	nop
 80042dc:	3730      	adds	r7, #48	; 0x30
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20006e48 	.word	0x20006e48

080042e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	; 0x30
 80042ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80042ee:	f107 030c 	add.w	r3, r7, #12
 80042f2:	2224      	movs	r2, #36	; 0x24
 80042f4:	2100      	movs	r1, #0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f00d fc1f 	bl	8011b3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042fc:	1d3b      	adds	r3, r7, #4
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004304:	4b20      	ldr	r3, [pc, #128]	; (8004388 <MX_TIM3_Init+0xa0>)
 8004306:	4a21      	ldr	r2, [pc, #132]	; (800438c <MX_TIM3_Init+0xa4>)
 8004308:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800430a:	4b1f      	ldr	r3, [pc, #124]	; (8004388 <MX_TIM3_Init+0xa0>)
 800430c:	2200      	movs	r2, #0
 800430e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004310:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <MX_TIM3_Init+0xa0>)
 8004312:	2200      	movs	r2, #0
 8004314:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004316:	4b1c      	ldr	r3, [pc, #112]	; (8004388 <MX_TIM3_Init+0xa0>)
 8004318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800431c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800431e:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <MX_TIM3_Init+0xa0>)
 8004320:	2200      	movs	r2, #0
 8004322:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004324:	4b18      	ldr	r3, [pc, #96]	; (8004388 <MX_TIM3_Init+0xa0>)
 8004326:	2280      	movs	r2, #128	; 0x80
 8004328:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800432a:	2303      	movs	r3, #3
 800432c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800432e:	2300      	movs	r3, #0
 8004330:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004332:	2301      	movs	r3, #1
 8004334:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800433e:	2300      	movs	r3, #0
 8004340:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004342:	2301      	movs	r3, #1
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004346:	2300      	movs	r3, #0
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800434e:	f107 030c 	add.w	r3, r7, #12
 8004352:	4619      	mov	r1, r3
 8004354:	480c      	ldr	r0, [pc, #48]	; (8004388 <MX_TIM3_Init+0xa0>)
 8004356:	f00a fe9b 	bl	800f090 <HAL_TIM_Encoder_Init>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d001      	beq.n	8004364 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004360:	f000 fb3e 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004364:	2300      	movs	r3, #0
 8004366:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800436c:	1d3b      	adds	r3, r7, #4
 800436e:	4619      	mov	r1, r3
 8004370:	4805      	ldr	r0, [pc, #20]	; (8004388 <MX_TIM3_Init+0xa0>)
 8004372:	f00b fd15 	bl	800fda0 <HAL_TIMEx_MasterConfigSynchronization>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800437c:	f000 fb30 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004380:	bf00      	nop
 8004382:	3730      	adds	r7, #48	; 0x30
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20006b38 	.word	0x20006b38
 800438c:	40000400 	.word	0x40000400

08004390 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b08c      	sub	sp, #48	; 0x30
 8004394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004396:	f107 030c 	add.w	r3, r7, #12
 800439a:	2224      	movs	r2, #36	; 0x24
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f00d fbcb 	bl	8011b3a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043a4:	1d3b      	adds	r3, r7, #4
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80043ac:	4b22      	ldr	r3, [pc, #136]	; (8004438 <MX_TIM8_Init+0xa8>)
 80043ae:	4a23      	ldr	r2, [pc, #140]	; (800443c <MX_TIM8_Init+0xac>)
 80043b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <MX_TIM8_Init+0xa8>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043b8:	4b1f      	ldr	r3, [pc, #124]	; (8004438 <MX_TIM8_Init+0xa8>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80043be:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <MX_TIM8_Init+0xa8>)
 80043c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c6:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <MX_TIM8_Init+0xa8>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80043cc:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <MX_TIM8_Init+0xa8>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043d2:	4b19      	ldr	r3, [pc, #100]	; (8004438 <MX_TIM8_Init+0xa8>)
 80043d4:	2280      	movs	r2, #128	; 0x80
 80043d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80043d8:	2303      	movs	r3, #3
 80043da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043dc:	2300      	movs	r3, #0
 80043de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043e0:	2301      	movs	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043ec:	2300      	movs	r3, #0
 80043ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043f0:	2301      	movs	r3, #1
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80043fc:	f107 030c 	add.w	r3, r7, #12
 8004400:	4619      	mov	r1, r3
 8004402:	480d      	ldr	r0, [pc, #52]	; (8004438 <MX_TIM8_Init+0xa8>)
 8004404:	f00a fe44 	bl	800f090 <HAL_TIM_Encoder_Init>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800440e:	f000 fae7 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004412:	2300      	movs	r3, #0
 8004414:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4806      	ldr	r0, [pc, #24]	; (8004438 <MX_TIM8_Init+0xa8>)
 8004420:	f00b fcbe 	bl	800fda0 <HAL_TIMEx_MasterConfigSynchronization>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800442a:	f000 fad9 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800442e:	bf00      	nop
 8004430:	3730      	adds	r7, #48	; 0x30
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20006a24 	.word	0x20006a24
 800443c:	40010400 	.word	0x40010400

08004440 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004446:	463b      	mov	r3, r7
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	605a      	str	r2, [r3, #4]
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004452:	4b16      	ldr	r3, [pc, #88]	; (80044ac <MX_TIM9_Init+0x6c>)
 8004454:	4a16      	ldr	r2, [pc, #88]	; (80044b0 <MX_TIM9_Init+0x70>)
 8004456:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <MX_TIM9_Init+0x6c>)
 800445a:	2200      	movs	r2, #0
 800445c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800445e:	4b13      	ldr	r3, [pc, #76]	; (80044ac <MX_TIM9_Init+0x6c>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8004464:	4b11      	ldr	r3, [pc, #68]	; (80044ac <MX_TIM9_Init+0x6c>)
 8004466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800446a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <MX_TIM9_Init+0x6c>)
 800446e:	2200      	movs	r2, #0
 8004470:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004472:	4b0e      	ldr	r3, [pc, #56]	; (80044ac <MX_TIM9_Init+0x6c>)
 8004474:	2200      	movs	r2, #0
 8004476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004478:	480c      	ldr	r0, [pc, #48]	; (80044ac <MX_TIM9_Init+0x6c>)
 800447a:	f00a fd25 	bl	800eec8 <HAL_TIM_Base_Init>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8004484:	f000 faac 	bl	80049e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800448c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800448e:	463b      	mov	r3, r7
 8004490:	4619      	mov	r1, r3
 8004492:	4806      	ldr	r0, [pc, #24]	; (80044ac <MX_TIM9_Init+0x6c>)
 8004494:	f00b f894 	bl	800f5c0 <HAL_TIM_ConfigClockSource>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800449e:	f000 fa9f 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20006d84 	.word	0x20006d84
 80044b0:	40014000 	.word	0x40014000

080044b4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80044b8:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <MX_TIM10_Init+0x40>)
 80044ba:	4a0f      	ldr	r2, [pc, #60]	; (80044f8 <MX_TIM10_Init+0x44>)
 80044bc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <MX_TIM10_Init+0x40>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <MX_TIM10_Init+0x40>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80044ca:	4b0a      	ldr	r3, [pc, #40]	; (80044f4 <MX_TIM10_Init+0x40>)
 80044cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044d0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <MX_TIM10_Init+0x40>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <MX_TIM10_Init+0x40>)
 80044da:	2200      	movs	r2, #0
 80044dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80044de:	4805      	ldr	r0, [pc, #20]	; (80044f4 <MX_TIM10_Init+0x40>)
 80044e0:	f00a fcf2 	bl	800eec8 <HAL_TIM_Base_Init>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80044ea:	f000 fa79 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80044ee:	bf00      	nop
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20006af8 	.word	0x20006af8
 80044f8:	40014400 	.word	0x40014400

080044fc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <MX_TIM11_Init+0x40>)
 8004502:	4a0f      	ldr	r2, [pc, #60]	; (8004540 <MX_TIM11_Init+0x44>)
 8004504:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004506:	4b0d      	ldr	r3, [pc, #52]	; (800453c <MX_TIM11_Init+0x40>)
 8004508:	2200      	movs	r2, #0
 800450a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <MX_TIM11_Init+0x40>)
 800450e:	2200      	movs	r2, #0
 8004510:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <MX_TIM11_Init+0x40>)
 8004514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004518:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <MX_TIM11_Init+0x40>)
 800451c:	2200      	movs	r2, #0
 800451e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004520:	4b06      	ldr	r3, [pc, #24]	; (800453c <MX_TIM11_Init+0x40>)
 8004522:	2200      	movs	r2, #0
 8004524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004526:	4805      	ldr	r0, [pc, #20]	; (800453c <MX_TIM11_Init+0x40>)
 8004528:	f00a fcce 	bl	800eec8 <HAL_TIM_Base_Init>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8004532:	f000 fa55 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20006c78 	.word	0x20006c78
 8004540:	40014800 	.word	0x40014800

08004544 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800454a:	463b      	mov	r3, r7
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	609a      	str	r2, [r3, #8]
 8004554:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004556:	4b16      	ldr	r3, [pc, #88]	; (80045b0 <MX_TIM12_Init+0x6c>)
 8004558:	4a16      	ldr	r2, [pc, #88]	; (80045b4 <MX_TIM12_Init+0x70>)
 800455a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800455c:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <MX_TIM12_Init+0x6c>)
 800455e:	2200      	movs	r2, #0
 8004560:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004562:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <MX_TIM12_Init+0x6c>)
 8004564:	2200      	movs	r2, #0
 8004566:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8004568:	4b11      	ldr	r3, [pc, #68]	; (80045b0 <MX_TIM12_Init+0x6c>)
 800456a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800456e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <MX_TIM12_Init+0x6c>)
 8004572:	2200      	movs	r2, #0
 8004574:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004576:	4b0e      	ldr	r3, [pc, #56]	; (80045b0 <MX_TIM12_Init+0x6c>)
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800457c:	480c      	ldr	r0, [pc, #48]	; (80045b0 <MX_TIM12_Init+0x6c>)
 800457e:	f00a fca3 	bl	800eec8 <HAL_TIM_Base_Init>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8004588:	f000 fa2a 	bl	80049e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800458c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004590:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004592:	463b      	mov	r3, r7
 8004594:	4619      	mov	r1, r3
 8004596:	4806      	ldr	r0, [pc, #24]	; (80045b0 <MX_TIM12_Init+0x6c>)
 8004598:	f00b f812 	bl	800f5c0 <HAL_TIM_ConfigClockSource>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80045a2:	f000 fa1d 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20006ec8 	.word	0x20006ec8
 80045b4:	40001800 	.word	0x40001800

080045b8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80045bc:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <MX_TIM13_Init+0x40>)
 80045be:	4a0f      	ldr	r2, [pc, #60]	; (80045fc <MX_TIM13_Init+0x44>)
 80045c0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 80045c2:	4b0d      	ldr	r3, [pc, #52]	; (80045f8 <MX_TIM13_Init+0x40>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <MX_TIM13_Init+0x40>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <MX_TIM13_Init+0x40>)
 80045d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045d4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d6:	4b08      	ldr	r3, [pc, #32]	; (80045f8 <MX_TIM13_Init+0x40>)
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <MX_TIM13_Init+0x40>)
 80045de:	2200      	movs	r2, #0
 80045e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80045e2:	4805      	ldr	r0, [pc, #20]	; (80045f8 <MX_TIM13_Init+0x40>)
 80045e4:	f00a fc70 	bl	800eec8 <HAL_TIM_Base_Init>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80045ee:	f000 f9f7 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20006bf8 	.word	0x20006bf8
 80045fc:	40001c00 	.word	0x40001c00

08004600 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004606:	4a12      	ldr	r2, [pc, #72]	; (8004650 <MX_USART1_UART_Init+0x50>)
 8004608:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800460a:	4b10      	ldr	r3, [pc, #64]	; (800464c <MX_USART1_UART_Init+0x4c>)
 800460c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8004610:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004612:	4b0e      	ldr	r3, [pc, #56]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004614:	2200      	movs	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <MX_USART1_UART_Init+0x4c>)
 800461a:	2200      	movs	r2, #0
 800461c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800461e:	4b0b      	ldr	r3, [pc, #44]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004620:	2200      	movs	r2, #0
 8004622:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004624:	4b09      	ldr	r3, [pc, #36]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004626:	220c      	movs	r2, #12
 8004628:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <MX_USART1_UART_Init+0x4c>)
 800462c:	2200      	movs	r2, #0
 800462e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004630:	4b06      	ldr	r3, [pc, #24]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004632:	2200      	movs	r2, #0
 8004634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004636:	4805      	ldr	r0, [pc, #20]	; (800464c <MX_USART1_UART_Init+0x4c>)
 8004638:	f00b fc94 	bl	800ff64 <HAL_UART_Init>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d001      	beq.n	8004646 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004642:	f000 f9cd 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20006c38 	.word	0x20006c38
 8004650:	40011000 	.word	0x40011000

08004654 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <MX_USART2_UART_Init+0x4c>)
 800465a:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <MX_USART2_UART_Init+0x50>)
 800465c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <MX_USART2_UART_Init+0x4c>)
 8004660:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004664:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004666:	4b0e      	ldr	r3, [pc, #56]	; (80046a0 <MX_USART2_UART_Init+0x4c>)
 8004668:	2200      	movs	r2, #0
 800466a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <MX_USART2_UART_Init+0x4c>)
 800466e:	2200      	movs	r2, #0
 8004670:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004672:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <MX_USART2_UART_Init+0x4c>)
 8004674:	2200      	movs	r2, #0
 8004676:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <MX_USART2_UART_Init+0x4c>)
 800467a:	220c      	movs	r2, #12
 800467c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800467e:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <MX_USART2_UART_Init+0x4c>)
 8004680:	2200      	movs	r2, #0
 8004682:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <MX_USART2_UART_Init+0x4c>)
 8004686:	2200      	movs	r2, #0
 8004688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800468a:	4805      	ldr	r0, [pc, #20]	; (80046a0 <MX_USART2_UART_Init+0x4c>)
 800468c:	f00b fc6a 	bl	800ff64 <HAL_UART_Init>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004696:	f000 f9a3 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	20006e88 	.word	0x20006e88
 80046a4:	40004400 	.word	0x40004400

080046a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80046ac:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <MX_USART3_UART_Init+0x4c>)
 80046ae:	4a12      	ldr	r2, [pc, #72]	; (80046f8 <MX_USART3_UART_Init+0x50>)
 80046b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <MX_USART3_UART_Init+0x4c>)
 80046b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80046ba:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <MX_USART3_UART_Init+0x4c>)
 80046bc:	2200      	movs	r2, #0
 80046be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80046c0:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <MX_USART3_UART_Init+0x4c>)
 80046c2:	2200      	movs	r2, #0
 80046c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <MX_USART3_UART_Init+0x4c>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80046cc:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <MX_USART3_UART_Init+0x4c>)
 80046ce:	220c      	movs	r2, #12
 80046d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <MX_USART3_UART_Init+0x4c>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <MX_USART3_UART_Init+0x4c>)
 80046da:	2200      	movs	r2, #0
 80046dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80046de:	4805      	ldr	r0, [pc, #20]	; (80046f4 <MX_USART3_UART_Init+0x4c>)
 80046e0:	f00b fc40 	bl	800ff64 <HAL_UART_Init>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80046ea:	f000 f979 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80046ee:	bf00      	nop
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20006a64 	.word	0x20006a64
 80046f8:	40004800 	.word	0x40004800

080046fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004702:	2300      	movs	r3, #0
 8004704:	607b      	str	r3, [r7, #4]
 8004706:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <MX_DMA_Init+0x3c>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	4a0b      	ldr	r2, [pc, #44]	; (8004738 <MX_DMA_Init+0x3c>)
 800470c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004710:	6313      	str	r3, [r2, #48]	; 0x30
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <MX_DMA_Init+0x3c>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 800471e:	2200      	movs	r2, #0
 8004720:	2102      	movs	r1, #2
 8004722:	2038      	movs	r0, #56	; 0x38
 8004724:	f007 fe1f 	bl	800c366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004728:	2038      	movs	r0, #56	; 0x38
 800472a:	f007 fe38 	bl	800c39e <HAL_NVIC_EnableIRQ>

}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40023800 	.word	0x40023800

0800473c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08c      	sub	sp, #48	; 0x30
 8004740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004742:	f107 031c 	add.w	r3, r7, #28
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	605a      	str	r2, [r3, #4]
 800474c:	609a      	str	r2, [r3, #8]
 800474e:	60da      	str	r2, [r3, #12]
 8004750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	4b99      	ldr	r3, [pc, #612]	; (80049bc <MX_GPIO_Init+0x280>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	4a98      	ldr	r2, [pc, #608]	; (80049bc <MX_GPIO_Init+0x280>)
 800475c:	f043 0310 	orr.w	r3, r3, #16
 8004760:	6313      	str	r3, [r2, #48]	; 0x30
 8004762:	4b96      	ldr	r3, [pc, #600]	; (80049bc <MX_GPIO_Init+0x280>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	4b92      	ldr	r3, [pc, #584]	; (80049bc <MX_GPIO_Init+0x280>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	4a91      	ldr	r2, [pc, #580]	; (80049bc <MX_GPIO_Init+0x280>)
 8004778:	f043 0304 	orr.w	r3, r3, #4
 800477c:	6313      	str	r3, [r2, #48]	; 0x30
 800477e:	4b8f      	ldr	r3, [pc, #572]	; (80049bc <MX_GPIO_Init+0x280>)
 8004780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	4b8b      	ldr	r3, [pc, #556]	; (80049bc <MX_GPIO_Init+0x280>)
 8004790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004792:	4a8a      	ldr	r2, [pc, #552]	; (80049bc <MX_GPIO_Init+0x280>)
 8004794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004798:	6313      	str	r3, [r2, #48]	; 0x30
 800479a:	4b88      	ldr	r3, [pc, #544]	; (80049bc <MX_GPIO_Init+0x280>)
 800479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	4b84      	ldr	r3, [pc, #528]	; (80049bc <MX_GPIO_Init+0x280>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	4a83      	ldr	r2, [pc, #524]	; (80049bc <MX_GPIO_Init+0x280>)
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	6313      	str	r3, [r2, #48]	; 0x30
 80047b6:	4b81      	ldr	r3, [pc, #516]	; (80049bc <MX_GPIO_Init+0x280>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	4b7d      	ldr	r3, [pc, #500]	; (80049bc <MX_GPIO_Init+0x280>)
 80047c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ca:	4a7c      	ldr	r2, [pc, #496]	; (80049bc <MX_GPIO_Init+0x280>)
 80047cc:	f043 0302 	orr.w	r3, r3, #2
 80047d0:	6313      	str	r3, [r2, #48]	; 0x30
 80047d2:	4b7a      	ldr	r3, [pc, #488]	; (80049bc <MX_GPIO_Init+0x280>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80047de:	2300      	movs	r3, #0
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	4b76      	ldr	r3, [pc, #472]	; (80049bc <MX_GPIO_Init+0x280>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a75      	ldr	r2, [pc, #468]	; (80049bc <MX_GPIO_Init+0x280>)
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b73      	ldr	r3, [pc, #460]	; (80049bc <MX_GPIO_Init+0x280>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, USER_LED_Pin|RUN_LED_Pin|TCRT5000_VCC_EN_Pin|XP_Pin
 80047fa:	2200      	movs	r2, #0
 80047fc:	217f      	movs	r1, #127	; 0x7f
 80047fe:	4870      	ldr	r0, [pc, #448]	; (80049c0 <MX_GPIO_Init+0x284>)
 8004800:	f008 fb2a 	bl	800ce58 <HAL_GPIO_WritePin>
                          |XN_Pin|X_CCW_Pin|X_CW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HXSCK_GPIO_Port, HXSCK_Pin, GPIO_PIN_RESET);
 8004804:	2200      	movs	r2, #0
 8004806:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800480a:	486e      	ldr	r0, [pc, #440]	; (80049c4 <MX_GPIO_Init+0x288>)
 800480c:	f008 fb24 	bl	800ce58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L293DD_ENABLE1_Pin|Y_CW_Pin|Y_CCW_Pin|MS1_Pin, GPIO_PIN_RESET);
 8004810:	2200      	movs	r2, #0
 8004812:	f24d 0108 	movw	r1, #53256	; 0xd008
 8004816:	486c      	ldr	r0, [pc, #432]	; (80049c8 <MX_GPIO_Init+0x28c>)
 8004818:	f008 fb1e 	bl	800ce58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MPU6050_AD0_Pin|MPU6050_AD1_Pin|MPU6050_AD2_Pin|YP_Pin
 800481c:	2200      	movs	r2, #0
 800481e:	f24e 719a 	movw	r1, #59290	; 0xe79a
 8004822:	486a      	ldr	r0, [pc, #424]	; (80049cc <MX_GPIO_Init+0x290>)
 8004824:	f008 fb18 	bl	800ce58 <HAL_GPIO_WritePin>
                          |YN_Pin|L293DD_ENABLE2_Pin|TMC_EN_Pin|DIR_Pin
                          |MS2_Pin|STEP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : USER_LED_Pin RUN_LED_Pin TCRT5000_VCC_EN_Pin XP_Pin
                           XN_Pin X_CCW_Pin X_CW_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin|RUN_LED_Pin|TCRT5000_VCC_EN_Pin|XP_Pin
 8004828:	237f      	movs	r3, #127	; 0x7f
 800482a:	61fb      	str	r3, [r7, #28]
                          |XN_Pin|X_CCW_Pin|X_CW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800482c:	2301      	movs	r3, #1
 800482e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004830:	2300      	movs	r3, #0
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004834:	2300      	movs	r3, #0
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004838:	f107 031c 	add.w	r3, r7, #28
 800483c:	4619      	mov	r1, r3
 800483e:	4860      	ldr	r0, [pc, #384]	; (80049c0 <MX_GPIO_Init+0x284>)
 8004840:	f008 f958 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT_Pin ENDSTOP_INPUT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin|ENDSTOP_INPUT_Pin;
 8004844:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800484a:	2300      	movs	r3, #0
 800484c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004852:	f107 031c 	add.w	r3, r7, #28
 8004856:	4619      	mov	r1, r3
 8004858:	485a      	ldr	r0, [pc, #360]	; (80049c4 <MX_GPIO_Init+0x288>)
 800485a:	f008 f94b 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HXSCK_Pin */
  GPIO_InitStruct.Pin = HXSCK_Pin;
 800485e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004864:	2301      	movs	r3, #1
 8004866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486c:	2300      	movs	r3, #0
 800486e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(HXSCK_GPIO_Port, &GPIO_InitStruct);
 8004870:	f107 031c 	add.w	r3, r7, #28
 8004874:	4619      	mov	r1, r3
 8004876:	4853      	ldr	r0, [pc, #332]	; (80049c4 <MX_GPIO_Init+0x288>)
 8004878:	f008 f93c 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JS1_Pin */
  GPIO_InitStruct.Pin = JS1_Pin;
 800487c:	2304      	movs	r3, #4
 800487e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004880:	4b53      	ldr	r3, [pc, #332]	; (80049d0 <MX_GPIO_Init+0x294>)
 8004882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004884:	2301      	movs	r3, #1
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JS1_GPIO_Port, &GPIO_InitStruct);
 8004888:	f107 031c 	add.w	r3, r7, #28
 800488c:	4619      	mov	r1, r3
 800488e:	484e      	ldr	r0, [pc, #312]	; (80049c8 <MX_GPIO_Init+0x28c>)
 8004890:	f008 f930 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HXDAT_Pin SDIO_CD_Pin */
  GPIO_InitStruct.Pin = HXDAT_Pin|SDIO_CD_Pin;
 8004894:	f248 0380 	movw	r3, #32896	; 0x8080
 8004898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800489a:	2300      	movs	r3, #0
 800489c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048a2:	f107 031c 	add.w	r3, r7, #28
 80048a6:	4619      	mov	r1, r3
 80048a8:	4845      	ldr	r0, [pc, #276]	; (80049c0 <MX_GPIO_Init+0x284>)
 80048aa:	f008 f923 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : JS2_Pin */
  GPIO_InitStruct.Pin = JS2_Pin;
 80048ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80048b4:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <MX_GPIO_Init+0x294>)
 80048b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048b8:	2301      	movs	r3, #1
 80048ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JS2_GPIO_Port, &GPIO_InitStruct);
 80048bc:	f107 031c 	add.w	r3, r7, #28
 80048c0:	4619      	mov	r1, r3
 80048c2:	483f      	ldr	r0, [pc, #252]	; (80049c0 <MX_GPIO_Init+0x284>)
 80048c4:	f008 f916 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : L293DD_ENABLE1_Pin Y_CW_Pin Y_CCW_Pin MS1_Pin */
  GPIO_InitStruct.Pin = L293DD_ENABLE1_Pin|Y_CW_Pin|Y_CCW_Pin|MS1_Pin;
 80048c8:	f24d 0308 	movw	r3, #53256	; 0xd008
 80048cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ce:	2301      	movs	r3, #1
 80048d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d6:	2300      	movs	r3, #0
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048da:	f107 031c 	add.w	r3, r7, #28
 80048de:	4619      	mov	r1, r3
 80048e0:	4839      	ldr	r0, [pc, #228]	; (80049c8 <MX_GPIO_Init+0x28c>)
 80048e2:	f008 f907 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MPU6050_AD0_Pin MPU6050_AD1_Pin MPU6050_AD2_Pin YP_Pin
                           YN_Pin L293DD_ENABLE2_Pin TMC_EN_Pin DIR_Pin
                           MS2_Pin STEP_Pin */
  GPIO_InitStruct.Pin = MPU6050_AD0_Pin|MPU6050_AD1_Pin|MPU6050_AD2_Pin|YP_Pin
 80048e6:	f24e 739a 	movw	r3, #59290	; 0xe79a
 80048ea:	61fb      	str	r3, [r7, #28]
                          |YN_Pin|L293DD_ENABLE2_Pin|TMC_EN_Pin|DIR_Pin
                          |MS2_Pin|STEP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048ec:	2301      	movs	r3, #1
 80048ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048f4:	2300      	movs	r3, #0
 80048f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048f8:	f107 031c 	add.w	r3, r7, #28
 80048fc:	4619      	mov	r1, r3
 80048fe:	4833      	ldr	r0, [pc, #204]	; (80049cc <MX_GPIO_Init+0x290>)
 8004900:	f008 f8f8 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESY_N_Pin ESX_N_Pin */
  GPIO_InitStruct.Pin = ESY_N_Pin|ESX_N_Pin;
 8004904:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800490a:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <MX_GPIO_Init+0x298>)
 800490c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490e:	2300      	movs	r3, #0
 8004910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004912:	f107 031c 	add.w	r3, r7, #28
 8004916:	4619      	mov	r1, r3
 8004918:	482c      	ldr	r0, [pc, #176]	; (80049cc <MX_GPIO_Init+0x290>)
 800491a:	f008 f8eb 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P_M_ADC2_SIGN_Pin P_M_ADC1_SIGN_Pin */
  GPIO_InitStruct.Pin = P_M_ADC2_SIGN_Pin|P_M_ADC1_SIGN_Pin;
 800491e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004924:	2300      	movs	r3, #0
 8004926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004928:	2300      	movs	r3, #0
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800492c:	f107 031c 	add.w	r3, r7, #28
 8004930:	4619      	mov	r1, r3
 8004932:	4829      	ldr	r0, [pc, #164]	; (80049d8 <MX_GPIO_Init+0x29c>)
 8004934:	f008 f8de 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_IND_Pin */
  GPIO_InitStruct.Pin = TMC_IND_Pin;
 8004938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800493e:	4b27      	ldr	r3, [pc, #156]	; (80049dc <MX_GPIO_Init+0x2a0>)
 8004940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004942:	2300      	movs	r3, #0
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TMC_IND_GPIO_Port, &GPIO_InitStruct);
 8004946:	f107 031c 	add.w	r3, r7, #28
 800494a:	4619      	mov	r1, r3
 800494c:	4822      	ldr	r0, [pc, #136]	; (80049d8 <MX_GPIO_Init+0x29c>)
 800494e:	f008 f8d1 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TMC_DIAG_Pin */
  GPIO_InitStruct.Pin = TMC_DIAG_Pin;
 8004952:	2301      	movs	r3, #1
 8004954:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004956:	2300      	movs	r3, #0
 8004958:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800495a:	2300      	movs	r3, #0
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TMC_DIAG_GPIO_Port, &GPIO_InitStruct);
 800495e:	f107 031c 	add.w	r3, r7, #28
 8004962:	4619      	mov	r1, r3
 8004964:	4819      	ldr	r0, [pc, #100]	; (80049cc <MX_GPIO_Init+0x290>)
 8004966:	f008 f8c5 	bl	800caf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESX_P_Pin ESY_P_Pin */
  GPIO_InitStruct.Pin = ESX_P_Pin|ESY_P_Pin;
 800496a:	23c0      	movs	r3, #192	; 0xc0
 800496c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800496e:	4b19      	ldr	r3, [pc, #100]	; (80049d4 <MX_GPIO_Init+0x298>)
 8004970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004972:	2300      	movs	r3, #0
 8004974:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004976:	f107 031c 	add.w	r3, r7, #28
 800497a:	4619      	mov	r1, r3
 800497c:	4812      	ldr	r0, [pc, #72]	; (80049c8 <MX_GPIO_Init+0x28c>)
 800497e:	f008 f8b9 	bl	800caf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8004982:	2200      	movs	r2, #0
 8004984:	2102      	movs	r1, #2
 8004986:	2008      	movs	r0, #8
 8004988:	f007 fced 	bl	800c366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800498c:	2008      	movs	r0, #8
 800498e:	f007 fd06 	bl	800c39e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8004992:	2200      	movs	r2, #0
 8004994:	2102      	movs	r1, #2
 8004996:	2017      	movs	r0, #23
 8004998:	f007 fce5 	bl	800c366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800499c:	2017      	movs	r0, #23
 800499e:	f007 fcfe 	bl	800c39e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80049a2:	2200      	movs	r2, #0
 80049a4:	2102      	movs	r1, #2
 80049a6:	2028      	movs	r0, #40	; 0x28
 80049a8:	f007 fcdd 	bl	800c366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80049ac:	2028      	movs	r0, #40	; 0x28
 80049ae:	f007 fcf6 	bl	800c39e <HAL_NVIC_EnableIRQ>

}
 80049b2:	bf00      	nop
 80049b4:	3730      	adds	r7, #48	; 0x30
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40020800 	.word	0x40020800
 80049c8:	40020400 	.word	0x40020400
 80049cc:	40020c00 	.word	0x40020c00
 80049d0:	10210000 	.word	0x10210000
 80049d4:	10310000 	.word	0x10310000
 80049d8:	40020000 	.word	0x40020000
 80049dc:	10110000 	.word	0x10110000

080049e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049e4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049e6:	e7fe      	b.n	80049e6 <Error_Handler+0x6>

080049e8 <PcRx>:
		1,					//ComId
		0,					//Result
		0					//ReceiveAcknowledge
};

void PcRx(void){
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	af00      	add	r7, sp, #0
	_uartcom3->RxCounter++;
 80049ec:	4b8d      	ldr	r3, [pc, #564]	; (8004c24 <PcRx+0x23c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695a      	ldr	r2, [r3, #20]
 80049f2:	3201      	adds	r2, #1
 80049f4:	615a      	str	r2, [r3, #20]
	TimeSet(&htim12, 100000);
 80049f6:	498c      	ldr	r1, [pc, #560]	; (8004c28 <PcRx+0x240>)
 80049f8:	488c      	ldr	r0, [pc, #560]	; (8004c2c <PcRx+0x244>)
 80049fa:	f006 fc0d 	bl	800b218 <TimeSet>
	Rx_Timer3=0;
 80049fe:	4b8c      	ldr	r3, [pc, #560]	; (8004c30 <PcRx+0x248>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
	readPc=1;
 8004a04:	4b8b      	ldr	r3, [pc, #556]	; (8004c34 <PcRx+0x24c>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
	if(contsend==1){
 8004a0a:	4b8b      	ldr	r3, [pc, #556]	; (8004c38 <PcRx+0x250>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d102      	bne.n	8004a18 <PcRx+0x30>
		contsend=2;
 8004a12:	4b89      	ldr	r3, [pc, #548]	; (8004c38 <PcRx+0x250>)
 8004a14:	2202      	movs	r2, #2
 8004a16:	601a      	str	r2, [r3, #0]
	}
	if(_uartcom3->RxSize > _uartcom3->RxCounter)
 8004a18:	4b82      	ldr	r3, [pc, #520]	; (8004c24 <PcRx+0x23c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	4b81      	ldr	r3, [pc, #516]	; (8004c24 <PcRx+0x23c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d948      	bls.n	8004aba <PcRx+0xd2>
	{
		_uartcom3->UResult^=Rx_Cplt;
 8004a28:	4b7e      	ldr	r3, [pc, #504]	; (8004c24 <PcRx+0x23c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	7e5a      	ldrb	r2, [r3, #25]
 8004a2e:	4b7d      	ldr	r3, [pc, #500]	; (8004c24 <PcRx+0x23c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f082 0201 	eor.w	r2, r2, #1
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	765a      	strb	r2, [r3, #25]
		HAL_UART_Receive_IT(&huart3, &_uartcom3->RxBuf[_uartcom3->RxCounter], 1);
 8004a3a:	4b7a      	ldr	r3, [pc, #488]	; (8004c24 <PcRx+0x23c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	4b78      	ldr	r3, [pc, #480]	; (8004c24 <PcRx+0x23c>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	4413      	add	r3, r2
 8004a48:	2201      	movs	r2, #1
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	487b      	ldr	r0, [pc, #492]	; (8004c3c <PcRx+0x254>)
 8004a4e:	f00b fb1b 	bl	8010088 <HAL_UART_Receive_IT>
		if(_uartcom3->RxBuf[_uartcom3->RxCounter]=='Q'&&_uartcom3->RxSize!=5){//Emergency control **sıfırlama
 8004a52:	4b74      	ldr	r3, [pc, #464]	; (8004c24 <PcRx+0x23c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	4b72      	ldr	r3, [pc, #456]	; (8004c24 <PcRx+0x23c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	4413      	add	r3, r2
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	2b51      	cmp	r3, #81	; 0x51
 8004a64:	d10e      	bne.n	8004a84 <PcRx+0x9c>
 8004a66:	4b6f      	ldr	r3, [pc, #444]	; (8004c24 <PcRx+0x23c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	2b05      	cmp	r3, #5
 8004a6e:	d009      	beq.n	8004a84 <PcRx+0x9c>
			emergency=1;
 8004a70:	4b73      	ldr	r3, [pc, #460]	; (8004c40 <PcRx+0x258>)
 8004a72:	2201      	movs	r2, #1
 8004a74:	601a      	str	r2, [r3, #0]
			Emergency(0);
 8004a76:	2000      	movs	r0, #0
 8004a78:	f7fe fe04 	bl	8003684 <Emergency>
			uart2say=0;
 8004a7c:	4b71      	ldr	r3, [pc, #452]	; (8004c44 <PcRx+0x25c>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
		}
		if(contsend==2){
			contsend=1;
		}
	}
}
 8004a82:	e3d3      	b.n	800522c <PcRx+0x844>
		else if(_uartcom3->RxBuf[_uartcom3->RxCounter]=='*'&&_uartcom3->RxSize!=5){
 8004a84:	4b67      	ldr	r3, [pc, #412]	; (8004c24 <PcRx+0x23c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	4b66      	ldr	r3, [pc, #408]	; (8004c24 <PcRx+0x23c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	4413      	add	r3, r2
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b2a      	cmp	r3, #42	; 0x2a
 8004a96:	f040 83c9 	bne.w	800522c <PcRx+0x844>
 8004a9a:	4b62      	ldr	r3, [pc, #392]	; (8004c24 <PcRx+0x23c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	2b05      	cmp	r3, #5
 8004aa2:	f000 83c3 	beq.w	800522c <PcRx+0x844>
			emergency=2;
 8004aa6:	4b66      	ldr	r3, [pc, #408]	; (8004c40 <PcRx+0x258>)
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	601a      	str	r2, [r3, #0]
			Emergency(1);
 8004aac:	2001      	movs	r0, #1
 8004aae:	f7fe fde9 	bl	8003684 <Emergency>
			uart2say=0;
 8004ab2:	4b64      	ldr	r3, [pc, #400]	; (8004c44 <PcRx+0x25c>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
}
 8004ab8:	e3b8      	b.n	800522c <PcRx+0x844>
		readPc=0;
 8004aba:	4b5e      	ldr	r3, [pc, #376]	; (8004c34 <PcRx+0x24c>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
		_uartcom3->UResult|=Rx_Cplt;
 8004ac0:	4b58      	ldr	r3, [pc, #352]	; (8004c24 <PcRx+0x23c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	7e5a      	ldrb	r2, [r3, #25]
 8004ac6:	4b57      	ldr	r3, [pc, #348]	; (8004c24 <PcRx+0x23c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0201 	orr.w	r2, r2, #1
 8004ace:	b2d2      	uxtb	r2, r2
 8004ad0:	765a      	strb	r2, [r3, #25]
		Rx_Timer3 = 0;
 8004ad2:	4b57      	ldr	r3, [pc, #348]	; (8004c30 <PcRx+0x248>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
		_uartcom3->RxCounter = 0;
 8004ad8:	4b52      	ldr	r3, [pc, #328]	; (8004c24 <PcRx+0x23c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2200      	movs	r2, #0
 8004ade:	615a      	str	r2, [r3, #20]
		if(_uartcom3->RxBuf[0]=='Q'){//Emergency control **sıfırlama
 8004ae0:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <PcRx+0x23c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b51      	cmp	r3, #81	; 0x51
 8004aea:	d109      	bne.n	8004b00 <PcRx+0x118>
			emergency=1;
 8004aec:	4b54      	ldr	r3, [pc, #336]	; (8004c40 <PcRx+0x258>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
			Emergency(0);
 8004af2:	2000      	movs	r0, #0
 8004af4:	f7fe fdc6 	bl	8003684 <Emergency>
			uart2say=0;
 8004af8:	4b52      	ldr	r3, [pc, #328]	; (8004c44 <PcRx+0x25c>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e38e      	b.n	800521e <PcRx+0x836>
		else if(_uartcom3->RxBuf[0]=='*'){
 8004b00:	4b48      	ldr	r3, [pc, #288]	; (8004c24 <PcRx+0x23c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	2b2a      	cmp	r3, #42	; 0x2a
 8004b0a:	d109      	bne.n	8004b20 <PcRx+0x138>
			emergency=2;
 8004b0c:	4b4c      	ldr	r3, [pc, #304]	; (8004c40 <PcRx+0x258>)
 8004b0e:	2202      	movs	r2, #2
 8004b10:	601a      	str	r2, [r3, #0]
			Emergency(1);
 8004b12:	2001      	movs	r0, #1
 8004b14:	f7fe fdb6 	bl	8003684 <Emergency>
			uart2say=0;
 8004b18:	4b4a      	ldr	r3, [pc, #296]	; (8004c44 <PcRx+0x25c>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e37e      	b.n	800521e <PcRx+0x836>
		else if(_uartcom3->RxBuf[0]=='Z'){
 8004b20:	4b40      	ldr	r3, [pc, #256]	; (8004c24 <PcRx+0x23c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b5a      	cmp	r3, #90	; 0x5a
 8004b2a:	d164      	bne.n	8004bf6 <PcRx+0x20e>
			movxy=0;
 8004b2c:	4b46      	ldr	r3, [pc, #280]	; (8004c48 <PcRx+0x260>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
			loadIndent=0;
 8004b32:	4b46      	ldr	r3, [pc, #280]	; (8004c4c <PcRx+0x264>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(L293DD_ENABLE1_GPIO_Port, L293DD_ENABLE1_Pin, GPIO_PIN_RESET);
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b3e:	4844      	ldr	r0, [pc, #272]	; (8004c50 <PcRx+0x268>)
 8004b40:	f008 f98a 	bl	800ce58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L293DD_ENABLE2_GPIO_Port, L293DD_ENABLE1_Pin, GPIO_PIN_RESET);
 8004b44:	2200      	movs	r2, #0
 8004b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004b4a:	4842      	ldr	r0, [pc, #264]	; (8004c54 <PcRx+0x26c>)
 8004b4c:	f008 f984 	bl	800ce58 <HAL_GPIO_WritePin>
			isAutoApproach=0;
 8004b50:	4b41      	ldr	r3, [pc, #260]	; (8004c58 <PcRx+0x270>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
			xmov=0;
 8004b56:	4b41      	ldr	r3, [pc, #260]	; (8004c5c <PcRx+0x274>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
			ymov=0;
 8004b5c:	4b40      	ldr	r3, [pc, #256]	; (8004c60 <PcRx+0x278>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
			joyint1=0;
 8004b62:	4b40      	ldr	r3, [pc, #256]	; (8004c64 <PcRx+0x27c>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
			joyint2=0;
 8004b68:	4b3f      	ldr	r3, [pc, #252]	; (8004c68 <PcRx+0x280>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
			eqstep=0;
 8004b6e:	4b3f      	ldr	r3, [pc, #252]	; (8004c6c <PcRx+0x284>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
			expcount=-1;
 8004b74:	4b3e      	ldr	r3, [pc, #248]	; (8004c70 <PcRx+0x288>)
 8004b76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b7a:	601a      	str	r2, [r3, #0]
			osc=0;
 8004b7c:	4b3d      	ldr	r3, [pc, #244]	; (8004c74 <PcRx+0x28c>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
			osccount=0;
 8004b82:	4b3d      	ldr	r3, [pc, #244]	; (8004c78 <PcRx+0x290>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
			oscpass=0;
 8004b88:	4b3c      	ldr	r3, [pc, #240]	; (8004c7c <PcRx+0x294>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
			oscdown=-1;
 8004b8e:	4b3c      	ldr	r3, [pc, #240]	; (8004c80 <PcRx+0x298>)
 8004b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b94:	601a      	str	r2, [r3, #0]
			sendexp=-1;
 8004b96:	4b3b      	ldr	r3, [pc, #236]	; (8004c84 <PcRx+0x29c>)
 8004b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b9c:	601a      	str	r2, [r3, #0]
			stopmot=1;
 8004b9e:	4b3a      	ldr	r3, [pc, #232]	; (8004c88 <PcRx+0x2a0>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
			S=0;
 8004ba4:	4b39      	ldr	r3, [pc, #228]	; (8004c8c <PcRx+0x2a4>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
			eqstepcounter=0;
 8004baa:	4b39      	ldr	r3, [pc, #228]	; (8004c90 <PcRx+0x2a8>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
			givecount=0;
 8004bb0:	4b38      	ldr	r3, [pc, #224]	; (8004c94 <PcRx+0x2ac>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]
			stepnum=1;
 8004bb6:	4b38      	ldr	r3, [pc, #224]	; (8004c98 <PcRx+0x2b0>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim11);
 8004bbc:	4837      	ldr	r0, [pc, #220]	; (8004c9c <PcRx+0x2b4>)
 8004bbe:	f00a f9d2 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
			HAL_TIM_Base_Stop_IT(&htim10);
 8004bc2:	4837      	ldr	r0, [pc, #220]	; (8004ca0 <PcRx+0x2b8>)
 8004bc4:	f00a f9cf 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
			emergency=1;
 8004bc8:	4b1d      	ldr	r3, [pc, #116]	; (8004c40 <PcRx+0x258>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
			if(htim9.Instance->DMAR==0){
 8004bce:	4b35      	ldr	r3, [pc, #212]	; (8004ca4 <PcRx+0x2bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d104      	bne.n	8004be2 <PcRx+0x1fa>
				SendPc("Stopped", 5, ID_FIND);
 8004bd8:	2202      	movs	r2, #2
 8004bda:	2105      	movs	r1, #5
 8004bdc:	4832      	ldr	r0, [pc, #200]	; (8004ca8 <PcRx+0x2c0>)
 8004bde:	f000 fb71 	bl	80052c4 <SendPc>
			uart2say=0;
 8004be2:	4b18      	ldr	r3, [pc, #96]	; (8004c44 <PcRx+0x25c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
			autoretract=0;
 8004be8:	4b30      	ldr	r3, [pc, #192]	; (8004cac <PcRx+0x2c4>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
			ProcessRx(3);
 8004bee:	2003      	movs	r0, #3
 8004bf0:	f000 fc00 	bl	80053f4 <ProcessRx>
 8004bf4:	e313      	b.n	800521e <PcRx+0x836>
		else if(_uartcom3->RxBuf[0]=='R'&&_uartcom3->RxBuf[1]=='e'){
 8004bf6:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <PcRx+0x23c>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b52      	cmp	r3, #82	; 0x52
 8004c00:	d158      	bne.n	8004cb4 <PcRx+0x2cc>
 8004c02:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <PcRx+0x23c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b65      	cmp	r3, #101	; 0x65
 8004c0e:	d151      	bne.n	8004cb4 <PcRx+0x2cc>
			SendPc(writingpc,_uartcom3->RxSize, 0);
 8004c10:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <PcRx+0x23c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2200      	movs	r2, #0
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4825      	ldr	r0, [pc, #148]	; (8004cb0 <PcRx+0x2c8>)
 8004c1c:	f000 fb52 	bl	80052c4 <SendPc>
 8004c20:	e2fd      	b.n	800521e <PcRx+0x836>
 8004c22:	bf00      	nop
 8004c24:	20006f30 	.word	0x20006f30
 8004c28:	000186a0 	.word	0x000186a0
 8004c2c:	20006ec8 	.word	0x20006ec8
 8004c30:	200018ac 	.word	0x200018ac
 8004c34:	2000186c 	.word	0x2000186c
 8004c38:	2000182c 	.word	0x2000182c
 8004c3c:	20006a64 	.word	0x20006a64
 8004c40:	200002cc 	.word	0x200002cc
 8004c44:	200018b0 	.word	0x200018b0
 8004c48:	20000368 	.word	0x20000368
 8004c4c:	2000038c 	.word	0x2000038c
 8004c50:	40020400 	.word	0x40020400
 8004c54:	40020c00 	.word	0x40020c00
 8004c58:	200002d8 	.word	0x200002d8
 8004c5c:	2000036c 	.word	0x2000036c
 8004c60:	20000370 	.word	0x20000370
 8004c64:	20001818 	.word	0x20001818
 8004c68:	2000181c 	.word	0x2000181c
 8004c6c:	200002e4 	.word	0x200002e4
 8004c70:	2000001c 	.word	0x2000001c
 8004c74:	20000314 	.word	0x20000314
 8004c78:	2000031c 	.word	0x2000031c
 8004c7c:	20000320 	.word	0x20000320
 8004c80:	200002dc 	.word	0x200002dc
 8004c84:	20000010 	.word	0x20000010
 8004c88:	2000033c 	.word	0x2000033c
 8004c8c:	200002c8 	.word	0x200002c8
 8004c90:	200002fc 	.word	0x200002fc
 8004c94:	200002d0 	.word	0x200002d0
 8004c98:	200002f8 	.word	0x200002f8
 8004c9c:	20006c78 	.word	0x20006c78
 8004ca0:	20006af8 	.word	0x20006af8
 8004ca4:	20006d84 	.word	0x20006d84
 8004ca8:	08011ec8 	.word	0x08011ec8
 8004cac:	200002e0 	.word	0x200002e0
 8004cb0:	20007290 	.word	0x20007290
		else if(_uartcom3->RxBuf[2]=='F'&&_uartcom3->RxBuf[3]=='I'&&_uartcom3->RxBuf[4]=='N'){
 8004cb4:	4b94      	ldr	r3, [pc, #592]	; (8004f08 <PcRx+0x520>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	3302      	adds	r3, #2
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b46      	cmp	r3, #70	; 0x46
 8004cc0:	f040 808c 	bne.w	8004ddc <PcRx+0x3f4>
 8004cc4:	4b90      	ldr	r3, [pc, #576]	; (8004f08 <PcRx+0x520>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	3303      	adds	r3, #3
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b49      	cmp	r3, #73	; 0x49
 8004cd0:	f040 8084 	bne.w	8004ddc <PcRx+0x3f4>
 8004cd4:	4b8c      	ldr	r3, [pc, #560]	; (8004f08 <PcRx+0x520>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	3304      	adds	r3, #4
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b4e      	cmp	r3, #78	; 0x4e
 8004ce0:	d17c      	bne.n	8004ddc <PcRx+0x3f4>
			if(_uartcom3->RxBuf[0]=='H'&&_uartcom3->RxBuf[1]=='X'){
 8004ce2:	4b89      	ldr	r3, [pc, #548]	; (8004f08 <PcRx+0x520>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	2b48      	cmp	r3, #72	; 0x48
 8004cec:	d10d      	bne.n	8004d0a <PcRx+0x322>
 8004cee:	4b86      	ldr	r3, [pc, #536]	; (8004f08 <PcRx+0x520>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	2b58      	cmp	r3, #88	; 0x58
 8004cfa:	d106      	bne.n	8004d0a <PcRx+0x322>
				contsend=0;
 8004cfc:	4b83      	ldr	r3, [pc, #524]	; (8004f0c <PcRx+0x524>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim10);
 8004d02:	4883      	ldr	r0, [pc, #524]	; (8004f10 <PcRx+0x528>)
 8004d04:	f00a f90b 	bl	800ef1e <HAL_TIM_Base_Start_IT>
 8004d08:	e067      	b.n	8004dda <PcRx+0x3f2>
			else if(_uartcom3->RxBuf[0]=='R'&&_uartcom3->RxBuf[1]=='E'){
 8004d0a:	4b7f      	ldr	r3, [pc, #508]	; (8004f08 <PcRx+0x520>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b52      	cmp	r3, #82	; 0x52
 8004d14:	d123      	bne.n	8004d5e <PcRx+0x376>
 8004d16:	4b7c      	ldr	r3, [pc, #496]	; (8004f08 <PcRx+0x520>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b45      	cmp	r3, #69	; 0x45
 8004d22:	d11c      	bne.n	8004d5e <PcRx+0x376>
				sendexp=1;
 8004d24:	4b7b      	ldr	r3, [pc, #492]	; (8004f14 <PcRx+0x52c>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
				if(isAutoApproach==5){//last retract finish
 8004d2a:	4b7b      	ldr	r3, [pc, #492]	; (8004f18 <PcRx+0x530>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d103      	bne.n	8004d3a <PcRx+0x352>
					isAutoApproach=0;
 8004d32:	4b79      	ldr	r3, [pc, #484]	; (8004f18 <PcRx+0x530>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	e00a      	b.n	8004d50 <PcRx+0x368>
					if(app){ //continue with approach routine
 8004d3a:	4b78      	ldr	r3, [pc, #480]	; (8004f1c <PcRx+0x534>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <PcRx+0x362>
						isAutoApproach=3;
 8004d42:	4b75      	ldr	r3, [pc, #468]	; (8004f18 <PcRx+0x530>)
 8004d44:	2203      	movs	r2, #3
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	e002      	b.n	8004d50 <PcRx+0x368>
						isAutoApproach=0;
 8004d4a:	4b73      	ldr	r3, [pc, #460]	; (8004f18 <PcRx+0x530>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	701a      	strb	r2, [r3, #0]
				holdcount=0;
 8004d50:	4b73      	ldr	r3, [pc, #460]	; (8004f20 <PcRx+0x538>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim10);
 8004d56:	486e      	ldr	r0, [pc, #440]	; (8004f10 <PcRx+0x528>)
 8004d58:	f00a f8e1 	bl	800ef1e <HAL_TIM_Base_Start_IT>
 8004d5c:	e03d      	b.n	8004dda <PcRx+0x3f2>
			else if(_uartcom3->RxBuf[0]=='A'&&_uartcom3->RxBuf[1]=='P'){
 8004d5e:	4b6a      	ldr	r3, [pc, #424]	; (8004f08 <PcRx+0x520>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b41      	cmp	r3, #65	; 0x41
 8004d68:	d111      	bne.n	8004d8e <PcRx+0x3a6>
 8004d6a:	4b67      	ldr	r3, [pc, #412]	; (8004f08 <PcRx+0x520>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	3301      	adds	r3, #1
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	2b50      	cmp	r3, #80	; 0x50
 8004d76:	d10a      	bne.n	8004d8e <PcRx+0x3a6>
				sendexp=1;
 8004d78:	4b66      	ldr	r3, [pc, #408]	; (8004f14 <PcRx+0x52c>)
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
				if(isAutoApproach==5){//approach finish
 8004d7e:	4b66      	ldr	r3, [pc, #408]	; (8004f18 <PcRx+0x530>)
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	2b05      	cmp	r3, #5
 8004d84:	d129      	bne.n	8004dda <PcRx+0x3f2>
					isAutoApproach=0;
 8004d86:	4b64      	ldr	r3, [pc, #400]	; (8004f18 <PcRx+0x530>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
				if(isAutoApproach==5){//approach finish
 8004d8c:	e025      	b.n	8004dda <PcRx+0x3f2>
			else if(_uartcom3->RxBuf[0]=='O'&&_uartcom3->RxBuf[1]=='S'){ // step transition to retract /& next step
 8004d8e:	4b5e      	ldr	r3, [pc, #376]	; (8004f08 <PcRx+0x520>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	2b4f      	cmp	r3, #79	; 0x4f
 8004d98:	d10a      	bne.n	8004db0 <PcRx+0x3c8>
 8004d9a:	4b5b      	ldr	r3, [pc, #364]	; (8004f08 <PcRx+0x520>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	3301      	adds	r3, #1
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b53      	cmp	r3, #83	; 0x53
 8004da6:	d103      	bne.n	8004db0 <PcRx+0x3c8>
				stepfin=1;
 8004da8:	4b5e      	ldr	r3, [pc, #376]	; (8004f24 <PcRx+0x53c>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
 8004dae:	e014      	b.n	8004dda <PcRx+0x3f2>
			else if(_uartcom3->RxBuf[0]=='I'&&_uartcom3->RxBuf[1]=='N'){
 8004db0:	4b55      	ldr	r3, [pc, #340]	; (8004f08 <PcRx+0x520>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b49      	cmp	r3, #73	; 0x49
 8004dba:	d10a      	bne.n	8004dd2 <PcRx+0x3ea>
 8004dbc:	4b52      	ldr	r3, [pc, #328]	; (8004f08 <PcRx+0x520>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b4e      	cmp	r3, #78	; 0x4e
 8004dc8:	d103      	bne.n	8004dd2 <PcRx+0x3ea>
				stepfin=1;
 8004dca:	4b56      	ldr	r3, [pc, #344]	; (8004f24 <PcRx+0x53c>)
 8004dcc:	2201      	movs	r2, #1
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	e003      	b.n	8004dda <PcRx+0x3f2>
				HAL_TIM_Base_Start_IT(&htim10);
 8004dd2:	484f      	ldr	r0, [pc, #316]	; (8004f10 <PcRx+0x528>)
 8004dd4:	f00a f8a3 	bl	800ef1e <HAL_TIM_Base_Start_IT>
			if(_uartcom3->RxBuf[0]=='H'&&_uartcom3->RxBuf[1]=='X'){
 8004dd8:	e221      	b.n	800521e <PcRx+0x836>
 8004dda:	e220      	b.n	800521e <PcRx+0x836>
		else if(_uartcom3->RxBuf[0]=='M'&&_uartcom3->RxBuf[4]=='D'){
 8004ddc:	4b4a      	ldr	r3, [pc, #296]	; (8004f08 <PcRx+0x520>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b4d      	cmp	r3, #77	; 0x4d
 8004de6:	d129      	bne.n	8004e3c <PcRx+0x454>
 8004de8:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <PcRx+0x520>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	3304      	adds	r3, #4
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	2b44      	cmp	r3, #68	; 0x44
 8004df4:	d122      	bne.n	8004e3c <PcRx+0x454>
			motsender[0]=0;
 8004df6:	4b4c      	ldr	r3, [pc, #304]	; (8004f28 <PcRx+0x540>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
			itoa(motpos,motsender,10);
 8004dfc:	4b4b      	ldr	r3, [pc, #300]	; (8004f2c <PcRx+0x544>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	220a      	movs	r2, #10
 8004e02:	4949      	ldr	r1, [pc, #292]	; (8004f28 <PcRx+0x540>)
 8004e04:	4618      	mov	r0, r3
 8004e06:	f00c fe8b 	bl	8011b20 <itoa>
			strcat(motsender,"PM\0");
 8004e0a:	4847      	ldr	r0, [pc, #284]	; (8004f28 <PcRx+0x540>)
 8004e0c:	f7fb f9dc 	bl	80001c8 <strlen>
 8004e10:	4603      	mov	r3, r0
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b44      	ldr	r3, [pc, #272]	; (8004f28 <PcRx+0x540>)
 8004e16:	4413      	add	r3, r2
 8004e18:	4a45      	ldr	r2, [pc, #276]	; (8004f30 <PcRx+0x548>)
 8004e1a:	8811      	ldrh	r1, [r2, #0]
 8004e1c:	7892      	ldrb	r2, [r2, #2]
 8004e1e:	8019      	strh	r1, [r3, #0]
 8004e20:	709a      	strb	r2, [r3, #2]
			SendPc(motsender, 5, ID_FIND);
 8004e22:	2202      	movs	r2, #2
 8004e24:	2105      	movs	r1, #5
 8004e26:	4840      	ldr	r0, [pc, #256]	; (8004f28 <PcRx+0x540>)
 8004e28:	f000 fa4c 	bl	80052c4 <SendPc>
			uart2say=1;
 8004e2c:	4b41      	ldr	r3, [pc, #260]	; (8004f34 <PcRx+0x54c>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]
			TimeSet(&htim12, 100000);
 8004e32:	4941      	ldr	r1, [pc, #260]	; (8004f38 <PcRx+0x550>)
 8004e34:	4841      	ldr	r0, [pc, #260]	; (8004f3c <PcRx+0x554>)
 8004e36:	f006 f9ef 	bl	800b218 <TimeSet>
 8004e3a:	e1f0      	b.n	800521e <PcRx+0x836>
		else if(_uartcom3->RxBuf[0]=='V'){
 8004e3c:	4b32      	ldr	r3, [pc, #200]	; (8004f08 <PcRx+0x520>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	2b56      	cmp	r3, #86	; 0x56
 8004e46:	d140      	bne.n	8004eca <PcRx+0x4e2>
			BUFGEN[0]=0;
 8004e48:	4b3d      	ldr	r3, [pc, #244]	; (8004f40 <PcRx+0x558>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	701a      	strb	r2, [r3, #0]
			BUFDEL[0] = 0;
 8004e4e:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <PcRx+0x55c>)
 8004e50:	2200      	movs	r2, #0
 8004e52:	701a      	strb	r2, [r3, #0]
			BUFSM[0]=0;
 8004e54:	4b3c      	ldr	r3, [pc, #240]	; (8004f48 <PcRx+0x560>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
			BUFSS[0]=0;
 8004e5a:	4b3c      	ldr	r3, [pc, #240]	; (8004f4c <PcRx+0x564>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	701a      	strb	r2, [r3, #0]
			memcpy(&BUFGEN,&_uartcom3->RxBuf[1],1);
 8004e60:	4b29      	ldr	r3, [pc, #164]	; (8004f08 <PcRx+0x520>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	3301      	adds	r3, #1
 8004e68:	781a      	ldrb	r2, [r3, #0]
 8004e6a:	4b35      	ldr	r3, [pc, #212]	; (8004f40 <PcRx+0x558>)
 8004e6c:	701a      	strb	r2, [r3, #0]
			memcpy(&BUFDEL,&_uartcom3->RxBuf[2],1);
 8004e6e:	4b26      	ldr	r3, [pc, #152]	; (8004f08 <PcRx+0x520>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	3302      	adds	r3, #2
 8004e76:	781a      	ldrb	r2, [r3, #0]
 8004e78:	4b32      	ldr	r3, [pc, #200]	; (8004f44 <PcRx+0x55c>)
 8004e7a:	701a      	strb	r2, [r3, #0]
			memcpy(&BUFSM,&_uartcom3->RxBuf[3],1);
 8004e7c:	4b22      	ldr	r3, [pc, #136]	; (8004f08 <PcRx+0x520>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	3303      	adds	r3, #3
 8004e84:	781a      	ldrb	r2, [r3, #0]
 8004e86:	4b30      	ldr	r3, [pc, #192]	; (8004f48 <PcRx+0x560>)
 8004e88:	701a      	strb	r2, [r3, #0]
			memcpy(&BUFSS,&_uartcom3->RxBuf[4],1);
 8004e8a:	4b1f      	ldr	r3, [pc, #124]	; (8004f08 <PcRx+0x520>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	3304      	adds	r3, #4
 8004e92:	781a      	ldrb	r2, [r3, #0]
 8004e94:	4b2d      	ldr	r3, [pc, #180]	; (8004f4c <PcRx+0x564>)
 8004e96:	701a      	strb	r2, [r3, #0]
			isHXcom=1;
 8004e98:	4b2d      	ldr	r3, [pc, #180]	; (8004f50 <PcRx+0x568>)
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]
			moveXY(atoi(BUFGEN), atoi(BUFDEL), atoi(BUFSM),atoi(BUFSS));
 8004e9e:	4828      	ldr	r0, [pc, #160]	; (8004f40 <PcRx+0x558>)
 8004ea0:	f00c fdfd 	bl	8011a9e <atoi>
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	4827      	ldr	r0, [pc, #156]	; (8004f44 <PcRx+0x55c>)
 8004ea8:	f00c fdf9 	bl	8011a9e <atoi>
 8004eac:	4605      	mov	r5, r0
 8004eae:	4826      	ldr	r0, [pc, #152]	; (8004f48 <PcRx+0x560>)
 8004eb0:	f00c fdf5 	bl	8011a9e <atoi>
 8004eb4:	4606      	mov	r6, r0
 8004eb6:	4825      	ldr	r0, [pc, #148]	; (8004f4c <PcRx+0x564>)
 8004eb8:	f00c fdf1 	bl	8011a9e <atoi>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	4632      	mov	r2, r6
 8004ec0:	4629      	mov	r1, r5
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f7fe f9c6 	bl	8003254 <moveXY>
 8004ec8:	e1a9      	b.n	800521e <PcRx+0x836>
		else if(_uartcom3->RxBuf[0]=='J'){
 8004eca:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <PcRx+0x520>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b4a      	cmp	r3, #74	; 0x4a
 8004ed4:	d144      	bne.n	8004f60 <PcRx+0x578>
			if(_uartcom3->RxBuf[2]=='E'){
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <PcRx+0x520>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	3302      	adds	r3, #2
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b45      	cmp	r3, #69	; 0x45
 8004ee2:	d108      	bne.n	8004ef6 <PcRx+0x50e>
				joyen=1;
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <PcRx+0x56c>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
				SendPc("Joystick Enabled!", 5, ID_FIND);
 8004eea:	2202      	movs	r2, #2
 8004eec:	2105      	movs	r1, #5
 8004eee:	481a      	ldr	r0, [pc, #104]	; (8004f58 <PcRx+0x570>)
 8004ef0:	f000 f9e8 	bl	80052c4 <SendPc>
 8004ef4:	e193      	b.n	800521e <PcRx+0x836>
				joyen=0;
 8004ef6:	4b17      	ldr	r3, [pc, #92]	; (8004f54 <PcRx+0x56c>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
				SendPc("Joystick Unenabled!", 5, ID_FIND);
 8004efc:	2202      	movs	r2, #2
 8004efe:	2105      	movs	r1, #5
 8004f00:	4816      	ldr	r0, [pc, #88]	; (8004f5c <PcRx+0x574>)
 8004f02:	f000 f9df 	bl	80052c4 <SendPc>
 8004f06:	e18a      	b.n	800521e <PcRx+0x836>
 8004f08:	20006f30 	.word	0x20006f30
 8004f0c:	2000182c 	.word	0x2000182c
 8004f10:	20006af8 	.word	0x20006af8
 8004f14:	20000010 	.word	0x20000010
 8004f18:	200002d8 	.word	0x200002d8
 8004f1c:	20006964 	.word	0x20006964
 8004f20:	20000324 	.word	0x20000324
 8004f24:	20001868 	.word	0x20001868
 8004f28:	20004ce0 	.word	0x20004ce0
 8004f2c:	20000360 	.word	0x20000360
 8004f30:	08011ed0 	.word	0x08011ed0
 8004f34:	200018b0 	.word	0x200018b0
 8004f38:	000186a0 	.word	0x000186a0
 8004f3c:	20006ec8 	.word	0x20006ec8
 8004f40:	20006f0c 	.word	0x20006f0c
 8004f44:	20006f18 	.word	0x20006f18
 8004f48:	20006f14 	.word	0x20006f14
 8004f4c:	20006f2c 	.word	0x20006f2c
 8004f50:	20001830 	.word	0x20001830
 8004f54:	20001814 	.word	0x20001814
 8004f58:	08011ed4 	.word	0x08011ed4
 8004f5c:	08011ee8 	.word	0x08011ee8
		else if(_uartcom3->RxBuf[0]=='C'&&_uartcom3->RxBuf[1]=='D'&&_uartcom3->RxBuf[2]=='A'){
 8004f60:	4b8c      	ldr	r3, [pc, #560]	; (8005194 <PcRx+0x7ac>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b43      	cmp	r3, #67	; 0x43
 8004f6a:	d156      	bne.n	800501a <PcRx+0x632>
 8004f6c:	4b89      	ldr	r3, [pc, #548]	; (8005194 <PcRx+0x7ac>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	3301      	adds	r3, #1
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b44      	cmp	r3, #68	; 0x44
 8004f78:	d14f      	bne.n	800501a <PcRx+0x632>
 8004f7a:	4b86      	ldr	r3, [pc, #536]	; (8005194 <PcRx+0x7ac>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	3302      	adds	r3, #2
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b41      	cmp	r3, #65	; 0x41
 8004f86:	d148      	bne.n	800501a <PcRx+0x632>
			if(_uartcom3->RxBuf[4]=='1'){
 8004f88:	4b82      	ldr	r3, [pc, #520]	; (8005194 <PcRx+0x7ac>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b31      	cmp	r3, #49	; 0x31
 8004f94:	d120      	bne.n	8004fd8 <PcRx+0x5f0>
				datasender[0]=0;
 8004f96:	4b80      	ldr	r3, [pc, #512]	; (8005198 <PcRx+0x7b0>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	701a      	strb	r2, [r3, #0]
				itoa(mpu[1],datasender,10);
 8004f9c:	4b7f      	ldr	r3, [pc, #508]	; (800519c <PcRx+0x7b4>)
 8004f9e:	885b      	ldrh	r3, [r3, #2]
 8004fa0:	220a      	movs	r2, #10
 8004fa2:	497d      	ldr	r1, [pc, #500]	; (8005198 <PcRx+0x7b0>)
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f00c fdbb 	bl	8011b20 <itoa>
				strcat(datasender,"YGY\0");
 8004faa:	487b      	ldr	r0, [pc, #492]	; (8005198 <PcRx+0x7b0>)
 8004fac:	f7fb f90c 	bl	80001c8 <strlen>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4b78      	ldr	r3, [pc, #480]	; (8005198 <PcRx+0x7b0>)
 8004fb6:	4413      	add	r3, r2
 8004fb8:	4a79      	ldr	r2, [pc, #484]	; (80051a0 <PcRx+0x7b8>)
 8004fba:	6810      	ldr	r0, [r2, #0]
 8004fbc:	6018      	str	r0, [r3, #0]
				SendPc(datasender, 5, ID_FIND);
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	2105      	movs	r1, #5
 8004fc2:	4875      	ldr	r0, [pc, #468]	; (8005198 <PcRx+0x7b0>)
 8004fc4:	f000 f97e 	bl	80052c4 <SendPc>
				uart2say=1;
 8004fc8:	4b76      	ldr	r3, [pc, #472]	; (80051a4 <PcRx+0x7bc>)
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12,100000);
 8004fce:	4976      	ldr	r1, [pc, #472]	; (80051a8 <PcRx+0x7c0>)
 8004fd0:	4876      	ldr	r0, [pc, #472]	; (80051ac <PcRx+0x7c4>)
 8004fd2:	f006 f921 	bl	800b218 <TimeSet>
			if(_uartcom3->RxBuf[4]=='1'){
 8004fd6:	e122      	b.n	800521e <PcRx+0x836>
				datasender[0]=0;
 8004fd8:	4b6f      	ldr	r3, [pc, #444]	; (8005198 <PcRx+0x7b0>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
				itoa(mpu[2],datasender,10);
 8004fde:	4b6f      	ldr	r3, [pc, #444]	; (800519c <PcRx+0x7b4>)
 8004fe0:	889b      	ldrh	r3, [r3, #4]
 8004fe2:	220a      	movs	r2, #10
 8004fe4:	496c      	ldr	r1, [pc, #432]	; (8005198 <PcRx+0x7b0>)
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f00c fd9a 	bl	8011b20 <itoa>
				strcat(datasender,"ZGY\0");
 8004fec:	486a      	ldr	r0, [pc, #424]	; (8005198 <PcRx+0x7b0>)
 8004fee:	f7fb f8eb 	bl	80001c8 <strlen>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4b68      	ldr	r3, [pc, #416]	; (8005198 <PcRx+0x7b0>)
 8004ff8:	4413      	add	r3, r2
 8004ffa:	4a6d      	ldr	r2, [pc, #436]	; (80051b0 <PcRx+0x7c8>)
 8004ffc:	6810      	ldr	r0, [r2, #0]
 8004ffe:	6018      	str	r0, [r3, #0]
				SendPc(datasender, 5, ID_FIND);
 8005000:	2202      	movs	r2, #2
 8005002:	2105      	movs	r1, #5
 8005004:	4864      	ldr	r0, [pc, #400]	; (8005198 <PcRx+0x7b0>)
 8005006:	f000 f95d 	bl	80052c4 <SendPc>
				uart2say=1;
 800500a:	4b66      	ldr	r3, [pc, #408]	; (80051a4 <PcRx+0x7bc>)
 800500c:	2201      	movs	r2, #1
 800500e:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12,100000);
 8005010:	4965      	ldr	r1, [pc, #404]	; (80051a8 <PcRx+0x7c0>)
 8005012:	4866      	ldr	r0, [pc, #408]	; (80051ac <PcRx+0x7c4>)
 8005014:	f006 f900 	bl	800b218 <TimeSet>
			if(_uartcom3->RxBuf[4]=='1'){
 8005018:	e101      	b.n	800521e <PcRx+0x836>
		else if(_uartcom3->RxBuf[0]=='L'&&_uartcom3->RxBuf[1]=='P'){
 800501a:	4b5e      	ldr	r3, [pc, #376]	; (8005194 <PcRx+0x7ac>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	2b4c      	cmp	r3, #76	; 0x4c
 8005024:	d130      	bne.n	8005088 <PcRx+0x6a0>
 8005026:	4b5b      	ldr	r3, [pc, #364]	; (8005194 <PcRx+0x7ac>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	3301      	adds	r3, #1
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b50      	cmp	r3, #80	; 0x50
 8005032:	d129      	bne.n	8005088 <PcRx+0x6a0>
			if(_uartcom3->RxBuf[2]=='+'){
 8005034:	4b57      	ldr	r3, [pc, #348]	; (8005194 <PcRx+0x7ac>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	3302      	adds	r3, #2
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	2b2b      	cmp	r3, #43	; 0x2b
 8005040:	d103      	bne.n	800504a <PcRx+0x662>
				pcDecision=1;
 8005042:	4b5c      	ldr	r3, [pc, #368]	; (80051b4 <PcRx+0x7cc>)
 8005044:	2201      	movs	r2, #1
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	e018      	b.n	800507c <PcRx+0x694>
			else if(_uartcom3->RxBuf[2]=='-'){
 800504a:	4b52      	ldr	r3, [pc, #328]	; (8005194 <PcRx+0x7ac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	3302      	adds	r3, #2
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b2d      	cmp	r3, #45	; 0x2d
 8005056:	d103      	bne.n	8005060 <PcRx+0x678>
				pcDecision=2;
 8005058:	4b56      	ldr	r3, [pc, #344]	; (80051b4 <PcRx+0x7cc>)
 800505a:	2202      	movs	r2, #2
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e00d      	b.n	800507c <PcRx+0x694>
			else if(_uartcom3->RxBuf[2]=='H'){
 8005060:	4b4c      	ldr	r3, [pc, #304]	; (8005194 <PcRx+0x7ac>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	3302      	adds	r3, #2
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b48      	cmp	r3, #72	; 0x48
 800506c:	d103      	bne.n	8005076 <PcRx+0x68e>
				pcDecision=3;
 800506e:	4b51      	ldr	r3, [pc, #324]	; (80051b4 <PcRx+0x7cc>)
 8005070:	2203      	movs	r2, #3
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e002      	b.n	800507c <PcRx+0x694>
				pcDecision=0;
 8005076:	4b4f      	ldr	r3, [pc, #316]	; (80051b4 <PcRx+0x7cc>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
			SendPc("Load Control via PC", 5, OLD_ID);
 800507c:	2200      	movs	r2, #0
 800507e:	2105      	movs	r1, #5
 8005080:	484d      	ldr	r0, [pc, #308]	; (80051b8 <PcRx+0x7d0>)
 8005082:	f000 f91f 	bl	80052c4 <SendPc>
 8005086:	e0ca      	b.n	800521e <PcRx+0x836>
		else if(_uartcom3->RxBuf[0]=='T'&&_uartcom3->RxSize==6){
 8005088:	4b42      	ldr	r3, [pc, #264]	; (8005194 <PcRx+0x7ac>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b54      	cmp	r3, #84	; 0x54
 8005092:	f040 809f 	bne.w	80051d4 <PcRx+0x7ec>
 8005096:	4b3f      	ldr	r3, [pc, #252]	; (8005194 <PcRx+0x7ac>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	2b06      	cmp	r3, #6
 800509e:	f040 8099 	bne.w	80051d4 <PcRx+0x7ec>
			memcpy(&BUFGEN,&_uartcom3->RxBuf[1],1);
 80050a2:	4b3c      	ldr	r3, [pc, #240]	; (8005194 <PcRx+0x7ac>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	3301      	adds	r3, #1
 80050aa:	781a      	ldrb	r2, [r3, #0]
 80050ac:	4b43      	ldr	r3, [pc, #268]	; (80051bc <PcRx+0x7d4>)
 80050ae:	701a      	strb	r2, [r3, #0]
			contact = 10000 * atoi(BUFGEN);
 80050b0:	4842      	ldr	r0, [pc, #264]	; (80051bc <PcRx+0x7d4>)
 80050b2:	f00c fcf4 	bl	8011a9e <atoi>
 80050b6:	4602      	mov	r2, r0
 80050b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80050bc:	fb03 f302 	mul.w	r3, r3, r2
 80050c0:	4a3f      	ldr	r2, [pc, #252]	; (80051c0 <PcRx+0x7d8>)
 80050c2:	6013      	str	r3, [r2, #0]
			memcpy(&BUFGEN,&_uartcom3->RxBuf[2],1);
 80050c4:	4b33      	ldr	r3, [pc, #204]	; (8005194 <PcRx+0x7ac>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	3302      	adds	r3, #2
 80050cc:	781a      	ldrb	r2, [r3, #0]
 80050ce:	4b3b      	ldr	r3, [pc, #236]	; (80051bc <PcRx+0x7d4>)
 80050d0:	701a      	strb	r2, [r3, #0]
			contact = contact + 1000 * atoi(BUFGEN);
 80050d2:	483a      	ldr	r0, [pc, #232]	; (80051bc <PcRx+0x7d4>)
 80050d4:	f00c fce3 	bl	8011a9e <atoi>
 80050d8:	4602      	mov	r2, r0
 80050da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050de:	fb03 f202 	mul.w	r2, r3, r2
 80050e2:	4b37      	ldr	r3, [pc, #220]	; (80051c0 <PcRx+0x7d8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4413      	add	r3, r2
 80050e8:	4a35      	ldr	r2, [pc, #212]	; (80051c0 <PcRx+0x7d8>)
 80050ea:	6013      	str	r3, [r2, #0]
			memcpy(&BUFGEN,&_uartcom3->RxBuf[3],1);
 80050ec:	4b29      	ldr	r3, [pc, #164]	; (8005194 <PcRx+0x7ac>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	3303      	adds	r3, #3
 80050f4:	781a      	ldrb	r2, [r3, #0]
 80050f6:	4b31      	ldr	r3, [pc, #196]	; (80051bc <PcRx+0x7d4>)
 80050f8:	701a      	strb	r2, [r3, #0]
			contact = contact + 100 * atoi(BUFGEN);
 80050fa:	4830      	ldr	r0, [pc, #192]	; (80051bc <PcRx+0x7d4>)
 80050fc:	f00c fccf 	bl	8011a9e <atoi>
 8005100:	4602      	mov	r2, r0
 8005102:	2364      	movs	r3, #100	; 0x64
 8005104:	fb03 f202 	mul.w	r2, r3, r2
 8005108:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <PcRx+0x7d8>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4413      	add	r3, r2
 800510e:	4a2c      	ldr	r2, [pc, #176]	; (80051c0 <PcRx+0x7d8>)
 8005110:	6013      	str	r3, [r2, #0]
			memcpy(&BUFGEN,&_uartcom3->RxBuf[4],1);
 8005112:	4b20      	ldr	r3, [pc, #128]	; (8005194 <PcRx+0x7ac>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	3304      	adds	r3, #4
 800511a:	781a      	ldrb	r2, [r3, #0]
 800511c:	4b27      	ldr	r3, [pc, #156]	; (80051bc <PcRx+0x7d4>)
 800511e:	701a      	strb	r2, [r3, #0]
			contact = contact + 10 * atoi(BUFGEN);
 8005120:	4826      	ldr	r0, [pc, #152]	; (80051bc <PcRx+0x7d4>)
 8005122:	f00c fcbc 	bl	8011a9e <atoi>
 8005126:	4602      	mov	r2, r0
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	461a      	mov	r2, r3
 8005132:	4b23      	ldr	r3, [pc, #140]	; (80051c0 <PcRx+0x7d8>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4413      	add	r3, r2
 8005138:	4a21      	ldr	r2, [pc, #132]	; (80051c0 <PcRx+0x7d8>)
 800513a:	6013      	str	r3, [r2, #0]
			memcpy(&BUFGEN,&_uartcom3->RxBuf[5],1);
 800513c:	4b15      	ldr	r3, [pc, #84]	; (8005194 <PcRx+0x7ac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	3305      	adds	r3, #5
 8005144:	781a      	ldrb	r2, [r3, #0]
 8005146:	4b1d      	ldr	r3, [pc, #116]	; (80051bc <PcRx+0x7d4>)
 8005148:	701a      	strb	r2, [r3, #0]
			contact = contact + atoi(BUFGEN);
 800514a:	481c      	ldr	r0, [pc, #112]	; (80051bc <PcRx+0x7d4>)
 800514c:	f00c fca7 	bl	8011a9e <atoi>
 8005150:	4602      	mov	r2, r0
 8005152:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <PcRx+0x7d8>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4413      	add	r3, r2
 8005158:	4a19      	ldr	r2, [pc, #100]	; (80051c0 <PcRx+0x7d8>)
 800515a:	6013      	str	r3, [r2, #0]
			if(loadFeed==0){
 800515c:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <PcRx+0x7dc>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d106      	bne.n	8005172 <PcRx+0x78a>
				contact=contact+instant.scalelive; //extra conversion multiplication may be used
 8005164:	4b18      	ldr	r3, [pc, #96]	; (80051c8 <PcRx+0x7e0>)
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <PcRx+0x7d8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4413      	add	r3, r2
 800516e:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <PcRx+0x7d8>)
 8005170:	6013      	str	r3, [r2, #0]
			if(loadFeed==1){
 8005172:	4b14      	ldr	r3, [pc, #80]	; (80051c4 <PcRx+0x7dc>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d106      	bne.n	8005188 <PcRx+0x7a0>
				contact=contact+strain; //extra conversion multiplication may be used
 800517a:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <PcRx+0x7d8>)
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <PcRx+0x7e4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4413      	add	r3, r2
 8005184:	4a0e      	ldr	r2, [pc, #56]	; (80051c0 <PcRx+0x7d8>)
 8005186:	6013      	str	r3, [r2, #0]
			SendPc("Contact Point Saved", 5, OLD_ID);
 8005188:	2200      	movs	r2, #0
 800518a:	2105      	movs	r1, #5
 800518c:	4810      	ldr	r0, [pc, #64]	; (80051d0 <PcRx+0x7e8>)
 800518e:	f000 f899 	bl	80052c4 <SendPc>
 8005192:	e044      	b.n	800521e <PcRx+0x836>
 8005194:	20006f30 	.word	0x20006f30
 8005198:	20006bd8 	.word	0x20006bd8
 800519c:	2000039c 	.word	0x2000039c
 80051a0:	08011efc 	.word	0x08011efc
 80051a4:	200018b0 	.word	0x200018b0
 80051a8:	000186a0 	.word	0x000186a0
 80051ac:	20006ec8 	.word	0x20006ec8
 80051b0:	08011f04 	.word	0x08011f04
 80051b4:	20001860 	.word	0x20001860
 80051b8:	08011f0c 	.word	0x08011f0c
 80051bc:	20006f0c 	.word	0x20006f0c
 80051c0:	20001828 	.word	0x20001828
 80051c4:	2000030c 	.word	0x2000030c
 80051c8:	20006bc0 	.word	0x20006bc0
 80051cc:	200002bc 	.word	0x200002bc
 80051d0:	08011f20 	.word	0x08011f20
			if(contsend==2){
 80051d4:	4b16      	ldr	r3, [pc, #88]	; (8005230 <PcRx+0x848>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d102      	bne.n	80051e2 <PcRx+0x7fa>
				contsend=3;
 80051dc:	4b14      	ldr	r3, [pc, #80]	; (8005230 <PcRx+0x848>)
 80051de:	2203      	movs	r2, #3
 80051e0:	601a      	str	r2, [r3, #0]
			reader[0]=0;
 80051e2:	4b14      	ldr	r3, [pc, #80]	; (8005234 <PcRx+0x84c>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
			emergency=0;
 80051e8:	4b13      	ldr	r3, [pc, #76]	; (8005238 <PcRx+0x850>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
			memcpy(&reader,&_uartcom3->RxBuf[0],_uartcom3->RxSize+1);
 80051ee:	4b13      	ldr	r3, [pc, #76]	; (800523c <PcRx+0x854>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68d9      	ldr	r1, [r3, #12]
 80051f4:	4b11      	ldr	r3, [pc, #68]	; (800523c <PcRx+0x854>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	3301      	adds	r3, #1
 80051fc:	461a      	mov	r2, r3
 80051fe:	480d      	ldr	r0, [pc, #52]	; (8005234 <PcRx+0x84c>)
 8005200:	f00c fc90 	bl	8011b24 <memcpy>
			reader[_uartcom3->RxSize]=0;
 8005204:	4b0d      	ldr	r3, [pc, #52]	; (800523c <PcRx+0x854>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	4a0a      	ldr	r2, [pc, #40]	; (8005234 <PcRx+0x84c>)
 800520c:	2100      	movs	r1, #0
 800520e:	54d1      	strb	r1, [r2, r3]
			ProcessData(reader,_uartcom3->ComId);
 8005210:	4b0a      	ldr	r3, [pc, #40]	; (800523c <PcRx+0x854>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	7e1b      	ldrb	r3, [r3, #24]
 8005216:	4619      	mov	r1, r3
 8005218:	4806      	ldr	r0, [pc, #24]	; (8005234 <PcRx+0x84c>)
 800521a:	f000 fc21 	bl	8005a60 <ProcessData>
		if(contsend==2){
 800521e:	4b04      	ldr	r3, [pc, #16]	; (8005230 <PcRx+0x848>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d102      	bne.n	800522c <PcRx+0x844>
			contsend=1;
 8005226:	4b02      	ldr	r3, [pc, #8]	; (8005230 <PcRx+0x848>)
 8005228:	2201      	movs	r2, #1
 800522a:	601a      	str	r2, [r3, #0]
}
 800522c:	bf00      	nop
 800522e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005230:	2000182c 	.word	0x2000182c
 8005234:	20004c7c 	.word	0x20004c7c
 8005238:	200002cc 	.word	0x200002cc
 800523c:	20006f30 	.word	0x20006f30

08005240 <PcTx>:

void PcTx(void){
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
	_uartcom3->TxCounter++;
 8005244:	4b15      	ldr	r3, [pc, #84]	; (800529c <PcTx+0x5c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	3201      	adds	r2, #1
 800524c:	609a      	str	r2, [r3, #8]
	if(_uartcom3->TxSize > _uartcom3->TxCounter){
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <PcTx+0x5c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	4b11      	ldr	r3, [pc, #68]	; (800529c <PcTx+0x5c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	429a      	cmp	r2, r3
 800525c:	d90c      	bls.n	8005278 <PcTx+0x38>
		HAL_UART_Transmit_IT(&huart3, &_uartcom3->TxBuf[_uartcom3->TxCounter], 1);
 800525e:	4b0f      	ldr	r3, [pc, #60]	; (800529c <PcTx+0x5c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	4b0d      	ldr	r3, [pc, #52]	; (800529c <PcTx+0x5c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	4413      	add	r3, r2
 800526c:	2201      	movs	r2, #1
 800526e:	4619      	mov	r1, r3
 8005270:	480b      	ldr	r0, [pc, #44]	; (80052a0 <PcTx+0x60>)
 8005272:	f00a fec4 	bl	800fffe <HAL_UART_Transmit_IT>
	}else{
		_uartcom3->UResult|=Tx_Cplt;
		Tx_Timer3 = 0;
		_uartcom3->TxCounter = 0;
	}
}
 8005276:	e00f      	b.n	8005298 <PcTx+0x58>
		_uartcom3->UResult|=Tx_Cplt;
 8005278:	4b08      	ldr	r3, [pc, #32]	; (800529c <PcTx+0x5c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	7e5a      	ldrb	r2, [r3, #25]
 800527e:	4b07      	ldr	r3, [pc, #28]	; (800529c <PcTx+0x5c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0202 	orr.w	r2, r2, #2
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	765a      	strb	r2, [r3, #25]
		Tx_Timer3 = 0;
 800528a:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <PcTx+0x64>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
		_uartcom3->TxCounter = 0;
 8005290:	4b02      	ldr	r3, [pc, #8]	; (800529c <PcTx+0x5c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2200      	movs	r2, #0
 8005296:	609a      	str	r2, [r3, #8]
}
 8005298:	bf00      	nop
 800529a:	bd80      	pop	{r7, pc}
 800529c:	20006f30 	.word	0x20006f30
 80052a0:	20006a64 	.word	0x20006a64
 80052a4:	200018a4 	.word	0x200018a4

080052a8 <DummyRead2>:
void DummyRead2(){
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
	unsigned char dummyRead;
	dummyRead= USART3->DR;
 80052ae:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <DummyRead2+0x18>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	71fb      	strb	r3, [r7, #7]
	UNUSED(dummyRead);
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	40004800 	.word	0x40004800

080052c4 <SendPc>:
void SendPc(char* mes, int rxsize, uint8_t comId){
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b093      	sub	sp, #76	; 0x4c
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	4613      	mov	r3, r2
 80052d0:	71fb      	strb	r3, [r7, #7]
	sendingPc=1;
 80052d2:	4b42      	ldr	r3, [pc, #264]	; (80053dc <SendPc+0x118>)
 80052d4:	2201      	movs	r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
	char  sender [50];
	sender[0]='$';
 80052d8:	2324      	movs	r3, #36	; 0x24
 80052da:	753b      	strb	r3, [r7, #20]
	sender[1]=0;
 80052dc:	2300      	movs	r3, #0
 80052de:	757b      	strb	r3, [r7, #21]
	if(pccom==1){
 80052e0:	4b3f      	ldr	r3, [pc, #252]	; (80053e0 <SendPc+0x11c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d171      	bne.n	80053cc <SendPc+0x108>
		uint16_t i=0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		while(mes[i] != writingpc[i])
 80052ee:	e004      	b.n	80052fa <SendPc+0x36>
			i++;
 80052f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80052f4:	3301      	adds	r3, #1
 80052f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		while(mes[i] != writingpc[i])
 80052fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	781a      	ldrb	r2, [r3, #0]
 8005304:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005308:	4936      	ldr	r1, [pc, #216]	; (80053e4 <SendPc+0x120>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	429a      	cmp	r2, r3
 800530e:	d1ef      	bne.n	80052f0 <SendPc+0x2c>
		if(i!=0){
 8005310:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005314:	2b00      	cmp	r3, #0
 8005316:	d013      	beq.n	8005340 <SendPc+0x7c>
			writingpc[0]=0;
 8005318:	4b32      	ldr	r3, [pc, #200]	; (80053e4 <SendPc+0x120>)
 800531a:	2200      	movs	r2, #0
 800531c:	701a      	strb	r2, [r3, #0]
			memcpy(&writingpc,&mes[0],SizeOfArray(mes));
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f006 f8bc 	bl	800b49c <SizeOfArray>
 8005324:	4603      	mov	r3, r0
 8005326:	461a      	mov	r2, r3
 8005328:	68f9      	ldr	r1, [r7, #12]
 800532a:	482e      	ldr	r0, [pc, #184]	; (80053e4 <SendPc+0x120>)
 800532c:	f00c fbfa 	bl	8011b24 <memcpy>
			writingpc[SizeOfArray(mes)]=0;
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f006 f8b3 	bl	800b49c <SizeOfArray>
 8005336:	4603      	mov	r3, r0
 8005338:	461a      	mov	r2, r3
 800533a:	4b2a      	ldr	r3, [pc, #168]	; (80053e4 <SendPc+0x120>)
 800533c:	2100      	movs	r1, #0
 800533e:	5499      	strb	r1, [r3, r2]
		}
		strcat(mes,"\0");
		strcat(sender,mes);
 8005340:	f107 0314 	add.w	r3, r7, #20
 8005344:	68f9      	ldr	r1, [r7, #12]
 8005346:	4618      	mov	r0, r3
 8005348:	f00c fbff 	bl	8011b4a <strcat>
		memcpy(pcInit.TxBuf,sender,SizeOfArray(sender)+1);
 800534c:	4b26      	ldr	r3, [pc, #152]	; (80053e8 <SendPc+0x124>)
 800534e:	681c      	ldr	r4, [r3, #0]
 8005350:	f107 0314 	add.w	r3, r7, #20
 8005354:	4618      	mov	r0, r3
 8005356:	f006 f8a1 	bl	800b49c <SizeOfArray>
 800535a:	4603      	mov	r3, r0
 800535c:	3301      	adds	r3, #1
 800535e:	461a      	mov	r2, r3
 8005360:	f107 0314 	add.w	r3, r7, #20
 8005364:	4619      	mov	r1, r3
 8005366:	4620      	mov	r0, r4
 8005368:	f00c fbdc 	bl	8011b24 <memcpy>
		if(comId!=OLD_ID){
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <SendPc+0xb4>
			pcInit.ComId=comId;
 8005372:	4a1d      	ldr	r2, [pc, #116]	; (80053e8 <SendPc+0x124>)
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	7613      	strb	r3, [r2, #24]
		}
		pcInit.TxSize=SizeOfArray(sender);
 8005378:	f107 0314 	add.w	r3, r7, #20
 800537c:	4618      	mov	r0, r3
 800537e:	f006 f88d 	bl	800b49c <SizeOfArray>
 8005382:	4603      	mov	r3, r0
 8005384:	461a      	mov	r2, r3
 8005386:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <SendPc+0x124>)
 8005388:	605a      	str	r2, [r3, #4]
		pcInit.RxSize=rxsize;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4a16      	ldr	r2, [pc, #88]	; (80053e8 <SendPc+0x124>)
 800538e:	6113      	str	r3, [r2, #16]
		pcInit.ResAck=0;
 8005390:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <SendPc+0x124>)
 8005392:	2200      	movs	r2, #0
 8005394:	769a      	strb	r2, [r3, #26]
		pcInit.UResult = 0;
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <SendPc+0x124>)
 8005398:	2200      	movs	r2, #0
 800539a:	765a      	strb	r2, [r3, #25]
		pcInit.RxCounter=0;
 800539c:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <SendPc+0x124>)
 800539e:	2200      	movs	r2, #0
 80053a0:	615a      	str	r2, [r3, #20]
		_uartcom3=&pcInit;
 80053a2:	4b12      	ldr	r3, [pc, #72]	; (80053ec <SendPc+0x128>)
 80053a4:	4a10      	ldr	r2, [pc, #64]	; (80053e8 <SendPc+0x124>)
 80053a6:	601a      	str	r2, [r3, #0]
		DummyRead2();
 80053a8:	f7ff ff7e 	bl	80052a8 <DummyRead2>
		HAL_UART_Transmit_IT(&huart3, _uartcom3->TxBuf, 1);
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <SendPc+0x128>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2201      	movs	r2, #1
 80053b4:	4619      	mov	r1, r3
 80053b6:	480e      	ldr	r0, [pc, #56]	; (80053f0 <SendPc+0x12c>)
 80053b8:	f00a fe21 	bl	800fffe <HAL_UART_Transmit_IT>
		HAL_UART_Receive_IT(&huart3, _uartcom3->RxBuf, 1);
 80053bc:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <SendPc+0x128>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	4619      	mov	r1, r3
 80053c6:	480a      	ldr	r0, [pc, #40]	; (80053f0 <SendPc+0x12c>)
 80053c8:	f00a fe5e 	bl	8010088 <HAL_UART_Receive_IT>
	}
	sendingPc=0;
 80053cc:	4b03      	ldr	r3, [pc, #12]	; (80053dc <SendPc+0x118>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
}
 80053d2:	bf00      	nop
 80053d4:	374c      	adds	r7, #76	; 0x4c
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd90      	pop	{r4, r7, pc}
 80053da:	bf00      	nop
 80053dc:	20001870 	.word	0x20001870
 80053e0:	200018b4 	.word	0x200018b4
 80053e4:	20007290 	.word	0x20007290
 80053e8:	20000058 	.word	0x20000058
 80053ec:	20006f30 	.word	0x20006f30
 80053f0:	20006a64 	.word	0x20006a64

080053f4 <ProcessRx>:
void ProcessRx(int type){
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
	if(type==1){
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	f040 81ec 	bne.w	80057dc <ProcessRx+0x3e8>
		for (int i=0;i<step;i++){
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e1da      	b.n	80057c0 <ProcessRx+0x3cc>
			expin[i].amp=atoi(exprx[i].amprx);
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4613      	mov	r3, r2
 800540e:	019b      	lsls	r3, r3, #6
 8005410:	4413      	add	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	3338      	adds	r3, #56	; 0x38
 8005416:	4a22      	ldr	r2, [pc, #136]	; (80054a0 <ProcessRx+0xac>)
 8005418:	4413      	add	r3, r2
 800541a:	3301      	adds	r3, #1
 800541c:	4618      	mov	r0, r3
 800541e:	f00c fb3e 	bl	8011a9e <atoi>
 8005422:	4920      	ldr	r1, [pc, #128]	; (80054a4 <ProcessRx+0xb0>)
 8005424:	68fa      	ldr	r2, [r7, #12]
 8005426:	4613      	mov	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	4413      	add	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	440b      	add	r3, r1
 8005430:	331c      	adds	r3, #28
 8005432:	6018      	str	r0, [r3, #0]
			expin[i].dir=atoi(exprx[i].dirrx);
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	4613      	mov	r3, r2
 8005438:	019b      	lsls	r3, r3, #6
 800543a:	4413      	add	r3, r2
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	4a18      	ldr	r2, [pc, #96]	; (80054a0 <ProcessRx+0xac>)
 8005440:	4413      	add	r3, r2
 8005442:	3303      	adds	r3, #3
 8005444:	4618      	mov	r0, r3
 8005446:	f00c fb2a 	bl	8011a9e <atoi>
 800544a:	4603      	mov	r3, r0
 800544c:	b2d8      	uxtb	r0, r3
 800544e:	4915      	ldr	r1, [pc, #84]	; (80054a4 <ProcessRx+0xb0>)
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4613      	mov	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4413      	add	r3, r2
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	440b      	add	r3, r1
 800545c:	3301      	adds	r3, #1
 800545e:	4602      	mov	r2, r0
 8005460:	701a      	strb	r2, [r3, #0]
			if(expLoad){
 8005462:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <ProcessRx+0xb4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d022      	beq.n	80054b0 <ProcessRx+0xbc>
				expin[i].depth=atoi(exprx[i].depthrx)+contact;//*conversion constant need at +contact term!!!
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4613      	mov	r3, r2
 800546e:	019b      	lsls	r3, r3, #6
 8005470:	4413      	add	r3, r2
 8005472:	005b      	lsls	r3, r3, #1
 8005474:	3318      	adds	r3, #24
 8005476:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <ProcessRx+0xac>)
 8005478:	4413      	add	r3, r2
 800547a:	3301      	adds	r3, #1
 800547c:	4618      	mov	r0, r3
 800547e:	f00c fb0e 	bl	8011a9e <atoi>
 8005482:	4602      	mov	r2, r0
 8005484:	4b09      	ldr	r3, [pc, #36]	; (80054ac <ProcessRx+0xb8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	18d1      	adds	r1, r2, r3
 800548a:	4806      	ldr	r0, [pc, #24]	; (80054a4 <ProcessRx+0xb0>)
 800548c:	68fa      	ldr	r2, [r7, #12]
 800548e:	4613      	mov	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	4413      	add	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4403      	add	r3, r0
 8005498:	330c      	adds	r3, #12
 800549a:	6019      	str	r1, [r3, #0]
 800549c:	e01d      	b.n	80054da <ProcessRx+0xe6>
 800549e:	bf00      	nop
 80054a0:	200019b4 	.word	0x200019b4
 80054a4:	20004d44 	.word	0x20004d44
 80054a8:	20000308 	.word	0x20000308
 80054ac:	20001828 	.word	0x20001828
			}
			else{
				expin[i].depth=atoi(exprx[i].depthrx);
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4613      	mov	r3, r2
 80054b4:	019b      	lsls	r3, r3, #6
 80054b6:	4413      	add	r3, r2
 80054b8:	005b      	lsls	r3, r3, #1
 80054ba:	3318      	adds	r3, #24
 80054bc:	4ac4      	ldr	r2, [pc, #784]	; (80057d0 <ProcessRx+0x3dc>)
 80054be:	4413      	add	r3, r2
 80054c0:	3301      	adds	r3, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f00c faeb 	bl	8011a9e <atoi>
 80054c8:	49c2      	ldr	r1, [pc, #776]	; (80057d4 <ProcessRx+0x3e0>)
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4613      	mov	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	4413      	add	r3, r2
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	440b      	add	r3, r1
 80054d6:	330c      	adds	r3, #12
 80054d8:	6018      	str	r0, [r3, #0]
			}
			expin[i].dur=atoi(exprx[i].durrx);
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4613      	mov	r3, r2
 80054de:	019b      	lsls	r3, r3, #6
 80054e0:	4413      	add	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	3348      	adds	r3, #72	; 0x48
 80054e6:	4aba      	ldr	r2, [pc, #744]	; (80057d0 <ProcessRx+0x3dc>)
 80054e8:	4413      	add	r3, r2
 80054ea:	3305      	adds	r3, #5
 80054ec:	4618      	mov	r0, r3
 80054ee:	f00c fad6 	bl	8011a9e <atoi>
 80054f2:	49b8      	ldr	r1, [pc, #736]	; (80057d4 <ProcessRx+0x3e0>)
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4613      	mov	r3, r2
 80054f8:	00db      	lsls	r3, r3, #3
 80054fa:	4413      	add	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	440b      	add	r3, r1
 8005500:	3324      	adds	r3, #36	; 0x24
 8005502:	6018      	str	r0, [r3, #0]
			expin[i].freq=atoi(exprx[i].freqrx);
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4613      	mov	r3, r2
 8005508:	019b      	lsls	r3, r3, #6
 800550a:	4413      	add	r3, r2
 800550c:	005b      	lsls	r3, r3, #1
 800550e:	3340      	adds	r3, #64	; 0x40
 8005510:	4aaf      	ldr	r2, [pc, #700]	; (80057d0 <ProcessRx+0x3dc>)
 8005512:	4413      	add	r3, r2
 8005514:	3303      	adds	r3, #3
 8005516:	4618      	mov	r0, r3
 8005518:	f00c fac1 	bl	8011a9e <atoi>
 800551c:	49ad      	ldr	r1, [pc, #692]	; (80057d4 <ProcessRx+0x3e0>)
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	440b      	add	r3, r1
 800552a:	3320      	adds	r3, #32
 800552c:	6018      	str	r0, [r3, #0]
			expin[i].hold=atoi(exprx[i].holdrx);
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4613      	mov	r3, r2
 8005532:	019b      	lsls	r3, r3, #6
 8005534:	4413      	add	r3, r2
 8005536:	005b      	lsls	r3, r3, #1
 8005538:	3328      	adds	r3, #40	; 0x28
 800553a:	4aa5      	ldr	r2, [pc, #660]	; (80057d0 <ProcessRx+0x3dc>)
 800553c:	4413      	add	r3, r2
 800553e:	3305      	adds	r3, #5
 8005540:	4618      	mov	r0, r3
 8005542:	f00c faac 	bl	8011a9e <atoi>
 8005546:	49a3      	ldr	r1, [pc, #652]	; (80057d4 <ProcessRx+0x3e0>)
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	4613      	mov	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4413      	add	r3, r2
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	440b      	add	r3, r1
 8005554:	3314      	adds	r3, #20
 8005556:	6018      	str	r0, [r3, #0]
			expin[i].osc=atoi(exprx[i].oscrx);
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4613      	mov	r3, r2
 800555c:	019b      	lsls	r3, r3, #6
 800555e:	4413      	add	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	3330      	adds	r3, #48	; 0x30
 8005564:	4a9a      	ldr	r2, [pc, #616]	; (80057d0 <ProcessRx+0x3dc>)
 8005566:	4413      	add	r3, r2
 8005568:	3307      	adds	r3, #7
 800556a:	4618      	mov	r0, r3
 800556c:	f00c fa97 	bl	8011a9e <atoi>
 8005570:	4603      	mov	r3, r0
 8005572:	b2d8      	uxtb	r0, r3
 8005574:	4997      	ldr	r1, [pc, #604]	; (80057d4 <ProcessRx+0x3e0>)
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4613      	mov	r3, r2
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4413      	add	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	440b      	add	r3, r1
 8005582:	3318      	adds	r3, #24
 8005584:	4602      	mov	r2, r0
 8005586:	701a      	strb	r2, [r3, #0]
			expin[i].speed=atoi(exprx[i].speedrx);
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4613      	mov	r3, r2
 800558c:	019b      	lsls	r3, r3, #6
 800558e:	4413      	add	r3, r2
 8005590:	005b      	lsls	r3, r3, #1
 8005592:	3320      	adds	r3, #32
 8005594:	4a8e      	ldr	r2, [pc, #568]	; (80057d0 <ProcessRx+0x3dc>)
 8005596:	4413      	add	r3, r2
 8005598:	3303      	adds	r3, #3
 800559a:	4618      	mov	r0, r3
 800559c:	f00c fa7f 	bl	8011a9e <atoi>
 80055a0:	498c      	ldr	r1, [pc, #560]	; (80057d4 <ProcessRx+0x3e0>)
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4613      	mov	r3, r2
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	4413      	add	r3, r2
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	440b      	add	r3, r1
 80055ae:	3310      	adds	r3, #16
 80055b0:	6018      	str	r0, [r3, #0]
			expin[i].stepId=atoi(exprx[i].stepIdrx);
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4613      	mov	r3, r2
 80055b6:	019b      	lsls	r3, r3, #6
 80055b8:	4413      	add	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4a84      	ldr	r2, [pc, #528]	; (80057d0 <ProcessRx+0x3dc>)
 80055be:	4413      	add	r3, r2
 80055c0:	4618      	mov	r0, r3
 80055c2:	f00c fa6c 	bl	8011a9e <atoi>
 80055c6:	4603      	mov	r3, r0
 80055c8:	b2d8      	uxtb	r0, r3
 80055ca:	4982      	ldr	r1, [pc, #520]	; (80057d4 <ProcessRx+0x3e0>)
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	4613      	mov	r3, r2
 80055d0:	00db      	lsls	r3, r3, #3
 80055d2:	4413      	add	r3, r2
 80055d4:	00db      	lsls	r3, r3, #3
 80055d6:	440b      	add	r3, r1
 80055d8:	4602      	mov	r2, r0
 80055da:	701a      	strb	r2, [r3, #0]
			expin[i].xpst=atoi(exprx[i].xpstrx);
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4613      	mov	r3, r2
 80055e0:	019b      	lsls	r3, r3, #6
 80055e2:	4413      	add	r3, r2
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	4a7a      	ldr	r2, [pc, #488]	; (80057d0 <ProcessRx+0x3dc>)
 80055e8:	4413      	add	r3, r2
 80055ea:	3305      	adds	r3, #5
 80055ec:	4618      	mov	r0, r3
 80055ee:	f00c fa56 	bl	8011a9e <atoi>
 80055f2:	4978      	ldr	r1, [pc, #480]	; (80057d4 <ProcessRx+0x3e0>)
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4613      	mov	r3, r2
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	4413      	add	r3, r2
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	440b      	add	r3, r1
 8005600:	3304      	adds	r3, #4
 8005602:	6018      	str	r0, [r3, #0]
			expin[i].ypst=atoi(exprx[i].ypstrx);
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4613      	mov	r3, r2
 8005608:	019b      	lsls	r3, r3, #6
 800560a:	4413      	add	r3, r2
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	3308      	adds	r3, #8
 8005610:	4a6f      	ldr	r2, [pc, #444]	; (80057d0 <ProcessRx+0x3dc>)
 8005612:	4413      	add	r3, r2
 8005614:	3307      	adds	r3, #7
 8005616:	4618      	mov	r0, r3
 8005618:	f00c fa41 	bl	8011a9e <atoi>
 800561c:	496d      	ldr	r1, [pc, #436]	; (80057d4 <ProcessRx+0x3e0>)
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4413      	add	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	440b      	add	r3, r1
 800562a:	3308      	adds	r3, #8
 800562c:	6018      	str	r0, [r3, #0]
			expin[i].stepret=atoi(exprx[i].retrx);
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	019b      	lsls	r3, r3, #6
 8005634:	4413      	add	r3, r2
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	3370      	adds	r3, #112	; 0x70
 800563a:	4a65      	ldr	r2, [pc, #404]	; (80057d0 <ProcessRx+0x3dc>)
 800563c:	4413      	add	r3, r2
 800563e:	3307      	adds	r3, #7
 8005640:	4618      	mov	r0, r3
 8005642:	f00c fa2c 	bl	8011a9e <atoi>
 8005646:	4603      	mov	r3, r0
 8005648:	b2d8      	uxtb	r0, r3
 800564a:	4962      	ldr	r1, [pc, #392]	; (80057d4 <ProcessRx+0x3e0>)
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	4413      	add	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	440b      	add	r3, r1
 8005658:	333d      	adds	r3, #61	; 0x3d
 800565a:	4602      	mov	r2, r0
 800565c:	701a      	strb	r2, [r3, #0]
			expin[i].tramp=atoi(exprx[i].dtrx);
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4613      	mov	r3, r2
 8005662:	019b      	lsls	r3, r3, #6
 8005664:	4413      	add	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	3350      	adds	r3, #80	; 0x50
 800566a:	4a59      	ldr	r2, [pc, #356]	; (80057d0 <ProcessRx+0x3dc>)
 800566c:	4413      	add	r3, r2
 800566e:	3307      	adds	r3, #7
 8005670:	4618      	mov	r0, r3
 8005672:	f00c fa14 	bl	8011a9e <atoi>
 8005676:	4957      	ldr	r1, [pc, #348]	; (80057d4 <ProcessRx+0x3e0>)
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	4613      	mov	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	440b      	add	r3, r1
 8005684:	3328      	adds	r3, #40	; 0x28
 8005686:	6018      	str	r0, [r3, #0]
			expin[i].tspeed=atoi(exprx[i].dtsrx);
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4613      	mov	r3, r2
 800568c:	019b      	lsls	r3, r3, #6
 800568e:	4413      	add	r3, r2
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	3358      	adds	r3, #88	; 0x58
 8005694:	4a4e      	ldr	r2, [pc, #312]	; (80057d0 <ProcessRx+0x3dc>)
 8005696:	4413      	add	r3, r2
 8005698:	3305      	adds	r3, #5
 800569a:	4618      	mov	r0, r3
 800569c:	f00c f9ff 	bl	8011a9e <atoi>
 80056a0:	494c      	ldr	r1, [pc, #304]	; (80057d4 <ProcessRx+0x3e0>)
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4613      	mov	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4413      	add	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	440b      	add	r3, r1
 80056ae:	332c      	adds	r3, #44	; 0x2c
 80056b0:	6018      	str	r0, [r3, #0]
			expin[i].tamp=atoi(exprx[i].dtamprx);
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	019b      	lsls	r3, r3, #6
 80056b8:	4413      	add	r3, r2
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	3360      	adds	r3, #96	; 0x60
 80056be:	4a44      	ldr	r2, [pc, #272]	; (80057d0 <ProcessRx+0x3dc>)
 80056c0:	4413      	add	r3, r2
 80056c2:	3303      	adds	r3, #3
 80056c4:	4618      	mov	r0, r3
 80056c6:	f00c f9ea 	bl	8011a9e <atoi>
 80056ca:	4942      	ldr	r1, [pc, #264]	; (80057d4 <ProcessRx+0x3e0>)
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4613      	mov	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	4413      	add	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	440b      	add	r3, r1
 80056d8:	3330      	adds	r3, #48	; 0x30
 80056da:	6018      	str	r0, [r3, #0]
			expin[i].tfreq=atoi(exprx[i].dtfreqrx);
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4613      	mov	r3, r2
 80056e0:	019b      	lsls	r3, r3, #6
 80056e2:	4413      	add	r3, r2
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	3368      	adds	r3, #104	; 0x68
 80056e8:	4a39      	ldr	r2, [pc, #228]	; (80057d0 <ProcessRx+0x3dc>)
 80056ea:	4413      	add	r3, r2
 80056ec:	3303      	adds	r3, #3
 80056ee:	4618      	mov	r0, r3
 80056f0:	f00c f9d5 	bl	8011a9e <atoi>
 80056f4:	4937      	ldr	r1, [pc, #220]	; (80057d4 <ProcessRx+0x3e0>)
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4613      	mov	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4413      	add	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	440b      	add	r3, r1
 8005702:	3334      	adds	r3, #52	; 0x34
 8005704:	6018      	str	r0, [r3, #0]
			expin[i].tlag=atoi(exprx[i].dtphaserx);
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4613      	mov	r3, r2
 800570a:	019b      	lsls	r3, r3, #6
 800570c:	4413      	add	r3, r2
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	3370      	adds	r3, #112	; 0x70
 8005712:	4a2f      	ldr	r2, [pc, #188]	; (80057d0 <ProcessRx+0x3dc>)
 8005714:	4413      	add	r3, r2
 8005716:	3301      	adds	r3, #1
 8005718:	4618      	mov	r0, r3
 800571a:	f00c f9c0 	bl	8011a9e <atoi>
 800571e:	492d      	ldr	r1, [pc, #180]	; (80057d4 <ProcessRx+0x3e0>)
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4413      	add	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	440b      	add	r3, r1
 800572c:	3338      	adds	r3, #56	; 0x38
 800572e:	6018      	str	r0, [r3, #0]
			expin[i].ttime=atoi(exprx[i].dtwhenrx);
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	4613      	mov	r3, r2
 8005734:	019b      	lsls	r3, r3, #6
 8005736:	4413      	add	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	3368      	adds	r3, #104	; 0x68
 800573c:	4a24      	ldr	r2, [pc, #144]	; (80057d0 <ProcessRx+0x3dc>)
 800573e:	4413      	add	r3, r2
 8005740:	3301      	adds	r3, #1
 8005742:	4618      	mov	r0, r3
 8005744:	f00c f9ab 	bl	8011a9e <atoi>
 8005748:	4603      	mov	r3, r0
 800574a:	b2d8      	uxtb	r0, r3
 800574c:	4921      	ldr	r1, [pc, #132]	; (80057d4 <ProcessRx+0x3e0>)
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	440b      	add	r3, r1
 800575a:	333c      	adds	r3, #60	; 0x3c
 800575c:	4602      	mov	r2, r0
 800575e:	701a      	strb	r2, [r3, #0]
			expin[i].removeHold=atoi(exprx[i].removalHold);
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4613      	mov	r3, r2
 8005764:	019b      	lsls	r3, r3, #6
 8005766:	4413      	add	r3, r2
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	3378      	adds	r3, #120	; 0x78
 800576c:	4a18      	ldr	r2, [pc, #96]	; (80057d0 <ProcessRx+0x3dc>)
 800576e:	4413      	add	r3, r2
 8005770:	3301      	adds	r3, #1
 8005772:	4618      	mov	r0, r3
 8005774:	f00c f993 	bl	8011a9e <atoi>
 8005778:	4916      	ldr	r1, [pc, #88]	; (80057d4 <ProcessRx+0x3e0>)
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4613      	mov	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	4413      	add	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	440b      	add	r3, r1
 8005786:	3340      	adds	r3, #64	; 0x40
 8005788:	6018      	str	r0, [r3, #0]
			expin[i].removePer=atoi(exprx[i].removalPer);
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	4613      	mov	r3, r2
 800578e:	019b      	lsls	r3, r3, #6
 8005790:	4413      	add	r3, r2
 8005792:	005b      	lsls	r3, r3, #1
 8005794:	3378      	adds	r3, #120	; 0x78
 8005796:	4a0e      	ldr	r2, [pc, #56]	; (80057d0 <ProcessRx+0x3dc>)
 8005798:	4413      	add	r3, r2
 800579a:	3307      	adds	r3, #7
 800579c:	4618      	mov	r0, r3
 800579e:	f00c f97e 	bl	8011a9e <atoi>
 80057a2:	4603      	mov	r3, r0
 80057a4:	b2d8      	uxtb	r0, r3
 80057a6:	490b      	ldr	r1, [pc, #44]	; (80057d4 <ProcessRx+0x3e0>)
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4613      	mov	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4413      	add	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	440b      	add	r3, r1
 80057b4:	3344      	adds	r3, #68	; 0x44
 80057b6:	4602      	mov	r2, r0
 80057b8:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<step;i++){
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3301      	adds	r3, #1
 80057be:	60fb      	str	r3, [r7, #12]
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <ProcessRx+0x3e4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	f6ff ae1f 	blt.w	800540a <ProcessRx+0x16>
		firstdir=0;
		oscdown=0;
		autoretract=0;
		stepsay=0;
	}
}
 80057cc:	e125      	b.n	8005a1a <ProcessRx+0x626>
 80057ce:	bf00      	nop
 80057d0:	200019b4 	.word	0x200019b4
 80057d4:	20004d44 	.word	0x20004d44
 80057d8:	200002e8 	.word	0x200002e8
	else if(type==2){
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d126      	bne.n	8005830 <ProcessRx+0x43c>
		if(expLoad){
 80057e2:	4b90      	ldr	r3, [pc, #576]	; (8005a24 <ProcessRx+0x630>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <ProcessRx+0x40a>
			calib.depth=atoi(calibrx.depthrx)+contact;//multiplication factor!!!
 80057ea:	488f      	ldr	r0, [pc, #572]	; (8005a28 <ProcessRx+0x634>)
 80057ec:	f00c f957 	bl	8011a9e <atoi>
 80057f0:	4602      	mov	r2, r0
 80057f2:	4b8e      	ldr	r3, [pc, #568]	; (8005a2c <ProcessRx+0x638>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4413      	add	r3, r2
 80057f8:	4a8d      	ldr	r2, [pc, #564]	; (8005a30 <ProcessRx+0x63c>)
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	e005      	b.n	800580a <ProcessRx+0x416>
			calib.depth=atoi(calibrx.depthrx);
 80057fe:	488a      	ldr	r0, [pc, #552]	; (8005a28 <ProcessRx+0x634>)
 8005800:	f00c f94d 	bl	8011a9e <atoi>
 8005804:	4602      	mov	r2, r0
 8005806:	4b8a      	ldr	r3, [pc, #552]	; (8005a30 <ProcessRx+0x63c>)
 8005808:	601a      	str	r2, [r3, #0]
		calib.interval=atoi(calibrx.intervalrx);
 800580a:	488a      	ldr	r0, [pc, #552]	; (8005a34 <ProcessRx+0x640>)
 800580c:	f00c f947 	bl	8011a9e <atoi>
 8005810:	4602      	mov	r2, r0
 8005812:	4b87      	ldr	r3, [pc, #540]	; (8005a30 <ProcessRx+0x63c>)
 8005814:	609a      	str	r2, [r3, #8]
		calib.nofstep=atoi(calibrx.nofsteprx);
 8005816:	4888      	ldr	r0, [pc, #544]	; (8005a38 <ProcessRx+0x644>)
 8005818:	f00c f941 	bl	8011a9e <atoi>
 800581c:	4602      	mov	r2, r0
 800581e:	4b84      	ldr	r3, [pc, #528]	; (8005a30 <ProcessRx+0x63c>)
 8005820:	605a      	str	r2, [r3, #4]
		calib.holdDur=atoi(calibrx.hold);
 8005822:	4886      	ldr	r0, [pc, #536]	; (8005a3c <ProcessRx+0x648>)
 8005824:	f00c f93b 	bl	8011a9e <atoi>
 8005828:	4602      	mov	r2, r0
 800582a:	4b81      	ldr	r3, [pc, #516]	; (8005a30 <ProcessRx+0x63c>)
 800582c:	60da      	str	r2, [r3, #12]
}
 800582e:	e0f4      	b.n	8005a1a <ProcessRx+0x626>
		for (int i=0;i<step;i++){
 8005830:	2300      	movs	r3, #0
 8005832:	60bb      	str	r3, [r7, #8]
 8005834:	e0c9      	b.n	80059ca <ProcessRx+0x5d6>
			exprx[i].amprx[0]=0;
 8005836:	4982      	ldr	r1, [pc, #520]	; (8005a40 <ProcessRx+0x64c>)
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	4613      	mov	r3, r2
 800583c:	019b      	lsls	r3, r3, #6
 800583e:	4413      	add	r3, r2
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	440b      	add	r3, r1
 8005844:	3339      	adds	r3, #57	; 0x39
 8005846:	2200      	movs	r2, #0
 8005848:	701a      	strb	r2, [r3, #0]
			exprx[i].dirrx[0]=0;
 800584a:	497d      	ldr	r1, [pc, #500]	; (8005a40 <ProcessRx+0x64c>)
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	4613      	mov	r3, r2
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	4413      	add	r3, r2
 8005854:	005b      	lsls	r3, r3, #1
 8005856:	440b      	add	r3, r1
 8005858:	3303      	adds	r3, #3
 800585a:	2200      	movs	r2, #0
 800585c:	701a      	strb	r2, [r3, #0]
			exprx[i].depthrx[0]=0;
 800585e:	4978      	ldr	r1, [pc, #480]	; (8005a40 <ProcessRx+0x64c>)
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	4613      	mov	r3, r2
 8005864:	019b      	lsls	r3, r3, #6
 8005866:	4413      	add	r3, r2
 8005868:	005b      	lsls	r3, r3, #1
 800586a:	440b      	add	r3, r1
 800586c:	3319      	adds	r3, #25
 800586e:	2200      	movs	r2, #0
 8005870:	701a      	strb	r2, [r3, #0]
			exprx[i].durrx[0]=0;
 8005872:	4973      	ldr	r1, [pc, #460]	; (8005a40 <ProcessRx+0x64c>)
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	4613      	mov	r3, r2
 8005878:	019b      	lsls	r3, r3, #6
 800587a:	4413      	add	r3, r2
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	440b      	add	r3, r1
 8005880:	334d      	adds	r3, #77	; 0x4d
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
			exprx[i].freqrx[0]=0;
 8005886:	496e      	ldr	r1, [pc, #440]	; (8005a40 <ProcessRx+0x64c>)
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	4613      	mov	r3, r2
 800588c:	019b      	lsls	r3, r3, #6
 800588e:	4413      	add	r3, r2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	440b      	add	r3, r1
 8005894:	3343      	adds	r3, #67	; 0x43
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
			exprx[i].holdrx[0]=0;
 800589a:	4969      	ldr	r1, [pc, #420]	; (8005a40 <ProcessRx+0x64c>)
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	4613      	mov	r3, r2
 80058a0:	019b      	lsls	r3, r3, #6
 80058a2:	4413      	add	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	440b      	add	r3, r1
 80058a8:	332d      	adds	r3, #45	; 0x2d
 80058aa:	2200      	movs	r2, #0
 80058ac:	701a      	strb	r2, [r3, #0]
			exprx[i].oscrx[0]=0;
 80058ae:	4964      	ldr	r1, [pc, #400]	; (8005a40 <ProcessRx+0x64c>)
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	4613      	mov	r3, r2
 80058b4:	019b      	lsls	r3, r3, #6
 80058b6:	4413      	add	r3, r2
 80058b8:	005b      	lsls	r3, r3, #1
 80058ba:	440b      	add	r3, r1
 80058bc:	3337      	adds	r3, #55	; 0x37
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
			exprx[i].speedrx[0]=0;
 80058c2:	495f      	ldr	r1, [pc, #380]	; (8005a40 <ProcessRx+0x64c>)
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	019b      	lsls	r3, r3, #6
 80058ca:	4413      	add	r3, r2
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	440b      	add	r3, r1
 80058d0:	3323      	adds	r3, #35	; 0x23
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]
			exprx[i].stepIdrx[0]=0;
 80058d6:	495a      	ldr	r1, [pc, #360]	; (8005a40 <ProcessRx+0x64c>)
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	019b      	lsls	r3, r3, #6
 80058de:	4413      	add	r3, r2
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	440b      	add	r3, r1
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]
			exprx[i].xpstrx[0]=0;
 80058e8:	4955      	ldr	r1, [pc, #340]	; (8005a40 <ProcessRx+0x64c>)
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	4613      	mov	r3, r2
 80058ee:	019b      	lsls	r3, r3, #6
 80058f0:	4413      	add	r3, r2
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	440b      	add	r3, r1
 80058f6:	3305      	adds	r3, #5
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]
			exprx[i].ypstrx[0]=0;
 80058fc:	4950      	ldr	r1, [pc, #320]	; (8005a40 <ProcessRx+0x64c>)
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	4613      	mov	r3, r2
 8005902:	019b      	lsls	r3, r3, #6
 8005904:	4413      	add	r3, r2
 8005906:	005b      	lsls	r3, r3, #1
 8005908:	440b      	add	r3, r1
 800590a:	330f      	adds	r3, #15
 800590c:	2200      	movs	r2, #0
 800590e:	701a      	strb	r2, [r3, #0]
			exprx[i].retrx[0]=0;
 8005910:	494b      	ldr	r1, [pc, #300]	; (8005a40 <ProcessRx+0x64c>)
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	4613      	mov	r3, r2
 8005916:	019b      	lsls	r3, r3, #6
 8005918:	4413      	add	r3, r2
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	440b      	add	r3, r1
 800591e:	3377      	adds	r3, #119	; 0x77
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
			exprx[i].dtrx[0]=0;
 8005924:	4946      	ldr	r1, [pc, #280]	; (8005a40 <ProcessRx+0x64c>)
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	4613      	mov	r3, r2
 800592a:	019b      	lsls	r3, r3, #6
 800592c:	4413      	add	r3, r2
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	440b      	add	r3, r1
 8005932:	3357      	adds	r3, #87	; 0x57
 8005934:	2200      	movs	r2, #0
 8005936:	701a      	strb	r2, [r3, #0]
			exprx[i].dtsrx[0]=0;
 8005938:	4941      	ldr	r1, [pc, #260]	; (8005a40 <ProcessRx+0x64c>)
 800593a:	68ba      	ldr	r2, [r7, #8]
 800593c:	4613      	mov	r3, r2
 800593e:	019b      	lsls	r3, r3, #6
 8005940:	4413      	add	r3, r2
 8005942:	005b      	lsls	r3, r3, #1
 8005944:	440b      	add	r3, r1
 8005946:	335d      	adds	r3, #93	; 0x5d
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]
			exprx[i].dtamprx[0]=0;
 800594c:	493c      	ldr	r1, [pc, #240]	; (8005a40 <ProcessRx+0x64c>)
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	4613      	mov	r3, r2
 8005952:	019b      	lsls	r3, r3, #6
 8005954:	4413      	add	r3, r2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	440b      	add	r3, r1
 800595a:	3363      	adds	r3, #99	; 0x63
 800595c:	2200      	movs	r2, #0
 800595e:	701a      	strb	r2, [r3, #0]
			exprx[i].dtfreqrx[0]=0;
 8005960:	4937      	ldr	r1, [pc, #220]	; (8005a40 <ProcessRx+0x64c>)
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	4613      	mov	r3, r2
 8005966:	019b      	lsls	r3, r3, #6
 8005968:	4413      	add	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	440b      	add	r3, r1
 800596e:	336b      	adds	r3, #107	; 0x6b
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
			exprx[i].dtphaserx[0]=0;
 8005974:	4932      	ldr	r1, [pc, #200]	; (8005a40 <ProcessRx+0x64c>)
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	4613      	mov	r3, r2
 800597a:	019b      	lsls	r3, r3, #6
 800597c:	4413      	add	r3, r2
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	440b      	add	r3, r1
 8005982:	3371      	adds	r3, #113	; 0x71
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]
			exprx[i].dtwhenrx[0]=0;
 8005988:	492d      	ldr	r1, [pc, #180]	; (8005a40 <ProcessRx+0x64c>)
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	4613      	mov	r3, r2
 800598e:	019b      	lsls	r3, r3, #6
 8005990:	4413      	add	r3, r2
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	440b      	add	r3, r1
 8005996:	3369      	adds	r3, #105	; 0x69
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
			exprx[i].removalHold[0]=0;
 800599c:	4928      	ldr	r1, [pc, #160]	; (8005a40 <ProcessRx+0x64c>)
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	4613      	mov	r3, r2
 80059a2:	019b      	lsls	r3, r3, #6
 80059a4:	4413      	add	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	440b      	add	r3, r1
 80059aa:	3379      	adds	r3, #121	; 0x79
 80059ac:	2200      	movs	r2, #0
 80059ae:	701a      	strb	r2, [r3, #0]
			exprx[i].removalPer[0]=0;
 80059b0:	4923      	ldr	r1, [pc, #140]	; (8005a40 <ProcessRx+0x64c>)
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	4613      	mov	r3, r2
 80059b6:	019b      	lsls	r3, r3, #6
 80059b8:	4413      	add	r3, r2
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	440b      	add	r3, r1
 80059be:	337f      	adds	r3, #127	; 0x7f
 80059c0:	2200      	movs	r2, #0
 80059c2:	701a      	strb	r2, [r3, #0]
		for (int i=0;i<step;i++){
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	3301      	adds	r3, #1
 80059c8:	60bb      	str	r3, [r7, #8]
 80059ca:	4b1e      	ldr	r3, [pc, #120]	; (8005a44 <ProcessRx+0x650>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	f6ff af30 	blt.w	8005836 <ProcessRx+0x442>
		calibrx.depthrx[0]=0;
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <ProcessRx+0x634>)
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
		calibrx.intervalrx[0]=0;
 80059dc:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <ProcessRx+0x634>)
 80059de:	2200      	movs	r2, #0
 80059e0:	751a      	strb	r2, [r3, #20]
		calibrx.nofsteprx[0]=0;
 80059e2:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <ProcessRx+0x634>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	729a      	strb	r2, [r3, #10]
		calibrx.hold[0]=0;
 80059e8:	4b0f      	ldr	r3, [pc, #60]	; (8005a28 <ProcessRx+0x634>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	779a      	strb	r2, [r3, #30]
		step=-1;
 80059ee:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <ProcessRx+0x650>)
 80059f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80059f4:	601a      	str	r2, [r3, #0]
		app=none;
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <ProcessRx+0x654>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]
		returncheck=0;
 80059fc:	4b13      	ldr	r3, [pc, #76]	; (8005a4c <ProcessRx+0x658>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
		firstdir=0;
 8005a02:	4b13      	ldr	r3, [pc, #76]	; (8005a50 <ProcessRx+0x65c>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
		oscdown=0;
 8005a08:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <ProcessRx+0x660>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	601a      	str	r2, [r3, #0]
		autoretract=0;
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <ProcessRx+0x664>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
		stepsay=0;
 8005a14:	4b11      	ldr	r3, [pc, #68]	; (8005a5c <ProcessRx+0x668>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
}
 8005a1a:	bf00      	nop
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	20000308 	.word	0x20000308
 8005a28:	20001990 	.word	0x20001990
 8005a2c:	20001828 	.word	0x20001828
 8005a30:	200018fc 	.word	0x200018fc
 8005a34:	200019a4 	.word	0x200019a4
 8005a38:	2000199a 	.word	0x2000199a
 8005a3c:	200019ae 	.word	0x200019ae
 8005a40:	200019b4 	.word	0x200019b4
 8005a44:	200002e8 	.word	0x200002e8
 8005a48:	20006964 	.word	0x20006964
 8005a4c:	200002ec 	.word	0x200002ec
 8005a50:	20000304 	.word	0x20000304
 8005a54:	200002dc 	.word	0x200002dc
 8005a58:	200002e0 	.word	0x200002e0
 8005a5c:	20000334 	.word	0x20000334

08005a60 <ProcessData>:

void ProcessData(char incom[],int iD)
{
 8005a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a62:	b0a1      	sub	sp, #132	; 0x84
 8005a64:	af04      	add	r7, sp, #16
 8005a66:	61f8      	str	r0, [r7, #28]
 8005a68:	61b9      	str	r1, [r7, #24]
	if(incom[0]!='I' && contsend==3){
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b49      	cmp	r3, #73	; 0x49
 8005a70:	d007      	beq.n	8005a82 <ProcessData+0x22>
 8005a72:	4baa      	ldr	r3, [pc, #680]	; (8005d1c <ProcessData+0x2bc>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	d103      	bne.n	8005a82 <ProcessData+0x22>
		contsend=1;
 8005a7a:	4ba8      	ldr	r3, [pc, #672]	; (8005d1c <ProcessData+0x2bc>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	e002      	b.n	8005a88 <ProcessData+0x28>
	}
	else{
		contsend=0;
 8005a82:	4ba6      	ldr	r3, [pc, #664]	; (8005d1c <ProcessData+0x2bc>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]
	}
	switch(iD)
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	f201 8255 	bhi.w	8006f3c <ProcessData+0x14dc>
 8005a92:	a201      	add	r2, pc, #4	; (adr r2, 8005a98 <ProcessData+0x38>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005abd 	.word	0x08005abd
 8005a9c:	08005b27 	.word	0x08005b27
 8005aa0:	08006d35 	.word	0x08006d35
 8005aa4:	08006619 	.word	0x08006619
 8005aa8:	08006cbb 	.word	0x08006cbb
 8005aac:	08006f3d 	.word	0x08006f3d
 8005ab0:	08006f3d 	.word	0x08006f3d
 8005ab4:	08006f3d 	.word	0x08006f3d
 8005ab8:	08006e29 	.word	0x08006e29
	{
	case ID_UART_START:
		if(incom[0]=='I'){
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b49      	cmp	r3, #73	; 0x49
 8005ac2:	d10c      	bne.n	8005ade <ProcessData+0x7e>
			pccom=1;
 8005ac4:	4b96      	ldr	r3, [pc, #600]	; (8005d20 <ProcessData+0x2c0>)
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]
			extcon=0;
 8005aca:	4b96      	ldr	r3, [pc, #600]	; (8005d24 <ProcessData+0x2c4>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	601a      	str	r2, [r3, #0]
			SendPc("OK\0",2, ID_UART_START);
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	2102      	movs	r1, #2
 8005ad4:	4894      	ldr	r0, [pc, #592]	; (8005d28 <ProcessData+0x2c8>)
 8005ad6:	f7ff fbf5 	bl	80052c4 <SendPc>
		}
		else{
			SendPc("TRY_AGAIN\0",1, ID_UART_START);
			pccom=0;
		}
		break;
 8005ada:	f001 ba36 	b.w	8006f4a <ProcessData+0x14ea>
		else if(incom[0]=='O'&&incom[1]=='K'){
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b4f      	cmp	r3, #79	; 0x4f
 8005ae4:	d115      	bne.n	8005b12 <ProcessData+0xb2>
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	2b4b      	cmp	r3, #75	; 0x4b
 8005aee:	d110      	bne.n	8005b12 <ProcessData+0xb2>
			if(initalize<6){
 8005af0:	4b8e      	ldr	r3, [pc, #568]	; (8005d2c <ProcessData+0x2cc>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b05      	cmp	r3, #5
 8005af6:	dc05      	bgt.n	8005b04 <ProcessData+0xa4>
				initalize=0;
 8005af8:	4b8c      	ldr	r3, [pc, #560]	; (8005d2c <ProcessData+0x2cc>)
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
				bossayac=1;
 8005afe:	4b8c      	ldr	r3, [pc, #560]	; (8005d30 <ProcessData+0x2d0>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	601a      	str	r2, [r3, #0]
			SendPc("CONNECTED\0", 5, ID_FIND);
 8005b04:	2202      	movs	r2, #2
 8005b06:	2105      	movs	r1, #5
 8005b08:	488a      	ldr	r0, [pc, #552]	; (8005d34 <ProcessData+0x2d4>)
 8005b0a:	f7ff fbdb 	bl	80052c4 <SendPc>
		break;
 8005b0e:	f001 ba1c 	b.w	8006f4a <ProcessData+0x14ea>
			SendPc("TRY_AGAIN\0",1, ID_UART_START);
 8005b12:	2201      	movs	r2, #1
 8005b14:	2101      	movs	r1, #1
 8005b16:	4888      	ldr	r0, [pc, #544]	; (8005d38 <ProcessData+0x2d8>)
 8005b18:	f7ff fbd4 	bl	80052c4 <SendPc>
			pccom=0;
 8005b1c:	4b80      	ldr	r3, [pc, #512]	; (8005d20 <ProcessData+0x2c0>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
		break;
 8005b22:	f001 ba12 	b.w	8006f4a <ProcessData+0x14ea>
	case ID_FIND:
		BUFGEN[0]=0;
 8005b26:	4b85      	ldr	r3, [pc, #532]	; (8005d3c <ProcessData+0x2dc>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
		if(incom[0]=='4'){
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b34      	cmp	r3, #52	; 0x34
 8005b32:	f040 809a 	bne.w	8005c6a <ProcessData+0x20a>
			if(incom[1]=='0'){//4_0_A_SS_
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b30      	cmp	r3, #48	; 0x30
 8005b3e:	d137      	bne.n	8005bb0 <ProcessData+0x150>
				memcpy(&BUFGEN,&incom[2],1);
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3302      	adds	r3, #2
 8005b44:	781a      	ldrb	r2, [r3, #0]
 8005b46:	4b7d      	ldr	r3, [pc, #500]	; (8005d3c <ProcessData+0x2dc>)
 8005b48:	701a      	strb	r2, [r3, #0]
				app=atoi(BUFGEN);//approach type al.
 8005b4a:	487c      	ldr	r0, [pc, #496]	; (8005d3c <ProcessData+0x2dc>)
 8005b4c:	f00b ffa7 	bl	8011a9e <atoi>
 8005b50:	4603      	mov	r3, r0
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	4b7a      	ldr	r3, [pc, #488]	; (8005d40 <ProcessData+0x2e0>)
 8005b56:	701a      	strb	r2, [r3, #0]
				memcpy(&BUFGEN,&incom[3],1);
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	3303      	adds	r3, #3
 8005b5c:	781a      	ldrb	r2, [r3, #0]
 8005b5e:	4b77      	ldr	r3, [pc, #476]	; (8005d3c <ProcessData+0x2dc>)
 8005b60:	701a      	strb	r2, [r3, #0]
				step=10*atoi(BUFGEN);
 8005b62:	4876      	ldr	r0, [pc, #472]	; (8005d3c <ProcessData+0x2dc>)
 8005b64:	f00b ff9b 	bl	8011a9e <atoi>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	461a      	mov	r2, r3
 8005b74:	4b73      	ldr	r3, [pc, #460]	; (8005d44 <ProcessData+0x2e4>)
 8005b76:	601a      	str	r2, [r3, #0]
				memcpy(&BUFGEN,&incom[4],1);
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	4b6f      	ldr	r3, [pc, #444]	; (8005d3c <ProcessData+0x2dc>)
 8005b80:	701a      	strb	r2, [r3, #0]
				step=step+atoi(BUFGEN);//step sayısını al.
 8005b82:	486e      	ldr	r0, [pc, #440]	; (8005d3c <ProcessData+0x2dc>)
 8005b84:	f00b ff8b 	bl	8011a9e <atoi>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4b6e      	ldr	r3, [pc, #440]	; (8005d44 <ProcessData+0x2e4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4413      	add	r3, r2
 8005b90:	4a6c      	ldr	r2, [pc, #432]	; (8005d44 <ProcessData+0x2e4>)
 8005b92:	6013      	str	r3, [r2, #0]
				SendPc("R0\0",149, EXP_START);
 8005b94:	2204      	movs	r2, #4
 8005b96:	2195      	movs	r1, #149	; 0x95
 8005b98:	486b      	ldr	r0, [pc, #428]	; (8005d48 <ProcessData+0x2e8>)
 8005b9a:	f7ff fb93 	bl	80052c4 <SendPc>
				uart2say=1;
 8005b9e:	4b6b      	ldr	r3, [pc, #428]	; (8005d4c <ProcessData+0x2ec>)
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12, 100000);
 8005ba4:	496a      	ldr	r1, [pc, #424]	; (8005d50 <ProcessData+0x2f0>)
 8005ba6:	486b      	ldr	r0, [pc, #428]	; (8005d54 <ProcessData+0x2f4>)
 8005ba8:	f005 fb36 	bl	800b218 <TimeSet>
 8005bac:	f000 bd2f 	b.w	800660e <ProcessData+0xbae>
			}
			else if(incom[1]=='1'){//4_1_App_return_dir_
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b31      	cmp	r3, #49	; 0x31
 8005bb8:	d12f      	bne.n	8005c1a <ProcessData+0x1ba>
				memcpy(&BUFGEN,&incom[2],1);//APPROACH TYPE
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3302      	adds	r3, #2
 8005bbe:	781a      	ldrb	r2, [r3, #0]
 8005bc0:	4b5e      	ldr	r3, [pc, #376]	; (8005d3c <ProcessData+0x2dc>)
 8005bc2:	701a      	strb	r2, [r3, #0]
				app=atoi(BUFGEN);
 8005bc4:	485d      	ldr	r0, [pc, #372]	; (8005d3c <ProcessData+0x2dc>)
 8005bc6:	f00b ff6a 	bl	8011a9e <atoi>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	4b5c      	ldr	r3, [pc, #368]	; (8005d40 <ProcessData+0x2e0>)
 8005bd0:	701a      	strb	r2, [r3, #0]
				memcpy(&BUFGEN,&incom[3],1);//Returncheck
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	3303      	adds	r3, #3
 8005bd6:	781a      	ldrb	r2, [r3, #0]
 8005bd8:	4b58      	ldr	r3, [pc, #352]	; (8005d3c <ProcessData+0x2dc>)
 8005bda:	701a      	strb	r2, [r3, #0]
				returncheck=atoi(BUFGEN);
 8005bdc:	4857      	ldr	r0, [pc, #348]	; (8005d3c <ProcessData+0x2dc>)
 8005bde:	f00b ff5e 	bl	8011a9e <atoi>
 8005be2:	4602      	mov	r2, r0
 8005be4:	4b5c      	ldr	r3, [pc, #368]	; (8005d58 <ProcessData+0x2f8>)
 8005be6:	601a      	str	r2, [r3, #0]
				memcpy(&BUFGEN,&incom[4],1);//Direction
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	3304      	adds	r3, #4
 8005bec:	781a      	ldrb	r2, [r3, #0]
 8005bee:	4b53      	ldr	r3, [pc, #332]	; (8005d3c <ProcessData+0x2dc>)
 8005bf0:	701a      	strb	r2, [r3, #0]
				firstdir=atoi(BUFGEN);
 8005bf2:	4852      	ldr	r0, [pc, #328]	; (8005d3c <ProcessData+0x2dc>)
 8005bf4:	f00b ff53 	bl	8011a9e <atoi>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b58      	ldr	r3, [pc, #352]	; (8005d5c <ProcessData+0x2fc>)
 8005bfc:	601a      	str	r2, [r3, #0]
				SendPc("R1\0",41, EXP_START);
 8005bfe:	2204      	movs	r2, #4
 8005c00:	2129      	movs	r1, #41	; 0x29
 8005c02:	4857      	ldr	r0, [pc, #348]	; (8005d60 <ProcessData+0x300>)
 8005c04:	f7ff fb5e 	bl	80052c4 <SendPc>
				uart2say=1;
 8005c08:	4b50      	ldr	r3, [pc, #320]	; (8005d4c <ProcessData+0x2ec>)
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12, 100000);
 8005c0e:	4950      	ldr	r1, [pc, #320]	; (8005d50 <ProcessData+0x2f0>)
 8005c10:	4850      	ldr	r0, [pc, #320]	; (8005d54 <ProcessData+0x2f4>)
 8005c12:	f005 fb01 	bl	800b218 <TimeSet>
 8005c16:	f000 bcfa 	b.w	800660e <ProcessData+0xbae>
			}
			else if(incom[1]=='3'){
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	2b33      	cmp	r3, #51	; 0x33
 8005c22:	f040 84f4 	bne.w	800660e <ProcessData+0xbae>
				memcpy(&BUFGEN,&incom[2],1);//experiment displacement|2|/load|1|/voltage|0| control
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	3302      	adds	r3, #2
 8005c2a:	781a      	ldrb	r2, [r3, #0]
 8005c2c:	4b43      	ldr	r3, [pc, #268]	; (8005d3c <ProcessData+0x2dc>)
 8005c2e:	701a      	strb	r2, [r3, #0]
				expLoad=atoi(BUFGEN);
 8005c30:	4842      	ldr	r0, [pc, #264]	; (8005d3c <ProcessData+0x2dc>)
 8005c32:	f00b ff34 	bl	8011a9e <atoi>
 8005c36:	4602      	mov	r2, r0
 8005c38:	4b4a      	ldr	r3, [pc, #296]	; (8005d64 <ProcessData+0x304>)
 8005c3a:	601a      	str	r2, [r3, #0]
				memcpy(&BUFGEN,&incom[3],1);//load feed type //HX|0|ADC|1|NI|2|
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	3303      	adds	r3, #3
 8005c40:	781a      	ldrb	r2, [r3, #0]
 8005c42:	4b3e      	ldr	r3, [pc, #248]	; (8005d3c <ProcessData+0x2dc>)
 8005c44:	701a      	strb	r2, [r3, #0]
				loadFeed=atoi(BUFGEN);
 8005c46:	483d      	ldr	r0, [pc, #244]	; (8005d3c <ProcessData+0x2dc>)
 8005c48:	f00b ff29 	bl	8011a9e <atoi>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	4b46      	ldr	r3, [pc, #280]	; (8005d68 <ProcessData+0x308>)
 8005c50:	601a      	str	r2, [r3, #0]
				memcpy(&BUFGEN,&incom[4],1);//
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3304      	adds	r3, #4
 8005c56:	781a      	ldrb	r2, [r3, #0]
 8005c58:	4b38      	ldr	r3, [pc, #224]	; (8005d3c <ProcessData+0x2dc>)
 8005c5a:	701a      	strb	r2, [r3, #0]
				SendPc("ExpType", 5, ID_FIND);
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	2105      	movs	r1, #5
 8005c60:	4842      	ldr	r0, [pc, #264]	; (8005d6c <ProcessData+0x30c>)
 8005c62:	f7ff fb2f 	bl	80052c4 <SendPc>
 8005c66:	f000 bcd2 	b.w	800660e <ProcessData+0xbae>
			}
		}
		else if(incom[0]=='3'){
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b33      	cmp	r3, #51	; 0x33
 8005c70:	d127      	bne.n	8005cc2 <ProcessData+0x262>
			memcpy(&BUFGEN,&incom[1],1);
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	3301      	adds	r3, #1
 8005c76:	781a      	ldrb	r2, [r3, #0]
 8005c78:	4b30      	ldr	r3, [pc, #192]	; (8005d3c <ProcessData+0x2dc>)
 8005c7a:	701a      	strb	r2, [r3, #0]
			dir=atoi(BUFGEN);
 8005c7c:	482f      	ldr	r0, [pc, #188]	; (8005d3c <ProcessData+0x2dc>)
 8005c7e:	f00b ff0e 	bl	8011a9e <atoi>
 8005c82:	4602      	mov	r2, r0
 8005c84:	4b3a      	ldr	r3, [pc, #232]	; (8005d70 <ProcessData+0x310>)
 8005c86:	601a      	str	r2, [r3, #0]
			memcpy(&BUFGEN,&incom[2],1);
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	3302      	adds	r3, #2
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	4b2b      	ldr	r3, [pc, #172]	; (8005d3c <ProcessData+0x2dc>)
 8005c90:	701a      	strb	r2, [r3, #0]
			automot=atoi(BUFGEN);
 8005c92:	482a      	ldr	r0, [pc, #168]	; (8005d3c <ProcessData+0x2dc>)
 8005c94:	f00b ff03 	bl	8011a9e <atoi>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <ProcessData+0x314>)
 8005c9c:	601a      	str	r2, [r3, #0]
			memcpy(&BUFGEN,&incom[3],1);
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	3303      	adds	r3, #3
 8005ca2:	781a      	ldrb	r2, [r3, #0]
 8005ca4:	4b25      	ldr	r3, [pc, #148]	; (8005d3c <ProcessData+0x2dc>)
 8005ca6:	701a      	strb	r2, [r3, #0]
			speedmode=atoi(BUFGEN);
 8005ca8:	4824      	ldr	r0, [pc, #144]	; (8005d3c <ProcessData+0x2dc>)
 8005caa:	f00b fef8 	bl	8011a9e <atoi>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	4b31      	ldr	r3, [pc, #196]	; (8005d78 <ProcessData+0x318>)
 8005cb2:	601a      	str	r2, [r3, #0]
			SendPc("R3\0", 20, MOT_COM);
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	2114      	movs	r1, #20
 8005cb8:	4830      	ldr	r0, [pc, #192]	; (8005d7c <ProcessData+0x31c>)
 8005cba:	f7ff fb03 	bl	80052c4 <SendPc>
 8005cbe:	f000 bca6 	b.w	800660e <ProcessData+0xbae>
		}
		else if(incom[0]=='5'){//5_SS_00
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b35      	cmp	r3, #53	; 0x35
 8005cc8:	d15c      	bne.n	8005d84 <ProcessData+0x324>
			memcpy(&BUFGEN,&incom[1],1);
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	781a      	ldrb	r2, [r3, #0]
 8005cd0:	4b1a      	ldr	r3, [pc, #104]	; (8005d3c <ProcessData+0x2dc>)
 8005cd2:	701a      	strb	r2, [r3, #0]
			int bufsiz=10*atoi(BUFGEN);
 8005cd4:	4819      	ldr	r0, [pc, #100]	; (8005d3c <ProcessData+0x2dc>)
 8005cd6:	f00b fee2 	bl	8011a9e <atoi>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	4613      	mov	r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	66fb      	str	r3, [r7, #108]	; 0x6c
			memcpy(&BUFGEN,&incom[2],1);
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3302      	adds	r3, #2
 8005cea:	781a      	ldrb	r2, [r3, #0]
 8005cec:	4b13      	ldr	r3, [pc, #76]	; (8005d3c <ProcessData+0x2dc>)
 8005cee:	701a      	strb	r2, [r3, #0]
			bufsiz=bufsiz+atoi(BUFGEN);//DIR_COM BUFFER SIZE
 8005cf0:	4812      	ldr	r0, [pc, #72]	; (8005d3c <ProcessData+0x2dc>)
 8005cf2:	f00b fed4 	bl	8011a9e <atoi>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfa:	4413      	add	r3, r2
 8005cfc:	66fb      	str	r3, [r7, #108]	; 0x6c
			SendPc("R5\0",bufsiz, DIRECT_COM);
 8005cfe:	2205      	movs	r2, #5
 8005d00:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005d02:	481f      	ldr	r0, [pc, #124]	; (8005d80 <ProcessData+0x320>)
 8005d04:	f7ff fade 	bl	80052c4 <SendPc>
			uart2say=1;
 8005d08:	4b10      	ldr	r3, [pc, #64]	; (8005d4c <ProcessData+0x2ec>)
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
			TimeSet(&htim12, 100000);
 8005d0e:	4910      	ldr	r1, [pc, #64]	; (8005d50 <ProcessData+0x2f0>)
 8005d10:	4810      	ldr	r0, [pc, #64]	; (8005d54 <ProcessData+0x2f4>)
 8005d12:	f005 fa81 	bl	800b218 <TimeSet>
 8005d16:	f000 bc7a 	b.w	800660e <ProcessData+0xbae>
 8005d1a:	bf00      	nop
 8005d1c:	2000182c 	.word	0x2000182c
 8005d20:	200018b4 	.word	0x200018b4
 8005d24:	20001810 	.word	0x20001810
 8005d28:	08011f34 	.word	0x08011f34
 8005d2c:	200002c0 	.word	0x200002c0
 8005d30:	2000003c 	.word	0x2000003c
 8005d34:	08011f38 	.word	0x08011f38
 8005d38:	08011f44 	.word	0x08011f44
 8005d3c:	20006f0c 	.word	0x20006f0c
 8005d40:	20006964 	.word	0x20006964
 8005d44:	200002e8 	.word	0x200002e8
 8005d48:	08011f50 	.word	0x08011f50
 8005d4c:	200018b0 	.word	0x200018b0
 8005d50:	000186a0 	.word	0x000186a0
 8005d54:	20006ec8 	.word	0x20006ec8
 8005d58:	200002ec 	.word	0x200002ec
 8005d5c:	20000304 	.word	0x20000304
 8005d60:	08011f54 	.word	0x08011f54
 8005d64:	20000308 	.word	0x20000308
 8005d68:	2000030c 	.word	0x2000030c
 8005d6c:	08011f58 	.word	0x08011f58
 8005d70:	20000338 	.word	0x20000338
 8005d74:	2000034c 	.word	0x2000034c
 8005d78:	20000354 	.word	0x20000354
 8005d7c:	08011f60 	.word	0x08011f60
 8005d80:	08011f64 	.word	0x08011f64
		}
		else if(incom[0]=='6'&&_uartcom3->RxSize==5){
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b36      	cmp	r3, #54	; 0x36
 8005d8a:	d12c      	bne.n	8005de6 <ProcessData+0x386>
 8005d8c:	4ba7      	ldr	r3, [pc, #668]	; (800602c <ProcessData+0x5cc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d127      	bne.n	8005de6 <ProcessData+0x386>
			if(initalize>5){
 8005d96:	4ba6      	ldr	r3, [pc, #664]	; (8006030 <ProcessData+0x5d0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b05      	cmp	r3, #5
 8005d9c:	dd0d      	ble.n	8005dba <ProcessData+0x35a>
				tryuc=101;
 8005d9e:	4ba5      	ldr	r3, [pc, #660]	; (8006034 <ProcessData+0x5d4>)
 8005da0:	2265      	movs	r2, #101	; 0x65
 8005da2:	601a      	str	r2, [r3, #0]
				char ucrest[15];
				ucrest[0]='P';
 8005da4:	2350      	movs	r3, #80	; 0x50
 8005da6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
				SendAct(ucrest, INIT0.kp);
 8005daa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005dae:	49a2      	ldr	r1, [pc, #648]	; (8006038 <ProcessData+0x5d8>)
 8005db0:	4618      	mov	r0, r3
 8005db2:	f005 fcdf 	bl	800b774 <SendAct>
			if(initalize>5){
 8005db6:	f000 bc2a 	b.w	800660e <ProcessData+0xbae>
			}
			else{
				tryuc=0;
 8005dba:	4b9e      	ldr	r3, [pc, #632]	; (8006034 <ProcessData+0x5d4>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
				bossayac=1;
 8005dc0:	4b9e      	ldr	r3, [pc, #632]	; (800603c <ProcessData+0x5dc>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
				initalize=0;
 8005dc6:	4b9a      	ldr	r3, [pc, #616]	; (8006030 <ProcessData+0x5d0>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	601a      	str	r2, [r3, #0]
				contproc=0;
 8005dcc:	4b9c      	ldr	r3, [pc, #624]	; (8006040 <ProcessData+0x5e0>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Start_IT(&htim11);
 8005dd2:	489c      	ldr	r0, [pc, #624]	; (8006044 <ProcessData+0x5e4>)
 8005dd4:	f009 f8a3 	bl	800ef1e <HAL_TIM_Base_Start_IT>
				SendPc("Trying to Communicate UC45...\0", 5, ID_FIND);
 8005dd8:	2202      	movs	r2, #2
 8005dda:	2105      	movs	r1, #5
 8005ddc:	489a      	ldr	r0, [pc, #616]	; (8006048 <ProcessData+0x5e8>)
 8005dde:	f7ff fa71 	bl	80052c4 <SendPc>
			if(initalize>5){
 8005de2:	f000 bc14 	b.w	800660e <ProcessData+0xbae>
			}
		}
		else if(incom[0]=='7'){
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b37      	cmp	r3, #55	; 0x37
 8005dec:	d163      	bne.n	8005eb6 <ProcessData+0x456>
			memcpy(&BUFGEN,&incom[1],1);
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	3301      	adds	r3, #1
 8005df2:	781a      	ldrb	r2, [r3, #0]
 8005df4:	4b95      	ldr	r3, [pc, #596]	; (800604c <ProcessData+0x5ec>)
 8005df6:	701a      	strb	r2, [r3, #0]
			control = 1000 * atoi(BUFGEN);
 8005df8:	4894      	ldr	r0, [pc, #592]	; (800604c <ProcessData+0x5ec>)
 8005dfa:	f00b fe50 	bl	8011a9e <atoi>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e04:	fb03 f302 	mul.w	r3, r3, r2
 8005e08:	4a91      	ldr	r2, [pc, #580]	; (8006050 <ProcessData+0x5f0>)
 8005e0a:	6013      	str	r3, [r2, #0]
			memcpy(&BUFGEN,&incom[2],1);
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	3302      	adds	r3, #2
 8005e10:	781a      	ldrb	r2, [r3, #0]
 8005e12:	4b8e      	ldr	r3, [pc, #568]	; (800604c <ProcessData+0x5ec>)
 8005e14:	701a      	strb	r2, [r3, #0]
			control = control + 100 * atoi(BUFGEN);
 8005e16:	488d      	ldr	r0, [pc, #564]	; (800604c <ProcessData+0x5ec>)
 8005e18:	f00b fe41 	bl	8011a9e <atoi>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	2364      	movs	r3, #100	; 0x64
 8005e20:	fb03 f202 	mul.w	r2, r3, r2
 8005e24:	4b8a      	ldr	r3, [pc, #552]	; (8006050 <ProcessData+0x5f0>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4413      	add	r3, r2
 8005e2a:	4a89      	ldr	r2, [pc, #548]	; (8006050 <ProcessData+0x5f0>)
 8005e2c:	6013      	str	r3, [r2, #0]
			memcpy(&BUFGEN,&incom[3],1);
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	3303      	adds	r3, #3
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	4b85      	ldr	r3, [pc, #532]	; (800604c <ProcessData+0x5ec>)
 8005e36:	701a      	strb	r2, [r3, #0]
			control = control + 10 * atoi(BUFGEN);
 8005e38:	4884      	ldr	r0, [pc, #528]	; (800604c <ProcessData+0x5ec>)
 8005e3a:	f00b fe30 	bl	8011a9e <atoi>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4b81      	ldr	r3, [pc, #516]	; (8006050 <ProcessData+0x5f0>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4413      	add	r3, r2
 8005e50:	4a7f      	ldr	r2, [pc, #508]	; (8006050 <ProcessData+0x5f0>)
 8005e52:	6013      	str	r3, [r2, #0]
			memcpy(&BUFGEN,&incom[4],1);
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	3304      	adds	r3, #4
 8005e58:	781a      	ldrb	r2, [r3, #0]
 8005e5a:	4b7c      	ldr	r3, [pc, #496]	; (800604c <ProcessData+0x5ec>)
 8005e5c:	701a      	strb	r2, [r3, #0]
			control = control + atoi(BUFGEN);
 8005e5e:	487b      	ldr	r0, [pc, #492]	; (800604c <ProcessData+0x5ec>)
 8005e60:	f00b fe1d 	bl	8011a9e <atoi>
 8005e64:	4602      	mov	r2, r0
 8005e66:	4b7a      	ldr	r3, [pc, #488]	; (8006050 <ProcessData+0x5f0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	4a78      	ldr	r2, [pc, #480]	; (8006050 <ProcessData+0x5f0>)
 8005e6e:	6013      	str	r3, [r2, #0]
			motsender[0]=0;
 8005e70:	4b78      	ldr	r3, [pc, #480]	; (8006054 <ProcessData+0x5f4>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	701a      	strb	r2, [r3, #0]
			itoa(adcVal1,motsender,10);
 8005e76:	4b78      	ldr	r3, [pc, #480]	; (8006058 <ProcessData+0x5f8>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	220a      	movs	r2, #10
 8005e7c:	4975      	ldr	r1, [pc, #468]	; (8006054 <ProcessData+0x5f4>)
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f00b fe4e 	bl	8011b20 <itoa>
			strcat(motsender,"C\0");
 8005e84:	4873      	ldr	r0, [pc, #460]	; (8006054 <ProcessData+0x5f4>)
 8005e86:	f7fa f99f 	bl	80001c8 <strlen>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4b71      	ldr	r3, [pc, #452]	; (8006054 <ProcessData+0x5f4>)
 8005e90:	4413      	add	r3, r2
 8005e92:	4972      	ldr	r1, [pc, #456]	; (800605c <ProcessData+0x5fc>)
 8005e94:	461a      	mov	r2, r3
 8005e96:	460b      	mov	r3, r1
 8005e98:	881b      	ldrh	r3, [r3, #0]
 8005e9a:	8013      	strh	r3, [r2, #0]
			SendPc(motsender, 5, OLD_ID);
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2105      	movs	r1, #5
 8005ea0:	486c      	ldr	r0, [pc, #432]	; (8006054 <ProcessData+0x5f4>)
 8005ea2:	f7ff fa0f 	bl	80052c4 <SendPc>
			uart2say=1;
 8005ea6:	4b6e      	ldr	r3, [pc, #440]	; (8006060 <ProcessData+0x600>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	601a      	str	r2, [r3, #0]
			TimeSet(&htim12,100000);
 8005eac:	496d      	ldr	r1, [pc, #436]	; (8006064 <ProcessData+0x604>)
 8005eae:	486e      	ldr	r0, [pc, #440]	; (8006068 <ProcessData+0x608>)
 8005eb0:	f005 f9b2 	bl	800b218 <TimeSet>
 8005eb4:	e3ab      	b.n	800660e <ProcessData+0xbae>
		}
		else if(incom[0]=='8'){
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b38      	cmp	r3, #56	; 0x38
 8005ebc:	f040 8288 	bne.w	80063d0 <ProcessData+0x970>
			if(incom[1]=='0'){//9pts deviaton find
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b30      	cmp	r3, #48	; 0x30
 8005ec8:	d136      	bne.n	8005f38 <ProcessData+0x4d8>
				if(incom[2]=='3'){//from NI-PCIe sensor data
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	3302      	adds	r3, #2
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b33      	cmp	r3, #51	; 0x33
 8005ed2:	f000 839c 	beq.w	800660e <ProcessData+0xbae>

				}
				else if(incom[2]=='0'){//from internal ADC data--using actuator !limit should be given
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	3302      	adds	r3, #2
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b30      	cmp	r3, #48	; 0x30
 8005ede:	d10a      	bne.n	8005ef6 <ProcessData+0x496>
					slopExt(0, 5, 5, 5, 100, 10);
 8005ee0:	230a      	movs	r3, #10
 8005ee2:	9301      	str	r3, [sp, #4]
 8005ee4:	2364      	movs	r3, #100	; 0x64
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	2305      	movs	r3, #5
 8005eea:	2205      	movs	r2, #5
 8005eec:	2105      	movs	r1, #5
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f7fc fb12 	bl	8002518 <slopExt>
 8005ef4:	e38b      	b.n	800660e <ProcessData+0xbae>
				}
				else if(incom[2]=='1'){//using step motor
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	3302      	adds	r3, #2
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b31      	cmp	r3, #49	; 0x31
 8005efe:	d10a      	bne.n	8005f16 <ProcessData+0x4b6>
					slopExt(1, 5, 5, 5, 100, 10);
 8005f00:	230a      	movs	r3, #10
 8005f02:	9301      	str	r3, [sp, #4]
 8005f04:	2364      	movs	r3, #100	; 0x64
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	2305      	movs	r3, #5
 8005f0a:	2205      	movs	r2, #5
 8005f0c:	2105      	movs	r1, #5
 8005f0e:	2001      	movs	r0, #1
 8005f10:	f7fc fb02 	bl	8002518 <slopExt>
 8005f14:	e37b      	b.n	800660e <ProcessData+0xbae>
				}
				else if(incom[2]=='2'){//using step motor && NI data
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	3302      	adds	r3, #2
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	2b32      	cmp	r3, #50	; 0x32
 8005f1e:	f040 8376 	bne.w	800660e <ProcessData+0xbae>
					slopExt(2, 5, 5, 5, 100, 10);
 8005f22:	230a      	movs	r3, #10
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	2364      	movs	r3, #100	; 0x64
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	2305      	movs	r3, #5
 8005f2c:	2205      	movs	r2, #5
 8005f2e:	2105      	movs	r1, #5
 8005f30:	2002      	movs	r0, #2
 8005f32:	f7fc faf1 	bl	8002518 <slopExt>
 8005f36:	e36a      	b.n	800660e <ProcessData+0xbae>
				}
			}
			else if(incom[1]=='1'){//mpu6050from upper part
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b31      	cmp	r3, #49	; 0x31
 8005f40:	d137      	bne.n	8005fb2 <ProcessData+0x552>
				HAL_GPIO_WritePin(MPU6050_AD0_GPIO_Port, MPU6050_AD0_Pin, GPIO_PIN_RESET);
 8005f42:	2200      	movs	r2, #0
 8005f44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f48:	4848      	ldr	r0, [pc, #288]	; (800606c <ProcessData+0x60c>)
 8005f4a:	f006 ff85 	bl	800ce58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MPU6050_AD1_GPIO_Port, MPU6050_AD1_Pin, GPIO_PIN_SET);
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f54:	4845      	ldr	r0, [pc, #276]	; (800606c <ProcessData+0x60c>)
 8005f56:	f006 ff7f 	bl	800ce58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MPU6050_AD2_GPIO_Port, MPU6050_AD2_Pin, GPIO_PIN_SET);
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f60:	4842      	ldr	r0, [pc, #264]	; (800606c <ProcessData+0x60c>)
 8005f62:	f006 ff79 	bl	800ce58 <HAL_GPIO_WritePin>
				readMPU(0xD0, 0x00, 10);
 8005f66:	220a      	movs	r2, #10
 8005f68:	2100      	movs	r1, #0
 8005f6a:	20d0      	movs	r0, #208	; 0xd0
 8005f6c:	f7fb f9b8 	bl	80012e0 <readMPU>
				datasender[0]=0;
 8005f70:	4b3f      	ldr	r3, [pc, #252]	; (8006070 <ProcessData+0x610>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	701a      	strb	r2, [r3, #0]
				itoa(mpu[0],datasender,10);
 8005f76:	4b3f      	ldr	r3, [pc, #252]	; (8006074 <ProcessData+0x614>)
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	220a      	movs	r2, #10
 8005f7c:	493c      	ldr	r1, [pc, #240]	; (8006070 <ProcessData+0x610>)
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f00b fdce 	bl	8011b20 <itoa>
				strcat(datasender,"XGY\0");
 8005f84:	483a      	ldr	r0, [pc, #232]	; (8006070 <ProcessData+0x610>)
 8005f86:	f7fa f91f 	bl	80001c8 <strlen>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4b38      	ldr	r3, [pc, #224]	; (8006070 <ProcessData+0x610>)
 8005f90:	4413      	add	r3, r2
 8005f92:	4a39      	ldr	r2, [pc, #228]	; (8006078 <ProcessData+0x618>)
 8005f94:	6810      	ldr	r0, [r2, #0]
 8005f96:	6018      	str	r0, [r3, #0]
				SendPc(datasender, 5, OLD_ID);
 8005f98:	2200      	movs	r2, #0
 8005f9a:	2105      	movs	r1, #5
 8005f9c:	4834      	ldr	r0, [pc, #208]	; (8006070 <ProcessData+0x610>)
 8005f9e:	f7ff f991 	bl	80052c4 <SendPc>
				uart2say=1;
 8005fa2:	4b2f      	ldr	r3, [pc, #188]	; (8006060 <ProcessData+0x600>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12,100000);			}
 8005fa8:	492e      	ldr	r1, [pc, #184]	; (8006064 <ProcessData+0x604>)
 8005faa:	482f      	ldr	r0, [pc, #188]	; (8006068 <ProcessData+0x608>)
 8005fac:	f005 f934 	bl	800b218 <TimeSet>
 8005fb0:	e32d      	b.n	800660e <ProcessData+0xbae>
			else if(incom[1]=='2'){//mpu6050from moving part
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b32      	cmp	r3, #50	; 0x32
 8005fba:	d15f      	bne.n	800607c <ProcessData+0x61c>
				HAL_GPIO_WritePin(MPU6050_AD0_GPIO_Port, MPU6050_AD0_Pin, GPIO_PIN_SET);
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fc2:	482a      	ldr	r0, [pc, #168]	; (800606c <ProcessData+0x60c>)
 8005fc4:	f006 ff48 	bl	800ce58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MPU6050_AD1_GPIO_Port, MPU6050_AD1_Pin, GPIO_PIN_RESET);
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fce:	4827      	ldr	r0, [pc, #156]	; (800606c <ProcessData+0x60c>)
 8005fd0:	f006 ff42 	bl	800ce58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MPU6050_AD2_GPIO_Port, MPU6050_AD2_Pin, GPIO_PIN_SET);
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005fda:	4824      	ldr	r0, [pc, #144]	; (800606c <ProcessData+0x60c>)
 8005fdc:	f006 ff3c 	bl	800ce58 <HAL_GPIO_WritePin>
				readMPU(0xD0, 0x00, 10);
 8005fe0:	220a      	movs	r2, #10
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	20d0      	movs	r0, #208	; 0xd0
 8005fe6:	f7fb f97b 	bl	80012e0 <readMPU>
				datasender[0]=0;
 8005fea:	4b21      	ldr	r3, [pc, #132]	; (8006070 <ProcessData+0x610>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]
				itoa(mpu[0],datasender,10);
 8005ff0:	4b20      	ldr	r3, [pc, #128]	; (8006074 <ProcessData+0x614>)
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	220a      	movs	r2, #10
 8005ff6:	491e      	ldr	r1, [pc, #120]	; (8006070 <ProcessData+0x610>)
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f00b fd91 	bl	8011b20 <itoa>
				strcat(datasender,"XGY\0");
 8005ffe:	481c      	ldr	r0, [pc, #112]	; (8006070 <ProcessData+0x610>)
 8006000:	f7fa f8e2 	bl	80001c8 <strlen>
 8006004:	4603      	mov	r3, r0
 8006006:	461a      	mov	r2, r3
 8006008:	4b19      	ldr	r3, [pc, #100]	; (8006070 <ProcessData+0x610>)
 800600a:	4413      	add	r3, r2
 800600c:	4a1a      	ldr	r2, [pc, #104]	; (8006078 <ProcessData+0x618>)
 800600e:	6810      	ldr	r0, [r2, #0]
 8006010:	6018      	str	r0, [r3, #0]
				SendPc(datasender, 5, OLD_ID);
 8006012:	2200      	movs	r2, #0
 8006014:	2105      	movs	r1, #5
 8006016:	4816      	ldr	r0, [pc, #88]	; (8006070 <ProcessData+0x610>)
 8006018:	f7ff f954 	bl	80052c4 <SendPc>
				uart2say=1;
 800601c:	4b10      	ldr	r3, [pc, #64]	; (8006060 <ProcessData+0x600>)
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12,100000);
 8006022:	4910      	ldr	r1, [pc, #64]	; (8006064 <ProcessData+0x604>)
 8006024:	4810      	ldr	r0, [pc, #64]	; (8006068 <ProcessData+0x608>)
 8006026:	f005 f8f7 	bl	800b218 <TimeSet>
 800602a:	e2f0      	b.n	800660e <ProcessData+0xbae>
 800602c:	20006f30 	.word	0x20006f30
 8006030:	200002c0 	.word	0x200002c0
 8006034:	20000038 	.word	0x20000038
 8006038:	20001924 	.word	0x20001924
 800603c:	2000003c 	.word	0x2000003c
 8006040:	200002c4 	.word	0x200002c4
 8006044:	20006c78 	.word	0x20006c78
 8006048:	08011f68 	.word	0x08011f68
 800604c:	20006f0c 	.word	0x20006f0c
 8006050:	20000364 	.word	0x20000364
 8006054:	20004ce0 	.word	0x20004ce0
 8006058:	2000029c 	.word	0x2000029c
 800605c:	08011f88 	.word	0x08011f88
 8006060:	200018b0 	.word	0x200018b0
 8006064:	000186a0 	.word	0x000186a0
 8006068:	20006ec8 	.word	0x20006ec8
 800606c:	40020c00 	.word	0x40020c00
 8006070:	20006bd8 	.word	0x20006bd8
 8006074:	2000039c 	.word	0x2000039c
 8006078:	08011f8c 	.word	0x08011f8c
			}
			else if(incom[1]=='3'){//mpu6050from base part
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	3301      	adds	r3, #1
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b33      	cmp	r3, #51	; 0x33
 8006084:	d137      	bne.n	80060f6 <ProcessData+0x696>
				HAL_GPIO_WritePin(MPU6050_AD0_GPIO_Port, MPU6050_AD0_Pin, GPIO_PIN_SET);
 8006086:	2201      	movs	r2, #1
 8006088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800608c:	48b6      	ldr	r0, [pc, #728]	; (8006368 <ProcessData+0x908>)
 800608e:	f006 fee3 	bl	800ce58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MPU6050_AD1_GPIO_Port, MPU6050_AD1_Pin, GPIO_PIN_SET);
 8006092:	2201      	movs	r2, #1
 8006094:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006098:	48b3      	ldr	r0, [pc, #716]	; (8006368 <ProcessData+0x908>)
 800609a:	f006 fedd 	bl	800ce58 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MPU6050_AD2_GPIO_Port, MPU6050_AD2_Pin, GPIO_PIN_RESET);
 800609e:	2200      	movs	r2, #0
 80060a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80060a4:	48b0      	ldr	r0, [pc, #704]	; (8006368 <ProcessData+0x908>)
 80060a6:	f006 fed7 	bl	800ce58 <HAL_GPIO_WritePin>
				readMPU(0xD0, 0x00, 10);
 80060aa:	220a      	movs	r2, #10
 80060ac:	2100      	movs	r1, #0
 80060ae:	20d0      	movs	r0, #208	; 0xd0
 80060b0:	f7fb f916 	bl	80012e0 <readMPU>
				datasender[0]=0;
 80060b4:	4bad      	ldr	r3, [pc, #692]	; (800636c <ProcessData+0x90c>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]
				itoa(mpu[0],datasender,10);
 80060ba:	4bad      	ldr	r3, [pc, #692]	; (8006370 <ProcessData+0x910>)
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	220a      	movs	r2, #10
 80060c0:	49aa      	ldr	r1, [pc, #680]	; (800636c <ProcessData+0x90c>)
 80060c2:	4618      	mov	r0, r3
 80060c4:	f00b fd2c 	bl	8011b20 <itoa>
				strcat(datasender,"XGY\0");
 80060c8:	48a8      	ldr	r0, [pc, #672]	; (800636c <ProcessData+0x90c>)
 80060ca:	f7fa f87d 	bl	80001c8 <strlen>
 80060ce:	4603      	mov	r3, r0
 80060d0:	461a      	mov	r2, r3
 80060d2:	4ba6      	ldr	r3, [pc, #664]	; (800636c <ProcessData+0x90c>)
 80060d4:	4413      	add	r3, r2
 80060d6:	4aa7      	ldr	r2, [pc, #668]	; (8006374 <ProcessData+0x914>)
 80060d8:	6810      	ldr	r0, [r2, #0]
 80060da:	6018      	str	r0, [r3, #0]
				SendPc(datasender, 5, OLD_ID);
 80060dc:	2200      	movs	r2, #0
 80060de:	2105      	movs	r1, #5
 80060e0:	48a2      	ldr	r0, [pc, #648]	; (800636c <ProcessData+0x90c>)
 80060e2:	f7ff f8ef 	bl	80052c4 <SendPc>
				uart2say=1;
 80060e6:	4ba4      	ldr	r3, [pc, #656]	; (8006378 <ProcessData+0x918>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12,100000);
 80060ec:	49a3      	ldr	r1, [pc, #652]	; (800637c <ProcessData+0x91c>)
 80060ee:	48a4      	ldr	r0, [pc, #656]	; (8006380 <ProcessData+0x920>)
 80060f0:	f005 f892 	bl	800b218 <TimeSet>
 80060f4:	e28b      	b.n	800660e <ProcessData+0xbae>
			}
			else if(incom[1]=='4'){//humidity sensor
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	3301      	adds	r3, #1
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b34      	cmp	r3, #52	; 0x34
 80060fe:	d143      	bne.n	8006188 <ProcessData+0x728>
				//give instant data
				motsender[0]=0;
 8006100:	4ba0      	ldr	r3, [pc, #640]	; (8006384 <ProcessData+0x924>)
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
				datasender[0]=0;
 8006106:	4b99      	ldr	r3, [pc, #612]	; (800636c <ProcessData+0x90c>)
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
				DHT_GetData(&instanthum);
 800610c:	489e      	ldr	r0, [pc, #632]	; (8006388 <ProcessData+0x928>)
 800610e:	f7fa fe47 	bl	8000da0 <DHT_GetData>
				itoa(instanthum.Humidity,motsender,10);
 8006112:	4b9d      	ldr	r3, [pc, #628]	; (8006388 <ProcessData+0x928>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	220a      	movs	r2, #10
 8006118:	499a      	ldr	r1, [pc, #616]	; (8006384 <ProcessData+0x924>)
 800611a:	4618      	mov	r0, r3
 800611c:	f00b fd00 	bl	8011b20 <itoa>
				strcat(datasender,motsender);
 8006120:	4998      	ldr	r1, [pc, #608]	; (8006384 <ProcessData+0x924>)
 8006122:	4892      	ldr	r0, [pc, #584]	; (800636c <ProcessData+0x90c>)
 8006124:	f00b fd11 	bl	8011b4a <strcat>
				strcat(datasender,"H\0");
 8006128:	4890      	ldr	r0, [pc, #576]	; (800636c <ProcessData+0x90c>)
 800612a:	f7fa f84d 	bl	80001c8 <strlen>
 800612e:	4603      	mov	r3, r0
 8006130:	461a      	mov	r2, r3
 8006132:	4b8e      	ldr	r3, [pc, #568]	; (800636c <ProcessData+0x90c>)
 8006134:	4413      	add	r3, r2
 8006136:	4995      	ldr	r1, [pc, #596]	; (800638c <ProcessData+0x92c>)
 8006138:	461a      	mov	r2, r3
 800613a:	460b      	mov	r3, r1
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	8013      	strh	r3, [r2, #0]
				itoa(instanthum.Temperature,motsender,10);
 8006140:	4b91      	ldr	r3, [pc, #580]	; (8006388 <ProcessData+0x928>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	220a      	movs	r2, #10
 8006146:	498f      	ldr	r1, [pc, #572]	; (8006384 <ProcessData+0x924>)
 8006148:	4618      	mov	r0, r3
 800614a:	f00b fce9 	bl	8011b20 <itoa>
				strcat(datasender,motsender);
 800614e:	498d      	ldr	r1, [pc, #564]	; (8006384 <ProcessData+0x924>)
 8006150:	4886      	ldr	r0, [pc, #536]	; (800636c <ProcessData+0x90c>)
 8006152:	f00b fcfa 	bl	8011b4a <strcat>
				strcat(datasender,"T\0");
 8006156:	4885      	ldr	r0, [pc, #532]	; (800636c <ProcessData+0x90c>)
 8006158:	f7fa f836 	bl	80001c8 <strlen>
 800615c:	4603      	mov	r3, r0
 800615e:	461a      	mov	r2, r3
 8006160:	4b82      	ldr	r3, [pc, #520]	; (800636c <ProcessData+0x90c>)
 8006162:	4413      	add	r3, r2
 8006164:	498a      	ldr	r1, [pc, #552]	; (8006390 <ProcessData+0x930>)
 8006166:	461a      	mov	r2, r3
 8006168:	460b      	mov	r3, r1
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	8013      	strh	r3, [r2, #0]
				SendPc(datasender, 5, OLD_ID);
 800616e:	2200      	movs	r2, #0
 8006170:	2105      	movs	r1, #5
 8006172:	487e      	ldr	r0, [pc, #504]	; (800636c <ProcessData+0x90c>)
 8006174:	f7ff f8a6 	bl	80052c4 <SendPc>
				uart2say=1;
 8006178:	4b7f      	ldr	r3, [pc, #508]	; (8006378 <ProcessData+0x918>)
 800617a:	2201      	movs	r2, #1
 800617c:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12,100000);
 800617e:	497f      	ldr	r1, [pc, #508]	; (800637c <ProcessData+0x91c>)
 8006180:	487f      	ldr	r0, [pc, #508]	; (8006380 <ProcessData+0x920>)
 8006182:	f005 f849 	bl	800b218 <TimeSet>
 8006186:	e242      	b.n	800660e <ProcessData+0xbae>
			}
			else if(incom[1]=='5'){//hx711 read
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	3301      	adds	r3, #1
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	2b35      	cmp	r3, #53	; 0x35
 8006190:	f040 823d 	bne.w	800660e <ProcessData+0xbae>
				//Continuous or instant
				isHXcom=1;
 8006194:	4b7f      	ldr	r3, [pc, #508]	; (8006394 <ProcessData+0x934>)
 8006196:	2201      	movs	r2, #1
 8006198:	601a      	str	r2, [r3, #0]
				if(incom[2]=='0'){
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	3302      	adds	r3, #2
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	2b30      	cmp	r3, #48	; 0x30
 80061a2:	d143      	bne.n	800622c <ProcessData+0x7cc>
					instant=HX711_Value(instant,1);
 80061a4:	4e7c      	ldr	r6, [pc, #496]	; (8006398 <ProcessData+0x938>)
 80061a6:	463d      	mov	r5, r7
 80061a8:	4b7b      	ldr	r3, [pc, #492]	; (8006398 <ProcessData+0x938>)
 80061aa:	2201      	movs	r2, #1
 80061ac:	9203      	str	r2, [sp, #12]
 80061ae:	466c      	mov	r4, sp
 80061b0:	f103 020c 	add.w	r2, r3, #12
 80061b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80061b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061bc:	4628      	mov	r0, r5
 80061be:	f7fa ffd7 	bl	8001170 <HX711_Value>
 80061c2:	4635      	mov	r5, r6
 80061c4:	463c      	mov	r4, r7
 80061c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80061ce:	e885 0003 	stmia.w	r5, {r0, r1}
					motsender[0]=0;
 80061d2:	4b6c      	ldr	r3, [pc, #432]	; (8006384 <ProcessData+0x924>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
					datasender[0]=0;
 80061d8:	4b64      	ldr	r3, [pc, #400]	; (800636c <ProcessData+0x90c>)
 80061da:	2200      	movs	r2, #0
 80061dc:	701a      	strb	r2, [r3, #0]
					itoa(instant.scalelive,datasender,10);
 80061de:	4b6e      	ldr	r3, [pc, #440]	; (8006398 <ProcessData+0x938>)
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	220a      	movs	r2, #10
 80061e4:	4961      	ldr	r1, [pc, #388]	; (800636c <ProcessData+0x90c>)
 80061e6:	4618      	mov	r0, r3
 80061e8:	f00b fc9a 	bl	8011b20 <itoa>
					strcat(datasender,"LM\0");
 80061ec:	485f      	ldr	r0, [pc, #380]	; (800636c <ProcessData+0x90c>)
 80061ee:	f7f9 ffeb 	bl	80001c8 <strlen>
 80061f2:	4603      	mov	r3, r0
 80061f4:	461a      	mov	r2, r3
 80061f6:	4b5d      	ldr	r3, [pc, #372]	; (800636c <ProcessData+0x90c>)
 80061f8:	4413      	add	r3, r2
 80061fa:	4a68      	ldr	r2, [pc, #416]	; (800639c <ProcessData+0x93c>)
 80061fc:	8811      	ldrh	r1, [r2, #0]
 80061fe:	7892      	ldrb	r2, [r2, #2]
 8006200:	8019      	strh	r1, [r3, #0]
 8006202:	709a      	strb	r2, [r3, #2]
					strcat(motsender,datasender);
 8006204:	4959      	ldr	r1, [pc, #356]	; (800636c <ProcessData+0x90c>)
 8006206:	485f      	ldr	r0, [pc, #380]	; (8006384 <ProcessData+0x924>)
 8006208:	f00b fc9f 	bl	8011b4a <strcat>
					SendPc(motsender, 5, OLD_ID);
 800620c:	2200      	movs	r2, #0
 800620e:	2105      	movs	r1, #5
 8006210:	485c      	ldr	r0, [pc, #368]	; (8006384 <ProcessData+0x924>)
 8006212:	f7ff f857 	bl	80052c4 <SendPc>
					uart2say=1;
 8006216:	4b58      	ldr	r3, [pc, #352]	; (8006378 <ProcessData+0x918>)
 8006218:	2201      	movs	r2, #1
 800621a:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12,100000);
 800621c:	4957      	ldr	r1, [pc, #348]	; (800637c <ProcessData+0x91c>)
 800621e:	4858      	ldr	r0, [pc, #352]	; (8006380 <ProcessData+0x920>)
 8006220:	f004 fffa 	bl	800b218 <TimeSet>
					isHXcom=0;
 8006224:	4b5b      	ldr	r3, [pc, #364]	; (8006394 <ProcessData+0x934>)
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	e1f0      	b.n	800660e <ProcessData+0xbae>
				}
				else if(incom[2]=='1'){
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3302      	adds	r3, #2
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b31      	cmp	r3, #49	; 0x31
 8006234:	d10b      	bne.n	800624e <ProcessData+0x7ee>
					SendPc("TAMAMDIR", 5, OLD_ID);
 8006236:	2200      	movs	r2, #0
 8006238:	2105      	movs	r1, #5
 800623a:	4859      	ldr	r0, [pc, #356]	; (80063a0 <ProcessData+0x940>)
 800623c:	f7ff f842 	bl	80052c4 <SendPc>
					isHXcom=0;
 8006240:	4b54      	ldr	r3, [pc, #336]	; (8006394 <ProcessData+0x934>)
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]
					contsend=1; // continuum send live load data!
 8006246:	4b57      	ldr	r3, [pc, #348]	; (80063a4 <ProcessData+0x944>)
 8006248:	2201      	movs	r2, #1
 800624a:	601a      	str	r2, [r3, #0]
 800624c:	e1df      	b.n	800660e <ProcessData+0xbae>
				}
				else if(incom[2]=='2'){
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	3302      	adds	r3, #2
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b32      	cmp	r3, #50	; 0x32
 8006256:	d164      	bne.n	8006322 <ProcessData+0x8c2>
					instant=HX711_Tare(instant, 10);
 8006258:	4e4f      	ldr	r6, [pc, #316]	; (8006398 <ProcessData+0x938>)
 800625a:	463d      	mov	r5, r7
 800625c:	4b4e      	ldr	r3, [pc, #312]	; (8006398 <ProcessData+0x938>)
 800625e:	220a      	movs	r2, #10
 8006260:	9203      	str	r2, [sp, #12]
 8006262:	466c      	mov	r4, sp
 8006264:	f103 020c 	add.w	r2, r3, #12
 8006268:	ca07      	ldmia	r2, {r0, r1, r2}
 800626a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800626e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006270:	4628      	mov	r0, r5
 8006272:	f7fa fff6 	bl	8001262 <HX711_Tare>
 8006276:	4635      	mov	r5, r6
 8006278:	463c      	mov	r4, r7
 800627a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800627c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800627e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006282:	e885 0003 	stmia.w	r5, {r0, r1}
					motsender[0]=0;
 8006286:	4b3f      	ldr	r3, [pc, #252]	; (8006384 <ProcessData+0x924>)
 8006288:	2200      	movs	r2, #0
 800628a:	701a      	strb	r2, [r3, #0]
					datasender[0]=0;
 800628c:	4b37      	ldr	r3, [pc, #220]	; (800636c <ProcessData+0x90c>)
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
					HAL_Delay(150);
 8006292:	2096      	movs	r0, #150	; 0x96
 8006294:	f005 fb80 	bl	800b998 <HAL_Delay>
					instant=HX711_Value(instant,1);
 8006298:	4e3f      	ldr	r6, [pc, #252]	; (8006398 <ProcessData+0x938>)
 800629a:	463d      	mov	r5, r7
 800629c:	4b3e      	ldr	r3, [pc, #248]	; (8006398 <ProcessData+0x938>)
 800629e:	2201      	movs	r2, #1
 80062a0:	9203      	str	r2, [sp, #12]
 80062a2:	466c      	mov	r4, sp
 80062a4:	f103 020c 	add.w	r2, r3, #12
 80062a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80062aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80062ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062b0:	4628      	mov	r0, r5
 80062b2:	f7fa ff5d 	bl	8001170 <HX711_Value>
 80062b6:	4635      	mov	r5, r6
 80062b8:	463c      	mov	r4, r7
 80062ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80062bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80062be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80062c2:	e885 0003 	stmia.w	r5, {r0, r1}
					itoa(instant.scalelive,datasender,10);
 80062c6:	4b34      	ldr	r3, [pc, #208]	; (8006398 <ProcessData+0x938>)
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	220a      	movs	r2, #10
 80062cc:	4927      	ldr	r1, [pc, #156]	; (800636c <ProcessData+0x90c>)
 80062ce:	4618      	mov	r0, r3
 80062d0:	f00b fc26 	bl	8011b20 <itoa>
					strcat(datasender,"LM\0");
 80062d4:	4825      	ldr	r0, [pc, #148]	; (800636c <ProcessData+0x90c>)
 80062d6:	f7f9 ff77 	bl	80001c8 <strlen>
 80062da:	4603      	mov	r3, r0
 80062dc:	461a      	mov	r2, r3
 80062de:	4b23      	ldr	r3, [pc, #140]	; (800636c <ProcessData+0x90c>)
 80062e0:	4413      	add	r3, r2
 80062e2:	4a2e      	ldr	r2, [pc, #184]	; (800639c <ProcessData+0x93c>)
 80062e4:	8811      	ldrh	r1, [r2, #0]
 80062e6:	7892      	ldrb	r2, [r2, #2]
 80062e8:	8019      	strh	r1, [r3, #0]
 80062ea:	709a      	strb	r2, [r3, #2]
					strcat(motsender,datasender);
 80062ec:	491f      	ldr	r1, [pc, #124]	; (800636c <ProcessData+0x90c>)
 80062ee:	4825      	ldr	r0, [pc, #148]	; (8006384 <ProcessData+0x924>)
 80062f0:	f00b fc2b 	bl	8011b4a <strcat>
					SendPc(motsender, 5, OLD_ID);
 80062f4:	2200      	movs	r2, #0
 80062f6:	2105      	movs	r1, #5
 80062f8:	4822      	ldr	r0, [pc, #136]	; (8006384 <ProcessData+0x924>)
 80062fa:	f7fe ffe3 	bl	80052c4 <SendPc>
					uart2say=1;
 80062fe:	4b1e      	ldr	r3, [pc, #120]	; (8006378 <ProcessData+0x918>)
 8006300:	2201      	movs	r2, #1
 8006302:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12,100000);
 8006304:	491d      	ldr	r1, [pc, #116]	; (800637c <ProcessData+0x91c>)
 8006306:	481e      	ldr	r0, [pc, #120]	; (8006380 <ProcessData+0x920>)
 8006308:	f004 ff86 	bl	800b218 <TimeSet>
					contact=control+instant.scalelive;
 800630c:	4b22      	ldr	r3, [pc, #136]	; (8006398 <ProcessData+0x938>)
 800630e:	695a      	ldr	r2, [r3, #20]
 8006310:	4b25      	ldr	r3, [pc, #148]	; (80063a8 <ProcessData+0x948>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4413      	add	r3, r2
 8006316:	4a25      	ldr	r2, [pc, #148]	; (80063ac <ProcessData+0x94c>)
 8006318:	6013      	str	r3, [r2, #0]
					isHXcom=0;
 800631a:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <ProcessData+0x934>)
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]
 8006320:	e175      	b.n	800660e <ProcessData+0xbae>
				}
				else if(incom[2]=='3'){
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	3302      	adds	r3, #2
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	2b33      	cmp	r3, #51	; 0x33
 800632a:	f040 8170 	bne.w	800660e <ProcessData+0xbae>
					if(incom[3]=='1'){
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	3303      	adds	r3, #3
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b31      	cmp	r3, #49	; 0x31
 8006336:	d108      	bne.n	800634a <ProcessData+0x8ea>
						loadcon=1; //HX711
 8006338:	4b1d      	ldr	r3, [pc, #116]	; (80063b0 <ProcessData+0x950>)
 800633a:	2201      	movs	r2, #1
 800633c:	601a      	str	r2, [r3, #0]
						SendPc("THRESHOLD", 6, OLD_ID);
 800633e:	2200      	movs	r2, #0
 8006340:	2106      	movs	r1, #6
 8006342:	481c      	ldr	r0, [pc, #112]	; (80063b4 <ProcessData+0x954>)
 8006344:	f7fe ffbe 	bl	80052c4 <SendPc>
 8006348:	e03e      	b.n	80063c8 <ProcessData+0x968>
					}
					else if(incom[3]=='2'){
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3303      	adds	r3, #3
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b32      	cmp	r3, #50	; 0x32
 8006352:	d131      	bne.n	80063b8 <ProcessData+0x958>
						loadcon=2; //MCU ADC strain measurement
 8006354:	4b16      	ldr	r3, [pc, #88]	; (80063b0 <ProcessData+0x950>)
 8006356:	2202      	movs	r2, #2
 8006358:	601a      	str	r2, [r3, #0]
						SendPc("THRESHOLD", 6, OLD_ID);
 800635a:	2200      	movs	r2, #0
 800635c:	2106      	movs	r1, #6
 800635e:	4815      	ldr	r0, [pc, #84]	; (80063b4 <ProcessData+0x954>)
 8006360:	f7fe ffb0 	bl	80052c4 <SendPc>
 8006364:	e030      	b.n	80063c8 <ProcessData+0x968>
 8006366:	bf00      	nop
 8006368:	40020c00 	.word	0x40020c00
 800636c:	20006bd8 	.word	0x20006bd8
 8006370:	2000039c 	.word	0x2000039c
 8006374:	08011f8c 	.word	0x08011f8c
 8006378:	200018b0 	.word	0x200018b0
 800637c:	000186a0 	.word	0x000186a0
 8006380:	20006ec8 	.word	0x20006ec8
 8006384:	20004ce0 	.word	0x20004ce0
 8006388:	20006d18 	.word	0x20006d18
 800638c:	08011f94 	.word	0x08011f94
 8006390:	08011f98 	.word	0x08011f98
 8006394:	20001830 	.word	0x20001830
 8006398:	20006bc0 	.word	0x20006bc0
 800639c:	08011f9c 	.word	0x08011f9c
 80063a0:	08011fa0 	.word	0x08011fa0
 80063a4:	2000182c 	.word	0x2000182c
 80063a8:	20000364 	.word	0x20000364
 80063ac:	20001828 	.word	0x20001828
 80063b0:	20001824 	.word	0x20001824
 80063b4:	08011fac 	.word	0x08011fac
					}
					else{
						loadcon=0;
 80063b8:	4ba4      	ldr	r3, [pc, #656]	; (800664c <ProcessData+0xbec>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]
						SendPc("TAMAMDIR", 5, OLD_ID);
 80063be:	2200      	movs	r2, #0
 80063c0:	2105      	movs	r1, #5
 80063c2:	48a3      	ldr	r0, [pc, #652]	; (8006650 <ProcessData+0xbf0>)
 80063c4:	f7fe ff7e 	bl	80052c4 <SendPc>
					}
					isHXcom=0;
 80063c8:	4ba2      	ldr	r3, [pc, #648]	; (8006654 <ProcessData+0xbf4>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
 80063ce:	e11e      	b.n	800660e <ProcessData+0xbae>
				}
			}

		}
		else if(incom[0]=='9'){//temperature set id
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b39      	cmp	r3, #57	; 0x39
 80063d6:	f040 80f6 	bne.w	80065c6 <ProcessData+0xb66>
			memcpy(&BUFGEN,&incom[1],1);
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	3301      	adds	r3, #1
 80063de:	781a      	ldrb	r2, [r3, #0]
 80063e0:	4b9d      	ldr	r3, [pc, #628]	; (8006658 <ProcessData+0xbf8>)
 80063e2:	701a      	strb	r2, [r3, #0]
			heaterid=atoi(BUFGEN);//set heater id..
 80063e4:	489c      	ldr	r0, [pc, #624]	; (8006658 <ProcessData+0xbf8>)
 80063e6:	f00b fb5a 	bl	8011a9e <atoi>
 80063ea:	4602      	mov	r2, r0
 80063ec:	4b9b      	ldr	r3, [pc, #620]	; (800665c <ProcessData+0xbfc>)
 80063ee:	601a      	str	r2, [r3, #0]
			if(incom[2]=='1'){
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	3302      	adds	r3, #2
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b31      	cmp	r3, #49	; 0x31
 80063f8:	d11c      	bne.n	8006434 <ProcessData+0x9d4>
				//take params and run heater

				if(incom[4]=='1'){
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	3304      	adds	r3, #4
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b31      	cmp	r3, #49	; 0x31
 8006402:	d10b      	bne.n	800641c <ProcessData+0x9bc>
					//internal ADC control set
					heatFeed[heaterid]=1;
 8006404:	4b95      	ldr	r3, [pc, #596]	; (800665c <ProcessData+0xbfc>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a95      	ldr	r2, [pc, #596]	; (8006660 <ProcessData+0xc00>)
 800640a:	2101      	movs	r1, #1
 800640c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					SendPc("TSET", 20, TEMP_SET);
 8006410:	2209      	movs	r2, #9
 8006412:	2114      	movs	r1, #20
 8006414:	4893      	ldr	r0, [pc, #588]	; (8006664 <ProcessData+0xc04>)
 8006416:	f7fe ff55 	bl	80052c4 <SendPc>
 800641a:	e0d0      	b.n	80065be <ProcessData+0xb5e>
				}
				else{
					heatFeed[heaterid]=0;
 800641c:	4b8f      	ldr	r3, [pc, #572]	; (800665c <ProcessData+0xbfc>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a8f      	ldr	r2, [pc, #572]	; (8006660 <ProcessData+0xc00>)
 8006422:	2100      	movs	r1, #0
 8006424:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					SendPc("TSET", 20, TEMP_SET);
 8006428:	2209      	movs	r2, #9
 800642a:	2114      	movs	r1, #20
 800642c:	488d      	ldr	r0, [pc, #564]	; (8006664 <ProcessData+0xc04>)
 800642e:	f7fe ff49 	bl	80052c4 <SendPc>
 8006432:	e0c4      	b.n	80065be <ProcessData+0xb5e>
					//external +/- or D --% take PWM duty
				}
			}
			else if(incom[2]=='D'){
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	3302      	adds	r3, #2
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b44      	cmp	r3, #68	; 0x44
 800643c:	d13a      	bne.n	80064b4 <ProcessData+0xa54>
				//take % incom[3]&incom[4]
				memcpy(&BUFGEN,&incom[3],1);
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3303      	adds	r3, #3
 8006442:	781a      	ldrb	r2, [r3, #0]
 8006444:	4b84      	ldr	r3, [pc, #528]	; (8006658 <ProcessData+0xbf8>)
 8006446:	701a      	strb	r2, [r3, #0]
				heatDuty[heaterid] = 10 * atoi(BUFGEN);
 8006448:	4883      	ldr	r0, [pc, #524]	; (8006658 <ProcessData+0xbf8>)
 800644a:	f00b fb28 	bl	8011a9e <atoi>
 800644e:	4601      	mov	r1, r0
 8006450:	4b82      	ldr	r3, [pc, #520]	; (800665c <ProcessData+0xbfc>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	460b      	mov	r3, r1
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	4619      	mov	r1, r3
 800645e:	4b82      	ldr	r3, [pc, #520]	; (8006668 <ProcessData+0xc08>)
 8006460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				memcpy(&BUFGEN,&incom[4],1);
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	3304      	adds	r3, #4
 8006468:	781a      	ldrb	r2, [r3, #0]
 800646a:	4b7b      	ldr	r3, [pc, #492]	; (8006658 <ProcessData+0xbf8>)
 800646c:	701a      	strb	r2, [r3, #0]
				heatDuty[heaterid] = (heatDuty[heaterid] + atoi(BUFGEN))*100;
 800646e:	4b7b      	ldr	r3, [pc, #492]	; (800665c <ProcessData+0xbfc>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a7d      	ldr	r2, [pc, #500]	; (8006668 <ProcessData+0xc08>)
 8006474:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006478:	4877      	ldr	r0, [pc, #476]	; (8006658 <ProcessData+0xbf8>)
 800647a:	f00b fb10 	bl	8011a9e <atoi>
 800647e:	4603      	mov	r3, r0
 8006480:	18e2      	adds	r2, r4, r3
 8006482:	4b76      	ldr	r3, [pc, #472]	; (800665c <ProcessData+0xbfc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2164      	movs	r1, #100	; 0x64
 8006488:	fb01 f202 	mul.w	r2, r1, r2
 800648c:	4976      	ldr	r1, [pc, #472]	; (8006668 <ProcessData+0xc08>)
 800648e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				setHeater(heaterid, heatDuty[heaterid], 0);
 8006492:	4b72      	ldr	r3, [pc, #456]	; (800665c <ProcessData+0xbfc>)
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	4b71      	ldr	r3, [pc, #452]	; (800665c <ProcessData+0xbfc>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a73      	ldr	r2, [pc, #460]	; (8006668 <ProcessData+0xc08>)
 800649c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a0:	2200      	movs	r2, #0
 80064a2:	4619      	mov	r1, r3
 80064a4:	f7fd fb88 	bl	8003bb8 <setHeater>
				SendPc("HeaterDutySet", 5, ID_FIND);
 80064a8:	2202      	movs	r2, #2
 80064aa:	2105      	movs	r1, #5
 80064ac:	486f      	ldr	r0, [pc, #444]	; (800666c <ProcessData+0xc0c>)
 80064ae:	f7fe ff09 	bl	80052c4 <SendPc>
 80064b2:	e084      	b.n	80065be <ProcessData+0xb5e>
			}
			else if(incom[2]=='+'){
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	3302      	adds	r3, #2
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b2b      	cmp	r3, #43	; 0x2b
 80064bc:	d132      	bne.n	8006524 <ProcessData+0xac4>
				//increase duty cycle
				heatDuty[heaterid]=heatDuty[heaterid]+1;
 80064be:	4b67      	ldr	r3, [pc, #412]	; (800665c <ProcessData+0xbfc>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a69      	ldr	r2, [pc, #420]	; (8006668 <ProcessData+0xc08>)
 80064c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80064c8:	4b64      	ldr	r3, [pc, #400]	; (800665c <ProcessData+0xbfc>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3201      	adds	r2, #1
 80064ce:	4966      	ldr	r1, [pc, #408]	; (8006668 <ProcessData+0xc08>)
 80064d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				DummyRead2();
 80064d4:	f7fe fee8 	bl	80052a8 <DummyRead2>
				_uartcom3->RxSize=5;
 80064d8:	4b65      	ldr	r3, [pc, #404]	; (8006670 <ProcessData+0xc10>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2205      	movs	r2, #5
 80064de:	611a      	str	r2, [r3, #16]
				HAL_UART_Receive_IT(&huart3, _RxBuf3, 1);
 80064e0:	2201      	movs	r2, #1
 80064e2:	4964      	ldr	r1, [pc, #400]	; (8006674 <ProcessData+0xc14>)
 80064e4:	4864      	ldr	r0, [pc, #400]	; (8006678 <ProcessData+0xc18>)
 80064e6:	f009 fdcf 	bl	8010088 <HAL_UART_Receive_IT>
				if(heatDuty[heaterid] > 5000){
 80064ea:	4b5c      	ldr	r3, [pc, #368]	; (800665c <ProcessData+0xbfc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a5e      	ldr	r2, [pc, #376]	; (8006668 <ProcessData+0xc08>)
 80064f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f8:	4293      	cmp	r3, r2
 80064fa:	dd07      	ble.n	800650c <ProcessData+0xaac>
					heatDuty[heaterid]=5000;
 80064fc:	4b57      	ldr	r3, [pc, #348]	; (800665c <ProcessData+0xbfc>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a59      	ldr	r2, [pc, #356]	; (8006668 <ProcessData+0xc08>)
 8006502:	f241 3188 	movw	r1, #5000	; 0x1388
 8006506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800650a:	e058      	b.n	80065be <ProcessData+0xb5e>
				}
				else{
					setHeater(heaterid, heatDuty[heaterid], 0);
 800650c:	4b53      	ldr	r3, [pc, #332]	; (800665c <ProcessData+0xbfc>)
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	4b52      	ldr	r3, [pc, #328]	; (800665c <ProcessData+0xbfc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a54      	ldr	r2, [pc, #336]	; (8006668 <ProcessData+0xc08>)
 8006516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651a:	2200      	movs	r2, #0
 800651c:	4619      	mov	r1, r3
 800651e:	f7fd fb4b 	bl	8003bb8 <setHeater>
 8006522:	e04c      	b.n	80065be <ProcessData+0xb5e>
				}
			}
			else if(incom[2]=='-'){
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	3302      	adds	r3, #2
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	2b2d      	cmp	r3, #45	; 0x2d
 800652c:	d131      	bne.n	8006592 <ProcessData+0xb32>
				//decrease duty cycle
				heatDuty[heaterid]=heatDuty[heaterid]-1;
 800652e:	4b4b      	ldr	r3, [pc, #300]	; (800665c <ProcessData+0xbfc>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a4d      	ldr	r2, [pc, #308]	; (8006668 <ProcessData+0xc08>)
 8006534:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006538:	4b48      	ldr	r3, [pc, #288]	; (800665c <ProcessData+0xbfc>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3a01      	subs	r2, #1
 800653e:	494a      	ldr	r1, [pc, #296]	; (8006668 <ProcessData+0xc08>)
 8006540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				DummyRead2();
 8006544:	f7fe feb0 	bl	80052a8 <DummyRead2>
				_uartcom3->RxSize=5;
 8006548:	4b49      	ldr	r3, [pc, #292]	; (8006670 <ProcessData+0xc10>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2205      	movs	r2, #5
 800654e:	611a      	str	r2, [r3, #16]
				HAL_UART_Receive_IT(&huart3, _RxBuf3, 1);
 8006550:	2201      	movs	r2, #1
 8006552:	4948      	ldr	r1, [pc, #288]	; (8006674 <ProcessData+0xc14>)
 8006554:	4848      	ldr	r0, [pc, #288]	; (8006678 <ProcessData+0xc18>)
 8006556:	f009 fd97 	bl	8010088 <HAL_UART_Receive_IT>
				if(heatDuty[heaterid] < 300){
 800655a:	4b40      	ldr	r3, [pc, #256]	; (800665c <ProcessData+0xbfc>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a42      	ldr	r2, [pc, #264]	; (8006668 <ProcessData+0xc08>)
 8006560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006564:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006568:	da07      	bge.n	800657a <ProcessData+0xb1a>
					heatDuty[heaterid]=300;
 800656a:	4b3c      	ldr	r3, [pc, #240]	; (800665c <ProcessData+0xbfc>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a3e      	ldr	r2, [pc, #248]	; (8006668 <ProcessData+0xc08>)
 8006570:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006574:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8006578:	e021      	b.n	80065be <ProcessData+0xb5e>
				}
				else{
					setHeater(heaterid, heatDuty[heaterid], 0);
 800657a:	4b38      	ldr	r3, [pc, #224]	; (800665c <ProcessData+0xbfc>)
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	4b37      	ldr	r3, [pc, #220]	; (800665c <ProcessData+0xbfc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a39      	ldr	r2, [pc, #228]	; (8006668 <ProcessData+0xc08>)
 8006584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006588:	2200      	movs	r2, #0
 800658a:	4619      	mov	r1, r3
 800658c:	f7fd fb14 	bl	8003bb8 <setHeater>
 8006590:	e015      	b.n	80065be <ProcessData+0xb5e>
				}
			}
			else{
				SendPc("Heater Deactivated",5,ID_FIND);
 8006592:	2202      	movs	r2, #2
 8006594:	2105      	movs	r1, #5
 8006596:	4839      	ldr	r0, [pc, #228]	; (800667c <ProcessData+0xc1c>)
 8006598:	f7fe fe94 	bl	80052c4 <SendPc>
				heatDuty[heaterid]=0;
 800659c:	4b2f      	ldr	r3, [pc, #188]	; (800665c <ProcessData+0xbfc>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a31      	ldr	r2, [pc, #196]	; (8006668 <ProcessData+0xc08>)
 80065a2:	2100      	movs	r1, #0
 80065a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setHeater(heaterid, heatDuty[heaterid], 0);
 80065a8:	4b2c      	ldr	r3, [pc, #176]	; (800665c <ProcessData+0xbfc>)
 80065aa:	6818      	ldr	r0, [r3, #0]
 80065ac:	4b2b      	ldr	r3, [pc, #172]	; (800665c <ProcessData+0xbfc>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a2d      	ldr	r2, [pc, #180]	; (8006668 <ProcessData+0xc08>)
 80065b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065b6:	2200      	movs	r2, #0
 80065b8:	4619      	mov	r1, r3
 80065ba:	f7fd fafd 	bl	8003bb8 <setHeater>
			}
			incom[0]=0;
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	e023      	b.n	800660e <ProcessData+0xbae>
		}
		else if(incom[0]=='O'||incom[0]=='I'){
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b4f      	cmp	r3, #79	; 0x4f
 80065cc:	d003      	beq.n	80065d6 <ProcessData+0xb76>
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b49      	cmp	r3, #73	; 0x49
 80065d4:	d116      	bne.n	8006604 <ProcessData+0xba4>
			pccom=0;
 80065d6:	4b2a      	ldr	r3, [pc, #168]	; (8006680 <ProcessData+0xc20>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
			if(initalize<5){
 80065dc:	4b29      	ldr	r3, [pc, #164]	; (8006684 <ProcessData+0xc24>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	dc08      	bgt.n	80065f6 <ProcessData+0xb96>
				initalize=0;
 80065e4:	4b27      	ldr	r3, [pc, #156]	; (8006684 <ProcessData+0xc24>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]
				contproc=0;
 80065ea:	4b27      	ldr	r3, [pc, #156]	; (8006688 <ProcessData+0xc28>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
				bossayac=1;
 80065f0:	4b26      	ldr	r3, [pc, #152]	; (800668c <ProcessData+0xc2c>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
			}
			uart2say=1;
 80065f6:	4b26      	ldr	r3, [pc, #152]	; (8006690 <ProcessData+0xc30>)
 80065f8:	2201      	movs	r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim11);
 80065fc:	4825      	ldr	r0, [pc, #148]	; (8006694 <ProcessData+0xc34>)
 80065fe:	f008 fc8e 	bl	800ef1e <HAL_TIM_Base_Start_IT>
 8006602:	e004      	b.n	800660e <ProcessData+0xbae>
		}
		else{
			SendPc("NO_PROCESS\0",5, ID_FIND);
 8006604:	2202      	movs	r2, #2
 8006606:	2105      	movs	r1, #5
 8006608:	4823      	ldr	r0, [pc, #140]	; (8006698 <ProcessData+0xc38>)
 800660a:	f7fe fe5b 	bl	80052c4 <SendPc>
		}
		BUFGEN[0]=0;
 800660e:	4b12      	ldr	r3, [pc, #72]	; (8006658 <ProcessData+0xbf8>)
 8006610:	2200      	movs	r2, #0
 8006612:	701a      	strb	r2, [r3, #0]
		break;
 8006614:	f000 bc99 	b.w	8006f4a <ProcessData+0x14ea>
	case EXP_START://set "i" for ID_FIND's step count and "app" approach type; if equal step=> set for cal func..
		if(incom[0]=='D'){//komut gelince deneye basla..
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b44      	cmp	r3, #68	; 0x44
 800661e:	f040 80ed 	bne.w	80067fc <ProcessData+0xd9c>
			if(incom[4]=='1'){
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	3304      	adds	r3, #4
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b31      	cmp	r3, #49	; 0x31
 800662a:	d103      	bne.n	8006634 <ProcessData+0xbd4>
				motorapp=1;
 800662c:	4b1b      	ldr	r3, [pc, #108]	; (800669c <ProcessData+0xc3c>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	e002      	b.n	800663a <ProcessData+0xbda>
			}
			else{
				motorapp=0;
 8006634:	4b19      	ldr	r3, [pc, #100]	; (800669c <ProcessData+0xc3c>)
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
			}
			if(incom[5]=='1'){
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	3305      	adds	r3, #5
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b31      	cmp	r3, #49	; 0x31
 8006642:	d12f      	bne.n	80066a4 <ProcessData+0xc44>
				motorcon=1;
 8006644:	4b16      	ldr	r3, [pc, #88]	; (80066a0 <ProcessData+0xc40>)
 8006646:	2201      	movs	r2, #1
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e02e      	b.n	80066aa <ProcessData+0xc4a>
 800664c:	20001824 	.word	0x20001824
 8006650:	08011fa0 	.word	0x08011fa0
 8006654:	20001830 	.word	0x20001830
 8006658:	20006f0c 	.word	0x20006f0c
 800665c:	20006f10 	.word	0x20006f10
 8006660:	20001838 	.word	0x20001838
 8006664:	08011fb8 	.word	0x08011fb8
 8006668:	20001844 	.word	0x20001844
 800666c:	08011fc0 	.word	0x08011fc0
 8006670:	20006f30 	.word	0x20006f30
 8006674:	20007190 	.word	0x20007190
 8006678:	20006a64 	.word	0x20006a64
 800667c:	08011fd0 	.word	0x08011fd0
 8006680:	200018b4 	.word	0x200018b4
 8006684:	200002c0 	.word	0x200002c0
 8006688:	200002c4 	.word	0x200002c4
 800668c:	2000003c 	.word	0x2000003c
 8006690:	200018b0 	.word	0x200018b0
 8006694:	20006c78 	.word	0x20006c78
 8006698:	08011fe4 	.word	0x08011fe4
 800669c:	20000344 	.word	0x20000344
 80066a0:	20000340 	.word	0x20000340
			}
			else{
				motorcon=0;
 80066a4:	4b43      	ldr	r3, [pc, #268]	; (80067b4 <ProcessData+0xd54>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	601a      	str	r2, [r3, #0]
			}
			if(incom[6]=='1'){
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	3306      	adds	r3, #6
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b31      	cmp	r3, #49	; 0x31
 80066b2:	d103      	bne.n	80066bc <ProcessData+0xc5c>
				onlyAct=1;
 80066b4:	4b40      	ldr	r3, [pc, #256]	; (80067b8 <ProcessData+0xd58>)
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]
 80066ba:	e002      	b.n	80066c2 <ProcessData+0xc62>
			}
			else{
				onlyAct=0;
 80066bc:	4b3e      	ldr	r3, [pc, #248]	; (80067b8 <ProcessData+0xd58>)
 80066be:	2200      	movs	r2, #0
 80066c0:	601a      	str	r2, [r3, #0]
			}
			if(eqstep==1){
 80066c2:	4b3e      	ldr	r3, [pc, #248]	; (80067bc <ProcessData+0xd5c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d116      	bne.n	80066f8 <ProcessData+0xc98>
				Cal(calib.depth, calib.nofstep, calib.interval);
 80066ca:	4b3d      	ldr	r3, [pc, #244]	; (80067c0 <ProcessData+0xd60>)
 80066cc:	6818      	ldr	r0, [r3, #0]
 80066ce:	4b3c      	ldr	r3, [pc, #240]	; (80067c0 <ProcessData+0xd60>)
 80066d0:	6859      	ldr	r1, [r3, #4]
 80066d2:	4b3b      	ldr	r3, [pc, #236]	; (80067c0 <ProcessData+0xd60>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	461a      	mov	r2, r3
 80066d8:	f7fb fea6 	bl	8002428 <Cal>
				SendPc("Executing_Calibration\0", 5, ID_FIND);
 80066dc:	2202      	movs	r2, #2
 80066de:	2105      	movs	r1, #5
 80066e0:	4838      	ldr	r0, [pc, #224]	; (80067c4 <ProcessData+0xd64>)
 80066e2:	f7fe fdef 	bl	80052c4 <SendPc>
				uart2say=1;
 80066e6:	4b38      	ldr	r3, [pc, #224]	; (80067c8 <ProcessData+0xd68>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12, 100000);
 80066ec:	4937      	ldr	r1, [pc, #220]	; (80067cc <ProcessData+0xd6c>)
 80066ee:	4838      	ldr	r0, [pc, #224]	; (80067d0 <ProcessData+0xd70>)
 80066f0:	f004 fd92 	bl	800b218 <TimeSet>
			TimeSet(&htim10, 100000);
		}
		else{
			SendPc("NO_PROCESS",5, ID_FIND);
		}
		break;
 80066f4:	f000 bc28 	b.w	8006f48 <ProcessData+0x14e8>
				if(incom[7]=='1'){
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	3307      	adds	r3, #7
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b31      	cmp	r3, #49	; 0x31
 8006700:	d102      	bne.n	8006708 <ProcessData+0xca8>
					oscdown=1;
 8006702:	4b34      	ldr	r3, [pc, #208]	; (80067d4 <ProcessData+0xd74>)
 8006704:	2201      	movs	r2, #1
 8006706:	601a      	str	r2, [r3, #0]
				memcpy(&appBuf,&incom[8],6);
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	3308      	adds	r3, #8
 800670c:	2206      	movs	r2, #6
 800670e:	4619      	mov	r1, r3
 8006710:	4831      	ldr	r0, [pc, #196]	; (80067d8 <ProcessData+0xd78>)
 8006712:	f00b fa07 	bl	8011b24 <memcpy>
				thresholdApp=atoi(appBuf);
 8006716:	4830      	ldr	r0, [pc, #192]	; (80067d8 <ProcessData+0xd78>)
 8006718:	f00b f9c1 	bl	8011a9e <atoi>
 800671c:	4602      	mov	r2, r0
 800671e:	4b2f      	ldr	r3, [pc, #188]	; (80067dc <ProcessData+0xd7c>)
 8006720:	601a      	str	r2, [r3, #0]
				if(thresholdApp==0){
 8006722:	4b2e      	ldr	r3, [pc, #184]	; (80067dc <ProcessData+0xd7c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d103      	bne.n	8006732 <ProcessData+0xcd2>
					thresholdApp=contact;
 800672a:	4b2d      	ldr	r3, [pc, #180]	; (80067e0 <ProcessData+0xd80>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a2b      	ldr	r2, [pc, #172]	; (80067dc <ProcessData+0xd7c>)
 8006730:	6013      	str	r3, [r2, #0]
				appBuf[0]=0;
 8006732:	4b29      	ldr	r3, [pc, #164]	; (80067d8 <ProcessData+0xd78>)
 8006734:	2200      	movs	r2, #0
 8006736:	701a      	strb	r2, [r3, #0]
				memcpy(&appBuf,&incom[16],6);
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	3310      	adds	r3, #16
 800673c:	2206      	movs	r2, #6
 800673e:	4619      	mov	r1, r3
 8006740:	4825      	ldr	r0, [pc, #148]	; (80067d8 <ProcessData+0xd78>)
 8006742:	f00b f9ef 	bl	8011b24 <memcpy>
				speedApp=atoi(appBuf);
 8006746:	4824      	ldr	r0, [pc, #144]	; (80067d8 <ProcessData+0xd78>)
 8006748:	f00b f9a9 	bl	8011a9e <atoi>
 800674c:	4602      	mov	r2, r0
 800674e:	4b25      	ldr	r3, [pc, #148]	; (80067e4 <ProcessData+0xd84>)
 8006750:	601a      	str	r2, [r3, #0]
				appBuf[0]=0;
 8006752:	4b21      	ldr	r3, [pc, #132]	; (80067d8 <ProcessData+0xd78>)
 8006754:	2200      	movs	r2, #0
 8006756:	701a      	strb	r2, [r3, #0]
				if(motorapp==0){
 8006758:	4b23      	ldr	r3, [pc, #140]	; (80067e8 <ProcessData+0xd88>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <ProcessData+0xd18>
					if(app!=0){
 8006760:	4b22      	ldr	r3, [pc, #136]	; (80067ec <ProcessData+0xd8c>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <ProcessData+0xd10>
						increment=speedApp;
 8006768:	4b1e      	ldr	r3, [pc, #120]	; (80067e4 <ProcessData+0xd84>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a20      	ldr	r2, [pc, #128]	; (80067f0 <ProcessData+0xd90>)
 800676e:	6013      	str	r3, [r2, #0]
					speedApp=50000;
 8006770:	4b1c      	ldr	r3, [pc, #112]	; (80067e4 <ProcessData+0xd84>)
 8006772:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006776:	601a      	str	r2, [r3, #0]
				if(app==none){
 8006778:	4b1c      	ldr	r3, [pc, #112]	; (80067ec <ProcessData+0xd8c>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10c      	bne.n	800679a <ProcessData+0xd3a>
					SendPc("Executing_Indentation\0", 5, EXP_START);
 8006780:	2204      	movs	r2, #4
 8006782:	2105      	movs	r1, #5
 8006784:	481b      	ldr	r0, [pc, #108]	; (80067f4 <ProcessData+0xd94>)
 8006786:	f7fe fd9d 	bl	80052c4 <SendPc>
					uart2say=1;
 800678a:	4b0f      	ldr	r3, [pc, #60]	; (80067c8 <ProcessData+0xd68>)
 800678c:	2201      	movs	r2, #1
 800678e:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12, 100000);
 8006790:	490e      	ldr	r1, [pc, #56]	; (80067cc <ProcessData+0xd6c>)
 8006792:	480f      	ldr	r0, [pc, #60]	; (80067d0 <ProcessData+0xd70>)
 8006794:	f004 fd40 	bl	800b218 <TimeSet>
		break;
 8006798:	e3d6      	b.n	8006f48 <ProcessData+0x14e8>
					SendPc("APPROACH\0", 5, EXP_START);
 800679a:	2204      	movs	r2, #4
 800679c:	2105      	movs	r1, #5
 800679e:	4816      	ldr	r0, [pc, #88]	; (80067f8 <ProcessData+0xd98>)
 80067a0:	f7fe fd90 	bl	80052c4 <SendPc>
					uart2say=1;
 80067a4:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <ProcessData+0xd68>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12, 100000);
 80067aa:	4908      	ldr	r1, [pc, #32]	; (80067cc <ProcessData+0xd6c>)
 80067ac:	4808      	ldr	r0, [pc, #32]	; (80067d0 <ProcessData+0xd70>)
 80067ae:	f004 fd33 	bl	800b218 <TimeSet>
		break;
 80067b2:	e3c9      	b.n	8006f48 <ProcessData+0x14e8>
 80067b4:	20000340 	.word	0x20000340
 80067b8:	20001864 	.word	0x20001864
 80067bc:	200002e4 	.word	0x200002e4
 80067c0:	200018fc 	.word	0x200018fc
 80067c4:	08011ff0 	.word	0x08011ff0
 80067c8:	200018b0 	.word	0x200018b0
 80067cc:	000186a0 	.word	0x000186a0
 80067d0:	20006ec8 	.word	0x20006ec8
 80067d4:	200002dc 	.word	0x200002dc
 80067d8:	20001850 	.word	0x20001850
 80067dc:	20001858 	.word	0x20001858
 80067e0:	20001828 	.word	0x20001828
 80067e4:	2000185c 	.word	0x2000185c
 80067e8:	20000344 	.word	0x20000344
 80067ec:	20006964 	.word	0x20006964
 80067f0:	20000054 	.word	0x20000054
 80067f4:	08012008 	.word	0x08012008
 80067f8:	08012020 	.word	0x08012020
		else if(_uartcom3->RxSize==149){
 80067fc:	4bc6      	ldr	r3, [pc, #792]	; (8006b18 <ProcessData+0x10b8>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	2b95      	cmp	r3, #149	; 0x95
 8006804:	f040 81b6 	bne.w	8006b74 <ProcessData+0x1114>
			memcpy(&exprx[S].stepIdrx,&incom[0],2);
 8006808:	4bc4      	ldr	r3, [pc, #784]	; (8006b1c <ProcessData+0x10bc>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	4613      	mov	r3, r2
 800680e:	019b      	lsls	r3, r3, #6
 8006810:	4413      	add	r3, r2
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	4ac2      	ldr	r2, [pc, #776]	; (8006b20 <ProcessData+0x10c0>)
 8006816:	4413      	add	r3, r2
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	8812      	ldrh	r2, [r2, #0]
 800681c:	b292      	uxth	r2, r2
 800681e:	801a      	strh	r2, [r3, #0]
			memcpy(&exprx[S].dirrx,&incom[3],1);
 8006820:	4bbe      	ldr	r3, [pc, #760]	; (8006b1c <ProcessData+0x10bc>)
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	4613      	mov	r3, r2
 8006826:	019b      	lsls	r3, r3, #6
 8006828:	4413      	add	r3, r2
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	4abc      	ldr	r2, [pc, #752]	; (8006b20 <ProcessData+0x10c0>)
 800682e:	4413      	add	r3, r2
 8006830:	3303      	adds	r3, #3
 8006832:	69fa      	ldr	r2, [r7, #28]
 8006834:	3203      	adds	r2, #3
 8006836:	7812      	ldrb	r2, [r2, #0]
 8006838:	701a      	strb	r2, [r3, #0]
			memcpy(&exprx[S].depthrx,&incom[4],9);
 800683a:	4bb8      	ldr	r3, [pc, #736]	; (8006b1c <ProcessData+0x10bc>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4613      	mov	r3, r2
 8006840:	019b      	lsls	r3, r3, #6
 8006842:	4413      	add	r3, r2
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	3318      	adds	r3, #24
 8006848:	4ab5      	ldr	r2, [pc, #724]	; (8006b20 <ProcessData+0x10c0>)
 800684a:	4413      	add	r3, r2
 800684c:	1c58      	adds	r0, r3, #1
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	3304      	adds	r3, #4
 8006852:	2209      	movs	r2, #9
 8006854:	4619      	mov	r1, r3
 8006856:	f00b f965 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].speedrx,&incom[15],9);
 800685a:	4bb0      	ldr	r3, [pc, #704]	; (8006b1c <ProcessData+0x10bc>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4613      	mov	r3, r2
 8006860:	019b      	lsls	r3, r3, #6
 8006862:	4413      	add	r3, r2
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	3320      	adds	r3, #32
 8006868:	4aad      	ldr	r2, [pc, #692]	; (8006b20 <ProcessData+0x10c0>)
 800686a:	4413      	add	r3, r2
 800686c:	1cd8      	adds	r0, r3, #3
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	330f      	adds	r3, #15
 8006872:	2209      	movs	r2, #9
 8006874:	4619      	mov	r1, r3
 8006876:	f00b f955 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].holdrx,&incom[26],9);
 800687a:	4ba8      	ldr	r3, [pc, #672]	; (8006b1c <ProcessData+0x10bc>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4613      	mov	r3, r2
 8006880:	019b      	lsls	r3, r3, #6
 8006882:	4413      	add	r3, r2
 8006884:	005b      	lsls	r3, r3, #1
 8006886:	3328      	adds	r3, #40	; 0x28
 8006888:	4aa5      	ldr	r2, [pc, #660]	; (8006b20 <ProcessData+0x10c0>)
 800688a:	4413      	add	r3, r2
 800688c:	1d58      	adds	r0, r3, #5
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	331a      	adds	r3, #26
 8006892:	2209      	movs	r2, #9
 8006894:	4619      	mov	r1, r3
 8006896:	f00b f945 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].oscrx,&incom[37],1);
 800689a:	4ba0      	ldr	r3, [pc, #640]	; (8006b1c <ProcessData+0x10bc>)
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	4613      	mov	r3, r2
 80068a0:	019b      	lsls	r3, r3, #6
 80068a2:	4413      	add	r3, r2
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	3330      	adds	r3, #48	; 0x30
 80068a8:	4a9d      	ldr	r2, [pc, #628]	; (8006b20 <ProcessData+0x10c0>)
 80068aa:	4413      	add	r3, r2
 80068ac:	3307      	adds	r3, #7
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	3225      	adds	r2, #37	; 0x25
 80068b2:	7812      	ldrb	r2, [r2, #0]
 80068b4:	701a      	strb	r2, [r3, #0]
			memcpy(&exprx[S].amprx,&incom[40],9);
 80068b6:	4b99      	ldr	r3, [pc, #612]	; (8006b1c <ProcessData+0x10bc>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	4613      	mov	r3, r2
 80068bc:	019b      	lsls	r3, r3, #6
 80068be:	4413      	add	r3, r2
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	3338      	adds	r3, #56	; 0x38
 80068c4:	4a96      	ldr	r2, [pc, #600]	; (8006b20 <ProcessData+0x10c0>)
 80068c6:	4413      	add	r3, r2
 80068c8:	1c58      	adds	r0, r3, #1
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	3328      	adds	r3, #40	; 0x28
 80068ce:	2209      	movs	r2, #9
 80068d0:	4619      	mov	r1, r3
 80068d2:	f00b f927 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].freqrx,&incom[51],9);
 80068d6:	4b91      	ldr	r3, [pc, #580]	; (8006b1c <ProcessData+0x10bc>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4613      	mov	r3, r2
 80068dc:	019b      	lsls	r3, r3, #6
 80068de:	4413      	add	r3, r2
 80068e0:	005b      	lsls	r3, r3, #1
 80068e2:	3340      	adds	r3, #64	; 0x40
 80068e4:	4a8e      	ldr	r2, [pc, #568]	; (8006b20 <ProcessData+0x10c0>)
 80068e6:	4413      	add	r3, r2
 80068e8:	1cd8      	adds	r0, r3, #3
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	3333      	adds	r3, #51	; 0x33
 80068ee:	2209      	movs	r2, #9
 80068f0:	4619      	mov	r1, r3
 80068f2:	f00b f917 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].durrx,&incom[62],9);
 80068f6:	4b89      	ldr	r3, [pc, #548]	; (8006b1c <ProcessData+0x10bc>)
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	4613      	mov	r3, r2
 80068fc:	019b      	lsls	r3, r3, #6
 80068fe:	4413      	add	r3, r2
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	3348      	adds	r3, #72	; 0x48
 8006904:	4a86      	ldr	r2, [pc, #536]	; (8006b20 <ProcessData+0x10c0>)
 8006906:	4413      	add	r3, r2
 8006908:	1d58      	adds	r0, r3, #5
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	333e      	adds	r3, #62	; 0x3e
 800690e:	2209      	movs	r2, #9
 8006910:	4619      	mov	r1, r3
 8006912:	f00b f907 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].xpstrx,&incom[73],9);
 8006916:	4b81      	ldr	r3, [pc, #516]	; (8006b1c <ProcessData+0x10bc>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	019b      	lsls	r3, r3, #6
 800691e:	4413      	add	r3, r2
 8006920:	005b      	lsls	r3, r3, #1
 8006922:	4a7f      	ldr	r2, [pc, #508]	; (8006b20 <ProcessData+0x10c0>)
 8006924:	4413      	add	r3, r2
 8006926:	1d58      	adds	r0, r3, #5
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	3349      	adds	r3, #73	; 0x49
 800692c:	2209      	movs	r2, #9
 800692e:	4619      	mov	r1, r3
 8006930:	f00b f8f8 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].ypstrx,&incom[84],9);
 8006934:	4b79      	ldr	r3, [pc, #484]	; (8006b1c <ProcessData+0x10bc>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	4613      	mov	r3, r2
 800693a:	019b      	lsls	r3, r3, #6
 800693c:	4413      	add	r3, r2
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	3308      	adds	r3, #8
 8006942:	4a77      	ldr	r2, [pc, #476]	; (8006b20 <ProcessData+0x10c0>)
 8006944:	4413      	add	r3, r2
 8006946:	1dd8      	adds	r0, r3, #7
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	3354      	adds	r3, #84	; 0x54
 800694c:	2209      	movs	r2, #9
 800694e:	4619      	mov	r1, r3
 8006950:	f00b f8e8 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].dtrx,&incom[95],5);
 8006954:	4b71      	ldr	r3, [pc, #452]	; (8006b1c <ProcessData+0x10bc>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	4613      	mov	r3, r2
 800695a:	019b      	lsls	r3, r3, #6
 800695c:	4413      	add	r3, r2
 800695e:	005b      	lsls	r3, r3, #1
 8006960:	3350      	adds	r3, #80	; 0x50
 8006962:	4a6f      	ldr	r2, [pc, #444]	; (8006b20 <ProcessData+0x10c0>)
 8006964:	4413      	add	r3, r2
 8006966:	1dd8      	adds	r0, r3, #7
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	335f      	adds	r3, #95	; 0x5f
 800696c:	2205      	movs	r2, #5
 800696e:	4619      	mov	r1, r3
 8006970:	f00b f8d8 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].dtsrx,&incom[102],5);
 8006974:	4b69      	ldr	r3, [pc, #420]	; (8006b1c <ProcessData+0x10bc>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	4613      	mov	r3, r2
 800697a:	019b      	lsls	r3, r3, #6
 800697c:	4413      	add	r3, r2
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	3358      	adds	r3, #88	; 0x58
 8006982:	4a67      	ldr	r2, [pc, #412]	; (8006b20 <ProcessData+0x10c0>)
 8006984:	4413      	add	r3, r2
 8006986:	1d58      	adds	r0, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	3366      	adds	r3, #102	; 0x66
 800698c:	2205      	movs	r2, #5
 800698e:	4619      	mov	r1, r3
 8006990:	f00b f8c8 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].dtamprx,&incom[109],5);
 8006994:	4b61      	ldr	r3, [pc, #388]	; (8006b1c <ProcessData+0x10bc>)
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	4613      	mov	r3, r2
 800699a:	019b      	lsls	r3, r3, #6
 800699c:	4413      	add	r3, r2
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	3360      	adds	r3, #96	; 0x60
 80069a2:	4a5f      	ldr	r2, [pc, #380]	; (8006b20 <ProcessData+0x10c0>)
 80069a4:	4413      	add	r3, r2
 80069a6:	1cd8      	adds	r0, r3, #3
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	336d      	adds	r3, #109	; 0x6d
 80069ac:	2205      	movs	r2, #5
 80069ae:	4619      	mov	r1, r3
 80069b0:	f00b f8b8 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].dtfreqrx,&incom[116],5);
 80069b4:	4b59      	ldr	r3, [pc, #356]	; (8006b1c <ProcessData+0x10bc>)
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	4613      	mov	r3, r2
 80069ba:	019b      	lsls	r3, r3, #6
 80069bc:	4413      	add	r3, r2
 80069be:	005b      	lsls	r3, r3, #1
 80069c0:	3368      	adds	r3, #104	; 0x68
 80069c2:	4a57      	ldr	r2, [pc, #348]	; (8006b20 <ProcessData+0x10c0>)
 80069c4:	4413      	add	r3, r2
 80069c6:	1cd8      	adds	r0, r3, #3
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	3374      	adds	r3, #116	; 0x74
 80069cc:	2205      	movs	r2, #5
 80069ce:	4619      	mov	r1, r3
 80069d0:	f00b f8a8 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].dtphaserx,&incom[123],5);
 80069d4:	4b51      	ldr	r3, [pc, #324]	; (8006b1c <ProcessData+0x10bc>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	4613      	mov	r3, r2
 80069da:	019b      	lsls	r3, r3, #6
 80069dc:	4413      	add	r3, r2
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	3370      	adds	r3, #112	; 0x70
 80069e2:	4a4f      	ldr	r2, [pc, #316]	; (8006b20 <ProcessData+0x10c0>)
 80069e4:	4413      	add	r3, r2
 80069e6:	1c58      	adds	r0, r3, #1
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	337b      	adds	r3, #123	; 0x7b
 80069ec:	2205      	movs	r2, #5
 80069ee:	4619      	mov	r1, r3
 80069f0:	f00b f898 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].dtwhenrx,&incom[130],1);
 80069f4:	4b49      	ldr	r3, [pc, #292]	; (8006b1c <ProcessData+0x10bc>)
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	4613      	mov	r3, r2
 80069fa:	019b      	lsls	r3, r3, #6
 80069fc:	4413      	add	r3, r2
 80069fe:	005b      	lsls	r3, r3, #1
 8006a00:	3368      	adds	r3, #104	; 0x68
 8006a02:	4a47      	ldr	r2, [pc, #284]	; (8006b20 <ProcessData+0x10c0>)
 8006a04:	4413      	add	r3, r2
 8006a06:	3301      	adds	r3, #1
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	3282      	adds	r2, #130	; 0x82
 8006a0c:	7812      	ldrb	r2, [r2, #0]
 8006a0e:	701a      	strb	r2, [r3, #0]
			memcpy(&exprx[S].retrx,&incom[133],1);
 8006a10:	4b42      	ldr	r3, [pc, #264]	; (8006b1c <ProcessData+0x10bc>)
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	019b      	lsls	r3, r3, #6
 8006a18:	4413      	add	r3, r2
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	3370      	adds	r3, #112	; 0x70
 8006a1e:	4a40      	ldr	r2, [pc, #256]	; (8006b20 <ProcessData+0x10c0>)
 8006a20:	4413      	add	r3, r2
 8006a22:	3307      	adds	r3, #7
 8006a24:	69fa      	ldr	r2, [r7, #28]
 8006a26:	3285      	adds	r2, #133	; 0x85
 8006a28:	7812      	ldrb	r2, [r2, #0]
 8006a2a:	701a      	strb	r2, [r3, #0]
			memcpy(&exprx[S].removalHold,&incom[136],6);
 8006a2c:	4b3b      	ldr	r3, [pc, #236]	; (8006b1c <ProcessData+0x10bc>)
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	4613      	mov	r3, r2
 8006a32:	019b      	lsls	r3, r3, #6
 8006a34:	4413      	add	r3, r2
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	3378      	adds	r3, #120	; 0x78
 8006a3a:	4a39      	ldr	r2, [pc, #228]	; (8006b20 <ProcessData+0x10c0>)
 8006a3c:	4413      	add	r3, r2
 8006a3e:	1c58      	adds	r0, r3, #1
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	3388      	adds	r3, #136	; 0x88
 8006a44:	2206      	movs	r2, #6
 8006a46:	4619      	mov	r1, r3
 8006a48:	f00b f86c 	bl	8011b24 <memcpy>
			memcpy(&exprx[S].removalPer,&incom[144],3);
 8006a4c:	4b33      	ldr	r3, [pc, #204]	; (8006b1c <ProcessData+0x10bc>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	4613      	mov	r3, r2
 8006a52:	019b      	lsls	r3, r3, #6
 8006a54:	4413      	add	r3, r2
 8006a56:	005b      	lsls	r3, r3, #1
 8006a58:	3378      	adds	r3, #120	; 0x78
 8006a5a:	4a31      	ldr	r2, [pc, #196]	; (8006b20 <ProcessData+0x10c0>)
 8006a5c:	4413      	add	r3, r2
 8006a5e:	1dd8      	adds	r0, r3, #7
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	3390      	adds	r3, #144	; 0x90
 8006a64:	2203      	movs	r2, #3
 8006a66:	4619      	mov	r1, r3
 8006a68:	f00b f85c 	bl	8011b24 <memcpy>
			S++;
 8006a6c:	4b2b      	ldr	r3, [pc, #172]	; (8006b1c <ProcessData+0x10bc>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	4a2a      	ldr	r2, [pc, #168]	; (8006b1c <ProcessData+0x10bc>)
 8006a74:	6013      	str	r3, [r2, #0]
			if(S<step){
 8006a76:	4b29      	ldr	r3, [pc, #164]	; (8006b1c <ProcessData+0x10bc>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	4b2a      	ldr	r3, [pc, #168]	; (8006b24 <ProcessData+0x10c4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	da28      	bge.n	8006ad4 <ProcessData+0x1074>
				itoa(S,stwrt,10);
 8006a82:	4b26      	ldr	r3, [pc, #152]	; (8006b1c <ProcessData+0x10bc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006a8a:	220a      	movs	r2, #10
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f00b f847 	bl	8011b20 <itoa>
				strcat(stwrt,"._Step_Received\0");
 8006a92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7f9 fb96 	bl	80001c8 <strlen>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006aa4:	4413      	add	r3, r2
 8006aa6:	4a20      	ldr	r2, [pc, #128]	; (8006b28 <ProcessData+0x10c8>)
 8006aa8:	461c      	mov	r4, r3
 8006aaa:	4615      	mov	r5, r2
 8006aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aae:	6020      	str	r0, [r4, #0]
 8006ab0:	6061      	str	r1, [r4, #4]
 8006ab2:	60a2      	str	r2, [r4, #8]
 8006ab4:	60e3      	str	r3, [r4, #12]
				SendPc(stwrt,149, EXP_START);//comid set important
 8006ab6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006aba:	2204      	movs	r2, #4
 8006abc:	2195      	movs	r1, #149	; 0x95
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7fe fc00 	bl	80052c4 <SendPc>
				uart2say=1;
 8006ac4:	4b19      	ldr	r3, [pc, #100]	; (8006b2c <ProcessData+0x10cc>)
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12, 10000);				}
 8006aca:	f242 7110 	movw	r1, #10000	; 0x2710
 8006ace:	4818      	ldr	r0, [pc, #96]	; (8006b30 <ProcessData+0x10d0>)
 8006ad0:	f004 fba2 	bl	800b218 <TimeSet>
			if(S==step){
 8006ad4:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <ProcessData+0x10bc>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	4b12      	ldr	r3, [pc, #72]	; (8006b24 <ProcessData+0x10c4>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	f040 8233 	bne.w	8006f48 <ProcessData+0x14e8>
				itoa(S,stwrt,10);
 8006ae2:	4b0e      	ldr	r3, [pc, #56]	; (8006b1c <ProcessData+0x10bc>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f107 0120 	add.w	r1, r7, #32
 8006aea:	220a      	movs	r2, #10
 8006aec:	4618      	mov	r0, r3
 8006aee:	f00b f817 	bl	8011b20 <itoa>
				strcat(stwrt,"_StepReady\0");
 8006af2:	f107 0320 	add.w	r3, r7, #32
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7f9 fb66 	bl	80001c8 <strlen>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
 8006b00:	f107 0320 	add.w	r3, r7, #32
 8006b04:	4413      	add	r3, r2
 8006b06:	490b      	ldr	r1, [pc, #44]	; (8006b34 <ProcessData+0x10d4>)
 8006b08:	461a      	mov	r2, r3
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	cb03      	ldmia	r3!, {r0, r1}
 8006b0e:	6010      	str	r0, [r2, #0]
 8006b10:	6051      	str	r1, [r2, #4]
 8006b12:	8819      	ldrh	r1, [r3, #0]
 8006b14:	e010      	b.n	8006b38 <ProcessData+0x10d8>
 8006b16:	bf00      	nop
 8006b18:	20006f30 	.word	0x20006f30
 8006b1c:	200002c8 	.word	0x200002c8
 8006b20:	200019b4 	.word	0x200019b4
 8006b24:	200002e8 	.word	0x200002e8
 8006b28:	0801202c 	.word	0x0801202c
 8006b2c:	200018b0 	.word	0x200018b0
 8006b30:	20006ec8 	.word	0x20006ec8
 8006b34:	08012040 	.word	0x08012040
 8006b38:	789b      	ldrb	r3, [r3, #2]
 8006b3a:	8111      	strh	r1, [r2, #8]
 8006b3c:	7293      	strb	r3, [r2, #10]
				SendPc(stwrt,22, EXP_START);
 8006b3e:	f107 0320 	add.w	r3, r7, #32
 8006b42:	2204      	movs	r2, #4
 8006b44:	2116      	movs	r1, #22
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7fe fbbc 	bl	80052c4 <SendPc>
				S=0;
 8006b4c:	4b95      	ldr	r3, [pc, #596]	; (8006da4 <ProcessData+0x1344>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
				expcount=0;
 8006b52:	4b95      	ldr	r3, [pc, #596]	; (8006da8 <ProcessData+0x1348>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]
				ProcessRx(1);
 8006b58:	2001      	movs	r0, #1
 8006b5a:	f7fe fc4b 	bl	80053f4 <ProcessRx>
				uart2say=1;
 8006b5e:	4b93      	ldr	r3, [pc, #588]	; (8006dac <ProcessData+0x134c>)
 8006b60:	2201      	movs	r2, #1
 8006b62:	601a      	str	r2, [r3, #0]
				sendexp=1;
 8006b64:	4b92      	ldr	r3, [pc, #584]	; (8006db0 <ProcessData+0x1350>)
 8006b66:	2201      	movs	r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12, 100000);
 8006b6a:	4992      	ldr	r1, [pc, #584]	; (8006db4 <ProcessData+0x1354>)
 8006b6c:	4892      	ldr	r0, [pc, #584]	; (8006db8 <ProcessData+0x1358>)
 8006b6e:	f004 fb53 	bl	800b218 <TimeSet>
		break;
 8006b72:	e1e9      	b.n	8006f48 <ProcessData+0x14e8>
		else if(_uartcom3->RxSize==41){
 8006b74:	4b91      	ldr	r3, [pc, #580]	; (8006dbc <ProcessData+0x135c>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b29      	cmp	r3, #41	; 0x29
 8006b7c:	d12a      	bne.n	8006bd4 <ProcessData+0x1174>
			memcpy(&calibrx.depthrx,&incom[0],9);
 8006b7e:	2209      	movs	r2, #9
 8006b80:	69f9      	ldr	r1, [r7, #28]
 8006b82:	488f      	ldr	r0, [pc, #572]	; (8006dc0 <ProcessData+0x1360>)
 8006b84:	f00a ffce 	bl	8011b24 <memcpy>
			memcpy(&calibrx.nofsteprx,&incom[11],9);
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	330b      	adds	r3, #11
 8006b8c:	2209      	movs	r2, #9
 8006b8e:	4619      	mov	r1, r3
 8006b90:	488c      	ldr	r0, [pc, #560]	; (8006dc4 <ProcessData+0x1364>)
 8006b92:	f00a ffc7 	bl	8011b24 <memcpy>
			memcpy(&calibrx.intervalrx,&incom[22],9);
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	3316      	adds	r3, #22
 8006b9a:	2209      	movs	r2, #9
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	488a      	ldr	r0, [pc, #552]	; (8006dc8 <ProcessData+0x1368>)
 8006ba0:	f00a ffc0 	bl	8011b24 <memcpy>
			memcpy(&calibrx.hold,&incom[33],6);
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8006baa:	4b85      	ldr	r3, [pc, #532]	; (8006dc0 <ProcessData+0x1360>)
 8006bac:	331e      	adds	r3, #30
 8006bae:	6811      	ldr	r1, [r2, #0]
 8006bb0:	6019      	str	r1, [r3, #0]
 8006bb2:	8892      	ldrh	r2, [r2, #4]
 8006bb4:	809a      	strh	r2, [r3, #4]
			eqstep=1;
 8006bb6:	4b85      	ldr	r3, [pc, #532]	; (8006dcc <ProcessData+0x136c>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
			ProcessRx(2);
 8006bbc:	2002      	movs	r0, #2
 8006bbe:	f7fe fc19 	bl	80053f4 <ProcessRx>
			SendPc("Start_to_Calibration?\0",8, EXP_START);
 8006bc2:	2204      	movs	r2, #4
 8006bc4:	2108      	movs	r1, #8
 8006bc6:	4882      	ldr	r0, [pc, #520]	; (8006dd0 <ProcessData+0x1370>)
 8006bc8:	f7fe fb7c 	bl	80052c4 <SendPc>
			uart2say=0;
 8006bcc:	4b77      	ldr	r3, [pc, #476]	; (8006dac <ProcessData+0x134c>)
 8006bce:	2200      	movs	r2, #0
 8006bd0:	601a      	str	r2, [r3, #0]
		break;
 8006bd2:	e1b9      	b.n	8006f48 <ProcessData+0x14e8>
		else if(incom[2]=='D'){
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	3302      	adds	r3, #2
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	2b44      	cmp	r3, #68	; 0x44
 8006bdc:	d13a      	bne.n	8006c54 <ProcessData+0x11f4>
			memcpy(&BUFGEN,&incom[3],1);
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	3303      	adds	r3, #3
 8006be2:	781a      	ldrb	r2, [r3, #0]
 8006be4:	4b7b      	ldr	r3, [pc, #492]	; (8006dd4 <ProcessData+0x1374>)
 8006be6:	701a      	strb	r2, [r3, #0]
			heatDuty[heaterid] = 10 * atoi(BUFGEN);
 8006be8:	487a      	ldr	r0, [pc, #488]	; (8006dd4 <ProcessData+0x1374>)
 8006bea:	f00a ff58 	bl	8011a9e <atoi>
 8006bee:	4601      	mov	r1, r0
 8006bf0:	4b79      	ldr	r3, [pc, #484]	; (8006dd8 <ProcessData+0x1378>)
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4b77      	ldr	r3, [pc, #476]	; (8006ddc <ProcessData+0x137c>)
 8006c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			memcpy(&BUFGEN,&incom[4],1);
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	3304      	adds	r3, #4
 8006c08:	781a      	ldrb	r2, [r3, #0]
 8006c0a:	4b72      	ldr	r3, [pc, #456]	; (8006dd4 <ProcessData+0x1374>)
 8006c0c:	701a      	strb	r2, [r3, #0]
			heatDuty[heaterid] = (heatDuty[heaterid] + atoi(BUFGEN))*100;
 8006c0e:	4b72      	ldr	r3, [pc, #456]	; (8006dd8 <ProcessData+0x1378>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a72      	ldr	r2, [pc, #456]	; (8006ddc <ProcessData+0x137c>)
 8006c14:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006c18:	486e      	ldr	r0, [pc, #440]	; (8006dd4 <ProcessData+0x1374>)
 8006c1a:	f00a ff40 	bl	8011a9e <atoi>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	18e2      	adds	r2, r4, r3
 8006c22:	4b6d      	ldr	r3, [pc, #436]	; (8006dd8 <ProcessData+0x1378>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2164      	movs	r1, #100	; 0x64
 8006c28:	fb01 f202 	mul.w	r2, r1, r2
 8006c2c:	496b      	ldr	r1, [pc, #428]	; (8006ddc <ProcessData+0x137c>)
 8006c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setHeater(heaterid, heatDuty[heaterid], 0);
 8006c32:	4b69      	ldr	r3, [pc, #420]	; (8006dd8 <ProcessData+0x1378>)
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	4b68      	ldr	r3, [pc, #416]	; (8006dd8 <ProcessData+0x1378>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a68      	ldr	r2, [pc, #416]	; (8006ddc <ProcessData+0x137c>)
 8006c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c40:	2200      	movs	r2, #0
 8006c42:	4619      	mov	r1, r3
 8006c44:	f7fc ffb8 	bl	8003bb8 <setHeater>
			SendPc("HeaterDutySet", 5, ID_FIND);
 8006c48:	2202      	movs	r2, #2
 8006c4a:	2105      	movs	r1, #5
 8006c4c:	4864      	ldr	r0, [pc, #400]	; (8006de0 <ProcessData+0x1380>)
 8006c4e:	f7fe fb39 	bl	80052c4 <SendPc>
		break;
 8006c52:	e179      	b.n	8006f48 <ProcessData+0x14e8>
		else if(incom[0]=='S'&&incom[1]=='T'){
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b53      	cmp	r3, #83	; 0x53
 8006c5a:	d128      	bne.n	8006cae <ProcessData+0x124e>
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b54      	cmp	r3, #84	; 0x54
 8006c64:	d123      	bne.n	8006cae <ProcessData+0x124e>
			HAL_TIM_Base_Stop_IT(&htim12);
 8006c66:	4854      	ldr	r0, [pc, #336]	; (8006db8 <ProcessData+0x1358>)
 8006c68:	f008 f97d 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
			uart2say=0;
 8006c6c:	4b4f      	ldr	r3, [pc, #316]	; (8006dac <ProcessData+0x134c>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
			automot=0;
 8006c72:	4b5c      	ldr	r3, [pc, #368]	; (8006de4 <ProcessData+0x1384>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	601a      	str	r2, [r3, #0]
			stopmot=0;
 8006c78:	4b5b      	ldr	r3, [pc, #364]	; (8006de8 <ProcessData+0x1388>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]
			if(app==none){
 8006c7e:	4b5b      	ldr	r3, [pc, #364]	; (8006dec <ProcessData+0x138c>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <ProcessData+0x123e>
				if(expin[0].xpst!=0||expin[0].ypst!=0){
 8006c86:	4b5a      	ldr	r3, [pc, #360]	; (8006df0 <ProcessData+0x1390>)
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d103      	bne.n	8006c96 <ProcessData+0x1236>
 8006c8e:	4b58      	ldr	r3, [pc, #352]	; (8006df0 <ProcessData+0x1390>)
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d006      	beq.n	8006ca4 <ProcessData+0x1244>
					isAutoApproach=1;//set x&y positions for first step;
 8006c96:	4b57      	ldr	r3, [pc, #348]	; (8006df4 <ProcessData+0x1394>)
 8006c98:	2201      	movs	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]
 8006c9c:	e002      	b.n	8006ca4 <ProcessData+0x1244>
				isAutoApproach=1;
 8006c9e:	4b55      	ldr	r3, [pc, #340]	; (8006df4 <ProcessData+0x1394>)
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	701a      	strb	r2, [r3, #0]
			TimeSet(&htim10, 100000);
 8006ca4:	4943      	ldr	r1, [pc, #268]	; (8006db4 <ProcessData+0x1354>)
 8006ca6:	4854      	ldr	r0, [pc, #336]	; (8006df8 <ProcessData+0x1398>)
 8006ca8:	f004 fab6 	bl	800b218 <TimeSet>
		break;
 8006cac:	e14c      	b.n	8006f48 <ProcessData+0x14e8>
			SendPc("NO_PROCESS",5, ID_FIND);
 8006cae:	2202      	movs	r2, #2
 8006cb0:	2105      	movs	r1, #5
 8006cb2:	4852      	ldr	r0, [pc, #328]	; (8006dfc <ProcessData+0x139c>)
 8006cb4:	f7fe fb06 	bl	80052c4 <SendPc>
		break;
 8006cb8:	e146      	b.n	8006f48 <ProcessData+0x14e8>
	case DIRECT_COM://direct com
		if(incom[_uartcom3->RxSize-1]=='E'){
 8006cba:	4b40      	ldr	r3, [pc, #256]	; (8006dbc <ProcessData+0x135c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b45      	cmp	r3, #69	; 0x45
 8006cca:	d12d      	bne.n	8006d28 <ProcessData+0x12c8>
			ucPreBuf[0]=0;
 8006ccc:	4b4c      	ldr	r3, [pc, #304]	; (8006e00 <ProcessData+0x13a0>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	701a      	strb	r2, [r3, #0]
			ucBuffer[0]=0;
 8006cd2:	4b4c      	ldr	r3, [pc, #304]	; (8006e04 <ProcessData+0x13a4>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
			memcpy(&ucPreBuf,&incom[0],1);
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	781a      	ldrb	r2, [r3, #0]
 8006cdc:	4b48      	ldr	r3, [pc, #288]	; (8006e00 <ProcessData+0x13a0>)
 8006cde:	701a      	strb	r2, [r3, #0]
			memcpy(&ucBuffer,&incom[1],_uartcom3->RxSize-2);
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	4b35      	ldr	r3, [pc, #212]	; (8006dbc <ProcessData+0x135c>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	691b      	ldr	r3, [r3, #16]
 8006cea:	3b02      	subs	r3, #2
 8006cec:	461a      	mov	r2, r3
 8006cee:	4845      	ldr	r0, [pc, #276]	; (8006e04 <ProcessData+0x13a4>)
 8006cf0:	f00a ff18 	bl	8011b24 <memcpy>
			ucPreBuf[1]=0;
 8006cf4:	4b42      	ldr	r3, [pc, #264]	; (8006e00 <ProcessData+0x13a0>)
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	705a      	strb	r2, [r3, #1]
			ucBuffer[_uartcom3->RxSize-2]=0;
 8006cfa:	4b30      	ldr	r3, [pc, #192]	; (8006dbc <ProcessData+0x135c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	3b02      	subs	r3, #2
 8006d02:	4a40      	ldr	r2, [pc, #256]	; (8006e04 <ProcessData+0x13a4>)
 8006d04:	2100      	movs	r1, #0
 8006d06:	54d1      	strb	r1, [r2, r3]
			SendAct(ucPreBuf, ucBuffer);
 8006d08:	493e      	ldr	r1, [pc, #248]	; (8006e04 <ProcessData+0x13a4>)
 8006d0a:	483d      	ldr	r0, [pc, #244]	; (8006e00 <ProcessData+0x13a0>)
 8006d0c:	f004 fd32 	bl	800b774 <SendAct>
			SendPc("Direct_Communication", 5, ID_FIND);
 8006d10:	2202      	movs	r2, #2
 8006d12:	2105      	movs	r1, #5
 8006d14:	483c      	ldr	r0, [pc, #240]	; (8006e08 <ProcessData+0x13a8>)
 8006d16:	f7fe fad5 	bl	80052c4 <SendPc>
				}
				else{
					SendPc("Retracting", 5, ID_FIND);
				}
			}*/
			ParaInt(_uartcom1->TxBuf);
 8006d1a:	4b3c      	ldr	r3, [pc, #240]	; (8006e0c <ProcessData+0x13ac>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fb f9bf 	bl	80020a4 <ParaInt>
		}
		else{
			SendPc("NO_PROCESS", 5, ID_FIND);
		}
		break;
 8006d26:	e110      	b.n	8006f4a <ProcessData+0x14ea>
			SendPc("NO_PROCESS", 5, ID_FIND);
 8006d28:	2202      	movs	r2, #2
 8006d2a:	2105      	movs	r1, #5
 8006d2c:	4833      	ldr	r0, [pc, #204]	; (8006dfc <ProcessData+0x139c>)
 8006d2e:	f7fe fac9 	bl	80052c4 <SendPc>
		break;
 8006d32:	e10a      	b.n	8006f4a <ProcessData+0x14ea>
	case MOT_COM:
		uart2say=0;
 8006d34:	4b1d      	ldr	r3, [pc, #116]	; (8006dac <ProcessData+0x134c>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim12);
 8006d3a:	481f      	ldr	r0, [pc, #124]	; (8006db8 <ProcessData+0x1358>)
 8006d3c:	f008 f913 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
		memcpy(&tmr,&incom[0],10);
 8006d40:	4b33      	ldr	r3, [pc, #204]	; (8006e10 <ProcessData+0x13b0>)
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	6810      	ldr	r0, [r2, #0]
 8006d46:	6851      	ldr	r1, [r2, #4]
 8006d48:	6018      	str	r0, [r3, #0]
 8006d4a:	6059      	str	r1, [r3, #4]
 8006d4c:	8912      	ldrh	r2, [r2, #8]
 8006d4e:	811a      	strh	r2, [r3, #8]
		TimeSet(&htim9, atoi(tmr)/2);
 8006d50:	482f      	ldr	r0, [pc, #188]	; (8006e10 <ProcessData+0x13b0>)
 8006d52:	f00a fea4 	bl	8011a9e <atoi>
 8006d56:	4603      	mov	r3, r0
 8006d58:	0fda      	lsrs	r2, r3, #31
 8006d5a:	4413      	add	r3, r2
 8006d5c:	105b      	asrs	r3, r3, #1
 8006d5e:	4619      	mov	r1, r3
 8006d60:	482c      	ldr	r0, [pc, #176]	; (8006e14 <ProcessData+0x13b4>)
 8006d62:	f004 fa59 	bl	800b218 <TimeSet>
		stepsay=1;
 8006d66:	4b2c      	ldr	r3, [pc, #176]	; (8006e18 <ProcessData+0x13b8>)
 8006d68:	2201      	movs	r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
		if(automot==0){
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	; (8006de4 <ProcessData+0x1384>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10c      	bne.n	8006d8e <ProcessData+0x132e>
			memcpy(&stepper,&incom[10],10);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	330a      	adds	r3, #10
 8006d78:	220a      	movs	r2, #10
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4827      	ldr	r0, [pc, #156]	; (8006e1c <ProcessData+0x13bc>)
 8006d7e:	f00a fed1 	bl	8011b24 <memcpy>
			stepsay=atoi(stepper);
 8006d82:	4826      	ldr	r0, [pc, #152]	; (8006e1c <ProcessData+0x13bc>)
 8006d84:	f00a fe8b 	bl	8011a9e <atoi>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	4b23      	ldr	r3, [pc, #140]	; (8006e18 <ProcessData+0x13b8>)
 8006d8c:	601a      	str	r2, [r3, #0]
		}
		SendPc("Motor Moving", 5, ID_FIND);
 8006d8e:	2202      	movs	r2, #2
 8006d90:	2105      	movs	r1, #5
 8006d92:	4823      	ldr	r0, [pc, #140]	; (8006e20 <ProcessData+0x13c0>)
 8006d94:	f7fe fa96 	bl	80052c4 <SendPc>
		StepD(dir);
 8006d98:	4b22      	ldr	r3, [pc, #136]	; (8006e24 <ProcessData+0x13c4>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fc fb7f 	bl	80034a0 <StepD>
		break;
 8006da2:	e0d2      	b.n	8006f4a <ProcessData+0x14ea>
 8006da4:	200002c8 	.word	0x200002c8
 8006da8:	2000001c 	.word	0x2000001c
 8006dac:	200018b0 	.word	0x200018b0
 8006db0:	20000010 	.word	0x20000010
 8006db4:	000186a0 	.word	0x000186a0
 8006db8:	20006ec8 	.word	0x20006ec8
 8006dbc:	20006f30 	.word	0x20006f30
 8006dc0:	20001990 	.word	0x20001990
 8006dc4:	2000199a 	.word	0x2000199a
 8006dc8:	200019a4 	.word	0x200019a4
 8006dcc:	200002e4 	.word	0x200002e4
 8006dd0:	0801204c 	.word	0x0801204c
 8006dd4:	20006f0c 	.word	0x20006f0c
 8006dd8:	20006f10 	.word	0x20006f10
 8006ddc:	20001844 	.word	0x20001844
 8006de0:	08011fc0 	.word	0x08011fc0
 8006de4:	2000034c 	.word	0x2000034c
 8006de8:	2000033c 	.word	0x2000033c
 8006dec:	20006964 	.word	0x20006964
 8006df0:	20004d44 	.word	0x20004d44
 8006df4:	200002d8 	.word	0x200002d8
 8006df8:	20006af8 	.word	0x20006af8
 8006dfc:	08012064 	.word	0x08012064
 8006e00:	20006f1c 	.word	0x20006f1c
 8006e04:	20006f34 	.word	0x20006f34
 8006e08:	08012070 	.word	0x08012070
 8006e0c:	2000745c 	.word	0x2000745c
 8006e10:	20006968 	.word	0x20006968
 8006e14:	20006d84 	.word	0x20006d84
 8006e18:	20000334 	.word	0x20000334
 8006e1c:	2000190c 	.word	0x2000190c
 8006e20:	08012088 	.word	0x08012088
 8006e24:	20000338 	.word	0x20000338
	case TEMP_SET://first 6 is Tset -123.456 C- after 2 digit empty- then 12 digit parameter (empty for now)
		SendPc("Heater Activated!", 5, ID_FIND);
 8006e28:	2202      	movs	r2, #2
 8006e2a:	2105      	movs	r1, #5
 8006e2c:	4849      	ldr	r0, [pc, #292]	; (8006f54 <ProcessData+0x14f4>)
 8006e2e:	f7fe fa49 	bl	80052c4 <SendPc>

		}
		else{

		}
		memcpy(&BUFGEN,&incom[1],1);
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	3301      	adds	r3, #1
 8006e36:	781a      	ldrb	r2, [r3, #0]
 8006e38:	4b47      	ldr	r3, [pc, #284]	; (8006f58 <ProcessData+0x14f8>)
 8006e3a:	701a      	strb	r2, [r3, #0]
		temptemp = 10000 * atoi(BUFGEN);
 8006e3c:	4846      	ldr	r0, [pc, #280]	; (8006f58 <ProcessData+0x14f8>)
 8006e3e:	f00a fe2e 	bl	8011a9e <atoi>
 8006e42:	4602      	mov	r2, r0
 8006e44:	f242 7310 	movw	r3, #10000	; 0x2710
 8006e48:	fb03 f302 	mul.w	r3, r3, r2
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4b43      	ldr	r3, [pc, #268]	; (8006f5c <ProcessData+0x14fc>)
 8006e50:	601a      	str	r2, [r3, #0]
		memcpy(&BUFGEN,&incom[2],1);
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	3302      	adds	r3, #2
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	4b3f      	ldr	r3, [pc, #252]	; (8006f58 <ProcessData+0x14f8>)
 8006e5a:	701a      	strb	r2, [r3, #0]
		temptemp = temptemp + 1000*atoi(BUFGEN);
 8006e5c:	483e      	ldr	r0, [pc, #248]	; (8006f58 <ProcessData+0x14f8>)
 8006e5e:	f00a fe1e 	bl	8011a9e <atoi>
 8006e62:	4602      	mov	r2, r0
 8006e64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e68:	fb03 f302 	mul.w	r3, r3, r2
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	4b3b      	ldr	r3, [pc, #236]	; (8006f5c <ProcessData+0x14fc>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4413      	add	r3, r2
 8006e74:	4a39      	ldr	r2, [pc, #228]	; (8006f5c <ProcessData+0x14fc>)
 8006e76:	6013      	str	r3, [r2, #0]
		memcpy(&BUFGEN,&incom[3],1);
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	3303      	adds	r3, #3
 8006e7c:	781a      	ldrb	r2, [r3, #0]
 8006e7e:	4b36      	ldr	r3, [pc, #216]	; (8006f58 <ProcessData+0x14f8>)
 8006e80:	701a      	strb	r2, [r3, #0]
		temptemp = temptemp + 100*atoi(BUFGEN);
 8006e82:	4835      	ldr	r0, [pc, #212]	; (8006f58 <ProcessData+0x14f8>)
 8006e84:	f00a fe0b 	bl	8011a9e <atoi>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	2364      	movs	r3, #100	; 0x64
 8006e8c:	fb03 f302 	mul.w	r3, r3, r2
 8006e90:	461a      	mov	r2, r3
 8006e92:	4b32      	ldr	r3, [pc, #200]	; (8006f5c <ProcessData+0x14fc>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4413      	add	r3, r2
 8006e98:	4a30      	ldr	r2, [pc, #192]	; (8006f5c <ProcessData+0x14fc>)
 8006e9a:	6013      	str	r3, [r2, #0]
		memcpy(&BUFGEN,&incom[4],1);
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	4b2d      	ldr	r3, [pc, #180]	; (8006f58 <ProcessData+0x14f8>)
 8006ea4:	701a      	strb	r2, [r3, #0]
		temptemp = temptemp + 10*atoi(BUFGEN);
 8006ea6:	482c      	ldr	r0, [pc, #176]	; (8006f58 <ProcessData+0x14f8>)
 8006ea8:	f00a fdf9 	bl	8011a9e <atoi>
 8006eac:	4602      	mov	r2, r0
 8006eae:	4613      	mov	r3, r2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4413      	add	r3, r2
 8006eb4:	005b      	lsls	r3, r3, #1
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	4b28      	ldr	r3, [pc, #160]	; (8006f5c <ProcessData+0x14fc>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	4a27      	ldr	r2, [pc, #156]	; (8006f5c <ProcessData+0x14fc>)
 8006ec0:	6013      	str	r3, [r2, #0]
		memcpy(&BUFGEN,&incom[5],1);
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	3305      	adds	r3, #5
 8006ec6:	781a      	ldrb	r2, [r3, #0]
 8006ec8:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <ProcessData+0x14f8>)
 8006eca:	701a      	strb	r2, [r3, #0]
		temptemp = temptemp + atoi(BUFGEN);
 8006ecc:	4822      	ldr	r0, [pc, #136]	; (8006f58 <ProcessData+0x14f8>)
 8006ece:	f00a fde6 	bl	8011a9e <atoi>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	4b21      	ldr	r3, [pc, #132]	; (8006f5c <ProcessData+0x14fc>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4413      	add	r3, r2
 8006edc:	4a1f      	ldr	r2, [pc, #124]	; (8006f5c <ProcessData+0x14fc>)
 8006ede:	6013      	str	r3, [r2, #0]
		temperset[heaterid]=temptemp/20000;
 8006ee0:	4b1e      	ldr	r3, [pc, #120]	; (8006f5c <ProcessData+0x14fc>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1e      	ldr	r2, [pc, #120]	; (8006f60 <ProcessData+0x1500>)
 8006ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eea:	0b9a      	lsrs	r2, r3, #14
 8006eec:	4b1d      	ldr	r3, [pc, #116]	; (8006f64 <ProcessData+0x1504>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	4a1d      	ldr	r2, [pc, #116]	; (8006f68 <ProcessData+0x1508>)
 8006ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if(heatDuty[heaterid]==0){
 8006ef8:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <ProcessData+0x1504>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1b      	ldr	r2, [pc, #108]	; (8006f6c <ProcessData+0x150c>)
 8006efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d105      	bne.n	8006f12 <ProcessData+0x14b2>
			heatDuty[heaterid]=200;
 8006f06:	4b17      	ldr	r3, [pc, #92]	; (8006f64 <ProcessData+0x1504>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a18      	ldr	r2, [pc, #96]	; (8006f6c <ProcessData+0x150c>)
 8006f0c:	21c8      	movs	r1, #200	; 0xc8
 8006f0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
		if(incom[8]=='1'){
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	3308      	adds	r3, #8
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b31      	cmp	r3, #49	; 0x31
 8006f1a:	d103      	bne.n	8006f24 <ProcessData+0x14c4>
			sampleChannel=heaterid;
 8006f1c:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <ProcessData+0x1504>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a13      	ldr	r2, [pc, #76]	; (8006f70 <ProcessData+0x1510>)
 8006f22:	6013      	str	r3, [r2, #0]
		}
		setHeater(heaterid, heatDuty[heaterid], 0);
 8006f24:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <ProcessData+0x1504>)
 8006f26:	6818      	ldr	r0, [r3, #0]
 8006f28:	4b0e      	ldr	r3, [pc, #56]	; (8006f64 <ProcessData+0x1504>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a0f      	ldr	r2, [pc, #60]	; (8006f6c <ProcessData+0x150c>)
 8006f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f32:	2200      	movs	r2, #0
 8006f34:	4619      	mov	r1, r3
 8006f36:	f7fc fe3f 	bl	8003bb8 <setHeater>
		break;
 8006f3a:	e006      	b.n	8006f4a <ProcessData+0x14ea>

	default:
		SendPc("NO_PROCESS", 5 ,ID_FIND);
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	2105      	movs	r1, #5
 8006f40:	480c      	ldr	r0, [pc, #48]	; (8006f74 <ProcessData+0x1514>)
 8006f42:	f7fe f9bf 	bl	80052c4 <SendPc>
		break;
 8006f46:	e000      	b.n	8006f4a <ProcessData+0x14ea>
		break;
 8006f48:	bf00      	nop
	}
}
 8006f4a:	bf00      	nop
 8006f4c:	3774      	adds	r7, #116	; 0x74
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f52:	bf00      	nop
 8006f54:	08012098 	.word	0x08012098
 8006f58:	20006f0c 	.word	0x20006f0c
 8006f5c:	20001834 	.word	0x20001834
 8006f60:	d1b71759 	.word	0xd1b71759
 8006f64:	20006f10 	.word	0x20006f10
 8006f68:	200002b0 	.word	0x200002b0
 8006f6c:	20001844 	.word	0x20001844
 8006f70:	20000394 	.word	0x20000394
 8006f74:	08012064 	.word	0x08012064

08006f78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f7e:	2300      	movs	r3, #0
 8006f80:	607b      	str	r3, [r7, #4]
 8006f82:	4b10      	ldr	r3, [pc, #64]	; (8006fc4 <HAL_MspInit+0x4c>)
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	4a0f      	ldr	r2, [pc, #60]	; (8006fc4 <HAL_MspInit+0x4c>)
 8006f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f8e:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <HAL_MspInit+0x4c>)
 8006f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f96:	607b      	str	r3, [r7, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	603b      	str	r3, [r7, #0]
 8006f9e:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <HAL_MspInit+0x4c>)
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	4a08      	ldr	r2, [pc, #32]	; (8006fc4 <HAL_MspInit+0x4c>)
 8006fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8006faa:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <HAL_MspInit+0x4c>)
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	40023800 	.word	0x40023800

08006fc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b08c      	sub	sp, #48	; 0x30
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fd0:	f107 031c 	add.w	r3, r7, #28
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	605a      	str	r2, [r3, #4]
 8006fda:	609a      	str	r2, [r3, #8]
 8006fdc:	60da      	str	r2, [r3, #12]
 8006fde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a49      	ldr	r2, [pc, #292]	; (800710c <HAL_ADC_MspInit+0x144>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	f040 808c 	bne.w	8007104 <HAL_ADC_MspInit+0x13c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006fec:	2300      	movs	r3, #0
 8006fee:	61bb      	str	r3, [r7, #24]
 8006ff0:	4b47      	ldr	r3, [pc, #284]	; (8007110 <HAL_ADC_MspInit+0x148>)
 8006ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff4:	4a46      	ldr	r2, [pc, #280]	; (8007110 <HAL_ADC_MspInit+0x148>)
 8006ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ffa:	6453      	str	r3, [r2, #68]	; 0x44
 8006ffc:	4b44      	ldr	r3, [pc, #272]	; (8007110 <HAL_ADC_MspInit+0x148>)
 8006ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007004:	61bb      	str	r3, [r7, #24]
 8007006:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	4b40      	ldr	r3, [pc, #256]	; (8007110 <HAL_ADC_MspInit+0x148>)
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	4a3f      	ldr	r2, [pc, #252]	; (8007110 <HAL_ADC_MspInit+0x148>)
 8007012:	f043 0304 	orr.w	r3, r3, #4
 8007016:	6313      	str	r3, [r2, #48]	; 0x30
 8007018:	4b3d      	ldr	r3, [pc, #244]	; (8007110 <HAL_ADC_MspInit+0x148>)
 800701a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007024:	2300      	movs	r3, #0
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	4b39      	ldr	r3, [pc, #228]	; (8007110 <HAL_ADC_MspInit+0x148>)
 800702a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800702c:	4a38      	ldr	r2, [pc, #224]	; (8007110 <HAL_ADC_MspInit+0x148>)
 800702e:	f043 0301 	orr.w	r3, r3, #1
 8007032:	6313      	str	r3, [r2, #48]	; 0x30
 8007034:	4b36      	ldr	r3, [pc, #216]	; (8007110 <HAL_ADC_MspInit+0x148>)
 8007036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
 8007044:	4b32      	ldr	r3, [pc, #200]	; (8007110 <HAL_ADC_MspInit+0x148>)
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	4a31      	ldr	r2, [pc, #196]	; (8007110 <HAL_ADC_MspInit+0x148>)
 800704a:	f043 0302 	orr.w	r3, r3, #2
 800704e:	6313      	str	r3, [r2, #48]	; 0x30
 8007050:	4b2f      	ldr	r3, [pc, #188]	; (8007110 <HAL_ADC_MspInit+0x148>)
 8007052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007054:	f003 0302 	and.w	r3, r3, #2
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = P_M_ADC1_Pin|P_M_ADC2_Pin|SG_ADC_Pin|JSZ_Pin;
 800705c:	2333      	movs	r3, #51	; 0x33
 800705e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007060:	2303      	movs	r3, #3
 8007062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007064:	2300      	movs	r3, #0
 8007066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007068:	f107 031c 	add.w	r3, r7, #28
 800706c:	4619      	mov	r1, r3
 800706e:	4829      	ldr	r0, [pc, #164]	; (8007114 <HAL_ADC_MspInit+0x14c>)
 8007070:	f005 fd40 	bl	800caf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TCRT5000_INPUT_Pin|TC_ADC1_Pin|TC_ADC2_Pin|TC_ADC3_Pin
 8007074:	237c      	movs	r3, #124	; 0x7c
 8007076:	61fb      	str	r3, [r7, #28]
                          |PROXIMITY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007078:	2303      	movs	r3, #3
 800707a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800707c:	2300      	movs	r3, #0
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007080:	f107 031c 	add.w	r3, r7, #28
 8007084:	4619      	mov	r1, r3
 8007086:	4824      	ldr	r0, [pc, #144]	; (8007118 <HAL_ADC_MspInit+0x150>)
 8007088:	f005 fd34 	bl	800caf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JSX_Pin|JSY_Pin;
 800708c:	2303      	movs	r3, #3
 800708e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007090:	2303      	movs	r3, #3
 8007092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007094:	2300      	movs	r3, #0
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007098:	f107 031c 	add.w	r3, r7, #28
 800709c:	4619      	mov	r1, r3
 800709e:	481f      	ldr	r0, [pc, #124]	; (800711c <HAL_ADC_MspInit+0x154>)
 80070a0:	f005 fd28 	bl	800caf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80070a4:	4b1e      	ldr	r3, [pc, #120]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070a6:	4a1f      	ldr	r2, [pc, #124]	; (8007124 <HAL_ADC_MspInit+0x15c>)
 80070a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80070aa:	4b1d      	ldr	r3, [pc, #116]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070ac:	2200      	movs	r2, #0
 80070ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070b0:	4b1b      	ldr	r3, [pc, #108]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80070b6:	4b1a      	ldr	r3, [pc, #104]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80070bc:	4b18      	ldr	r3, [pc, #96]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80070c4:	4b16      	ldr	r3, [pc, #88]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80070cc:	4b14      	ldr	r3, [pc, #80]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80070d2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80070d4:	4b12      	ldr	r3, [pc, #72]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80070da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80070dc:	4b10      	ldr	r3, [pc, #64]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070de:	2200      	movs	r2, #0
 80070e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80070e2:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80070e8:	480d      	ldr	r0, [pc, #52]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070ea:	f005 f973 	bl	800c3d4 <HAL_DMA_Init>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80070f4:	f7fd fc74 	bl	80049e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a09      	ldr	r2, [pc, #36]	; (8007120 <HAL_ADC_MspInit+0x158>)
 80070fc:	639a      	str	r2, [r3, #56]	; 0x38
 80070fe:	4a08      	ldr	r2, [pc, #32]	; (8007120 <HAL_ADC_MspInit+0x158>)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8007104:	bf00      	nop
 8007106:	3730      	adds	r7, #48	; 0x30
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	40012000 	.word	0x40012000
 8007110:	40023800 	.word	0x40023800
 8007114:	40020800 	.word	0x40020800
 8007118:	40020000 	.word	0x40020000
 800711c:	40020400 	.word	0x40020400
 8007120:	20006cb8 	.word	0x20006cb8
 8007124:	40026410 	.word	0x40026410

08007128 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08c      	sub	sp, #48	; 0x30
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007130:	f107 031c 	add.w	r3, r7, #28
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	605a      	str	r2, [r3, #4]
 800713a:	609a      	str	r2, [r3, #8]
 800713c:	60da      	str	r2, [r3, #12]
 800713e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a42      	ldr	r2, [pc, #264]	; (8007250 <HAL_I2C_MspInit+0x128>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d12d      	bne.n	80071a6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800714a:	2300      	movs	r3, #0
 800714c:	61bb      	str	r3, [r7, #24]
 800714e:	4b41      	ldr	r3, [pc, #260]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	4a40      	ldr	r2, [pc, #256]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 8007154:	f043 0302 	orr.w	r3, r3, #2
 8007158:	6313      	str	r3, [r2, #48]	; 0x30
 800715a:	4b3e      	ldr	r3, [pc, #248]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	61bb      	str	r3, [r7, #24]
 8007164:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8007166:	f44f 7340 	mov.w	r3, #768	; 0x300
 800716a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800716c:	2312      	movs	r3, #18
 800716e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007170:	2301      	movs	r3, #1
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007174:	2303      	movs	r3, #3
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007178:	2304      	movs	r3, #4
 800717a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800717c:	f107 031c 	add.w	r3, r7, #28
 8007180:	4619      	mov	r1, r3
 8007182:	4835      	ldr	r0, [pc, #212]	; (8007258 <HAL_I2C_MspInit+0x130>)
 8007184:	f005 fcb6 	bl	800caf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	4b31      	ldr	r3, [pc, #196]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	4a30      	ldr	r2, [pc, #192]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 8007192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007196:	6413      	str	r3, [r2, #64]	; 0x40
 8007198:	4b2e      	ldr	r3, [pc, #184]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80071a4:	e050      	b.n	8007248 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a2c      	ldr	r2, [pc, #176]	; (800725c <HAL_I2C_MspInit+0x134>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d14b      	bne.n	8007248 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071b0:	2300      	movs	r3, #0
 80071b2:	613b      	str	r3, [r7, #16]
 80071b4:	4b27      	ldr	r3, [pc, #156]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 80071b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b8:	4a26      	ldr	r2, [pc, #152]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 80071ba:	f043 0304 	orr.w	r3, r3, #4
 80071be:	6313      	str	r3, [r2, #48]	; 0x30
 80071c0:	4b24      	ldr	r3, [pc, #144]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 80071c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c4:	f003 0304 	and.w	r3, r3, #4
 80071c8:	613b      	str	r3, [r7, #16]
 80071ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071cc:	2300      	movs	r3, #0
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	4b20      	ldr	r3, [pc, #128]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 80071d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d4:	4a1f      	ldr	r2, [pc, #124]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 80071d6:	f043 0301 	orr.w	r3, r3, #1
 80071da:	6313      	str	r3, [r2, #48]	; 0x30
 80071dc:	4b1d      	ldr	r3, [pc, #116]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 80071de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80071e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80071ee:	2312      	movs	r3, #18
 80071f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071f2:	2301      	movs	r3, #1
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071f6:	2303      	movs	r3, #3
 80071f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80071fa:	2304      	movs	r3, #4
 80071fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071fe:	f107 031c 	add.w	r3, r7, #28
 8007202:	4619      	mov	r1, r3
 8007204:	4816      	ldr	r0, [pc, #88]	; (8007260 <HAL_I2C_MspInit+0x138>)
 8007206:	f005 fc75 	bl	800caf4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800720a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800720e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007210:	2312      	movs	r3, #18
 8007212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007214:	2301      	movs	r3, #1
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007218:	2303      	movs	r3, #3
 800721a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800721c:	2304      	movs	r3, #4
 800721e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007220:	f107 031c 	add.w	r3, r7, #28
 8007224:	4619      	mov	r1, r3
 8007226:	480f      	ldr	r0, [pc, #60]	; (8007264 <HAL_I2C_MspInit+0x13c>)
 8007228:	f005 fc64 	bl	800caf4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800722c:	2300      	movs	r3, #0
 800722e:	60bb      	str	r3, [r7, #8]
 8007230:	4b08      	ldr	r3, [pc, #32]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	4a07      	ldr	r2, [pc, #28]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 8007236:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800723a:	6413      	str	r3, [r2, #64]	; 0x40
 800723c:	4b05      	ldr	r3, [pc, #20]	; (8007254 <HAL_I2C_MspInit+0x12c>)
 800723e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007244:	60bb      	str	r3, [r7, #8]
 8007246:	68bb      	ldr	r3, [r7, #8]
}
 8007248:	bf00      	nop
 800724a:	3730      	adds	r7, #48	; 0x30
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	40005400 	.word	0x40005400
 8007254:	40023800 	.word	0x40023800
 8007258:	40020400 	.word	0x40020400
 800725c:	40005c00 	.word	0x40005c00
 8007260:	40020800 	.word	0x40020800
 8007264:	40020000 	.word	0x40020000

08007268 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08a      	sub	sp, #40	; 0x28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007270:	f107 0314 	add.w	r3, r7, #20
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]
 8007278:	605a      	str	r2, [r3, #4]
 800727a:	609a      	str	r2, [r3, #8]
 800727c:	60da      	str	r2, [r3, #12]
 800727e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a28      	ldr	r2, [pc, #160]	; (8007328 <HAL_SD_MspInit+0xc0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d14a      	bne.n	8007320 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800728a:	2300      	movs	r3, #0
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	4b27      	ldr	r3, [pc, #156]	; (800732c <HAL_SD_MspInit+0xc4>)
 8007290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007292:	4a26      	ldr	r2, [pc, #152]	; (800732c <HAL_SD_MspInit+0xc4>)
 8007294:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007298:	6453      	str	r3, [r2, #68]	; 0x44
 800729a:	4b24      	ldr	r3, [pc, #144]	; (800732c <HAL_SD_MspInit+0xc4>)
 800729c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800729e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	4b20      	ldr	r3, [pc, #128]	; (800732c <HAL_SD_MspInit+0xc4>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	4a1f      	ldr	r2, [pc, #124]	; (800732c <HAL_SD_MspInit+0xc4>)
 80072b0:	f043 0304 	orr.w	r3, r3, #4
 80072b4:	6313      	str	r3, [r2, #48]	; 0x30
 80072b6:	4b1d      	ldr	r3, [pc, #116]	; (800732c <HAL_SD_MspInit+0xc4>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	f003 0304 	and.w	r3, r3, #4
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80072c2:	2300      	movs	r3, #0
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	4b19      	ldr	r3, [pc, #100]	; (800732c <HAL_SD_MspInit+0xc4>)
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	4a18      	ldr	r2, [pc, #96]	; (800732c <HAL_SD_MspInit+0xc4>)
 80072cc:	f043 0308 	orr.w	r3, r3, #8
 80072d0:	6313      	str	r3, [r2, #48]	; 0x30
 80072d2:	4b16      	ldr	r3, [pc, #88]	; (800732c <HAL_SD_MspInit+0xc4>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	f003 0308 	and.w	r3, r3, #8
 80072da:	60bb      	str	r3, [r7, #8]
 80072dc:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80072de:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80072e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072e4:	2302      	movs	r3, #2
 80072e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e8:	2300      	movs	r3, #0
 80072ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ec:	2303      	movs	r3, #3
 80072ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80072f0:	230c      	movs	r3, #12
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072f4:	f107 0314 	add.w	r3, r7, #20
 80072f8:	4619      	mov	r1, r3
 80072fa:	480d      	ldr	r0, [pc, #52]	; (8007330 <HAL_SD_MspInit+0xc8>)
 80072fc:	f005 fbfa 	bl	800caf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007300:	2304      	movs	r3, #4
 8007302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007304:	2302      	movs	r3, #2
 8007306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007308:	2300      	movs	r3, #0
 800730a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800730c:	2303      	movs	r3, #3
 800730e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8007310:	230c      	movs	r3, #12
 8007312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	4619      	mov	r1, r3
 800731a:	4806      	ldr	r0, [pc, #24]	; (8007334 <HAL_SD_MspInit+0xcc>)
 800731c:	f005 fbea 	bl	800caf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8007320:	bf00      	nop
 8007322:	3728      	adds	r7, #40	; 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	40012c00 	.word	0x40012c00
 800732c:	40023800 	.word	0x40023800
 8007330:	40020800 	.word	0x40020800
 8007334:	40020c00 	.word	0x40020c00

08007338 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08a      	sub	sp, #40	; 0x28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007340:	f107 0314 	add.w	r3, r7, #20
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	605a      	str	r2, [r3, #4]
 800734a:	609a      	str	r2, [r3, #8]
 800734c:	60da      	str	r2, [r3, #12]
 800734e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a28      	ldr	r2, [pc, #160]	; (80073f8 <HAL_SPI_MspInit+0xc0>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d14a      	bne.n	80073f0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800735a:	2300      	movs	r3, #0
 800735c:	613b      	str	r3, [r7, #16]
 800735e:	4b27      	ldr	r3, [pc, #156]	; (80073fc <HAL_SPI_MspInit+0xc4>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	4a26      	ldr	r2, [pc, #152]	; (80073fc <HAL_SPI_MspInit+0xc4>)
 8007364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007368:	6413      	str	r3, [r2, #64]	; 0x40
 800736a:	4b24      	ldr	r3, [pc, #144]	; (80073fc <HAL_SPI_MspInit+0xc4>)
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007372:	613b      	str	r3, [r7, #16]
 8007374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
 800737a:	4b20      	ldr	r3, [pc, #128]	; (80073fc <HAL_SPI_MspInit+0xc4>)
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	4a1f      	ldr	r2, [pc, #124]	; (80073fc <HAL_SPI_MspInit+0xc4>)
 8007380:	f043 0304 	orr.w	r3, r3, #4
 8007384:	6313      	str	r3, [r2, #48]	; 0x30
 8007386:	4b1d      	ldr	r3, [pc, #116]	; (80073fc <HAL_SPI_MspInit+0xc4>)
 8007388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	60fb      	str	r3, [r7, #12]
 8007390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007392:	2300      	movs	r3, #0
 8007394:	60bb      	str	r3, [r7, #8]
 8007396:	4b19      	ldr	r3, [pc, #100]	; (80073fc <HAL_SPI_MspInit+0xc4>)
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	4a18      	ldr	r2, [pc, #96]	; (80073fc <HAL_SPI_MspInit+0xc4>)
 800739c:	f043 0302 	orr.w	r3, r3, #2
 80073a0:	6313      	str	r3, [r2, #48]	; 0x30
 80073a2:	4b16      	ldr	r3, [pc, #88]	; (80073fc <HAL_SPI_MspInit+0xc4>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	60bb      	str	r3, [r7, #8]
 80073ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80073ae:	230c      	movs	r3, #12
 80073b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073b2:	2302      	movs	r3, #2
 80073b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073ba:	2303      	movs	r3, #3
 80073bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80073be:	2305      	movs	r3, #5
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073c2:	f107 0314 	add.w	r3, r7, #20
 80073c6:	4619      	mov	r1, r3
 80073c8:	480d      	ldr	r0, [pc, #52]	; (8007400 <HAL_SPI_MspInit+0xc8>)
 80073ca:	f005 fb93 	bl	800caf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80073ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073d4:	2302      	movs	r3, #2
 80073d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073dc:	2303      	movs	r3, #3
 80073de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80073e0:	2305      	movs	r3, #5
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073e4:	f107 0314 	add.w	r3, r7, #20
 80073e8:	4619      	mov	r1, r3
 80073ea:	4806      	ldr	r0, [pc, #24]	; (8007404 <HAL_SPI_MspInit+0xcc>)
 80073ec:	f005 fb82 	bl	800caf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80073f0:	bf00      	nop
 80073f2:	3728      	adds	r7, #40	; 0x28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	40003800 	.word	0x40003800
 80073fc:	40023800 	.word	0x40023800
 8007400:	40020800 	.word	0x40020800
 8007404:	40020400 	.word	0x40020400

08007408 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a16      	ldr	r2, [pc, #88]	; (8007470 <HAL_TIM_PWM_MspInit+0x68>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d125      	bne.n	8007466 <HAL_TIM_PWM_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	4b15      	ldr	r3, [pc, #84]	; (8007474 <HAL_TIM_PWM_MspInit+0x6c>)
 8007420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007422:	4a14      	ldr	r2, [pc, #80]	; (8007474 <HAL_TIM_PWM_MspInit+0x6c>)
 8007424:	f043 0301 	orr.w	r3, r3, #1
 8007428:	6453      	str	r3, [r2, #68]	; 0x44
 800742a:	4b12      	ldr	r3, [pc, #72]	; (8007474 <HAL_TIM_PWM_MspInit+0x6c>)
 800742c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742e:	f003 0301 	and.w	r3, r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 8007436:	2200      	movs	r2, #0
 8007438:	2102      	movs	r1, #2
 800743a:	2018      	movs	r0, #24
 800743c:	f004 ff93 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007440:	2018      	movs	r0, #24
 8007442:	f004 ffac 	bl	800c39e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8007446:	2200      	movs	r2, #0
 8007448:	2102      	movs	r1, #2
 800744a:	2019      	movs	r0, #25
 800744c:	f004 ff8b 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007450:	2019      	movs	r0, #25
 8007452:	f004 ffa4 	bl	800c39e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 8007456:	2200      	movs	r2, #0
 8007458:	2102      	movs	r1, #2
 800745a:	201a      	movs	r0, #26
 800745c:	f004 ff83 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8007460:	201a      	movs	r0, #26
 8007462:	f004 ff9c 	bl	800c39e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007466:	bf00      	nop
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	40010000 	.word	0x40010000
 8007474:	40023800 	.word	0x40023800

08007478 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b08e      	sub	sp, #56	; 0x38
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007480:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007484:	2200      	movs	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	605a      	str	r2, [r3, #4]
 800748a:	609a      	str	r2, [r3, #8]
 800748c:	60da      	str	r2, [r3, #12]
 800748e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007498:	d12c      	bne.n	80074f4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800749a:	2300      	movs	r3, #0
 800749c:	623b      	str	r3, [r7, #32]
 800749e:	4b51      	ldr	r3, [pc, #324]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 80074a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a2:	4a50      	ldr	r2, [pc, #320]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 80074a4:	f043 0301 	orr.w	r3, r3, #1
 80074a8:	6413      	str	r3, [r2, #64]	; 0x40
 80074aa:	4b4e      	ldr	r3, [pc, #312]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 80074ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	623b      	str	r3, [r7, #32]
 80074b4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074b6:	2300      	movs	r3, #0
 80074b8:	61fb      	str	r3, [r7, #28]
 80074ba:	4b4a      	ldr	r3, [pc, #296]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 80074bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074be:	4a49      	ldr	r2, [pc, #292]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 80074c0:	f043 0301 	orr.w	r3, r3, #1
 80074c4:	6313      	str	r3, [r2, #48]	; 0x30
 80074c6:	4b47      	ldr	r3, [pc, #284]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = AY_Pin|BY_Pin;
 80074d2:	2303      	movs	r3, #3
 80074d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074d6:	2302      	movs	r3, #2
 80074d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074da:	2300      	movs	r3, #0
 80074dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074de:	2300      	movs	r3, #0
 80074e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80074e2:	2301      	movs	r3, #1
 80074e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ea:	4619      	mov	r1, r3
 80074ec:	483e      	ldr	r0, [pc, #248]	; (80075e8 <HAL_TIM_Encoder_MspInit+0x170>)
 80074ee:	f005 fb01 	bl	800caf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80074f2:	e072      	b.n	80075da <HAL_TIM_Encoder_MspInit+0x162>
  else if(htim_encoder->Instance==TIM3)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a3c      	ldr	r2, [pc, #240]	; (80075ec <HAL_TIM_Encoder_MspInit+0x174>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d12c      	bne.n	8007558 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80074fe:	2300      	movs	r3, #0
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	4b38      	ldr	r3, [pc, #224]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8007504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007506:	4a37      	ldr	r2, [pc, #220]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8007508:	f043 0302 	orr.w	r3, r3, #2
 800750c:	6413      	str	r3, [r2, #64]	; 0x40
 800750e:	4b35      	ldr	r3, [pc, #212]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	61bb      	str	r3, [r7, #24]
 8007518:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800751a:	2300      	movs	r3, #0
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	4b31      	ldr	r3, [pc, #196]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8007520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007522:	4a30      	ldr	r2, [pc, #192]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8007524:	f043 0302 	orr.w	r3, r3, #2
 8007528:	6313      	str	r3, [r2, #48]	; 0x30
 800752a:	4b2e      	ldr	r3, [pc, #184]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 800752c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	617b      	str	r3, [r7, #20]
 8007534:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = IX_Pin|IY_Pin;
 8007536:	2330      	movs	r3, #48	; 0x30
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800753a:	2302      	movs	r3, #2
 800753c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800753e:	2300      	movs	r3, #0
 8007540:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007542:	2300      	movs	r3, #0
 8007544:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007546:	2302      	movs	r3, #2
 8007548:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800754a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800754e:	4619      	mov	r1, r3
 8007550:	4827      	ldr	r0, [pc, #156]	; (80075f0 <HAL_TIM_Encoder_MspInit+0x178>)
 8007552:	f005 facf 	bl	800caf4 <HAL_GPIO_Init>
}
 8007556:	e040      	b.n	80075da <HAL_TIM_Encoder_MspInit+0x162>
  else if(htim_encoder->Instance==TIM8)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a25      	ldr	r2, [pc, #148]	; (80075f4 <HAL_TIM_Encoder_MspInit+0x17c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d13b      	bne.n	80075da <HAL_TIM_Encoder_MspInit+0x162>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	4b1f      	ldr	r3, [pc, #124]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8007568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756a:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 800756c:	f043 0302 	orr.w	r3, r3, #2
 8007570:	6453      	str	r3, [r2, #68]	; 0x44
 8007572:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8007574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007576:	f003 0302 	and.w	r3, r3, #2
 800757a:	613b      	str	r3, [r7, #16]
 800757c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	4b18      	ldr	r3, [pc, #96]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	4a17      	ldr	r2, [pc, #92]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8007588:	f043 0304 	orr.w	r3, r3, #4
 800758c:	6313      	str	r3, [r2, #48]	; 0x30
 800758e:	4b15      	ldr	r3, [pc, #84]	; (80075e4 <HAL_TIM_Encoder_MspInit+0x16c>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f003 0304 	and.w	r3, r3, #4
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BX_Pin|AX_Pin;
 800759a:	23c0      	movs	r3, #192	; 0xc0
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800759e:	2302      	movs	r3, #2
 80075a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075a6:	2300      	movs	r3, #0
 80075a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80075aa:	2303      	movs	r3, #3
 80075ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075b2:	4619      	mov	r1, r3
 80075b4:	4810      	ldr	r0, [pc, #64]	; (80075f8 <HAL_TIM_Encoder_MspInit+0x180>)
 80075b6:	f005 fa9d 	bl	800caf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 2, 0);
 80075ba:	2200      	movs	r2, #0
 80075bc:	2102      	movs	r1, #2
 80075be:	202b      	movs	r0, #43	; 0x2b
 80075c0:	f004 fed1 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80075c4:	202b      	movs	r0, #43	; 0x2b
 80075c6:	f004 feea 	bl	800c39e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 80075ca:	2200      	movs	r2, #0
 80075cc:	2102      	movs	r1, #2
 80075ce:	202c      	movs	r0, #44	; 0x2c
 80075d0:	f004 fec9 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80075d4:	202c      	movs	r0, #44	; 0x2c
 80075d6:	f004 fee2 	bl	800c39e <HAL_NVIC_EnableIRQ>
}
 80075da:	bf00      	nop
 80075dc:	3738      	adds	r7, #56	; 0x38
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	40023800 	.word	0x40023800
 80075e8:	40020000 	.word	0x40020000
 80075ec:	40000400 	.word	0x40000400
 80075f0:	40020400 	.word	0x40020400
 80075f4:	40010400 	.word	0x40010400
 80075f8:	40020800 	.word	0x40020800

080075fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a46      	ldr	r2, [pc, #280]	; (8007724 <HAL_TIM_Base_MspInit+0x128>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d116      	bne.n	800763c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800760e:	2300      	movs	r3, #0
 8007610:	61fb      	str	r3, [r7, #28]
 8007612:	4b45      	ldr	r3, [pc, #276]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	4a44      	ldr	r2, [pc, #272]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 8007618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800761c:	6453      	str	r3, [r2, #68]	; 0x44
 800761e:	4b42      	ldr	r3, [pc, #264]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 8007620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007626:	61fb      	str	r3, [r7, #28]
 8007628:	69fb      	ldr	r3, [r7, #28]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 0);
 800762a:	2200      	movs	r2, #0
 800762c:	2102      	movs	r1, #2
 800762e:	2018      	movs	r0, #24
 8007630:	f004 fe99 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8007634:	2018      	movs	r0, #24
 8007636:	f004 feb2 	bl	800c39e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800763a:	e06e      	b.n	800771a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM10)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a3a      	ldr	r2, [pc, #232]	; (800772c <HAL_TIM_Base_MspInit+0x130>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d116      	bne.n	8007674 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007646:	2300      	movs	r3, #0
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	4b37      	ldr	r3, [pc, #220]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 800764c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800764e:	4a36      	ldr	r2, [pc, #216]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 8007650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007654:	6453      	str	r3, [r2, #68]	; 0x44
 8007656:	4b34      	ldr	r3, [pc, #208]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 8007658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765e:	61bb      	str	r3, [r7, #24]
 8007660:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8007662:	2200      	movs	r2, #0
 8007664:	2102      	movs	r1, #2
 8007666:	2019      	movs	r0, #25
 8007668:	f004 fe7d 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800766c:	2019      	movs	r0, #25
 800766e:	f004 fe96 	bl	800c39e <HAL_NVIC_EnableIRQ>
}
 8007672:	e052      	b.n	800771a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM11)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a2d      	ldr	r2, [pc, #180]	; (8007730 <HAL_TIM_Base_MspInit+0x134>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d116      	bne.n	80076ac <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800767e:	2300      	movs	r3, #0
 8007680:	617b      	str	r3, [r7, #20]
 8007682:	4b29      	ldr	r3, [pc, #164]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 8007684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007686:	4a28      	ldr	r2, [pc, #160]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 8007688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800768c:	6453      	str	r3, [r2, #68]	; 0x44
 800768e:	4b26      	ldr	r3, [pc, #152]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 8007690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007692:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 800769a:	2200      	movs	r2, #0
 800769c:	2102      	movs	r1, #2
 800769e:	201a      	movs	r0, #26
 80076a0:	f004 fe61 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80076a4:	201a      	movs	r0, #26
 80076a6:	f004 fe7a 	bl	800c39e <HAL_NVIC_EnableIRQ>
}
 80076aa:	e036      	b.n	800771a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM12)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a20      	ldr	r2, [pc, #128]	; (8007734 <HAL_TIM_Base_MspInit+0x138>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d116      	bne.n	80076e4 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80076b6:	2300      	movs	r3, #0
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	4a1a      	ldr	r2, [pc, #104]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 80076c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076c4:	6413      	str	r3, [r2, #64]	; 0x40
 80076c6:	4b18      	ldr	r3, [pc, #96]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ce:	613b      	str	r3, [r7, #16]
 80076d0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 2, 0);
 80076d2:	2200      	movs	r2, #0
 80076d4:	2102      	movs	r1, #2
 80076d6:	202b      	movs	r0, #43	; 0x2b
 80076d8:	f004 fe45 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80076dc:	202b      	movs	r0, #43	; 0x2b
 80076de:	f004 fe5e 	bl	800c39e <HAL_NVIC_EnableIRQ>
}
 80076e2:	e01a      	b.n	800771a <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM13)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a13      	ldr	r2, [pc, #76]	; (8007738 <HAL_TIM_Base_MspInit+0x13c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d115      	bne.n	800771a <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	4b0d      	ldr	r3, [pc, #52]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	4a0c      	ldr	r2, [pc, #48]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 80076f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fc:	6413      	str	r3, [r2, #64]	; 0x40
 80076fe:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <HAL_TIM_Base_MspInit+0x12c>)
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 800770a:	2200      	movs	r2, #0
 800770c:	2102      	movs	r1, #2
 800770e:	202c      	movs	r0, #44	; 0x2c
 8007710:	f004 fe29 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007714:	202c      	movs	r0, #44	; 0x2c
 8007716:	f004 fe42 	bl	800c39e <HAL_NVIC_EnableIRQ>
}
 800771a:	bf00      	nop
 800771c:	3720      	adds	r7, #32
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	40014000 	.word	0x40014000
 8007728:	40023800 	.word	0x40023800
 800772c:	40014400 	.word	0x40014400
 8007730:	40014800 	.word	0x40014800
 8007734:	40001800 	.word	0x40001800
 8007738:	40001c00 	.word	0x40001c00

0800773c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007744:	f107 030c 	add.w	r3, r7, #12
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	605a      	str	r2, [r3, #4]
 800774e:	609a      	str	r2, [r3, #8]
 8007750:	60da      	str	r2, [r3, #12]
 8007752:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a12      	ldr	r2, [pc, #72]	; (80077a4 <HAL_TIM_MspPostInit+0x68>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d11e      	bne.n	800779c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]
 8007762:	4b11      	ldr	r3, [pc, #68]	; (80077a8 <HAL_TIM_MspPostInit+0x6c>)
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	4a10      	ldr	r2, [pc, #64]	; (80077a8 <HAL_TIM_MspPostInit+0x6c>)
 8007768:	f043 0310 	orr.w	r3, r3, #16
 800776c:	6313      	str	r3, [r2, #48]	; 0x30
 800776e:	4b0e      	ldr	r3, [pc, #56]	; (80077a8 <HAL_TIM_MspPostInit+0x6c>)
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	f003 0310 	and.w	r3, r3, #16
 8007776:	60bb      	str	r3, [r7, #8]
 8007778:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 800777a:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800777e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007780:	2302      	movs	r3, #2
 8007782:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007784:	2300      	movs	r3, #0
 8007786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007788:	2300      	movs	r3, #0
 800778a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800778c:	2301      	movs	r3, #1
 800778e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007790:	f107 030c 	add.w	r3, r7, #12
 8007794:	4619      	mov	r1, r3
 8007796:	4805      	ldr	r0, [pc, #20]	; (80077ac <HAL_TIM_MspPostInit+0x70>)
 8007798:	f005 f9ac 	bl	800caf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800779c:	bf00      	nop
 800779e:	3720      	adds	r7, #32
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40010000 	.word	0x40010000
 80077a8:	40023800 	.word	0x40023800
 80077ac:	40021000 	.word	0x40021000

080077b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b08e      	sub	sp, #56	; 0x38
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	605a      	str	r2, [r3, #4]
 80077c2:	609a      	str	r2, [r3, #8]
 80077c4:	60da      	str	r2, [r3, #12]
 80077c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a58      	ldr	r2, [pc, #352]	; (8007930 <HAL_UART_MspInit+0x180>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d135      	bne.n	800783e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80077d2:	2300      	movs	r3, #0
 80077d4:	623b      	str	r3, [r7, #32]
 80077d6:	4b57      	ldr	r3, [pc, #348]	; (8007934 <HAL_UART_MspInit+0x184>)
 80077d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077da:	4a56      	ldr	r2, [pc, #344]	; (8007934 <HAL_UART_MspInit+0x184>)
 80077dc:	f043 0310 	orr.w	r3, r3, #16
 80077e0:	6453      	str	r3, [r2, #68]	; 0x44
 80077e2:	4b54      	ldr	r3, [pc, #336]	; (8007934 <HAL_UART_MspInit+0x184>)
 80077e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e6:	f003 0310 	and.w	r3, r3, #16
 80077ea:	623b      	str	r3, [r7, #32]
 80077ec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077ee:	2300      	movs	r3, #0
 80077f0:	61fb      	str	r3, [r7, #28]
 80077f2:	4b50      	ldr	r3, [pc, #320]	; (8007934 <HAL_UART_MspInit+0x184>)
 80077f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f6:	4a4f      	ldr	r2, [pc, #316]	; (8007934 <HAL_UART_MspInit+0x184>)
 80077f8:	f043 0301 	orr.w	r3, r3, #1
 80077fc:	6313      	str	r3, [r2, #48]	; 0x30
 80077fe:	4b4d      	ldr	r3, [pc, #308]	; (8007934 <HAL_UART_MspInit+0x184>)
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	61fb      	str	r3, [r7, #28]
 8007808:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = UC45TX_Pin|UC45RX_Pin;
 800780a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800780e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007810:	2302      	movs	r3, #2
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007814:	2300      	movs	r3, #0
 8007816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007818:	2303      	movs	r3, #3
 800781a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800781c:	2307      	movs	r3, #7
 800781e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007824:	4619      	mov	r1, r3
 8007826:	4844      	ldr	r0, [pc, #272]	; (8007938 <HAL_UART_MspInit+0x188>)
 8007828:	f005 f964 	bl	800caf4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800782c:	2200      	movs	r2, #0
 800782e:	2101      	movs	r1, #1
 8007830:	2025      	movs	r0, #37	; 0x25
 8007832:	f004 fd98 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007836:	2025      	movs	r0, #37	; 0x25
 8007838:	f004 fdb1 	bl	800c39e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800783c:	e073      	b.n	8007926 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a3e      	ldr	r2, [pc, #248]	; (800793c <HAL_UART_MspInit+0x18c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d134      	bne.n	80078b2 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007848:	2300      	movs	r3, #0
 800784a:	61bb      	str	r3, [r7, #24]
 800784c:	4b39      	ldr	r3, [pc, #228]	; (8007934 <HAL_UART_MspInit+0x184>)
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	4a38      	ldr	r2, [pc, #224]	; (8007934 <HAL_UART_MspInit+0x184>)
 8007852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007856:	6413      	str	r3, [r2, #64]	; 0x40
 8007858:	4b36      	ldr	r3, [pc, #216]	; (8007934 <HAL_UART_MspInit+0x184>)
 800785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007860:	61bb      	str	r3, [r7, #24]
 8007862:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007864:	2300      	movs	r3, #0
 8007866:	617b      	str	r3, [r7, #20]
 8007868:	4b32      	ldr	r3, [pc, #200]	; (8007934 <HAL_UART_MspInit+0x184>)
 800786a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786c:	4a31      	ldr	r2, [pc, #196]	; (8007934 <HAL_UART_MspInit+0x184>)
 800786e:	f043 0308 	orr.w	r3, r3, #8
 8007872:	6313      	str	r3, [r2, #48]	; 0x30
 8007874:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <HAL_UART_MspInit+0x184>)
 8007876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007878:	f003 0308 	and.w	r3, r3, #8
 800787c:	617b      	str	r3, [r7, #20]
 800787e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TMC_TX_Pin|TMC_RX_Pin;
 8007880:	2360      	movs	r3, #96	; 0x60
 8007882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007884:	2302      	movs	r3, #2
 8007886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007888:	2300      	movs	r3, #0
 800788a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800788c:	2303      	movs	r3, #3
 800788e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007890:	2307      	movs	r3, #7
 8007892:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007898:	4619      	mov	r1, r3
 800789a:	4829      	ldr	r0, [pc, #164]	; (8007940 <HAL_UART_MspInit+0x190>)
 800789c:	f005 f92a 	bl	800caf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80078a0:	2200      	movs	r2, #0
 80078a2:	2101      	movs	r1, #1
 80078a4:	2026      	movs	r0, #38	; 0x26
 80078a6:	f004 fd5e 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80078aa:	2026      	movs	r0, #38	; 0x26
 80078ac:	f004 fd77 	bl	800c39e <HAL_NVIC_EnableIRQ>
}
 80078b0:	e039      	b.n	8007926 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART3)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a23      	ldr	r2, [pc, #140]	; (8007944 <HAL_UART_MspInit+0x194>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d134      	bne.n	8007926 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART3_CLK_ENABLE();
 80078bc:	2300      	movs	r3, #0
 80078be:	613b      	str	r3, [r7, #16]
 80078c0:	4b1c      	ldr	r3, [pc, #112]	; (8007934 <HAL_UART_MspInit+0x184>)
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	4a1b      	ldr	r2, [pc, #108]	; (8007934 <HAL_UART_MspInit+0x184>)
 80078c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078ca:	6413      	str	r3, [r2, #64]	; 0x40
 80078cc:	4b19      	ldr	r3, [pc, #100]	; (8007934 <HAL_UART_MspInit+0x184>)
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078d4:	613b      	str	r3, [r7, #16]
 80078d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078d8:	2300      	movs	r3, #0
 80078da:	60fb      	str	r3, [r7, #12]
 80078dc:	4b15      	ldr	r3, [pc, #84]	; (8007934 <HAL_UART_MspInit+0x184>)
 80078de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e0:	4a14      	ldr	r2, [pc, #80]	; (8007934 <HAL_UART_MspInit+0x184>)
 80078e2:	f043 0304 	orr.w	r3, r3, #4
 80078e6:	6313      	str	r3, [r2, #48]	; 0x30
 80078e8:	4b12      	ldr	r3, [pc, #72]	; (8007934 <HAL_UART_MspInit+0x184>)
 80078ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ec:	f003 0304 	and.w	r3, r3, #4
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PCTX_Pin|PCRX_Pin;
 80078f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80078f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078fa:	2302      	movs	r3, #2
 80078fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078fe:	2300      	movs	r3, #0
 8007900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007902:	2303      	movs	r3, #3
 8007904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007906:	2307      	movs	r3, #7
 8007908:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800790a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800790e:	4619      	mov	r1, r3
 8007910:	480d      	ldr	r0, [pc, #52]	; (8007948 <HAL_UART_MspInit+0x198>)
 8007912:	f005 f8ef 	bl	800caf4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8007916:	2200      	movs	r2, #0
 8007918:	2101      	movs	r1, #1
 800791a:	2027      	movs	r0, #39	; 0x27
 800791c:	f004 fd23 	bl	800c366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007920:	2027      	movs	r0, #39	; 0x27
 8007922:	f004 fd3c 	bl	800c39e <HAL_NVIC_EnableIRQ>
}
 8007926:	bf00      	nop
 8007928:	3738      	adds	r7, #56	; 0x38
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	40011000 	.word	0x40011000
 8007934:	40023800 	.word	0x40023800
 8007938:	40020000 	.word	0x40020000
 800793c:	40004400 	.word	0x40004400
 8007940:	40020c00 	.word	0x40020c00
 8007944:	40004800 	.word	0x40004800
 8007948:	40020800 	.word	0x40020800

0800794c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007950:	e7fe      	b.n	8007950 <NMI_Handler+0x4>

08007952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007952:	b480      	push	{r7}
 8007954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007956:	e7fe      	b.n	8007956 <HardFault_Handler+0x4>

08007958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800795c:	e7fe      	b.n	800795c <MemManage_Handler+0x4>

0800795e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800795e:	b480      	push	{r7}
 8007960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007962:	e7fe      	b.n	8007962 <BusFault_Handler+0x4>

08007964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007968:	e7fe      	b.n	8007968 <UsageFault_Handler+0x4>

0800796a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800796a:	b480      	push	{r7}
 800796c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800796e:	bf00      	nop
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007978:	b480      	push	{r7}
 800797a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800797c:	bf00      	nop
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007986:	b480      	push	{r7}
 8007988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800798a:	bf00      	nop
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007998:	f003 ffde 	bl	800b958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800799c:	bf00      	nop
 800799e:	bd80      	pop	{r7, pc}

080079a0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80079a4:	2004      	movs	r0, #4
 80079a6:	f005 fa8b 	bl	800cec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80079aa:	bf00      	nop
 80079ac:	bd80      	pop	{r7, pc}

080079ae <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80079b2:	2040      	movs	r0, #64	; 0x40
 80079b4:	f005 fa84 	bl	800cec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80079b8:	2080      	movs	r0, #128	; 0x80
 80079ba:	f005 fa81 	bl	800cec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80079be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079c2:	f005 fa7d 	bl	800cec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80079c6:	bf00      	nop
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80079d0:	4803      	ldr	r0, [pc, #12]	; (80079e0 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80079d2:	f007 fc26 	bl	800f222 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80079d6:	4803      	ldr	r0, [pc, #12]	; (80079e4 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80079d8:	f007 fc23 	bl	800f222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80079dc:	bf00      	nop
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20006d44 	.word	0x20006d44
 80079e4:	20006d84 	.word	0x20006d84

080079e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80079ec:	4803      	ldr	r0, [pc, #12]	; (80079fc <TIM1_UP_TIM10_IRQHandler+0x14>)
 80079ee:	f007 fc18 	bl	800f222 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80079f2:	4803      	ldr	r0, [pc, #12]	; (8007a00 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80079f4:	f007 fc15 	bl	800f222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80079f8:	bf00      	nop
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	20006d44 	.word	0x20006d44
 8007a00:	20006af8 	.word	0x20006af8

08007a04 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a08:	4803      	ldr	r0, [pc, #12]	; (8007a18 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8007a0a:	f007 fc0a 	bl	800f222 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8007a0e:	4803      	ldr	r0, [pc, #12]	; (8007a1c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8007a10:	f007 fc07 	bl	800f222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8007a14:	bf00      	nop
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	20006d44 	.word	0x20006d44
 8007a1c:	20006c78 	.word	0x20006c78

08007a20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007a24:	4802      	ldr	r0, [pc, #8]	; (8007a30 <USART1_IRQHandler+0x10>)
 8007a26:	f008 fb85 	bl	8010134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007a2a:	bf00      	nop
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20006c38 	.word	0x20006c38

08007a34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007a38:	4802      	ldr	r0, [pc, #8]	; (8007a44 <USART2_IRQHandler+0x10>)
 8007a3a:	f008 fb7b 	bl	8010134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007a3e:	bf00      	nop
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20006e88 	.word	0x20006e88

08007a48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007a4c:	4802      	ldr	r0, [pc, #8]	; (8007a58 <USART3_IRQHandler+0x10>)
 8007a4e:	f008 fb71 	bl	8010134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007a52:	bf00      	nop
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20006a64 	.word	0x20006a64

08007a5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8007a60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007a64:	f005 fa2c 	bl	800cec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8007a68:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007a6c:	f005 fa28 	bl	800cec0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007a70:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007a74:	f005 fa24 	bl	800cec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007a78:	bf00      	nop
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007a80:	4803      	ldr	r0, [pc, #12]	; (8007a90 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8007a82:	f007 fbce 	bl	800f222 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 8007a86:	4803      	ldr	r0, [pc, #12]	; (8007a94 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 8007a88:	f007 fbcb 	bl	800f222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8007a8c:	bf00      	nop
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	20006a24 	.word	0x20006a24
 8007a94:	20006ec8 	.word	0x20006ec8

08007a98 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007a9c:	4803      	ldr	r0, [pc, #12]	; (8007aac <TIM8_UP_TIM13_IRQHandler+0x14>)
 8007a9e:	f007 fbc0 	bl	800f222 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007aa2:	4803      	ldr	r0, [pc, #12]	; (8007ab0 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007aa4:	f007 fbbd 	bl	800f222 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007aa8:	bf00      	nop
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20006a24 	.word	0x20006a24
 8007ab0:	20006bf8 	.word	0x20006bf8

08007ab4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007ab8:	4802      	ldr	r0, [pc, #8]	; (8007ac4 <DMA2_Stream0_IRQHandler+0x10>)
 8007aba:	f004 fdb3 	bl	800c624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007abe:	bf00      	nop
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20006cb8 	.word	0x20006cb8

08007ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007acc:	4b08      	ldr	r3, [pc, #32]	; (8007af0 <SystemInit+0x28>)
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad2:	4a07      	ldr	r2, [pc, #28]	; (8007af0 <SystemInit+0x28>)
 8007ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007adc:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <SystemInit+0x28>)
 8007ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8007ae4:	bf00      	nop
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	e000ed00 	.word	0xe000ed00

08007af4 <HAL_TIM_PeriodElapsedCallback>:
int oscsqrCount=0;
extern int sqrmod;
extern int dxy;
extern int stepfin;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM9) {
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a24      	ldr	r2, [pc, #144]	; (8007b94 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d102      	bne.n	8007b0c <HAL_TIM_PeriodElapsedCallback+0x18>
		Timer9();
 8007b06:	f000 f859 	bl	8007bbc <Timer9>
		x_enc[1]+=1;
	}
	else if(htim->Instance == TIM3){
		i_enc[1]+=1;
	}
}
 8007b0a:	e03f      	b.n	8007b8c <HAL_TIM_PeriodElapsedCallback+0x98>
	else if(htim->Instance == TIM10)	{
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d102      	bne.n	8007b1c <HAL_TIM_PeriodElapsedCallback+0x28>
		Timer10();
 8007b16:	f000 fe51 	bl	80087bc <Timer10>
}
 8007b1a:	e037      	b.n	8007b8c <HAL_TIM_PeriodElapsedCallback+0x98>
	else if(htim->Instance == TIM11){
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a1e      	ldr	r2, [pc, #120]	; (8007b9c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d102      	bne.n	8007b2c <HAL_TIM_PeriodElapsedCallback+0x38>
		Timer11();
 8007b26:	f001 ff7d 	bl	8009a24 <Timer11>
}
 8007b2a:	e02f      	b.n	8007b8c <HAL_TIM_PeriodElapsedCallback+0x98>
	else if(htim->Instance == TIM12)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a1b      	ldr	r2, [pc, #108]	; (8007ba0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d102      	bne.n	8007b3c <HAL_TIM_PeriodElapsedCallback+0x48>
		Timer12();
 8007b36:	f002 f81b 	bl	8009b70 <Timer12>
}
 8007b3a:	e027      	b.n	8007b8c <HAL_TIM_PeriodElapsedCallback+0x98>
	else if(htim->Instance == TIM13){
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a18      	ldr	r2, [pc, #96]	; (8007ba4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d102      	bne.n	8007b4c <HAL_TIM_PeriodElapsedCallback+0x58>
		Timer13();
 8007b46:	f002 f8d1 	bl	8009cec <Timer13>
}
 8007b4a:	e01f      	b.n	8007b8c <HAL_TIM_PeriodElapsedCallback+0x98>
	else if(htim->Instance == TIM2){
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b54:	d105      	bne.n	8007b62 <HAL_TIM_PeriodElapsedCallback+0x6e>
		y_enc[1]+=1;
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	4a12      	ldr	r2, [pc, #72]	; (8007ba8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8007b5e:	6053      	str	r3, [r2, #4]
}
 8007b60:	e014      	b.n	8007b8c <HAL_TIM_PeriodElapsedCallback+0x98>
	else if(htim->Instance == TIM8){
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a11      	ldr	r2, [pc, #68]	; (8007bac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d105      	bne.n	8007b78 <HAL_TIM_PeriodElapsedCallback+0x84>
		x_enc[1]+=1;
 8007b6c:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	3301      	adds	r3, #1
 8007b72:	4a0f      	ldr	r2, [pc, #60]	; (8007bb0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8007b74:	6053      	str	r3, [r2, #4]
}
 8007b76:	e009      	b.n	8007b8c <HAL_TIM_PeriodElapsedCallback+0x98>
	else if(htim->Instance == TIM3){
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a0d      	ldr	r2, [pc, #52]	; (8007bb4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d104      	bne.n	8007b8c <HAL_TIM_PeriodElapsedCallback+0x98>
		i_enc[1]+=1;
 8007b82:	4b0d      	ldr	r3, [pc, #52]	; (8007bb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	3301      	adds	r3, #1
 8007b88:	4a0b      	ldr	r2, [pc, #44]	; (8007bb8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8007b8a:	6053      	str	r3, [r2, #4]
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	40014000 	.word	0x40014000
 8007b98:	40014400 	.word	0x40014400
 8007b9c:	40014800 	.word	0x40014800
 8007ba0:	40001800 	.word	0x40001800
 8007ba4:	40001c00 	.word	0x40001c00
 8007ba8:	20006f60 	.word	0x20006f60
 8007bac:	40010400 	.word	0x40010400
 8007bb0:	20006f50 	.word	0x20006f50
 8007bb4:	40000400 	.word	0x40000400
 8007bb8:	20006f58 	.word	0x20006f58

08007bbc <Timer9>:

void Timer9(void){
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin) ;
	sayacmot++;
 8007bc0:	4b85      	ldr	r3, [pc, #532]	; (8007dd8 <Timer9+0x21c>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	4a84      	ldr	r2, [pc, #528]	; (8007dd8 <Timer9+0x21c>)
 8007bc8:	6013      	str	r3, [r2, #0]
	endstop=HAL_GPIO_ReadPin(ENDSTOP_INPUT_GPIO_Port, ENDSTOP_INPUT_Pin);
 8007bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007bce:	4883      	ldr	r0, [pc, #524]	; (8007ddc <Timer9+0x220>)
 8007bd0:	f005 f92a 	bl	800ce28 <HAL_GPIO_ReadPin>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	4b81      	ldr	r3, [pc, #516]	; (8007de0 <Timer9+0x224>)
 8007bda:	601a      	str	r2, [r3, #0]
	if(endstop==0&&dir==1){
 8007bdc:	4b80      	ldr	r3, [pc, #512]	; (8007de0 <Timer9+0x224>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d106      	bne.n	8007bf2 <Timer9+0x36>
 8007be4:	4b7f      	ldr	r3, [pc, #508]	; (8007de4 <Timer9+0x228>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d102      	bne.n	8007bf2 <Timer9+0x36>
		stopmot=1;
 8007bec:	4b7e      	ldr	r3, [pc, #504]	; (8007de8 <Timer9+0x22c>)
 8007bee:	2201      	movs	r2, #1
 8007bf0:	601a      	str	r2, [r3, #0]
	}
	if(extcon==1){
 8007bf2:	4b7e      	ldr	r3, [pc, #504]	; (8007dec <Timer9+0x230>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d135      	bne.n	8007c66 <Timer9+0xaa>
		if(stopmot==1){//sensdist vb. de olmalı Zmaxda dursun diye
 8007bfa:	4b7b      	ldr	r3, [pc, #492]	; (8007de8 <Timer9+0x22c>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d10f      	bne.n	8007c22 <Timer9+0x66>
			HAL_GPIO_WritePin(TMC_EN_GPIO_Port,TMC_EN_Pin,GPIO_PIN_SET);
 8007c02:	2201      	movs	r2, #1
 8007c04:	2102      	movs	r1, #2
 8007c06:	487a      	ldr	r0, [pc, #488]	; (8007df0 <Timer9+0x234>)
 8007c08:	f005 f926 	bl	800ce58 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim9);
 8007c0c:	4879      	ldr	r0, [pc, #484]	; (8007df4 <Timer9+0x238>)
 8007c0e:	f007 f9aa 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
			extcon=0;
 8007c12:	4b76      	ldr	r3, [pc, #472]	; (8007dec <Timer9+0x230>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]
			automot=0;
 8007c18:	4b77      	ldr	r3, [pc, #476]	; (8007df8 <Timer9+0x23c>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	601a      	str	r2, [r3, #0]
			}
		}

	}

}
 8007c1e:	f000 bdac 	b.w	800877a <Timer9+0xbbe>
			HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);
 8007c22:	2180      	movs	r1, #128	; 0x80
 8007c24:	4872      	ldr	r0, [pc, #456]	; (8007df0 <Timer9+0x234>)
 8007c26:	f005 f930 	bl	800ce8a <HAL_GPIO_TogglePin>
			if(HAL_GPIO_ReadPin(STEP_GPIO_Port, STEP_Pin)==1){
 8007c2a:	2180      	movs	r1, #128	; 0x80
 8007c2c:	4870      	ldr	r0, [pc, #448]	; (8007df0 <Timer9+0x234>)
 8007c2e:	f005 f8fb 	bl	800ce28 <HAL_GPIO_ReadPin>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	f040 85a0 	bne.w	800877a <Timer9+0xbbe>
				if(dir==0){
 8007c3a:	4b6a      	ldr	r3, [pc, #424]	; (8007de4 <Timer9+0x228>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d108      	bne.n	8007c54 <Timer9+0x98>
					motpos+=motgain;
 8007c42:	4b6e      	ldr	r3, [pc, #440]	; (8007dfc <Timer9+0x240>)
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	4b6e      	ldr	r3, [pc, #440]	; (8007e00 <Timer9+0x244>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	4a6b      	ldr	r2, [pc, #428]	; (8007dfc <Timer9+0x240>)
 8007c4e:	6013      	str	r3, [r2, #0]
}
 8007c50:	f000 bd93 	b.w	800877a <Timer9+0xbbe>
					motpos-=motgain;
 8007c54:	4b69      	ldr	r3, [pc, #420]	; (8007dfc <Timer9+0x240>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	4b69      	ldr	r3, [pc, #420]	; (8007e00 <Timer9+0x244>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	4a67      	ldr	r2, [pc, #412]	; (8007dfc <Timer9+0x240>)
 8007c60:	6013      	str	r3, [r2, #0]
}
 8007c62:	f000 bd8a 	b.w	800877a <Timer9+0xbbe>
		if(sqrdur==1)
 8007c66:	4b67      	ldr	r3, [pc, #412]	; (8007e04 <Timer9+0x248>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d141      	bne.n	8007cf2 <Timer9+0x136>
			datasender[0]=0;
 8007c6e:	4b66      	ldr	r3, [pc, #408]	; (8007e08 <Timer9+0x24c>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	701a      	strb	r2, [r3, #0]
			itoa(loadnow,datasender,10);
 8007c74:	4b65      	ldr	r3, [pc, #404]	; (8007e0c <Timer9+0x250>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	220a      	movs	r2, #10
 8007c7a:	4963      	ldr	r1, [pc, #396]	; (8007e08 <Timer9+0x24c>)
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f009 ff4f 	bl	8011b20 <itoa>
			strcat(datasender,"LM\0");
 8007c82:	4861      	ldr	r0, [pc, #388]	; (8007e08 <Timer9+0x24c>)
 8007c84:	f7f8 faa0 	bl	80001c8 <strlen>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4b5e      	ldr	r3, [pc, #376]	; (8007e08 <Timer9+0x24c>)
 8007c8e:	4413      	add	r3, r2
 8007c90:	4a5f      	ldr	r2, [pc, #380]	; (8007e10 <Timer9+0x254>)
 8007c92:	8811      	ldrh	r1, [r2, #0]
 8007c94:	7892      	ldrb	r2, [r2, #2]
 8007c96:	8019      	strh	r1, [r3, #0]
 8007c98:	709a      	strb	r2, [r3, #2]
			SendPc(datasender, 5, 0);
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2105      	movs	r1, #5
 8007c9e:	485a      	ldr	r0, [pc, #360]	; (8007e08 <Timer9+0x24c>)
 8007ca0:	f7fd fb10 	bl	80052c4 <SendPc>
			TimeSet(&htim9, expin[expcount].freq/20);
 8007ca4:	4b5b      	ldr	r3, [pc, #364]	; (8007e14 <Timer9+0x258>)
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	495b      	ldr	r1, [pc, #364]	; (8007e18 <Timer9+0x25c>)
 8007caa:	4613      	mov	r3, r2
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	4413      	add	r3, r2
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	440b      	add	r3, r1
 8007cb4:	3320      	adds	r3, #32
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a58      	ldr	r2, [pc, #352]	; (8007e1c <Timer9+0x260>)
 8007cba:	fb82 1203 	smull	r1, r2, r2, r3
 8007cbe:	10d2      	asrs	r2, r2, #3
 8007cc0:	17db      	asrs	r3, r3, #31
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	484b      	ldr	r0, [pc, #300]	; (8007df4 <Timer9+0x238>)
 8007cc8:	f003 faa6 	bl	800b218 <TimeSet>
			delaymic++;
 8007ccc:	4b54      	ldr	r3, [pc, #336]	; (8007e20 <Timer9+0x264>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	4a53      	ldr	r2, [pc, #332]	; (8007e20 <Timer9+0x264>)
 8007cd4:	6013      	str	r3, [r2, #0]
			if(delaymic==10){
 8007cd6:	4b52      	ldr	r3, [pc, #328]	; (8007e20 <Timer9+0x264>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b0a      	cmp	r3, #10
 8007cdc:	d105      	bne.n	8007cea <Timer9+0x12e>
				sqrdur=2;
 8007cde:	4b49      	ldr	r3, [pc, #292]	; (8007e04 <Timer9+0x248>)
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	601a      	str	r2, [r3, #0]
				delaymic=0;
 8007ce4:	4b4e      	ldr	r3, [pc, #312]	; (8007e20 <Timer9+0x264>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim9);
 8007cea:	4842      	ldr	r0, [pc, #264]	; (8007df4 <Timer9+0x238>)
 8007cec:	f007 f917 	bl	800ef1e <HAL_TIM_Base_Start_IT>
 8007cf0:	e262      	b.n	80081b8 <Timer9+0x5fc>
		else if(sqrdur==2){
 8007cf2:	4b44      	ldr	r3, [pc, #272]	; (8007e04 <Timer9+0x248>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d128      	bne.n	8007d4c <Timer9+0x190>
			datasender[0]=0;
 8007cfa:	4b43      	ldr	r3, [pc, #268]	; (8007e08 <Timer9+0x24c>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	701a      	strb	r2, [r3, #0]
			itoa(loadnow,datasender,10);
 8007d00:	4b42      	ldr	r3, [pc, #264]	; (8007e0c <Timer9+0x250>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	220a      	movs	r2, #10
 8007d06:	4940      	ldr	r1, [pc, #256]	; (8007e08 <Timer9+0x24c>)
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f009 ff09 	bl	8011b20 <itoa>
			strcat(datasender,"LM\0");
 8007d0e:	483e      	ldr	r0, [pc, #248]	; (8007e08 <Timer9+0x24c>)
 8007d10:	f7f8 fa5a 	bl	80001c8 <strlen>
 8007d14:	4603      	mov	r3, r0
 8007d16:	461a      	mov	r2, r3
 8007d18:	4b3b      	ldr	r3, [pc, #236]	; (8007e08 <Timer9+0x24c>)
 8007d1a:	4413      	add	r3, r2
 8007d1c:	4a3c      	ldr	r2, [pc, #240]	; (8007e10 <Timer9+0x254>)
 8007d1e:	8811      	ldrh	r1, [r2, #0]
 8007d20:	7892      	ldrb	r2, [r2, #2]
 8007d22:	8019      	strh	r1, [r3, #0]
 8007d24:	709a      	strb	r2, [r3, #2]
			SendPc(datasender, 5, 0);
 8007d26:	2200      	movs	r2, #0
 8007d28:	2105      	movs	r1, #5
 8007d2a:	4837      	ldr	r0, [pc, #220]	; (8007e08 <Timer9+0x24c>)
 8007d2c:	f7fd faca 	bl	80052c4 <SendPc>
			sayacmot=0;
 8007d30:	4b29      	ldr	r3, [pc, #164]	; (8007dd8 <Timer9+0x21c>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	601a      	str	r2, [r3, #0]
			TimeSet(&htim9, 50);
 8007d36:	2132      	movs	r1, #50	; 0x32
 8007d38:	482e      	ldr	r0, [pc, #184]	; (8007df4 <Timer9+0x238>)
 8007d3a:	f003 fa6d 	bl	800b218 <TimeSet>
			sqrdur=0;
 8007d3e:	4b31      	ldr	r3, [pc, #196]	; (8007e04 <Timer9+0x248>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim9);
 8007d44:	482b      	ldr	r0, [pc, #172]	; (8007df4 <Timer9+0x238>)
 8007d46:	f007 f8ea 	bl	800ef1e <HAL_TIM_Base_Start_IT>
 8007d4a:	e235      	b.n	80081b8 <Timer9+0x5fc>
		else if(sqrdur==3){
 8007d4c:	4b2d      	ldr	r3, [pc, #180]	; (8007e04 <Timer9+0x248>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d16d      	bne.n	8007e30 <Timer9+0x274>
			datasender[0]=0;
 8007d54:	4b2c      	ldr	r3, [pc, #176]	; (8007e08 <Timer9+0x24c>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	701a      	strb	r2, [r3, #0]
			itoa(loadnow,datasender,10);
 8007d5a:	4b2c      	ldr	r3, [pc, #176]	; (8007e0c <Timer9+0x250>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	220a      	movs	r2, #10
 8007d60:	4929      	ldr	r1, [pc, #164]	; (8007e08 <Timer9+0x24c>)
 8007d62:	4618      	mov	r0, r3
 8007d64:	f009 fedc 	bl	8011b20 <itoa>
			strcat(datasender,"LM\0");
 8007d68:	4827      	ldr	r0, [pc, #156]	; (8007e08 <Timer9+0x24c>)
 8007d6a:	f7f8 fa2d 	bl	80001c8 <strlen>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	461a      	mov	r2, r3
 8007d72:	4b25      	ldr	r3, [pc, #148]	; (8007e08 <Timer9+0x24c>)
 8007d74:	4413      	add	r3, r2
 8007d76:	4a26      	ldr	r2, [pc, #152]	; (8007e10 <Timer9+0x254>)
 8007d78:	8811      	ldrh	r1, [r2, #0]
 8007d7a:	7892      	ldrb	r2, [r2, #2]
 8007d7c:	8019      	strh	r1, [r3, #0]
 8007d7e:	709a      	strb	r2, [r3, #2]
			SendPc(datasender, 5, 0);
 8007d80:	2200      	movs	r2, #0
 8007d82:	2105      	movs	r1, #5
 8007d84:	4820      	ldr	r0, [pc, #128]	; (8007e08 <Timer9+0x24c>)
 8007d86:	f7fd fa9d 	bl	80052c4 <SendPc>
			calHoldCount++;
 8007d8a:	4b26      	ldr	r3, [pc, #152]	; (8007e24 <Timer9+0x268>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	4a24      	ldr	r2, [pc, #144]	; (8007e24 <Timer9+0x268>)
 8007d92:	6013      	str	r3, [r2, #0]
			if(calHoldCount>=calib.holdDur){
 8007d94:	4b24      	ldr	r3, [pc, #144]	; (8007e28 <Timer9+0x26c>)
 8007d96:	68da      	ldr	r2, [r3, #12]
 8007d98:	4b22      	ldr	r3, [pc, #136]	; (8007e24 <Timer9+0x268>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	dc14      	bgt.n	8007dca <Timer9+0x20e>
				calHoldCount=1;
 8007da0:	4b20      	ldr	r3, [pc, #128]	; (8007e24 <Timer9+0x268>)
 8007da2:	2201      	movs	r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
				sqrdur=0;
 8007da6:	4b17      	ldr	r3, [pc, #92]	; (8007e04 <Timer9+0x248>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]
				TimeSet(&htim9, caltime*1000);
 8007dac:	4b1f      	ldr	r3, [pc, #124]	; (8007e2c <Timer9+0x270>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007db4:	fb02 f303 	mul.w	r3, r2, r3
 8007db8:	4619      	mov	r1, r3
 8007dba:	480e      	ldr	r0, [pc, #56]	; (8007df4 <Timer9+0x238>)
 8007dbc:	f003 fa2c 	bl	800b218 <TimeSet>
				StepD(dir);
 8007dc0:	4b08      	ldr	r3, [pc, #32]	; (8007de4 <Timer9+0x228>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fb fb6b 	bl	80034a0 <StepD>
			sayacmot--;
 8007dca:	4b03      	ldr	r3, [pc, #12]	; (8007dd8 <Timer9+0x21c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	4a01      	ldr	r2, [pc, #4]	; (8007dd8 <Timer9+0x21c>)
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	e1f0      	b.n	80081b8 <Timer9+0x5fc>
 8007dd6:	bf00      	nop
 8007dd8:	2000032c 	.word	0x2000032c
 8007ddc:	40020800 	.word	0x40020800
 8007de0:	20000350 	.word	0x20000350
 8007de4:	20000338 	.word	0x20000338
 8007de8:	2000033c 	.word	0x2000033c
 8007dec:	20001810 	.word	0x20001810
 8007df0:	40020c00 	.word	0x40020c00
 8007df4:	20006d84 	.word	0x20006d84
 8007df8:	2000034c 	.word	0x2000034c
 8007dfc:	20000360 	.word	0x20000360
 8007e00:	20000048 	.word	0x20000048
 8007e04:	20000348 	.word	0x20000348
 8007e08:	20006bd8 	.word	0x20006bd8
 8007e0c:	20000310 	.word	0x20000310
 8007e10:	080120ac 	.word	0x080120ac
 8007e14:	2000001c 	.word	0x2000001c
 8007e18:	20004d44 	.word	0x20004d44
 8007e1c:	66666667 	.word	0x66666667
 8007e20:	20001820 	.word	0x20001820
 8007e24:	20001890 	.word	0x20001890
 8007e28:	200018fc 	.word	0x200018fc
 8007e2c:	20000014 	.word	0x20000014
			motsender[0]=0;
 8007e30:	4b75      	ldr	r3, [pc, #468]	; (8008008 <Timer9+0x44c>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
			if(stopmot==1||(sensdist==0&&app==none&&dir==0&&automot==1))
 8007e36:	4b75      	ldr	r3, [pc, #468]	; (800800c <Timer9+0x450>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d013      	beq.n	8007e66 <Timer9+0x2aa>
 8007e3e:	4b74      	ldr	r3, [pc, #464]	; (8008010 <Timer9+0x454>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f040 80c3 	bne.w	8007fce <Timer9+0x412>
 8007e48:	4b72      	ldr	r3, [pc, #456]	; (8008014 <Timer9+0x458>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f040 80be 	bne.w	8007fce <Timer9+0x412>
 8007e52:	4b71      	ldr	r3, [pc, #452]	; (8008018 <Timer9+0x45c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f040 80b9 	bne.w	8007fce <Timer9+0x412>
 8007e5c:	4b6f      	ldr	r3, [pc, #444]	; (800801c <Timer9+0x460>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	f040 80b4 	bne.w	8007fce <Timer9+0x412>
				stopmot=1;
 8007e66:	4b69      	ldr	r3, [pc, #420]	; (800800c <Timer9+0x450>)
 8007e68:	2201      	movs	r2, #1
 8007e6a:	601a      	str	r2, [r3, #0]
				upp=1;
 8007e6c:	4b6c      	ldr	r3, [pc, #432]	; (8008020 <Timer9+0x464>)
 8007e6e:	2201      	movs	r2, #1
 8007e70:	601a      	str	r2, [r3, #0]
				automot=0;
 8007e72:	4b6a      	ldr	r3, [pc, #424]	; (800801c <Timer9+0x460>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	601a      	str	r2, [r3, #0]
				joyint1=0;
 8007e78:	4b6a      	ldr	r3, [pc, #424]	; (8008024 <Timer9+0x468>)
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]
				durummot=0;
 8007e7e:	4b6a      	ldr	r3, [pc, #424]	; (8008028 <Timer9+0x46c>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]
				if(approaching||retracting==1){
 8007e84:	4b69      	ldr	r3, [pc, #420]	; (800802c <Timer9+0x470>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d103      	bne.n	8007e94 <Timer9+0x2d8>
 8007e8c:	4b68      	ldr	r3, [pc, #416]	; (8008030 <Timer9+0x474>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d104      	bne.n	8007e9e <Timer9+0x2e2>
					HAL_GPIO_WritePin(TMC_EN_GPIO_Port,TMC_EN_Pin,GPIO_PIN_SET);
 8007e94:	2201      	movs	r2, #1
 8007e96:	2102      	movs	r1, #2
 8007e98:	4866      	ldr	r0, [pc, #408]	; (8008034 <Timer9+0x478>)
 8007e9a:	f004 ffdd 	bl	800ce58 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop_IT(&htim9);
 8007e9e:	4866      	ldr	r0, [pc, #408]	; (8008038 <Timer9+0x47c>)
 8007ea0:	f007 f861 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
				if(endstop==0){
 8007ea4:	4b65      	ldr	r3, [pc, #404]	; (800803c <Timer9+0x480>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d112      	bne.n	8007ed2 <Timer9+0x316>
					motsender[0]=0;
 8007eac:	4b56      	ldr	r3, [pc, #344]	; (8008008 <Timer9+0x44c>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	701a      	strb	r2, [r3, #0]
					SendPc("UPMOT\0", 5, 2);
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	2105      	movs	r1, #5
 8007eb6:	4862      	ldr	r0, [pc, #392]	; (8008040 <Timer9+0x484>)
 8007eb8:	f7fd fa04 	bl	80052c4 <SendPc>
					motpos=0;
 8007ebc:	4b61      	ldr	r3, [pc, #388]	; (8008044 <Timer9+0x488>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	601a      	str	r2, [r3, #0]
					uart2say=1;
 8007ec2:	4b61      	ldr	r3, [pc, #388]	; (8008048 <Timer9+0x48c>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12, 100000);
 8007ec8:	4960      	ldr	r1, [pc, #384]	; (800804c <Timer9+0x490>)
 8007eca:	4861      	ldr	r0, [pc, #388]	; (8008050 <Timer9+0x494>)
 8007ecc:	f003 f9a4 	bl	800b218 <TimeSet>
 8007ed0:	e079      	b.n	8007fc6 <Timer9+0x40a>
				else if(sensdist==0&&app==none){
 8007ed2:	4b4f      	ldr	r3, [pc, #316]	; (8008010 <Timer9+0x454>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d126      	bne.n	8007f28 <Timer9+0x36c>
 8007eda:	4b4e      	ldr	r3, [pc, #312]	; (8008014 <Timer9+0x458>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d122      	bne.n	8007f28 <Timer9+0x36c>
					motsender[0]=0;
 8007ee2:	4b49      	ldr	r3, [pc, #292]	; (8008008 <Timer9+0x44c>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
					itoa(sayacmot,motsender,10);
 8007ee8:	4b5a      	ldr	r3, [pc, #360]	; (8008054 <Timer9+0x498>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	220a      	movs	r2, #10
 8007eee:	4946      	ldr	r1, [pc, #280]	; (8008008 <Timer9+0x44c>)
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f009 fe15 	bl	8011b20 <itoa>
					strcat(motsender,"CLOSe\0");
 8007ef6:	4844      	ldr	r0, [pc, #272]	; (8008008 <Timer9+0x44c>)
 8007ef8:	f7f8 f966 	bl	80001c8 <strlen>
 8007efc:	4603      	mov	r3, r0
 8007efe:	461a      	mov	r2, r3
 8007f00:	4b41      	ldr	r3, [pc, #260]	; (8008008 <Timer9+0x44c>)
 8007f02:	4413      	add	r3, r2
 8007f04:	4a54      	ldr	r2, [pc, #336]	; (8008058 <Timer9+0x49c>)
 8007f06:	6810      	ldr	r0, [r2, #0]
 8007f08:	6018      	str	r0, [r3, #0]
 8007f0a:	8892      	ldrh	r2, [r2, #4]
 8007f0c:	809a      	strh	r2, [r3, #4]
					SendPc(motsender, 5, 2);
 8007f0e:	2202      	movs	r2, #2
 8007f10:	2105      	movs	r1, #5
 8007f12:	483d      	ldr	r0, [pc, #244]	; (8008008 <Timer9+0x44c>)
 8007f14:	f7fd f9d6 	bl	80052c4 <SendPc>
					uart2say=1;
 8007f18:	4b4b      	ldr	r3, [pc, #300]	; (8008048 <Timer9+0x48c>)
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12, 100000);
 8007f1e:	494b      	ldr	r1, [pc, #300]	; (800804c <Timer9+0x490>)
 8007f20:	484b      	ldr	r0, [pc, #300]	; (8008050 <Timer9+0x494>)
 8007f22:	f003 f979 	bl	800b218 <TimeSet>
 8007f26:	e04e      	b.n	8007fc6 <Timer9+0x40a>
				else if(app==none){
 8007f28:	4b3a      	ldr	r3, [pc, #232]	; (8008014 <Timer9+0x458>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d14a      	bne.n	8007fc6 <Timer9+0x40a>
					_uartcom3->ComId=2;
 8007f30:	4b4a      	ldr	r3, [pc, #296]	; (800805c <Timer9+0x4a0>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2202      	movs	r2, #2
 8007f36:	761a      	strb	r2, [r3, #24]
					if(dir==0){
 8007f38:	4b37      	ldr	r3, [pc, #220]	; (8008018 <Timer9+0x45c>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d11b      	bne.n	8007f78 <Timer9+0x3bc>
						motsender[0]=0;
 8007f40:	4b31      	ldr	r3, [pc, #196]	; (8008008 <Timer9+0x44c>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
						itoa(sayacmot,motsender,10);
 8007f46:	4b43      	ldr	r3, [pc, #268]	; (8008054 <Timer9+0x498>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	220a      	movs	r2, #10
 8007f4c:	492e      	ldr	r1, [pc, #184]	; (8008008 <Timer9+0x44c>)
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f009 fde6 	bl	8011b20 <itoa>
						strcat(motsender,"PM\0");
 8007f54:	482c      	ldr	r0, [pc, #176]	; (8008008 <Timer9+0x44c>)
 8007f56:	f7f8 f937 	bl	80001c8 <strlen>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	4b2a      	ldr	r3, [pc, #168]	; (8008008 <Timer9+0x44c>)
 8007f60:	4413      	add	r3, r2
 8007f62:	4a3f      	ldr	r2, [pc, #252]	; (8008060 <Timer9+0x4a4>)
 8007f64:	8811      	ldrh	r1, [r2, #0]
 8007f66:	7892      	ldrb	r2, [r2, #2]
 8007f68:	8019      	strh	r1, [r3, #0]
 8007f6a:	709a      	strb	r2, [r3, #2]
						SendPc(motsender, 5, 0);
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2105      	movs	r1, #5
 8007f70:	4825      	ldr	r0, [pc, #148]	; (8008008 <Timer9+0x44c>)
 8007f72:	f7fd f9a7 	bl	80052c4 <SendPc>
 8007f76:	e01f      	b.n	8007fb8 <Timer9+0x3fc>
						sayacmot=-sayacmot;
 8007f78:	4b36      	ldr	r3, [pc, #216]	; (8008054 <Timer9+0x498>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	425b      	negs	r3, r3
 8007f7e:	4a35      	ldr	r2, [pc, #212]	; (8008054 <Timer9+0x498>)
 8007f80:	6013      	str	r3, [r2, #0]
						motsender[0]=0;
 8007f82:	4b21      	ldr	r3, [pc, #132]	; (8008008 <Timer9+0x44c>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	701a      	strb	r2, [r3, #0]
						itoa(sayacmot,motsender,10);
 8007f88:	4b32      	ldr	r3, [pc, #200]	; (8008054 <Timer9+0x498>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	220a      	movs	r2, #10
 8007f8e:	491e      	ldr	r1, [pc, #120]	; (8008008 <Timer9+0x44c>)
 8007f90:	4618      	mov	r0, r3
 8007f92:	f009 fdc5 	bl	8011b20 <itoa>
						strcat(motsender,"PM\0");
 8007f96:	481c      	ldr	r0, [pc, #112]	; (8008008 <Timer9+0x44c>)
 8007f98:	f7f8 f916 	bl	80001c8 <strlen>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	4b19      	ldr	r3, [pc, #100]	; (8008008 <Timer9+0x44c>)
 8007fa2:	4413      	add	r3, r2
 8007fa4:	4a2e      	ldr	r2, [pc, #184]	; (8008060 <Timer9+0x4a4>)
 8007fa6:	8811      	ldrh	r1, [r2, #0]
 8007fa8:	7892      	ldrb	r2, [r2, #2]
 8007faa:	8019      	strh	r1, [r3, #0]
 8007fac:	709a      	strb	r2, [r3, #2]
						SendPc(motsender, 5, 0);
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2105      	movs	r1, #5
 8007fb2:	4815      	ldr	r0, [pc, #84]	; (8008008 <Timer9+0x44c>)
 8007fb4:	f7fd f986 	bl	80052c4 <SendPc>
					uart2say=1;
 8007fb8:	4b23      	ldr	r3, [pc, #140]	; (8008048 <Timer9+0x48c>)
 8007fba:	2201      	movs	r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12, 100000);
 8007fbe:	4923      	ldr	r1, [pc, #140]	; (800804c <Timer9+0x490>)
 8007fc0:	4823      	ldr	r0, [pc, #140]	; (8008050 <Timer9+0x494>)
 8007fc2:	f003 f929 	bl	800b218 <TimeSet>
				sayacmot=0;
 8007fc6:	4b23      	ldr	r3, [pc, #140]	; (8008054 <Timer9+0x498>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	e0f4      	b.n	80081b8 <Timer9+0x5fc>
			else if(upp==0)
 8007fce:	4b14      	ldr	r3, [pc, #80]	; (8008020 <Timer9+0x464>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	f040 80f0 	bne.w	80081b8 <Timer9+0x5fc>
				HAL_GPIO_TogglePin(STEP_GPIO_Port, STEP_Pin);
 8007fd8:	2180      	movs	r1, #128	; 0x80
 8007fda:	4816      	ldr	r0, [pc, #88]	; (8008034 <Timer9+0x478>)
 8007fdc:	f004 ff55 	bl	800ce8a <HAL_GPIO_TogglePin>
				if(HAL_GPIO_ReadPin(STEP_GPIO_Port, STEP_Pin)==1){
 8007fe0:	2180      	movs	r1, #128	; 0x80
 8007fe2:	4814      	ldr	r0, [pc, #80]	; (8008034 <Timer9+0x478>)
 8007fe4:	f004 ff20 	bl	800ce28 <HAL_GPIO_ReadPin>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d143      	bne.n	8008076 <Timer9+0x4ba>
					if(dir==0){
 8007fee:	4b0a      	ldr	r3, [pc, #40]	; (8008018 <Timer9+0x45c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d138      	bne.n	8008068 <Timer9+0x4ac>
						motpos+=motgain;
 8007ff6:	4b13      	ldr	r3, [pc, #76]	; (8008044 <Timer9+0x488>)
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b1a      	ldr	r3, [pc, #104]	; (8008064 <Timer9+0x4a8>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4413      	add	r3, r2
 8008000:	4a10      	ldr	r2, [pc, #64]	; (8008044 <Timer9+0x488>)
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	e037      	b.n	8008076 <Timer9+0x4ba>
 8008006:	bf00      	nop
 8008008:	20004ce0 	.word	0x20004ce0
 800800c:	2000033c 	.word	0x2000033c
 8008010:	20000040 	.word	0x20000040
 8008014:	20006964 	.word	0x20006964
 8008018:	20000338 	.word	0x20000338
 800801c:	2000034c 	.word	0x2000034c
 8008020:	2000035c 	.word	0x2000035c
 8008024:	20001818 	.word	0x20001818
 8008028:	20000330 	.word	0x20000330
 800802c:	20001898 	.word	0x20001898
 8008030:	20000358 	.word	0x20000358
 8008034:	40020c00 	.word	0x40020c00
 8008038:	20006d84 	.word	0x20006d84
 800803c:	20000350 	.word	0x20000350
 8008040:	080120b0 	.word	0x080120b0
 8008044:	20000360 	.word	0x20000360
 8008048:	200018b0 	.word	0x200018b0
 800804c:	000186a0 	.word	0x000186a0
 8008050:	20006ec8 	.word	0x20006ec8
 8008054:	2000032c 	.word	0x2000032c
 8008058:	080120b8 	.word	0x080120b8
 800805c:	20006f30 	.word	0x20006f30
 8008060:	080120c0 	.word	0x080120c0
 8008064:	20000048 	.word	0x20000048
						motpos-=motgain;
 8008068:	4baa      	ldr	r3, [pc, #680]	; (8008314 <Timer9+0x758>)
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	4baa      	ldr	r3, [pc, #680]	; (8008318 <Timer9+0x75c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	4aa8      	ldr	r2, [pc, #672]	; (8008314 <Timer9+0x758>)
 8008074:	6013      	str	r3, [r2, #0]
				if(sayacmot %posinf==0&&stopmot==0){
 8008076:	4ba9      	ldr	r3, [pc, #676]	; (800831c <Timer9+0x760>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4aa9      	ldr	r2, [pc, #676]	; (8008320 <Timer9+0x764>)
 800807c:	6812      	ldr	r2, [r2, #0]
 800807e:	fb93 f1f2 	sdiv	r1, r3, r2
 8008082:	fb02 f201 	mul.w	r2, r2, r1
 8008086:	1a9b      	subs	r3, r3, r2
 8008088:	2b00      	cmp	r3, #0
 800808a:	f040 8095 	bne.w	80081b8 <Timer9+0x5fc>
 800808e:	4ba5      	ldr	r3, [pc, #660]	; (8008324 <Timer9+0x768>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	f040 8090 	bne.w	80081b8 <Timer9+0x5fc>
					if(automot==1||(sendexp==1&&isAutoApproach==0)||eqstep==1||(expin[expcount].osc==osc_tri&&osc==1)){//automot in trial to change with aprroaching&retracting
 8008098:	4ba3      	ldr	r3, [pc, #652]	; (8008328 <Timer9+0x76c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b01      	cmp	r3, #1
 800809e:	d01b      	beq.n	80080d8 <Timer9+0x51c>
 80080a0:	4ba2      	ldr	r3, [pc, #648]	; (800832c <Timer9+0x770>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d103      	bne.n	80080b0 <Timer9+0x4f4>
 80080a8:	4ba1      	ldr	r3, [pc, #644]	; (8008330 <Timer9+0x774>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d013      	beq.n	80080d8 <Timer9+0x51c>
 80080b0:	4ba0      	ldr	r3, [pc, #640]	; (8008334 <Timer9+0x778>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d00f      	beq.n	80080d8 <Timer9+0x51c>
 80080b8:	4b9f      	ldr	r3, [pc, #636]	; (8008338 <Timer9+0x77c>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	499f      	ldr	r1, [pc, #636]	; (800833c <Timer9+0x780>)
 80080be:	4613      	mov	r3, r2
 80080c0:	00db      	lsls	r3, r3, #3
 80080c2:	4413      	add	r3, r2
 80080c4:	00db      	lsls	r3, r3, #3
 80080c6:	440b      	add	r3, r1
 80080c8:	3318      	adds	r3, #24
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d173      	bne.n	80081b8 <Timer9+0x5fc>
 80080d0:	4b9b      	ldr	r3, [pc, #620]	; (8008340 <Timer9+0x784>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d16f      	bne.n	80081b8 <Timer9+0x5fc>
						if(dir==0){
 80080d8:	4b9a      	ldr	r3, [pc, #616]	; (8008344 <Timer9+0x788>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d135      	bne.n	800814c <Timer9+0x590>
							datasender[0]=0;
 80080e0:	4b99      	ldr	r3, [pc, #612]	; (8008348 <Timer9+0x78c>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	701a      	strb	r2, [r3, #0]
							motsender[0]=0;
 80080e6:	4b99      	ldr	r3, [pc, #612]	; (800834c <Timer9+0x790>)
 80080e8:	2200      	movs	r2, #0
 80080ea:	701a      	strb	r2, [r3, #0]
							itoa(posinf,motsender,10);
 80080ec:	4b8c      	ldr	r3, [pc, #560]	; (8008320 <Timer9+0x764>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	220a      	movs	r2, #10
 80080f2:	4996      	ldr	r1, [pc, #600]	; (800834c <Timer9+0x790>)
 80080f4:	4618      	mov	r0, r3
 80080f6:	f009 fd13 	bl	8011b20 <itoa>
							strcat(motsender,"PM\0");
 80080fa:	4894      	ldr	r0, [pc, #592]	; (800834c <Timer9+0x790>)
 80080fc:	f7f8 f864 	bl	80001c8 <strlen>
 8008100:	4603      	mov	r3, r0
 8008102:	461a      	mov	r2, r3
 8008104:	4b91      	ldr	r3, [pc, #580]	; (800834c <Timer9+0x790>)
 8008106:	4413      	add	r3, r2
 8008108:	4a91      	ldr	r2, [pc, #580]	; (8008350 <Timer9+0x794>)
 800810a:	8811      	ldrh	r1, [r2, #0]
 800810c:	7892      	ldrb	r2, [r2, #2]
 800810e:	8019      	strh	r1, [r3, #0]
 8008110:	709a      	strb	r2, [r3, #2]
							itoa(loadnow,datasender,10);
 8008112:	4b90      	ldr	r3, [pc, #576]	; (8008354 <Timer9+0x798>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	220a      	movs	r2, #10
 8008118:	498b      	ldr	r1, [pc, #556]	; (8008348 <Timer9+0x78c>)
 800811a:	4618      	mov	r0, r3
 800811c:	f009 fd00 	bl	8011b20 <itoa>
							strcat(datasender,"LM\0");
 8008120:	4889      	ldr	r0, [pc, #548]	; (8008348 <Timer9+0x78c>)
 8008122:	f7f8 f851 	bl	80001c8 <strlen>
 8008126:	4603      	mov	r3, r0
 8008128:	461a      	mov	r2, r3
 800812a:	4b87      	ldr	r3, [pc, #540]	; (8008348 <Timer9+0x78c>)
 800812c:	4413      	add	r3, r2
 800812e:	4a8a      	ldr	r2, [pc, #552]	; (8008358 <Timer9+0x79c>)
 8008130:	8811      	ldrh	r1, [r2, #0]
 8008132:	7892      	ldrb	r2, [r2, #2]
 8008134:	8019      	strh	r1, [r3, #0]
 8008136:	709a      	strb	r2, [r3, #2]
							strcat(motsender,datasender);
 8008138:	4983      	ldr	r1, [pc, #524]	; (8008348 <Timer9+0x78c>)
 800813a:	4884      	ldr	r0, [pc, #528]	; (800834c <Timer9+0x790>)
 800813c:	f009 fd05 	bl	8011b4a <strcat>
							SendPc(motsender, 5, 0);
 8008140:	2200      	movs	r2, #0
 8008142:	2105      	movs	r1, #5
 8008144:	4881      	ldr	r0, [pc, #516]	; (800834c <Timer9+0x790>)
 8008146:	f7fd f8bd 	bl	80052c4 <SendPc>
 800814a:	e035      	b.n	80081b8 <Timer9+0x5fc>
							motsender[0]=0;
 800814c:	4b7f      	ldr	r3, [pc, #508]	; (800834c <Timer9+0x790>)
 800814e:	2200      	movs	r2, #0
 8008150:	701a      	strb	r2, [r3, #0]
							datasender[0]=0;
 8008152:	4b7d      	ldr	r3, [pc, #500]	; (8008348 <Timer9+0x78c>)
 8008154:	2200      	movs	r2, #0
 8008156:	701a      	strb	r2, [r3, #0]
							itoa(-posinf,motsender,10);
 8008158:	4b71      	ldr	r3, [pc, #452]	; (8008320 <Timer9+0x764>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	425b      	negs	r3, r3
 800815e:	220a      	movs	r2, #10
 8008160:	497a      	ldr	r1, [pc, #488]	; (800834c <Timer9+0x790>)
 8008162:	4618      	mov	r0, r3
 8008164:	f009 fcdc 	bl	8011b20 <itoa>
							strcat(motsender,"PM\0");
 8008168:	4878      	ldr	r0, [pc, #480]	; (800834c <Timer9+0x790>)
 800816a:	f7f8 f82d 	bl	80001c8 <strlen>
 800816e:	4603      	mov	r3, r0
 8008170:	461a      	mov	r2, r3
 8008172:	4b76      	ldr	r3, [pc, #472]	; (800834c <Timer9+0x790>)
 8008174:	4413      	add	r3, r2
 8008176:	4a76      	ldr	r2, [pc, #472]	; (8008350 <Timer9+0x794>)
 8008178:	8811      	ldrh	r1, [r2, #0]
 800817a:	7892      	ldrb	r2, [r2, #2]
 800817c:	8019      	strh	r1, [r3, #0]
 800817e:	709a      	strb	r2, [r3, #2]
							itoa(loadnow,datasender,10);
 8008180:	4b74      	ldr	r3, [pc, #464]	; (8008354 <Timer9+0x798>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	220a      	movs	r2, #10
 8008186:	4970      	ldr	r1, [pc, #448]	; (8008348 <Timer9+0x78c>)
 8008188:	4618      	mov	r0, r3
 800818a:	f009 fcc9 	bl	8011b20 <itoa>
							strcat(datasender,"LM\0");
 800818e:	486e      	ldr	r0, [pc, #440]	; (8008348 <Timer9+0x78c>)
 8008190:	f7f8 f81a 	bl	80001c8 <strlen>
 8008194:	4603      	mov	r3, r0
 8008196:	461a      	mov	r2, r3
 8008198:	4b6b      	ldr	r3, [pc, #428]	; (8008348 <Timer9+0x78c>)
 800819a:	4413      	add	r3, r2
 800819c:	4a6e      	ldr	r2, [pc, #440]	; (8008358 <Timer9+0x79c>)
 800819e:	8811      	ldrh	r1, [r2, #0]
 80081a0:	7892      	ldrb	r2, [r2, #2]
 80081a2:	8019      	strh	r1, [r3, #0]
 80081a4:	709a      	strb	r2, [r3, #2]
							strcat(motsender,datasender);
 80081a6:	4968      	ldr	r1, [pc, #416]	; (8008348 <Timer9+0x78c>)
 80081a8:	4868      	ldr	r0, [pc, #416]	; (800834c <Timer9+0x790>)
 80081aa:	f009 fcce 	bl	8011b4a <strcat>
							SendPc(motsender, 5, 0);
 80081ae:	2200      	movs	r2, #0
 80081b0:	2105      	movs	r1, #5
 80081b2:	4866      	ldr	r0, [pc, #408]	; (800834c <Timer9+0x790>)
 80081b4:	f7fd f886 	bl	80052c4 <SendPc>
		if(sayacmot >= stepsay*2&&automot==0&&stopmot==0)
 80081b8:	4b68      	ldr	r3, [pc, #416]	; (800835c <Timer9+0x7a0>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	005a      	lsls	r2, r3, #1
 80081be:	4b57      	ldr	r3, [pc, #348]	; (800831c <Timer9+0x760>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	f300 82d9 	bgt.w	800877a <Timer9+0xbbe>
 80081c8:	4b57      	ldr	r3, [pc, #348]	; (8008328 <Timer9+0x76c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f040 82d4 	bne.w	800877a <Timer9+0xbbe>
 80081d2:	4b54      	ldr	r3, [pc, #336]	; (8008324 <Timer9+0x768>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	f040 82cf 	bne.w	800877a <Timer9+0xbbe>
			durummot=0;
 80081dc:	4b60      	ldr	r3, [pc, #384]	; (8008360 <Timer9+0x7a4>)
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
			if(retracting==1||approaching){
 80081e2:	4b60      	ldr	r3, [pc, #384]	; (8008364 <Timer9+0x7a8>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d003      	beq.n	80081f2 <Timer9+0x636>
 80081ea:	4b5f      	ldr	r3, [pc, #380]	; (8008368 <Timer9+0x7ac>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d05d      	beq.n	80082ae <Timer9+0x6f2>
				HAL_GPIO_WritePin(TMC_EN_GPIO_Port,TMC_EN_Pin,GPIO_PIN_SET);
 80081f2:	2201      	movs	r2, #1
 80081f4:	2102      	movs	r1, #2
 80081f6:	485d      	ldr	r0, [pc, #372]	; (800836c <Timer9+0x7b0>)
 80081f8:	f004 fe2e 	bl	800ce58 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop_IT(&htim9);
 80081fc:	485c      	ldr	r0, [pc, #368]	; (8008370 <Timer9+0x7b4>)
 80081fe:	f006 feb2 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
				if(approaching&&motorapp){
 8008202:	4b59      	ldr	r3, [pc, #356]	; (8008368 <Timer9+0x7ac>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d016      	beq.n	8008238 <Timer9+0x67c>
 800820a:	4b5a      	ldr	r3, [pc, #360]	; (8008374 <Timer9+0x7b8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d012      	beq.n	8008238 <Timer9+0x67c>
					isAutoApproach=5;
 8008212:	4b47      	ldr	r3, [pc, #284]	; (8008330 <Timer9+0x774>)
 8008214:	2205      	movs	r2, #5
 8008216:	701a      	strb	r2, [r3, #0]
					SendPc("Approach_Complete\0", 5, 4);
 8008218:	2204      	movs	r2, #4
 800821a:	2105      	movs	r1, #5
 800821c:	4856      	ldr	r0, [pc, #344]	; (8008378 <Timer9+0x7bc>)
 800821e:	f7fd f851 	bl	80052c4 <SendPc>
					uart2say=1;
 8008222:	4b56      	ldr	r3, [pc, #344]	; (800837c <Timer9+0x7c0>)
 8008224:	2201      	movs	r2, #1
 8008226:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12, 100000);
 8008228:	4955      	ldr	r1, [pc, #340]	; (8008380 <Timer9+0x7c4>)
 800822a:	4856      	ldr	r0, [pc, #344]	; (8008384 <Timer9+0x7c8>)
 800822c:	f002 fff4 	bl	800b218 <TimeSet>
					approaching=0;
 8008230:	4b4d      	ldr	r3, [pc, #308]	; (8008368 <Timer9+0x7ac>)
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]
 8008236:	e036      	b.n	80082a6 <Timer9+0x6ea>
				else if(!motorapp&&approaching){
 8008238:	4b4e      	ldr	r3, [pc, #312]	; (8008374 <Timer9+0x7b8>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d122      	bne.n	8008286 <Timer9+0x6ca>
 8008240:	4b49      	ldr	r3, [pc, #292]	; (8008368 <Timer9+0x7ac>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01e      	beq.n	8008286 <Timer9+0x6ca>
					motsender[0]=0;
 8008248:	4b40      	ldr	r3, [pc, #256]	; (800834c <Timer9+0x790>)
 800824a:	2200      	movs	r2, #0
 800824c:	701a      	strb	r2, [r3, #0]
					itoa(sayacmot,motsender,10);
 800824e:	4b33      	ldr	r3, [pc, #204]	; (800831c <Timer9+0x760>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	220a      	movs	r2, #10
 8008254:	493d      	ldr	r1, [pc, #244]	; (800834c <Timer9+0x790>)
 8008256:	4618      	mov	r0, r3
 8008258:	f009 fc62 	bl	8011b20 <itoa>
					strcat(motsender,"PM\0");
 800825c:	483b      	ldr	r0, [pc, #236]	; (800834c <Timer9+0x790>)
 800825e:	f7f7 ffb3 	bl	80001c8 <strlen>
 8008262:	4603      	mov	r3, r0
 8008264:	461a      	mov	r2, r3
 8008266:	4b39      	ldr	r3, [pc, #228]	; (800834c <Timer9+0x790>)
 8008268:	4413      	add	r3, r2
 800826a:	4a39      	ldr	r2, [pc, #228]	; (8008350 <Timer9+0x794>)
 800826c:	8811      	ldrh	r1, [r2, #0]
 800826e:	7892      	ldrb	r2, [r2, #2]
 8008270:	8019      	strh	r1, [r3, #0]
 8008272:	709a      	strb	r2, [r3, #2]
					SendPc(motsender, 5, 4);
 8008274:	2204      	movs	r2, #4
 8008276:	2105      	movs	r1, #5
 8008278:	4834      	ldr	r0, [pc, #208]	; (800834c <Timer9+0x790>)
 800827a:	f7fd f823 	bl	80052c4 <SendPc>
					isAutoApproach=3;
 800827e:	4b2c      	ldr	r3, [pc, #176]	; (8008330 <Timer9+0x774>)
 8008280:	2203      	movs	r2, #3
 8008282:	701a      	strb	r2, [r3, #0]
 8008284:	e00f      	b.n	80082a6 <Timer9+0x6ea>
					retracting=0;
 8008286:	4b37      	ldr	r3, [pc, #220]	; (8008364 <Timer9+0x7a8>)
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]
					thresholdApp = contact + loadnow;
 800828c:	4b3e      	ldr	r3, [pc, #248]	; (8008388 <Timer9+0x7cc>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	4b30      	ldr	r3, [pc, #192]	; (8008354 <Timer9+0x798>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4413      	add	r3, r2
 8008296:	4a3d      	ldr	r2, [pc, #244]	; (800838c <Timer9+0x7d0>)
 8008298:	6013      	str	r3, [r2, #0]
					dxy=0;
 800829a:	4b3d      	ldr	r3, [pc, #244]	; (8008390 <Timer9+0x7d4>)
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]
					isAutoApproach=1;
 80082a0:	4b23      	ldr	r3, [pc, #140]	; (8008330 <Timer9+0x774>)
 80082a2:	2201      	movs	r2, #1
 80082a4:	701a      	strb	r2, [r3, #0]
				sayacmot=0;
 80082a6:	4b1d      	ldr	r3, [pc, #116]	; (800831c <Timer9+0x760>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	e265      	b.n	800877a <Timer9+0xbbe>
			else if(sendexp==-1&&eqstep!=1)
 80082ae:	4b1f      	ldr	r3, [pc, #124]	; (800832c <Timer9+0x770>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082b6:	f040 8098 	bne.w	80083ea <Timer9+0x82e>
 80082ba:	4b1e      	ldr	r3, [pc, #120]	; (8008334 <Timer9+0x778>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	f000 8093 	beq.w	80083ea <Timer9+0x82e>
				HAL_GPIO_WritePin(TMC_EN_GPIO_Port,TMC_EN_Pin,GPIO_PIN_SET);
 80082c4:	2201      	movs	r2, #1
 80082c6:	2102      	movs	r1, #2
 80082c8:	4828      	ldr	r0, [pc, #160]	; (800836c <Timer9+0x7b0>)
 80082ca:	f004 fdc5 	bl	800ce58 <HAL_GPIO_WritePin>
				HAL_TIM_Base_Stop_IT(&htim9);
 80082ce:	4828      	ldr	r0, [pc, #160]	; (8008370 <Timer9+0x7b4>)
 80082d0:	f006 fe49 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
				if(dir==0){
 80082d4:	4b1b      	ldr	r3, [pc, #108]	; (8008344 <Timer9+0x788>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d15b      	bne.n	8008394 <Timer9+0x7d8>
					motsender[0]=0;
 80082dc:	4b1b      	ldr	r3, [pc, #108]	; (800834c <Timer9+0x790>)
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
					itoa(sayacmot,motsender,10);
 80082e2:	4b0e      	ldr	r3, [pc, #56]	; (800831c <Timer9+0x760>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	220a      	movs	r2, #10
 80082e8:	4918      	ldr	r1, [pc, #96]	; (800834c <Timer9+0x790>)
 80082ea:	4618      	mov	r0, r3
 80082ec:	f009 fc18 	bl	8011b20 <itoa>
					strcat(motsender,"PM\0");
 80082f0:	4816      	ldr	r0, [pc, #88]	; (800834c <Timer9+0x790>)
 80082f2:	f7f7 ff69 	bl	80001c8 <strlen>
 80082f6:	4603      	mov	r3, r0
 80082f8:	461a      	mov	r2, r3
 80082fa:	4b14      	ldr	r3, [pc, #80]	; (800834c <Timer9+0x790>)
 80082fc:	4413      	add	r3, r2
 80082fe:	4a14      	ldr	r2, [pc, #80]	; (8008350 <Timer9+0x794>)
 8008300:	8811      	ldrh	r1, [r2, #0]
 8008302:	7892      	ldrb	r2, [r2, #2]
 8008304:	8019      	strh	r1, [r3, #0]
 8008306:	709a      	strb	r2, [r3, #2]
					SendPc(motsender, 5, ID_FIND);
 8008308:	2202      	movs	r2, #2
 800830a:	2105      	movs	r1, #5
 800830c:	480f      	ldr	r0, [pc, #60]	; (800834c <Timer9+0x790>)
 800830e:	f7fc ffd9 	bl	80052c4 <SendPc>
 8008312:	e05f      	b.n	80083d4 <Timer9+0x818>
 8008314:	20000360 	.word	0x20000360
 8008318:	20000048 	.word	0x20000048
 800831c:	2000032c 	.word	0x2000032c
 8008320:	20000044 	.word	0x20000044
 8008324:	2000033c 	.word	0x2000033c
 8008328:	2000034c 	.word	0x2000034c
 800832c:	20000010 	.word	0x20000010
 8008330:	200002d8 	.word	0x200002d8
 8008334:	200002e4 	.word	0x200002e4
 8008338:	2000001c 	.word	0x2000001c
 800833c:	20004d44 	.word	0x20004d44
 8008340:	20000314 	.word	0x20000314
 8008344:	20000338 	.word	0x20000338
 8008348:	20006bd8 	.word	0x20006bd8
 800834c:	20004ce0 	.word	0x20004ce0
 8008350:	080120c0 	.word	0x080120c0
 8008354:	20000310 	.word	0x20000310
 8008358:	080120ac 	.word	0x080120ac
 800835c:	20000334 	.word	0x20000334
 8008360:	20000330 	.word	0x20000330
 8008364:	20000358 	.word	0x20000358
 8008368:	20001898 	.word	0x20001898
 800836c:	40020c00 	.word	0x40020c00
 8008370:	20006d84 	.word	0x20006d84
 8008374:	20000344 	.word	0x20000344
 8008378:	080120c4 	.word	0x080120c4
 800837c:	200018b0 	.word	0x200018b0
 8008380:	000186a0 	.word	0x000186a0
 8008384:	20006ec8 	.word	0x20006ec8
 8008388:	20001828 	.word	0x20001828
 800838c:	20001858 	.word	0x20001858
 8008390:	20000390 	.word	0x20000390
					sayacmot=-sayacmot;
 8008394:	4ba6      	ldr	r3, [pc, #664]	; (8008630 <Timer9+0xa74>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	425b      	negs	r3, r3
 800839a:	4aa5      	ldr	r2, [pc, #660]	; (8008630 <Timer9+0xa74>)
 800839c:	6013      	str	r3, [r2, #0]
					motsender[0]=0;
 800839e:	4ba5      	ldr	r3, [pc, #660]	; (8008634 <Timer9+0xa78>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	701a      	strb	r2, [r3, #0]
					itoa(sayacmot,motsender,10);
 80083a4:	4ba2      	ldr	r3, [pc, #648]	; (8008630 <Timer9+0xa74>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	220a      	movs	r2, #10
 80083aa:	49a2      	ldr	r1, [pc, #648]	; (8008634 <Timer9+0xa78>)
 80083ac:	4618      	mov	r0, r3
 80083ae:	f009 fbb7 	bl	8011b20 <itoa>
					strcat(motsender,"PM\0");
 80083b2:	48a0      	ldr	r0, [pc, #640]	; (8008634 <Timer9+0xa78>)
 80083b4:	f7f7 ff08 	bl	80001c8 <strlen>
 80083b8:	4603      	mov	r3, r0
 80083ba:	461a      	mov	r2, r3
 80083bc:	4b9d      	ldr	r3, [pc, #628]	; (8008634 <Timer9+0xa78>)
 80083be:	4413      	add	r3, r2
 80083c0:	4a9d      	ldr	r2, [pc, #628]	; (8008638 <Timer9+0xa7c>)
 80083c2:	8811      	ldrh	r1, [r2, #0]
 80083c4:	7892      	ldrb	r2, [r2, #2]
 80083c6:	8019      	strh	r1, [r3, #0]
 80083c8:	709a      	strb	r2, [r3, #2]
					SendPc(motsender, 5, ID_FIND);
 80083ca:	2202      	movs	r2, #2
 80083cc:	2105      	movs	r1, #5
 80083ce:	4899      	ldr	r0, [pc, #612]	; (8008634 <Timer9+0xa78>)
 80083d0:	f7fc ff78 	bl	80052c4 <SendPc>
				uart2say=1;
 80083d4:	4b99      	ldr	r3, [pc, #612]	; (800863c <Timer9+0xa80>)
 80083d6:	2201      	movs	r2, #1
 80083d8:	601a      	str	r2, [r3, #0]
				TimeSet(&htim12, 100000);
 80083da:	4999      	ldr	r1, [pc, #612]	; (8008640 <Timer9+0xa84>)
 80083dc:	4899      	ldr	r0, [pc, #612]	; (8008644 <Timer9+0xa88>)
 80083de:	f002 ff1b 	bl	800b218 <TimeSet>
				sayacmot=0;
 80083e2:	4b93      	ldr	r3, [pc, #588]	; (8008630 <Timer9+0xa74>)
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	e1c7      	b.n	800877a <Timer9+0xbbe>
			else if(sendexp==0&&osc==1)
 80083ea:	4b97      	ldr	r3, [pc, #604]	; (8008648 <Timer9+0xa8c>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f040 814e 	bne.w	8008690 <Timer9+0xad4>
 80083f4:	4b95      	ldr	r3, [pc, #596]	; (800864c <Timer9+0xa90>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	f040 8149 	bne.w	8008690 <Timer9+0xad4>
				HAL_GPIO_TogglePin(DIR_GPIO_Port, DIR_Pin);
 80083fe:	2108      	movs	r1, #8
 8008400:	4893      	ldr	r0, [pc, #588]	; (8008650 <Timer9+0xa94>)
 8008402:	f004 fd42 	bl	800ce8a <HAL_GPIO_TogglePin>
				if(expin[expcount].osc==osc_sqr)
 8008406:	4b93      	ldr	r3, [pc, #588]	; (8008654 <Timer9+0xa98>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	4993      	ldr	r1, [pc, #588]	; (8008658 <Timer9+0xa9c>)
 800840c:	4613      	mov	r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	4413      	add	r3, r2
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	440b      	add	r3, r1
 8008416:	3318      	adds	r3, #24
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b01      	cmp	r3, #1
 800841c:	f040 80b1 	bne.w	8008582 <Timer9+0x9c6>
					sqrdur=1;
 8008420:	4b8e      	ldr	r3, [pc, #568]	; (800865c <Timer9+0xaa0>)
 8008422:	2201      	movs	r2, #1
 8008424:	601a      	str	r2, [r3, #0]
					delaymic=0;
 8008426:	4b8e      	ldr	r3, [pc, #568]	; (8008660 <Timer9+0xaa4>)
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]
					if(osccount==0){
 800842c:	4b8d      	ldr	r3, [pc, #564]	; (8008664 <Timer9+0xaa8>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d105      	bne.n	8008440 <Timer9+0x884>
						stepsay=2*stepsay;
 8008434:	4b8c      	ldr	r3, [pc, #560]	; (8008668 <Timer9+0xaac>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	4a8b      	ldr	r2, [pc, #556]	; (8008668 <Timer9+0xaac>)
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	e00f      	b.n	8008460 <Timer9+0x8a4>
					else if(osccount==numosc*2-1){
 8008440:	4b8a      	ldr	r3, [pc, #552]	; (800866c <Timer9+0xab0>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	1e5a      	subs	r2, r3, #1
 8008448:	4b86      	ldr	r3, [pc, #536]	; (8008664 <Timer9+0xaa8>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d107      	bne.n	8008460 <Timer9+0x8a4>
						stepsay=stepsay/2;
 8008450:	4b85      	ldr	r3, [pc, #532]	; (8008668 <Timer9+0xaac>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	0fda      	lsrs	r2, r3, #31
 8008456:	4413      	add	r3, r2
 8008458:	105b      	asrs	r3, r3, #1
 800845a:	461a      	mov	r2, r3
 800845c:	4b82      	ldr	r3, [pc, #520]	; (8008668 <Timer9+0xaac>)
 800845e:	601a      	str	r2, [r3, #0]
					TimeSet(&htim9,expin[expcount].freq/2);
 8008460:	4b7c      	ldr	r3, [pc, #496]	; (8008654 <Timer9+0xa98>)
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	497c      	ldr	r1, [pc, #496]	; (8008658 <Timer9+0xa9c>)
 8008466:	4613      	mov	r3, r2
 8008468:	00db      	lsls	r3, r3, #3
 800846a:	4413      	add	r3, r2
 800846c:	00db      	lsls	r3, r3, #3
 800846e:	440b      	add	r3, r1
 8008470:	3320      	adds	r3, #32
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	0fda      	lsrs	r2, r3, #31
 8008476:	4413      	add	r3, r2
 8008478:	105b      	asrs	r3, r3, #1
 800847a:	4619      	mov	r1, r3
 800847c:	487c      	ldr	r0, [pc, #496]	; (8008670 <Timer9+0xab4>)
 800847e:	f002 fecb 	bl	800b218 <TimeSet>
					HAL_TIM_Base_Start_IT(&htim9);
 8008482:	487b      	ldr	r0, [pc, #492]	; (8008670 <Timer9+0xab4>)
 8008484:	f006 fd4b 	bl	800ef1e <HAL_TIM_Base_Start_IT>
					osccount++;
 8008488:	4b76      	ldr	r3, [pc, #472]	; (8008664 <Timer9+0xaa8>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3301      	adds	r3, #1
 800848e:	4a75      	ldr	r2, [pc, #468]	; (8008664 <Timer9+0xaa8>)
 8008490:	6013      	str	r3, [r2, #0]
					if(dir==0){
 8008492:	4b78      	ldr	r3, [pc, #480]	; (8008674 <Timer9+0xab8>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d135      	bne.n	8008506 <Timer9+0x94a>
						datasender[0]=0;
 800849a:	4b77      	ldr	r3, [pc, #476]	; (8008678 <Timer9+0xabc>)
 800849c:	2200      	movs	r2, #0
 800849e:	701a      	strb	r2, [r3, #0]
						motsender[0]=0;
 80084a0:	4b64      	ldr	r3, [pc, #400]	; (8008634 <Timer9+0xa78>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	701a      	strb	r2, [r3, #0]
						itoa(sayacmot,motsender,10);
 80084a6:	4b62      	ldr	r3, [pc, #392]	; (8008630 <Timer9+0xa74>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	220a      	movs	r2, #10
 80084ac:	4961      	ldr	r1, [pc, #388]	; (8008634 <Timer9+0xa78>)
 80084ae:	4618      	mov	r0, r3
 80084b0:	f009 fb36 	bl	8011b20 <itoa>
						strcat(motsender,"PM\0");
 80084b4:	485f      	ldr	r0, [pc, #380]	; (8008634 <Timer9+0xa78>)
 80084b6:	f7f7 fe87 	bl	80001c8 <strlen>
 80084ba:	4603      	mov	r3, r0
 80084bc:	461a      	mov	r2, r3
 80084be:	4b5d      	ldr	r3, [pc, #372]	; (8008634 <Timer9+0xa78>)
 80084c0:	4413      	add	r3, r2
 80084c2:	4a5d      	ldr	r2, [pc, #372]	; (8008638 <Timer9+0xa7c>)
 80084c4:	8811      	ldrh	r1, [r2, #0]
 80084c6:	7892      	ldrb	r2, [r2, #2]
 80084c8:	8019      	strh	r1, [r3, #0]
 80084ca:	709a      	strb	r2, [r3, #2]
						itoa(loadnow,datasender,10);
 80084cc:	4b6b      	ldr	r3, [pc, #428]	; (800867c <Timer9+0xac0>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	220a      	movs	r2, #10
 80084d2:	4969      	ldr	r1, [pc, #420]	; (8008678 <Timer9+0xabc>)
 80084d4:	4618      	mov	r0, r3
 80084d6:	f009 fb23 	bl	8011b20 <itoa>
						strcat(datasender,"LM\0");
 80084da:	4867      	ldr	r0, [pc, #412]	; (8008678 <Timer9+0xabc>)
 80084dc:	f7f7 fe74 	bl	80001c8 <strlen>
 80084e0:	4603      	mov	r3, r0
 80084e2:	461a      	mov	r2, r3
 80084e4:	4b64      	ldr	r3, [pc, #400]	; (8008678 <Timer9+0xabc>)
 80084e6:	4413      	add	r3, r2
 80084e8:	4a65      	ldr	r2, [pc, #404]	; (8008680 <Timer9+0xac4>)
 80084ea:	8811      	ldrh	r1, [r2, #0]
 80084ec:	7892      	ldrb	r2, [r2, #2]
 80084ee:	8019      	strh	r1, [r3, #0]
 80084f0:	709a      	strb	r2, [r3, #2]
						strcat(motsender,datasender);
 80084f2:	4961      	ldr	r1, [pc, #388]	; (8008678 <Timer9+0xabc>)
 80084f4:	484f      	ldr	r0, [pc, #316]	; (8008634 <Timer9+0xa78>)
 80084f6:	f009 fb28 	bl	8011b4a <strcat>
						SendPc(motsender, 5, 0);
 80084fa:	2200      	movs	r2, #0
 80084fc:	2105      	movs	r1, #5
 80084fe:	484d      	ldr	r0, [pc, #308]	; (8008634 <Timer9+0xa78>)
 8008500:	f7fc fee0 	bl	80052c4 <SendPc>
 8008504:	e039      	b.n	800857a <Timer9+0x9be>
						sayacmot=-sayacmot;
 8008506:	4b4a      	ldr	r3, [pc, #296]	; (8008630 <Timer9+0xa74>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	425b      	negs	r3, r3
 800850c:	4a48      	ldr	r2, [pc, #288]	; (8008630 <Timer9+0xa74>)
 800850e:	6013      	str	r3, [r2, #0]
						motsender[0]=0;
 8008510:	4b48      	ldr	r3, [pc, #288]	; (8008634 <Timer9+0xa78>)
 8008512:	2200      	movs	r2, #0
 8008514:	701a      	strb	r2, [r3, #0]
						datasender[0]=0;
 8008516:	4b58      	ldr	r3, [pc, #352]	; (8008678 <Timer9+0xabc>)
 8008518:	2200      	movs	r2, #0
 800851a:	701a      	strb	r2, [r3, #0]
						itoa(sayacmot,motsender,10);
 800851c:	4b44      	ldr	r3, [pc, #272]	; (8008630 <Timer9+0xa74>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	220a      	movs	r2, #10
 8008522:	4944      	ldr	r1, [pc, #272]	; (8008634 <Timer9+0xa78>)
 8008524:	4618      	mov	r0, r3
 8008526:	f009 fafb 	bl	8011b20 <itoa>
						strcat(motsender,"PM\0");
 800852a:	4842      	ldr	r0, [pc, #264]	; (8008634 <Timer9+0xa78>)
 800852c:	f7f7 fe4c 	bl	80001c8 <strlen>
 8008530:	4603      	mov	r3, r0
 8008532:	461a      	mov	r2, r3
 8008534:	4b3f      	ldr	r3, [pc, #252]	; (8008634 <Timer9+0xa78>)
 8008536:	4413      	add	r3, r2
 8008538:	4a3f      	ldr	r2, [pc, #252]	; (8008638 <Timer9+0xa7c>)
 800853a:	8811      	ldrh	r1, [r2, #0]
 800853c:	7892      	ldrb	r2, [r2, #2]
 800853e:	8019      	strh	r1, [r3, #0]
 8008540:	709a      	strb	r2, [r3, #2]
						itoa(loadnow,datasender,10);
 8008542:	4b4e      	ldr	r3, [pc, #312]	; (800867c <Timer9+0xac0>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	220a      	movs	r2, #10
 8008548:	494b      	ldr	r1, [pc, #300]	; (8008678 <Timer9+0xabc>)
 800854a:	4618      	mov	r0, r3
 800854c:	f009 fae8 	bl	8011b20 <itoa>
						strcat(datasender,"LM\0");
 8008550:	4849      	ldr	r0, [pc, #292]	; (8008678 <Timer9+0xabc>)
 8008552:	f7f7 fe39 	bl	80001c8 <strlen>
 8008556:	4603      	mov	r3, r0
 8008558:	461a      	mov	r2, r3
 800855a:	4b47      	ldr	r3, [pc, #284]	; (8008678 <Timer9+0xabc>)
 800855c:	4413      	add	r3, r2
 800855e:	4a48      	ldr	r2, [pc, #288]	; (8008680 <Timer9+0xac4>)
 8008560:	8811      	ldrh	r1, [r2, #0]
 8008562:	7892      	ldrb	r2, [r2, #2]
 8008564:	8019      	strh	r1, [r3, #0]
 8008566:	709a      	strb	r2, [r3, #2]
						strcat(motsender,datasender);
 8008568:	4943      	ldr	r1, [pc, #268]	; (8008678 <Timer9+0xabc>)
 800856a:	4832      	ldr	r0, [pc, #200]	; (8008634 <Timer9+0xa78>)
 800856c:	f009 faed 	bl	8011b4a <strcat>
						SendPc(motsender, 5, 0);
 8008570:	2200      	movs	r2, #0
 8008572:	2105      	movs	r1, #5
 8008574:	482f      	ldr	r0, [pc, #188]	; (8008634 <Timer9+0xa78>)
 8008576:	f7fc fea5 	bl	80052c4 <SendPc>
					sayacmot=0;
 800857a:	4b2d      	ldr	r3, [pc, #180]	; (8008630 <Timer9+0xa74>)
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]
 8008580:	e021      	b.n	80085c6 <Timer9+0xa0a>
					if(osccount==0){
 8008582:	4b38      	ldr	r3, [pc, #224]	; (8008664 <Timer9+0xaa8>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d105      	bne.n	8008596 <Timer9+0x9da>
						stepsay=2*stepsay;
 800858a:	4b37      	ldr	r3, [pc, #220]	; (8008668 <Timer9+0xaac>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	4a35      	ldr	r2, [pc, #212]	; (8008668 <Timer9+0xaac>)
 8008592:	6013      	str	r3, [r2, #0]
 8008594:	e00f      	b.n	80085b6 <Timer9+0x9fa>
					else if(osccount==numosc*2-1){
 8008596:	4b35      	ldr	r3, [pc, #212]	; (800866c <Timer9+0xab0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	1e5a      	subs	r2, r3, #1
 800859e:	4b31      	ldr	r3, [pc, #196]	; (8008664 <Timer9+0xaa8>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d107      	bne.n	80085b6 <Timer9+0x9fa>
						stepsay=stepsay/2;
 80085a6:	4b30      	ldr	r3, [pc, #192]	; (8008668 <Timer9+0xaac>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	0fda      	lsrs	r2, r3, #31
 80085ac:	4413      	add	r3, r2
 80085ae:	105b      	asrs	r3, r3, #1
 80085b0:	461a      	mov	r2, r3
 80085b2:	4b2d      	ldr	r3, [pc, #180]	; (8008668 <Timer9+0xaac>)
 80085b4:	601a      	str	r2, [r3, #0]
					osccount++;
 80085b6:	4b2b      	ldr	r3, [pc, #172]	; (8008664 <Timer9+0xaa8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3301      	adds	r3, #1
 80085bc:	4a29      	ldr	r2, [pc, #164]	; (8008664 <Timer9+0xaa8>)
 80085be:	6013      	str	r3, [r2, #0]
					sayacmot=0;
 80085c0:	4b1b      	ldr	r3, [pc, #108]	; (8008630 <Timer9+0xa74>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]
				if(osccount==numosc*2||numosc==0)
 80085c6:	4b29      	ldr	r3, [pc, #164]	; (800866c <Timer9+0xab0>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	005a      	lsls	r2, r3, #1
 80085cc:	4b25      	ldr	r3, [pc, #148]	; (8008664 <Timer9+0xaa8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d003      	beq.n	80085dc <Timer9+0xa20>
 80085d4:	4b25      	ldr	r3, [pc, #148]	; (800866c <Timer9+0xab0>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d11f      	bne.n	800861c <Timer9+0xa60>
					sayacmot=0;
 80085dc:	4b14      	ldr	r3, [pc, #80]	; (8008630 <Timer9+0xa74>)
 80085de:	2200      	movs	r2, #0
 80085e0:	601a      	str	r2, [r3, #0]
					HAL_GPIO_WritePin(TMC_EN_GPIO_Port,TMC_EN_Pin,GPIO_PIN_SET);
 80085e2:	2201      	movs	r2, #1
 80085e4:	2102      	movs	r1, #2
 80085e6:	481a      	ldr	r0, [pc, #104]	; (8008650 <Timer9+0xa94>)
 80085e8:	f004 fc36 	bl	800ce58 <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim9);
 80085ec:	4820      	ldr	r0, [pc, #128]	; (8008670 <Timer9+0xab4>)
 80085ee:	f006 fcba 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
					osc=0;
 80085f2:	4b16      	ldr	r3, [pc, #88]	; (800864c <Timer9+0xa90>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
					oscpass=2;
 80085f8:	4b22      	ldr	r3, [pc, #136]	; (8008684 <Timer9+0xac8>)
 80085fa:	2202      	movs	r2, #2
 80085fc:	601a      	str	r2, [r3, #0]
					stepfin=0;
 80085fe:	4b22      	ldr	r3, [pc, #136]	; (8008688 <Timer9+0xacc>)
 8008600:	2200      	movs	r2, #0
 8008602:	601a      	str	r2, [r3, #0]
					osccount=0;
 8008604:	4b17      	ldr	r3, [pc, #92]	; (8008664 <Timer9+0xaa8>)
 8008606:	2200      	movs	r2, #0
 8008608:	601a      	str	r2, [r3, #0]
					sqrdur=0;
 800860a:	4b14      	ldr	r3, [pc, #80]	; (800865c <Timer9+0xaa0>)
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
					sendexp=1;
 8008610:	4b0d      	ldr	r3, [pc, #52]	; (8008648 <Timer9+0xa8c>)
 8008612:	2201      	movs	r2, #1
 8008614:	601a      	str	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim10);
 8008616:	481d      	ldr	r0, [pc, #116]	; (800868c <Timer9+0xad0>)
 8008618:	f006 fc81 	bl	800ef1e <HAL_TIM_Base_Start_IT>
				dir=HAL_GPIO_ReadPin(DIR_GPIO_Port, DIR_Pin);
 800861c:	2108      	movs	r1, #8
 800861e:	480c      	ldr	r0, [pc, #48]	; (8008650 <Timer9+0xa94>)
 8008620:	f004 fc02 	bl	800ce28 <HAL_GPIO_ReadPin>
 8008624:	4603      	mov	r3, r0
 8008626:	461a      	mov	r2, r3
 8008628:	4b12      	ldr	r3, [pc, #72]	; (8008674 <Timer9+0xab8>)
 800862a:	601a      	str	r2, [r3, #0]
 800862c:	e0a5      	b.n	800877a <Timer9+0xbbe>
 800862e:	bf00      	nop
 8008630:	2000032c 	.word	0x2000032c
 8008634:	20004ce0 	.word	0x20004ce0
 8008638:	080120c0 	.word	0x080120c0
 800863c:	200018b0 	.word	0x200018b0
 8008640:	000186a0 	.word	0x000186a0
 8008644:	20006ec8 	.word	0x20006ec8
 8008648:	20000010 	.word	0x20000010
 800864c:	20000314 	.word	0x20000314
 8008650:	40020c00 	.word	0x40020c00
 8008654:	2000001c 	.word	0x2000001c
 8008658:	20004d44 	.word	0x20004d44
 800865c:	20000348 	.word	0x20000348
 8008660:	20001820 	.word	0x20001820
 8008664:	2000031c 	.word	0x2000031c
 8008668:	20000334 	.word	0x20000334
 800866c:	20000318 	.word	0x20000318
 8008670:	20006d84 	.word	0x20006d84
 8008674:	20000338 	.word	0x20000338
 8008678:	20006bd8 	.word	0x20006bd8
 800867c:	20000310 	.word	0x20000310
 8008680:	080120ac 	.word	0x080120ac
 8008684:	20000320 	.word	0x20000320
 8008688:	20001868 	.word	0x20001868
 800868c:	20006af8 	.word	0x20006af8
			else if(sendexp==1||eqstep==1)
 8008690:	4b3b      	ldr	r3, [pc, #236]	; (8008780 <Timer9+0xbc4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d003      	beq.n	80086a0 <Timer9+0xae4>
 8008698:	4b3a      	ldr	r3, [pc, #232]	; (8008784 <Timer9+0xbc8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d16c      	bne.n	800877a <Timer9+0xbbe>
				sayacmot=0;
 80086a0:	4b39      	ldr	r3, [pc, #228]	; (8008788 <Timer9+0xbcc>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]
				if(returncheck!=0)
 80086a6:	4b39      	ldr	r3, [pc, #228]	; (800878c <Timer9+0xbd0>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d04a      	beq.n	8008744 <Timer9+0xb88>
					if(calHoldCount==0){
 80086ae:	4b38      	ldr	r3, [pc, #224]	; (8008790 <Timer9+0xbd4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d12f      	bne.n	8008716 <Timer9+0xb5a>
						stepsay=calib.depth;
 80086b6:	4b37      	ldr	r3, [pc, #220]	; (8008794 <Timer9+0xbd8>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a37      	ldr	r2, [pc, #220]	; (8008798 <Timer9+0xbdc>)
 80086bc:	6013      	str	r3, [r2, #0]
						if(calib.holdDur!=0){
 80086be:	4b35      	ldr	r3, [pc, #212]	; (8008794 <Timer9+0xbd8>)
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d008      	beq.n	80086d8 <Timer9+0xb1c>
							TimeSet(&htim9, 1000);
 80086c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80086ca:	4834      	ldr	r0, [pc, #208]	; (800879c <Timer9+0xbe0>)
 80086cc:	f002 fda4 	bl	800b218 <TimeSet>
							sqrdur=3;
 80086d0:	4b33      	ldr	r3, [pc, #204]	; (80087a0 <Timer9+0xbe4>)
 80086d2:	2203      	movs	r2, #3
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	e002      	b.n	80086de <Timer9+0xb22>
							returncheck=0;
 80086d8:	4b2c      	ldr	r3, [pc, #176]	; (800878c <Timer9+0xbd0>)
 80086da:	2200      	movs	r2, #0
 80086dc:	601a      	str	r2, [r3, #0]
						if(firstdir==1){
 80086de:	4b31      	ldr	r3, [pc, #196]	; (80087a4 <Timer9+0xbe8>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d10b      	bne.n	80086fe <Timer9+0xb42>
							HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin,GPIO_PIN_SET);
 80086e6:	2201      	movs	r2, #1
 80086e8:	2108      	movs	r1, #8
 80086ea:	482f      	ldr	r0, [pc, #188]	; (80087a8 <Timer9+0xbec>)
 80086ec:	f004 fbb4 	bl	800ce58 <HAL_GPIO_WritePin>
							dir=0;
 80086f0:	4b2e      	ldr	r3, [pc, #184]	; (80087ac <Timer9+0xbf0>)
 80086f2:	2200      	movs	r2, #0
 80086f4:	601a      	str	r2, [r3, #0]
							StepD(0);
 80086f6:	2000      	movs	r0, #0
 80086f8:	f7fa fed2 	bl	80034a0 <StepD>
 80086fc:	e039      	b.n	8008772 <Timer9+0xbb6>
							HAL_GPIO_WritePin(DIR_GPIO_Port,DIR_Pin,GPIO_PIN_RESET);
 80086fe:	2200      	movs	r2, #0
 8008700:	2108      	movs	r1, #8
 8008702:	4829      	ldr	r0, [pc, #164]	; (80087a8 <Timer9+0xbec>)
 8008704:	f004 fba8 	bl	800ce58 <HAL_GPIO_WritePin>
							dir=1;
 8008708:	4b28      	ldr	r3, [pc, #160]	; (80087ac <Timer9+0xbf0>)
 800870a:	2201      	movs	r2, #1
 800870c:	601a      	str	r2, [r3, #0]
							StepD(1);
 800870e:	2001      	movs	r0, #1
 8008710:	f7fa fec6 	bl	80034a0 <StepD>
 8008714:	e02d      	b.n	8008772 <Timer9+0xbb6>
						calHoldCount=0;
 8008716:	4b1e      	ldr	r3, [pc, #120]	; (8008790 <Timer9+0xbd4>)
 8008718:	2200      	movs	r2, #0
 800871a:	601a      	str	r2, [r3, #0]
						HAL_TIM_Base_Stop_IT(&htim9);
 800871c:	481f      	ldr	r0, [pc, #124]	; (800879c <Timer9+0xbe0>)
 800871e:	f006 fc22 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
						eqstep=1;
 8008722:	4b18      	ldr	r3, [pc, #96]	; (8008784 <Timer9+0xbc8>)
 8008724:	2201      	movs	r2, #1
 8008726:	601a      	str	r2, [r3, #0]
						eqstepcounter=2*stepnum;
 8008728:	4b21      	ldr	r3, [pc, #132]	; (80087b0 <Timer9+0xbf4>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	005b      	lsls	r3, r3, #1
 800872e:	4a21      	ldr	r2, [pc, #132]	; (80087b4 <Timer9+0xbf8>)
 8008730:	6013      	str	r3, [r2, #0]
						HAL_GPIO_WritePin(TMC_EN_GPIO_Port,TMC_EN_Pin,GPIO_PIN_SET);
 8008732:	2201      	movs	r2, #1
 8008734:	2102      	movs	r1, #2
 8008736:	481c      	ldr	r0, [pc, #112]	; (80087a8 <Timer9+0xbec>)
 8008738:	f004 fb8e 	bl	800ce58 <HAL_GPIO_WritePin>
						HAL_TIM_Base_Start_IT(&htim10);
 800873c:	481e      	ldr	r0, [pc, #120]	; (80087b8 <Timer9+0xbfc>)
 800873e:	f006 fbee 	bl	800ef1e <HAL_TIM_Base_Start_IT>
 8008742:	e016      	b.n	8008772 <Timer9+0xbb6>
					HAL_TIM_Base_Stop_IT(&htim9);
 8008744:	4815      	ldr	r0, [pc, #84]	; (800879c <Timer9+0xbe0>)
 8008746:	f006 fc0e 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
					if(sendexp!=1){
 800874a:	4b0d      	ldr	r3, [pc, #52]	; (8008780 <Timer9+0xbc4>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d007      	beq.n	8008762 <Timer9+0xba6>
						eqstep=1;
 8008752:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <Timer9+0xbc8>)
 8008754:	2201      	movs	r2, #1
 8008756:	601a      	str	r2, [r3, #0]
						eqstepcounter=2*stepnum;
 8008758:	4b15      	ldr	r3, [pc, #84]	; (80087b0 <Timer9+0xbf4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	4a15      	ldr	r2, [pc, #84]	; (80087b4 <Timer9+0xbf8>)
 8008760:	6013      	str	r3, [r2, #0]
					HAL_GPIO_WritePin(TMC_EN_GPIO_Port,TMC_EN_Pin,GPIO_PIN_SET);
 8008762:	2201      	movs	r2, #1
 8008764:	2102      	movs	r1, #2
 8008766:	4810      	ldr	r0, [pc, #64]	; (80087a8 <Timer9+0xbec>)
 8008768:	f004 fb76 	bl	800ce58 <HAL_GPIO_WritePin>
					HAL_TIM_Base_Start_IT(&htim10);
 800876c:	4812      	ldr	r0, [pc, #72]	; (80087b8 <Timer9+0xbfc>)
 800876e:	f006 fbd6 	bl	800ef1e <HAL_TIM_Base_Start_IT>
				firstdir=0;
 8008772:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <Timer9+0xbe8>)
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
}
 8008778:	e7ff      	b.n	800877a <Timer9+0xbbe>
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	20000010 	.word	0x20000010
 8008784:	200002e4 	.word	0x200002e4
 8008788:	2000032c 	.word	0x2000032c
 800878c:	200002ec 	.word	0x200002ec
 8008790:	20001890 	.word	0x20001890
 8008794:	200018fc 	.word	0x200018fc
 8008798:	20000334 	.word	0x20000334
 800879c:	20006d84 	.word	0x20006d84
 80087a0:	20000348 	.word	0x20000348
 80087a4:	20000304 	.word	0x20000304
 80087a8:	40020c00 	.word	0x40020c00
 80087ac:	20000338 	.word	0x20000338
 80087b0:	200002f8 	.word	0x200002f8
 80087b4:	200002fc 	.word	0x200002fc
 80087b8:	20006af8 	.word	0x20006af8

080087bc <Timer10>:

void Timer10(void){
 80087bc:	b5b0      	push	{r4, r5, r7, lr}
 80087be:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin) ;
	if(sendexp==1){//experiment start ..steps //calculated step voltages and if exist speed increments..
 80087c0:	4b8d      	ldr	r3, [pc, #564]	; (80089f8 <Timer10+0x23c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	f040 8357 	bne.w	8008e78 <Timer10+0x6bc>
		if(isAutoApproach){
 80087ca:	4b8c      	ldr	r3, [pc, #560]	; (80089fc <Timer10+0x240>)
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f041 8102 	bne.w	80099d8 <Timer10+0x121c>
			//wait for xy positioning! & autoapproach
		}
		else if(expcount<step&&oscpass==0&&holdcount==0){
 80087d4:	4b8a      	ldr	r3, [pc, #552]	; (8008a00 <Timer10+0x244>)
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	4b8a      	ldr	r3, [pc, #552]	; (8008a04 <Timer10+0x248>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	429a      	cmp	r2, r3
 80087de:	da68      	bge.n	80088b2 <Timer10+0xf6>
 80087e0:	4b89      	ldr	r3, [pc, #548]	; (8008a08 <Timer10+0x24c>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d164      	bne.n	80088b2 <Timer10+0xf6>
 80087e8:	4b88      	ldr	r3, [pc, #544]	; (8008a0c <Timer10+0x250>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d160      	bne.n	80088b2 <Timer10+0xf6>
			if(expin[expcount].tramp!=0 && expin[expcount].ttime==0){//heat before indent
 80087f0:	4b83      	ldr	r3, [pc, #524]	; (8008a00 <Timer10+0x244>)
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	4986      	ldr	r1, [pc, #536]	; (8008a10 <Timer10+0x254>)
 80087f6:	4613      	mov	r3, r2
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	4413      	add	r3, r2
 80087fc:	00db      	lsls	r3, r3, #3
 80087fe:	440b      	add	r3, r1
 8008800:	3328      	adds	r3, #40	; 0x28
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d021      	beq.n	800884c <Timer10+0x90>
 8008808:	4b7d      	ldr	r3, [pc, #500]	; (8008a00 <Timer10+0x244>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	4980      	ldr	r1, [pc, #512]	; (8008a10 <Timer10+0x254>)
 800880e:	4613      	mov	r3, r2
 8008810:	00db      	lsls	r3, r3, #3
 8008812:	4413      	add	r3, r2
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	440b      	add	r3, r1
 8008818:	333c      	adds	r3, #60	; 0x3c
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d115      	bne.n	800884c <Timer10+0x90>
				//feed internal =>set adc and temp sits..
				//feed external take Temperature and set duty
				setHeater(sampleChannel, heatDuty[sampleChannel], 0);
 8008820:	4b7c      	ldr	r3, [pc, #496]	; (8008a14 <Timer10+0x258>)
 8008822:	6818      	ldr	r0, [r3, #0]
 8008824:	4b7b      	ldr	r3, [pc, #492]	; (8008a14 <Timer10+0x258>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a7b      	ldr	r2, [pc, #492]	; (8008a18 <Timer10+0x25c>)
 800882a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800882e:	2200      	movs	r2, #0
 8008830:	4619      	mov	r1, r3
 8008832:	f7fb f9c1 	bl	8003bb8 <setHeater>
				expin[expcount].tramp=0;
 8008836:	4b72      	ldr	r3, [pc, #456]	; (8008a00 <Timer10+0x244>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	4975      	ldr	r1, [pc, #468]	; (8008a10 <Timer10+0x254>)
 800883c:	4613      	mov	r3, r2
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	4413      	add	r3, r2
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	440b      	add	r3, r1
 8008846:	3328      	adds	r3, #40	; 0x28
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]
			}
			if(expcount==0){
 800884c:	4b6c      	ldr	r3, [pc, #432]	; (8008a00 <Timer10+0x244>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d107      	bne.n	8008864 <Timer10+0xa8>
				initialPos=voltnow;
 8008854:	4b71      	ldr	r3, [pc, #452]	; (8008a1c <Timer10+0x260>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a71      	ldr	r2, [pc, #452]	; (8008a20 <Timer10+0x264>)
 800885a:	6013      	str	r3, [r2, #0]
				initialMotor=motpos;
 800885c:	4b71      	ldr	r3, [pc, #452]	; (8008a24 <Timer10+0x268>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a71      	ldr	r2, [pc, #452]	; (8008a28 <Timer10+0x26c>)
 8008862:	6013      	str	r3, [r2, #0]
			}
			Indent(expin[expcount].depth, expin[expcount].speed,expin[expcount].dir);
 8008864:	4b66      	ldr	r3, [pc, #408]	; (8008a00 <Timer10+0x244>)
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	4969      	ldr	r1, [pc, #420]	; (8008a10 <Timer10+0x254>)
 800886a:	4613      	mov	r3, r2
 800886c:	00db      	lsls	r3, r3, #3
 800886e:	4413      	add	r3, r2
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	440b      	add	r3, r1
 8008874:	330c      	adds	r3, #12
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	4b61      	ldr	r3, [pc, #388]	; (8008a00 <Timer10+0x244>)
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	4964      	ldr	r1, [pc, #400]	; (8008a10 <Timer10+0x254>)
 800887e:	4613      	mov	r3, r2
 8008880:	00db      	lsls	r3, r3, #3
 8008882:	4413      	add	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	440b      	add	r3, r1
 8008888:	3310      	adds	r3, #16
 800888a:	681c      	ldr	r4, [r3, #0]
 800888c:	4b5c      	ldr	r3, [pc, #368]	; (8008a00 <Timer10+0x244>)
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	495f      	ldr	r1, [pc, #380]	; (8008a10 <Timer10+0x254>)
 8008892:	4613      	mov	r3, r2
 8008894:	00db      	lsls	r3, r3, #3
 8008896:	4413      	add	r3, r2
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	440b      	add	r3, r1
 800889c:	3301      	adds	r3, #1
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	461a      	mov	r2, r3
 80088a2:	4621      	mov	r1, r4
 80088a4:	f7fa f8a0 	bl	80029e8 <Indent>
			holdcount=1;
 80088a8:	4b58      	ldr	r3, [pc, #352]	; (8008a0c <Timer10+0x250>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	f001 b893 	b.w	80099d8 <Timer10+0x121c>
		}
		else if(holdcount==1){
 80088b2:	4b56      	ldr	r3, [pc, #344]	; (8008a0c <Timer10+0x250>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d128      	bne.n	800890c <Timer10+0x150>
			if(expin[expcount].ttime==2){//heat after indent
 80088ba:	4b51      	ldr	r3, [pc, #324]	; (8008a00 <Timer10+0x244>)
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	4954      	ldr	r1, [pc, #336]	; (8008a10 <Timer10+0x254>)
 80088c0:	4613      	mov	r3, r2
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	4413      	add	r3, r2
 80088c6:	00db      	lsls	r3, r3, #3
 80088c8:	440b      	add	r3, r1
 80088ca:	333c      	adds	r3, #60	; 0x3c
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d10a      	bne.n	80088e8 <Timer10+0x12c>
				//feed internal =>set adc and temp sits..
				//feed external take Temperature and set duty
				setHeater(sampleChannel, heatDuty[sampleChannel], 0);
 80088d2:	4b50      	ldr	r3, [pc, #320]	; (8008a14 <Timer10+0x258>)
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	4b4f      	ldr	r3, [pc, #316]	; (8008a14 <Timer10+0x258>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a4f      	ldr	r2, [pc, #316]	; (8008a18 <Timer10+0x25c>)
 80088dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088e0:	2200      	movs	r2, #0
 80088e2:	4619      	mov	r1, r3
 80088e4:	f7fb f968 	bl	8003bb8 <setHeater>
			}
			HAL_TIM_Base_Stop_IT(&htim10);
 80088e8:	4850      	ldr	r0, [pc, #320]	; (8008a2c <Timer10+0x270>)
 80088ea:	f006 fb3c 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
			Hold(expin[expcount].hold);
 80088ee:	4b44      	ldr	r3, [pc, #272]	; (8008a00 <Timer10+0x244>)
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	4947      	ldr	r1, [pc, #284]	; (8008a10 <Timer10+0x254>)
 80088f4:	4613      	mov	r3, r2
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	4413      	add	r3, r2
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	440b      	add	r3, r1
 80088fe:	3314      	adds	r3, #20
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4618      	mov	r0, r3
 8008904:	f7fa f988 	bl	8002c18 <Hold>
		HAL_TIM_Base_Stop_IT(&htim10);
		uart2say=0;
		SendPc("TAMAMDIR", 5, 0);
	}

}
 8008908:	f001 b866 	b.w	80099d8 <Timer10+0x121c>
		else if(holdcount>1){
 800890c:	4b3f      	ldr	r3, [pc, #252]	; (8008a0c <Timer10+0x250>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	f340 80a5 	ble.w	8008a60 <Timer10+0x2a4>
			if(holdcount<=holder){
 8008916:	4b3d      	ldr	r3, [pc, #244]	; (8008a0c <Timer10+0x250>)
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	4b45      	ldr	r3, [pc, #276]	; (8008a30 <Timer10+0x274>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	429a      	cmp	r2, r3
 8008920:	dc2b      	bgt.n	800897a <Timer10+0x1be>
				holdcount++;
 8008922:	4b3a      	ldr	r3, [pc, #232]	; (8008a0c <Timer10+0x250>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3301      	adds	r3, #1
 8008928:	4a38      	ldr	r2, [pc, #224]	; (8008a0c <Timer10+0x250>)
 800892a:	6013      	str	r3, [r2, #0]
				motsender[0]=0;
 800892c:	4b41      	ldr	r3, [pc, #260]	; (8008a34 <Timer10+0x278>)
 800892e:	2200      	movs	r2, #0
 8008930:	701a      	strb	r2, [r3, #0]
				datasender[0]=0;
 8008932:	4b41      	ldr	r3, [pc, #260]	; (8008a38 <Timer10+0x27c>)
 8008934:	2200      	movs	r2, #0
 8008936:	701a      	strb	r2, [r3, #0]
				itoa(loadnow,datasender,10);
 8008938:	4b40      	ldr	r3, [pc, #256]	; (8008a3c <Timer10+0x280>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	220a      	movs	r2, #10
 800893e:	493e      	ldr	r1, [pc, #248]	; (8008a38 <Timer10+0x27c>)
 8008940:	4618      	mov	r0, r3
 8008942:	f009 f8ed 	bl	8011b20 <itoa>
				strcat(datasender,"LM\0");
 8008946:	483c      	ldr	r0, [pc, #240]	; (8008a38 <Timer10+0x27c>)
 8008948:	f7f7 fc3e 	bl	80001c8 <strlen>
 800894c:	4603      	mov	r3, r0
 800894e:	461a      	mov	r2, r3
 8008950:	4b39      	ldr	r3, [pc, #228]	; (8008a38 <Timer10+0x27c>)
 8008952:	4413      	add	r3, r2
 8008954:	4a3a      	ldr	r2, [pc, #232]	; (8008a40 <Timer10+0x284>)
 8008956:	8811      	ldrh	r1, [r2, #0]
 8008958:	7892      	ldrb	r2, [r2, #2]
 800895a:	8019      	strh	r1, [r3, #0]
 800895c:	709a      	strb	r2, [r3, #2]
				strcat(motsender,datasender);
 800895e:	4936      	ldr	r1, [pc, #216]	; (8008a38 <Timer10+0x27c>)
 8008960:	4834      	ldr	r0, [pc, #208]	; (8008a34 <Timer10+0x278>)
 8008962:	f009 f8f2 	bl	8011b4a <strcat>
				SendPc(motsender, 5, 0);
 8008966:	2200      	movs	r2, #0
 8008968:	2105      	movs	r1, #5
 800896a:	4832      	ldr	r0, [pc, #200]	; (8008a34 <Timer10+0x278>)
 800896c:	f7fc fcaa 	bl	80052c4 <SendPc>
				stepfin=0;
 8008970:	4b34      	ldr	r3, [pc, #208]	; (8008a44 <Timer10+0x288>)
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]
}
 8008976:	f001 b82f 	b.w	80099d8 <Timer10+0x121c>
				if(stepfin==0){
 800897a:	4b32      	ldr	r3, [pc, #200]	; (8008a44 <Timer10+0x288>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d129      	bne.n	80089d6 <Timer10+0x21a>
					readingpc[0]=0;
 8008982:	4b31      	ldr	r3, [pc, #196]	; (8008a48 <Timer10+0x28c>)
 8008984:	2200      	movs	r2, #0
 8008986:	701a      	strb	r2, [r3, #0]
					itoa(expcount+1,readingpc,10);
 8008988:	4b1d      	ldr	r3, [pc, #116]	; (8008a00 <Timer10+0x244>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	3301      	adds	r3, #1
 800898e:	220a      	movs	r2, #10
 8008990:	492d      	ldr	r1, [pc, #180]	; (8008a48 <Timer10+0x28c>)
 8008992:	4618      	mov	r0, r3
 8008994:	f009 f8c4 	bl	8011b20 <itoa>
					strcat(readingpc,"._Indent_Finished\0");
 8008998:	482b      	ldr	r0, [pc, #172]	; (8008a48 <Timer10+0x28c>)
 800899a:	f7f7 fc15 	bl	80001c8 <strlen>
 800899e:	4603      	mov	r3, r0
 80089a0:	461a      	mov	r2, r3
 80089a2:	4b29      	ldr	r3, [pc, #164]	; (8008a48 <Timer10+0x28c>)
 80089a4:	4413      	add	r3, r2
 80089a6:	4a29      	ldr	r2, [pc, #164]	; (8008a4c <Timer10+0x290>)
 80089a8:	461d      	mov	r5, r3
 80089aa:	4614      	mov	r4, r2
 80089ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089ae:	6028      	str	r0, [r5, #0]
 80089b0:	6069      	str	r1, [r5, #4]
 80089b2:	60aa      	str	r2, [r5, #8]
 80089b4:	60eb      	str	r3, [r5, #12]
 80089b6:	8823      	ldrh	r3, [r4, #0]
 80089b8:	822b      	strh	r3, [r5, #16]
					SendPc(readingpc, 5, 0);
 80089ba:	2200      	movs	r2, #0
 80089bc:	2105      	movs	r1, #5
 80089be:	4822      	ldr	r0, [pc, #136]	; (8008a48 <Timer10+0x28c>)
 80089c0:	f7fc fc80 	bl	80052c4 <SendPc>
					uart2say=1;
 80089c4:	4b22      	ldr	r3, [pc, #136]	; (8008a50 <Timer10+0x294>)
 80089c6:	2201      	movs	r2, #1
 80089c8:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12, 100000);
 80089ca:	4922      	ldr	r1, [pc, #136]	; (8008a54 <Timer10+0x298>)
 80089cc:	4822      	ldr	r0, [pc, #136]	; (8008a58 <Timer10+0x29c>)
 80089ce:	f002 fc23 	bl	800b218 <TimeSet>
}
 80089d2:	f001 b801 	b.w	80099d8 <Timer10+0x121c>
					sendexp=1;
 80089d6:	4b08      	ldr	r3, [pc, #32]	; (80089f8 <Timer10+0x23c>)
 80089d8:	2201      	movs	r2, #1
 80089da:	601a      	str	r2, [r3, #0]
					oscpass=1;
 80089dc:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <Timer10+0x24c>)
 80089de:	2201      	movs	r2, #1
 80089e0:	601a      	str	r2, [r3, #0]
					holdcount=0;
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <Timer10+0x250>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]
					loadIndent=0;
 80089e8:	4b1c      	ldr	r3, [pc, #112]	; (8008a5c <Timer10+0x2a0>)
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
					stepfin=0;
 80089ee:	4b15      	ldr	r3, [pc, #84]	; (8008a44 <Timer10+0x288>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
}
 80089f4:	f000 bff0 	b.w	80099d8 <Timer10+0x121c>
 80089f8:	20000010 	.word	0x20000010
 80089fc:	200002d8 	.word	0x200002d8
 8008a00:	2000001c 	.word	0x2000001c
 8008a04:	200002e8 	.word	0x200002e8
 8008a08:	20000320 	.word	0x20000320
 8008a0c:	20000324 	.word	0x20000324
 8008a10:	20004d44 	.word	0x20004d44
 8008a14:	20000394 	.word	0x20000394
 8008a18:	20001844 	.word	0x20001844
 8008a1c:	20000000 	.word	0x20000000
 8008a20:	2000004c 	.word	0x2000004c
 8008a24:	20000360 	.word	0x20000360
 8008a28:	20001894 	.word	0x20001894
 8008a2c:	20006af8 	.word	0x20006af8
 8008a30:	200002d4 	.word	0x200002d4
 8008a34:	20004ce0 	.word	0x20004ce0
 8008a38:	20006bd8 	.word	0x20006bd8
 8008a3c:	20000310 	.word	0x20000310
 8008a40:	080120ac 	.word	0x080120ac
 8008a44:	20001868 	.word	0x20001868
 8008a48:	200073f4 	.word	0x200073f4
 8008a4c:	080120d8 	.word	0x080120d8
 8008a50:	200018b0 	.word	0x200018b0
 8008a54:	000186a0 	.word	0x000186a0
 8008a58:	20006ec8 	.word	0x20006ec8
 8008a5c:	2000038c 	.word	0x2000038c
		else if(oscpass==1){
 8008a60:	4baa      	ldr	r3, [pc, #680]	; (8008d0c <Timer10+0x550>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	f040 80d6 	bne.w	8008c16 <Timer10+0x45a>
			HAL_TIM_Base_Stop_IT(&htim12);
 8008a6a:	48a9      	ldr	r0, [pc, #676]	; (8008d10 <Timer10+0x554>)
 8008a6c:	f006 fa7b 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
			uart2say=0;
 8008a70:	4ba8      	ldr	r3, [pc, #672]	; (8008d14 <Timer10+0x558>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	601a      	str	r2, [r3, #0]
			if(motorcon==1 && expin[expcount].osc!=osc_non){
 8008a76:	4ba8      	ldr	r3, [pc, #672]	; (8008d18 <Timer10+0x55c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d16c      	bne.n	8008b58 <Timer10+0x39c>
 8008a7e:	4ba7      	ldr	r3, [pc, #668]	; (8008d1c <Timer10+0x560>)
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	49a7      	ldr	r1, [pc, #668]	; (8008d20 <Timer10+0x564>)
 8008a84:	4613      	mov	r3, r2
 8008a86:	00db      	lsls	r3, r3, #3
 8008a88:	4413      	add	r3, r2
 8008a8a:	00db      	lsls	r3, r3, #3
 8008a8c:	440b      	add	r3, r1
 8008a8e:	3318      	adds	r3, #24
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d060      	beq.n	8008b58 <Timer10+0x39c>
				stepsay=expin[expcount].amp;
 8008a96:	4ba1      	ldr	r3, [pc, #644]	; (8008d1c <Timer10+0x560>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	49a1      	ldr	r1, [pc, #644]	; (8008d20 <Timer10+0x564>)
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	4413      	add	r3, r2
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	440b      	add	r3, r1
 8008aa6:	331c      	adds	r3, #28
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a9e      	ldr	r2, [pc, #632]	; (8008d24 <Timer10+0x568>)
 8008aac:	6013      	str	r3, [r2, #0]
				numosc=expin[expcount].dur;
 8008aae:	4b9b      	ldr	r3, [pc, #620]	; (8008d1c <Timer10+0x560>)
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	499b      	ldr	r1, [pc, #620]	; (8008d20 <Timer10+0x564>)
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	4413      	add	r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	440b      	add	r3, r1
 8008abe:	3324      	adds	r3, #36	; 0x24
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a99      	ldr	r2, [pc, #612]	; (8008d28 <Timer10+0x56c>)
 8008ac4:	6013      	str	r3, [r2, #0]
				if(expin[expcount].osc==osc_sqr){
 8008ac6:	4b95      	ldr	r3, [pc, #596]	; (8008d1c <Timer10+0x560>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4995      	ldr	r1, [pc, #596]	; (8008d20 <Timer10+0x564>)
 8008acc:	4613      	mov	r3, r2
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	4413      	add	r3, r2
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	440b      	add	r3, r1
 8008ad6:	3318      	adds	r3, #24
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d104      	bne.n	8008ae8 <Timer10+0x32c>
					TimeSet(&htim9, 50);
 8008ade:	2132      	movs	r1, #50	; 0x32
 8008ae0:	4892      	ldr	r0, [pc, #584]	; (8008d2c <Timer10+0x570>)
 8008ae2:	f002 fb99 	bl	800b218 <TimeSet>
 8008ae6:	e026      	b.n	8008b36 <Timer10+0x37a>
				else if(expin[expcount].osc==osc_tri){
 8008ae8:	4b8c      	ldr	r3, [pc, #560]	; (8008d1c <Timer10+0x560>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	498c      	ldr	r1, [pc, #560]	; (8008d20 <Timer10+0x564>)
 8008aee:	4613      	mov	r3, r2
 8008af0:	00db      	lsls	r3, r3, #3
 8008af2:	4413      	add	r3, r2
 8008af4:	00db      	lsls	r3, r3, #3
 8008af6:	440b      	add	r3, r1
 8008af8:	3318      	adds	r3, #24
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d11a      	bne.n	8008b36 <Timer10+0x37a>
					TimeSet(&htim9, expin[expcount].freq/(expin[expcount].amp*8));//1/2 from motor drive; 1/2 from osc
 8008b00:	4b86      	ldr	r3, [pc, #536]	; (8008d1c <Timer10+0x560>)
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	4986      	ldr	r1, [pc, #536]	; (8008d20 <Timer10+0x564>)
 8008b06:	4613      	mov	r3, r2
 8008b08:	00db      	lsls	r3, r3, #3
 8008b0a:	4413      	add	r3, r2
 8008b0c:	00db      	lsls	r3, r3, #3
 8008b0e:	440b      	add	r3, r1
 8008b10:	3320      	adds	r3, #32
 8008b12:	6819      	ldr	r1, [r3, #0]
 8008b14:	4b81      	ldr	r3, [pc, #516]	; (8008d1c <Timer10+0x560>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	4881      	ldr	r0, [pc, #516]	; (8008d20 <Timer10+0x564>)
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	00db      	lsls	r3, r3, #3
 8008b1e:	4413      	add	r3, r2
 8008b20:	00db      	lsls	r3, r3, #3
 8008b22:	4403      	add	r3, r0
 8008b24:	331c      	adds	r3, #28
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	fb91 f3f3 	sdiv	r3, r1, r3
 8008b2e:	4619      	mov	r1, r3
 8008b30:	487e      	ldr	r0, [pc, #504]	; (8008d2c <Timer10+0x570>)
 8008b32:	f002 fb71 	bl	800b218 <TimeSet>
				StepD(0);
 8008b36:	2000      	movs	r0, #0
 8008b38:	f7fa fcb2 	bl	80034a0 <StepD>
				osc=1;
 8008b3c:	4b7c      	ldr	r3, [pc, #496]	; (8008d30 <Timer10+0x574>)
 8008b3e:	2201      	movs	r2, #1
 8008b40:	601a      	str	r2, [r3, #0]
				oscpass=0;
 8008b42:	4b72      	ldr	r3, [pc, #456]	; (8008d0c <Timer10+0x550>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	601a      	str	r2, [r3, #0]
				sendexp=0;
 8008b48:	4b7a      	ldr	r3, [pc, #488]	; (8008d34 <Timer10+0x578>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim10);
 8008b4e:	487a      	ldr	r0, [pc, #488]	; (8008d38 <Timer10+0x57c>)
 8008b50:	f006 fa09 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
 8008b54:	f000 bf40 	b.w	80099d8 <Timer10+0x121c>
			else if(motorcon==0 && expin[expcount].osc!=osc_non) {
 8008b58:	4b6f      	ldr	r3, [pc, #444]	; (8008d18 <Timer10+0x55c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d142      	bne.n	8008be6 <Timer10+0x42a>
 8008b60:	4b6e      	ldr	r3, [pc, #440]	; (8008d1c <Timer10+0x560>)
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	496e      	ldr	r1, [pc, #440]	; (8008d20 <Timer10+0x564>)
 8008b66:	4613      	mov	r3, r2
 8008b68:	00db      	lsls	r3, r3, #3
 8008b6a:	4413      	add	r3, r2
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	440b      	add	r3, r1
 8008b70:	3318      	adds	r3, #24
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d036      	beq.n	8008be6 <Timer10+0x42a>
				osc=1;//osc set
 8008b78:	4b6d      	ldr	r3, [pc, #436]	; (8008d30 <Timer10+0x574>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
				Osc(expin[expcount].amp, expin[expcount].freq, expin[expcount].dur, expin[expcount].osc);
 8008b7e:	4b67      	ldr	r3, [pc, #412]	; (8008d1c <Timer10+0x560>)
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	4967      	ldr	r1, [pc, #412]	; (8008d20 <Timer10+0x564>)
 8008b84:	4613      	mov	r3, r2
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	4413      	add	r3, r2
 8008b8a:	00db      	lsls	r3, r3, #3
 8008b8c:	440b      	add	r3, r1
 8008b8e:	331c      	adds	r3, #28
 8008b90:	6818      	ldr	r0, [r3, #0]
 8008b92:	4b62      	ldr	r3, [pc, #392]	; (8008d1c <Timer10+0x560>)
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	4962      	ldr	r1, [pc, #392]	; (8008d20 <Timer10+0x564>)
 8008b98:	4613      	mov	r3, r2
 8008b9a:	00db      	lsls	r3, r3, #3
 8008b9c:	4413      	add	r3, r2
 8008b9e:	00db      	lsls	r3, r3, #3
 8008ba0:	440b      	add	r3, r1
 8008ba2:	3320      	adds	r3, #32
 8008ba4:	681c      	ldr	r4, [r3, #0]
 8008ba6:	4b5d      	ldr	r3, [pc, #372]	; (8008d1c <Timer10+0x560>)
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	495d      	ldr	r1, [pc, #372]	; (8008d20 <Timer10+0x564>)
 8008bac:	4613      	mov	r3, r2
 8008bae:	00db      	lsls	r3, r3, #3
 8008bb0:	4413      	add	r3, r2
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	440b      	add	r3, r1
 8008bb6:	3324      	adds	r3, #36	; 0x24
 8008bb8:	681d      	ldr	r5, [r3, #0]
 8008bba:	4b58      	ldr	r3, [pc, #352]	; (8008d1c <Timer10+0x560>)
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	4958      	ldr	r1, [pc, #352]	; (8008d20 <Timer10+0x564>)
 8008bc0:	4613      	mov	r3, r2
 8008bc2:	00db      	lsls	r3, r3, #3
 8008bc4:	4413      	add	r3, r2
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	440b      	add	r3, r1
 8008bca:	3318      	adds	r3, #24
 8008bcc:	781b      	ldrb	r3, [r3, #0]
 8008bce:	462a      	mov	r2, r5
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	f7fa fab9 	bl	8003148 <Osc>
				sendexp=0;
 8008bd6:	4b57      	ldr	r3, [pc, #348]	; (8008d34 <Timer10+0x578>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]
				oscpass=0;
 8008bdc:	4b4b      	ldr	r3, [pc, #300]	; (8008d0c <Timer10+0x550>)
 8008bde:	2200      	movs	r2, #0
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	f000 bef9 	b.w	80099d8 <Timer10+0x121c>
			else if(expin[expcount].osc==0){
 8008be6:	4b4d      	ldr	r3, [pc, #308]	; (8008d1c <Timer10+0x560>)
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	494d      	ldr	r1, [pc, #308]	; (8008d20 <Timer10+0x564>)
 8008bec:	4613      	mov	r3, r2
 8008bee:	00db      	lsls	r3, r3, #3
 8008bf0:	4413      	add	r3, r2
 8008bf2:	00db      	lsls	r3, r3, #3
 8008bf4:	440b      	add	r3, r1
 8008bf6:	3318      	adds	r3, #24
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	f040 86ec 	bne.w	80099d8 <Timer10+0x121c>
				oscpass=2;
 8008c00:	4b42      	ldr	r3, [pc, #264]	; (8008d0c <Timer10+0x550>)
 8008c02:	2202      	movs	r2, #2
 8008c04:	601a      	str	r2, [r3, #0]
				sendexp=1;
 8008c06:	4b4b      	ldr	r3, [pc, #300]	; (8008d34 <Timer10+0x578>)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]
				stepfin=0;
 8008c0c:	4b4b      	ldr	r3, [pc, #300]	; (8008d3c <Timer10+0x580>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
}
 8008c12:	f000 bee1 	b.w	80099d8 <Timer10+0x121c>
		else if(oscpass==2){
 8008c16:	4b3d      	ldr	r3, [pc, #244]	; (8008d0c <Timer10+0x550>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	f040 80fc 	bne.w	8008e18 <Timer10+0x65c>
			if(stepfin==0){
 8008c20:	4b46      	ldr	r3, [pc, #280]	; (8008d3c <Timer10+0x580>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d126      	bne.n	8008c76 <Timer10+0x4ba>
				readingpc[0]=0;
 8008c28:	4b45      	ldr	r3, [pc, #276]	; (8008d40 <Timer10+0x584>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	701a      	strb	r2, [r3, #0]
				itoa(expcount+1,readingpc,10);
 8008c2e:	4b3b      	ldr	r3, [pc, #236]	; (8008d1c <Timer10+0x560>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3301      	adds	r3, #1
 8008c34:	220a      	movs	r2, #10
 8008c36:	4942      	ldr	r1, [pc, #264]	; (8008d40 <Timer10+0x584>)
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f008 ff71 	bl	8011b20 <itoa>
				strcat(readingpc,"._Oscillation_Finished\0");
 8008c3e:	4840      	ldr	r0, [pc, #256]	; (8008d40 <Timer10+0x584>)
 8008c40:	f7f7 fac2 	bl	80001c8 <strlen>
 8008c44:	4603      	mov	r3, r0
 8008c46:	461a      	mov	r2, r3
 8008c48:	4b3d      	ldr	r3, [pc, #244]	; (8008d40 <Timer10+0x584>)
 8008c4a:	4413      	add	r3, r2
 8008c4c:	4a3d      	ldr	r2, [pc, #244]	; (8008d44 <Timer10+0x588>)
 8008c4e:	461c      	mov	r4, r3
 8008c50:	4615      	mov	r5, r2
 8008c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c54:	6020      	str	r0, [r4, #0]
 8008c56:	6061      	str	r1, [r4, #4]
 8008c58:	60a2      	str	r2, [r4, #8]
 8008c5a:	60e3      	str	r3, [r4, #12]
 8008c5c:	6828      	ldr	r0, [r5, #0]
 8008c5e:	6120      	str	r0, [r4, #16]
 8008c60:	88ab      	ldrh	r3, [r5, #4]
 8008c62:	79aa      	ldrb	r2, [r5, #6]
 8008c64:	82a3      	strh	r3, [r4, #20]
 8008c66:	4613      	mov	r3, r2
 8008c68:	75a3      	strb	r3, [r4, #22]
				SendPc(readingpc, 5, 0);
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2105      	movs	r1, #5
 8008c6e:	4834      	ldr	r0, [pc, #208]	; (8008d40 <Timer10+0x584>)
 8008c70:	f7fc fb28 	bl	80052c4 <SendPc>
 8008c74:	e0c7      	b.n	8008e06 <Timer10+0x64a>
			else if(expcount+1<step && stepfin==1){
 8008c76:	4b29      	ldr	r3, [pc, #164]	; (8008d1c <Timer10+0x560>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	1c5a      	adds	r2, r3, #1
 8008c7c:	4b32      	ldr	r3, [pc, #200]	; (8008d48 <Timer10+0x58c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	f280 8089 	bge.w	8008d98 <Timer10+0x5dc>
 8008c86:	4b2d      	ldr	r3, [pc, #180]	; (8008d3c <Timer10+0x580>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	f040 8084 	bne.w	8008d98 <Timer10+0x5dc>
				oscpass=0;
 8008c90:	4b1e      	ldr	r3, [pc, #120]	; (8008d0c <Timer10+0x550>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
				stepfin=0;
 8008c96:	4b29      	ldr	r3, [pc, #164]	; (8008d3c <Timer10+0x580>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]
				if(expin[expcount].stepret || (expin[expcount+1].xpst!=0||expin[expcount+1].ypst!=0)){
 8008c9c:	4b1f      	ldr	r3, [pc, #124]	; (8008d1c <Timer10+0x560>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	491f      	ldr	r1, [pc, #124]	; (8008d20 <Timer10+0x564>)
 8008ca2:	4613      	mov	r3, r2
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	4413      	add	r3, r2
 8008ca8:	00db      	lsls	r3, r3, #3
 8008caa:	440b      	add	r3, r1
 8008cac:	333d      	adds	r3, #61	; 0x3d
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d119      	bne.n	8008ce8 <Timer10+0x52c>
 8008cb4:	4b19      	ldr	r3, [pc, #100]	; (8008d1c <Timer10+0x560>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	4919      	ldr	r1, [pc, #100]	; (8008d20 <Timer10+0x564>)
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	00db      	lsls	r3, r3, #3
 8008cc4:	440b      	add	r3, r1
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10c      	bne.n	8008ce8 <Timer10+0x52c>
 8008cce:	4b13      	ldr	r3, [pc, #76]	; (8008d1c <Timer10+0x560>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	4912      	ldr	r1, [pc, #72]	; (8008d20 <Timer10+0x564>)
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	4413      	add	r3, r2
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	440b      	add	r3, r1
 8008ce0:	3308      	adds	r3, #8
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d051      	beq.n	8008d8c <Timer10+0x5d0>
					HAL_TIM_Base_Stop_IT(&htim10);
 8008ce8:	4813      	ldr	r0, [pc, #76]	; (8008d38 <Timer10+0x57c>)
 8008cea:	f006 f93c 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
					retracting=1;
 8008cee:	4b17      	ldr	r3, [pc, #92]	; (8008d4c <Timer10+0x590>)
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	601a      	str	r2, [r3, #0]
					if(app==internal||app==0){
 8008cf4:	4b16      	ldr	r3, [pc, #88]	; (8008d50 <Timer10+0x594>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d003      	beq.n	8008d04 <Timer10+0x548>
 8008cfc:	4b14      	ldr	r3, [pc, #80]	; (8008d50 <Timer10+0x594>)
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d127      	bne.n	8008d54 <Timer10+0x598>
						autoApproach(2);
 8008d04:	2002      	movs	r0, #2
 8008d06:	f7f9 ffb7 	bl	8002c78 <autoApproach>
 8008d0a:	e03f      	b.n	8008d8c <Timer10+0x5d0>
 8008d0c:	20000320 	.word	0x20000320
 8008d10:	20006ec8 	.word	0x20006ec8
 8008d14:	200018b0 	.word	0x200018b0
 8008d18:	20000340 	.word	0x20000340
 8008d1c:	2000001c 	.word	0x2000001c
 8008d20:	20004d44 	.word	0x20004d44
 8008d24:	20000334 	.word	0x20000334
 8008d28:	20000318 	.word	0x20000318
 8008d2c:	20006d84 	.word	0x20006d84
 8008d30:	20000314 	.word	0x20000314
 8008d34:	20000010 	.word	0x20000010
 8008d38:	20006af8 	.word	0x20006af8
 8008d3c:	20001868 	.word	0x20001868
 8008d40:	200073f4 	.word	0x200073f4
 8008d44:	080120ec 	.word	0x080120ec
 8008d48:	200002e8 	.word	0x200002e8
 8008d4c:	20000358 	.word	0x20000358
 8008d50:	20006964 	.word	0x20006964
						readingpc[0]=0;
 8008d54:	4bb2      	ldr	r3, [pc, #712]	; (8009020 <Timer10+0x864>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	701a      	strb	r2, [r3, #0]
						autoApproach(2);
 8008d5a:	2002      	movs	r0, #2
 8008d5c:	f7f9 ff8c 	bl	8002c78 <autoApproach>
						strcat(readingpc,"Retracting\0");
 8008d60:	48af      	ldr	r0, [pc, #700]	; (8009020 <Timer10+0x864>)
 8008d62:	f7f7 fa31 	bl	80001c8 <strlen>
 8008d66:	4603      	mov	r3, r0
 8008d68:	461a      	mov	r2, r3
 8008d6a:	4bad      	ldr	r3, [pc, #692]	; (8009020 <Timer10+0x864>)
 8008d6c:	4413      	add	r3, r2
 8008d6e:	49ad      	ldr	r1, [pc, #692]	; (8009024 <Timer10+0x868>)
 8008d70:	461a      	mov	r2, r3
 8008d72:	460b      	mov	r3, r1
 8008d74:	cb03      	ldmia	r3!, {r0, r1}
 8008d76:	6010      	str	r0, [r2, #0]
 8008d78:	6051      	str	r1, [r2, #4]
 8008d7a:	8819      	ldrh	r1, [r3, #0]
 8008d7c:	789b      	ldrb	r3, [r3, #2]
 8008d7e:	8111      	strh	r1, [r2, #8]
 8008d80:	7293      	strb	r3, [r2, #10]
						SendPc(readingpc, 5, 4);
 8008d82:	2204      	movs	r2, #4
 8008d84:	2105      	movs	r1, #5
 8008d86:	48a6      	ldr	r0, [pc, #664]	; (8009020 <Timer10+0x864>)
 8008d88:	f7fc fa9c 	bl	80052c4 <SendPc>
				expcount++;
 8008d8c:	4ba6      	ldr	r3, [pc, #664]	; (8009028 <Timer10+0x86c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	3301      	adds	r3, #1
 8008d92:	4aa5      	ldr	r2, [pc, #660]	; (8009028 <Timer10+0x86c>)
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	e036      	b.n	8008e06 <Timer10+0x64a>
			else if(expin[expcount].stepret && expcount+1==step&&stepfin==1){
 8008d98:	4ba3      	ldr	r3, [pc, #652]	; (8009028 <Timer10+0x86c>)
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	49a3      	ldr	r1, [pc, #652]	; (800902c <Timer10+0x870>)
 8008d9e:	4613      	mov	r3, r2
 8008da0:	00db      	lsls	r3, r3, #3
 8008da2:	4413      	add	r3, r2
 8008da4:	00db      	lsls	r3, r3, #3
 8008da6:	440b      	add	r3, r1
 8008da8:	333d      	adds	r3, #61	; 0x3d
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d01f      	beq.n	8008df0 <Timer10+0x634>
 8008db0:	4b9d      	ldr	r3, [pc, #628]	; (8009028 <Timer10+0x86c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	4b9e      	ldr	r3, [pc, #632]	; (8009030 <Timer10+0x874>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d118      	bne.n	8008df0 <Timer10+0x634>
 8008dbe:	4b9d      	ldr	r3, [pc, #628]	; (8009034 <Timer10+0x878>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d114      	bne.n	8008df0 <Timer10+0x634>
				HAL_TIM_Base_Stop_IT(&htim10);
 8008dc6:	489c      	ldr	r0, [pc, #624]	; (8009038 <Timer10+0x87c>)
 8008dc8:	f006 f8cd 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
				stepfin=0;
 8008dcc:	4b99      	ldr	r3, [pc, #612]	; (8009034 <Timer10+0x878>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	601a      	str	r2, [r3, #0]
				oscpass=0;
 8008dd2:	4b9a      	ldr	r3, [pc, #616]	; (800903c <Timer10+0x880>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	601a      	str	r2, [r3, #0]
				retracting=1;
 8008dd8:	4b99      	ldr	r3, [pc, #612]	; (8009040 <Timer10+0x884>)
 8008dda:	2201      	movs	r2, #1
 8008ddc:	601a      	str	r2, [r3, #0]
				autoApproach(2);
 8008dde:	2002      	movs	r0, #2
 8008de0:	f7f9 ff4a 	bl	8002c78 <autoApproach>
				expcount++;
 8008de4:	4b90      	ldr	r3, [pc, #576]	; (8009028 <Timer10+0x86c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3301      	adds	r3, #1
 8008dea:	4a8f      	ldr	r2, [pc, #572]	; (8009028 <Timer10+0x86c>)
 8008dec:	6013      	str	r3, [r2, #0]
 8008dee:	e00a      	b.n	8008e06 <Timer10+0x64a>
				stepfin=0;
 8008df0:	4b90      	ldr	r3, [pc, #576]	; (8009034 <Timer10+0x878>)
 8008df2:	2200      	movs	r2, #0
 8008df4:	601a      	str	r2, [r3, #0]
				oscpass=0;
 8008df6:	4b91      	ldr	r3, [pc, #580]	; (800903c <Timer10+0x880>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	601a      	str	r2, [r3, #0]
				expcount++;
 8008dfc:	4b8a      	ldr	r3, [pc, #552]	; (8009028 <Timer10+0x86c>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	3301      	adds	r3, #1
 8008e02:	4a89      	ldr	r2, [pc, #548]	; (8009028 <Timer10+0x86c>)
 8008e04:	6013      	str	r3, [r2, #0]
			uart2say=1;
 8008e06:	4b8f      	ldr	r3, [pc, #572]	; (8009044 <Timer10+0x888>)
 8008e08:	2201      	movs	r2, #1
 8008e0a:	601a      	str	r2, [r3, #0]
			TimeSet(&htim12, 100000);
 8008e0c:	498e      	ldr	r1, [pc, #568]	; (8009048 <Timer10+0x88c>)
 8008e0e:	488f      	ldr	r0, [pc, #572]	; (800904c <Timer10+0x890>)
 8008e10:	f002 fa02 	bl	800b218 <TimeSet>
}
 8008e14:	f000 bde0 	b.w	80099d8 <Timer10+0x121c>
			readingpc[0]=0;
 8008e18:	4b81      	ldr	r3, [pc, #516]	; (8009020 <Timer10+0x864>)
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	701a      	strb	r2, [r3, #0]
			sendexp=-1;
 8008e1e:	4b8c      	ldr	r3, [pc, #560]	; (8009050 <Timer10+0x894>)
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e24:	601a      	str	r2, [r3, #0]
			strcat(readingpc,"Experiment_Finished\0");
 8008e26:	487e      	ldr	r0, [pc, #504]	; (8009020 <Timer10+0x864>)
 8008e28:	f7f7 f9ce 	bl	80001c8 <strlen>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	461a      	mov	r2, r3
 8008e30:	4b7b      	ldr	r3, [pc, #492]	; (8009020 <Timer10+0x864>)
 8008e32:	4413      	add	r3, r2
 8008e34:	4a87      	ldr	r2, [pc, #540]	; (8009054 <Timer10+0x898>)
 8008e36:	461d      	mov	r5, r3
 8008e38:	4614      	mov	r4, r2
 8008e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e3c:	6028      	str	r0, [r5, #0]
 8008e3e:	6069      	str	r1, [r5, #4]
 8008e40:	60aa      	str	r2, [r5, #8]
 8008e42:	60eb      	str	r3, [r5, #12]
 8008e44:	6820      	ldr	r0, [r4, #0]
 8008e46:	6128      	str	r0, [r5, #16]
			SendPc(readingpc, 5, 2);
 8008e48:	2202      	movs	r2, #2
 8008e4a:	2105      	movs	r1, #5
 8008e4c:	4874      	ldr	r0, [pc, #464]	; (8009020 <Timer10+0x864>)
 8008e4e:	f7fc fa39 	bl	80052c4 <SendPc>
			ProcessRx(3);
 8008e52:	2003      	movs	r0, #3
 8008e54:	f7fc face 	bl	80053f4 <ProcessRx>
			uart2say=1;
 8008e58:	4b7a      	ldr	r3, [pc, #488]	; (8009044 <Timer10+0x888>)
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	601a      	str	r2, [r3, #0]
			TimeSet(&htim12, 100000);
 8008e5e:	497a      	ldr	r1, [pc, #488]	; (8009048 <Timer10+0x88c>)
 8008e60:	487a      	ldr	r0, [pc, #488]	; (800904c <Timer10+0x890>)
 8008e62:	f002 f9d9 	bl	800b218 <TimeSet>
			HAL_TIM_Base_Stop_IT(&htim10);
 8008e66:	4874      	ldr	r0, [pc, #464]	; (8009038 <Timer10+0x87c>)
 8008e68:	f006 f87d 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
			expcount=-1;
 8008e6c:	4b6e      	ldr	r3, [pc, #440]	; (8009028 <Timer10+0x86c>)
 8008e6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e72:	601a      	str	r2, [r3, #0]
}
 8008e74:	f000 bdb0 	b.w	80099d8 <Timer10+0x121c>
	else if(osc==1){//oscillation set
 8008e78:	4b77      	ldr	r3, [pc, #476]	; (8009058 <Timer10+0x89c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	f040 832f 	bne.w	80094e0 <Timer10+0xd24>
		if(expin[expcount].osc==osc_sqr){
 8008e82:	4b69      	ldr	r3, [pc, #420]	; (8009028 <Timer10+0x86c>)
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	4969      	ldr	r1, [pc, #420]	; (800902c <Timer10+0x870>)
 8008e88:	4613      	mov	r3, r2
 8008e8a:	00db      	lsls	r3, r3, #3
 8008e8c:	4413      	add	r3, r2
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	440b      	add	r3, r1
 8008e92:	3318      	adds	r3, #24
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	f040 80fc 	bne.w	8009094 <Timer10+0x8d8>
			motsender[0]=0;
 8008e9c:	4b6f      	ldr	r3, [pc, #444]	; (800905c <Timer10+0x8a0>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	701a      	strb	r2, [r3, #0]
			datasender[0]=0;
 8008ea2:	4b6f      	ldr	r3, [pc, #444]	; (8009060 <Timer10+0x8a4>)
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	701a      	strb	r2, [r3, #0]
			itoa(loadnow,motsender,10);
 8008ea8:	4b6e      	ldr	r3, [pc, #440]	; (8009064 <Timer10+0x8a8>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	220a      	movs	r2, #10
 8008eae:	496b      	ldr	r1, [pc, #428]	; (800905c <Timer10+0x8a0>)
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f008 fe35 	bl	8011b20 <itoa>
			strcat(motsender,"LM\0");
 8008eb6:	4869      	ldr	r0, [pc, #420]	; (800905c <Timer10+0x8a0>)
 8008eb8:	f7f7 f986 	bl	80001c8 <strlen>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	4b66      	ldr	r3, [pc, #408]	; (800905c <Timer10+0x8a0>)
 8008ec2:	4413      	add	r3, r2
 8008ec4:	4a68      	ldr	r2, [pc, #416]	; (8009068 <Timer10+0x8ac>)
 8008ec6:	8811      	ldrh	r1, [r2, #0]
 8008ec8:	7892      	ldrb	r2, [r2, #2]
 8008eca:	8019      	strh	r1, [r3, #0]
 8008ecc:	709a      	strb	r2, [r3, #2]
			if(oscsqrCount%sqrmod==0){
 8008ece:	4b67      	ldr	r3, [pc, #412]	; (800906c <Timer10+0x8b0>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a67      	ldr	r2, [pc, #412]	; (8009070 <Timer10+0x8b4>)
 8008ed4:	6812      	ldr	r2, [r2, #0]
 8008ed6:	fb93 f1f2 	sdiv	r1, r3, r2
 8008eda:	fb02 f201 	mul.w	r2, r2, r1
 8008ede:	1a9b      	subs	r3, r3, r2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f040 8083 	bne.w	8008fec <Timer10+0x830>
				if(osccount<numosc){
 8008ee6:	4b63      	ldr	r3, [pc, #396]	; (8009074 <Timer10+0x8b8>)
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	4b63      	ldr	r3, [pc, #396]	; (8009078 <Timer10+0x8bc>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	da4a      	bge.n	8008f88 <Timer10+0x7cc>
					if(osccount%2==0){
 8008ef2:	4b60      	ldr	r3, [pc, #384]	; (8009074 <Timer10+0x8b8>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d11c      	bne.n	8008f38 <Timer10+0x77c>
						strcat(datasender,hivolt);
 8008efe:	495f      	ldr	r1, [pc, #380]	; (800907c <Timer10+0x8c0>)
 8008f00:	4857      	ldr	r0, [pc, #348]	; (8009060 <Timer10+0x8a4>)
 8008f02:	f008 fe22 	bl	8011b4a <strcat>
						strcat(datasender,"E\0");
 8008f06:	4856      	ldr	r0, [pc, #344]	; (8009060 <Timer10+0x8a4>)
 8008f08:	f7f7 f95e 	bl	80001c8 <strlen>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	461a      	mov	r2, r3
 8008f10:	4b53      	ldr	r3, [pc, #332]	; (8009060 <Timer10+0x8a4>)
 8008f12:	4413      	add	r3, r2
 8008f14:	495a      	ldr	r1, [pc, #360]	; (8009080 <Timer10+0x8c4>)
 8008f16:	461a      	mov	r2, r3
 8008f18:	460b      	mov	r3, r1
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	8013      	strh	r3, [r2, #0]
						strcat(motsender,datasender);
 8008f1e:	4950      	ldr	r1, [pc, #320]	; (8009060 <Timer10+0x8a4>)
 8008f20:	484e      	ldr	r0, [pc, #312]	; (800905c <Timer10+0x8a0>)
 8008f22:	f008 fe12 	bl	8011b4a <strcat>
						SendPc(motsender, 5, 0);
 8008f26:	2200      	movs	r2, #0
 8008f28:	2105      	movs	r1, #5
 8008f2a:	484c      	ldr	r0, [pc, #304]	; (800905c <Timer10+0x8a0>)
 8008f2c:	f7fc f9ca 	bl	80052c4 <SendPc>
						GiveVolt(hivolt);
 8008f30:	4852      	ldr	r0, [pc, #328]	; (800907c <Timer10+0x8c0>)
 8008f32:	f7fa fb8b 	bl	800364c <GiveVolt>
 8008f36:	e021      	b.n	8008f7c <Timer10+0x7c0>
					else if(osccount%2!=0){
 8008f38:	4b4e      	ldr	r3, [pc, #312]	; (8009074 <Timer10+0x8b8>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d01b      	beq.n	8008f7c <Timer10+0x7c0>
						strcat(datasender,lovolt);
 8008f44:	494f      	ldr	r1, [pc, #316]	; (8009084 <Timer10+0x8c8>)
 8008f46:	4846      	ldr	r0, [pc, #280]	; (8009060 <Timer10+0x8a4>)
 8008f48:	f008 fdff 	bl	8011b4a <strcat>
						strcat(datasender,"E\0");
 8008f4c:	4844      	ldr	r0, [pc, #272]	; (8009060 <Timer10+0x8a4>)
 8008f4e:	f7f7 f93b 	bl	80001c8 <strlen>
 8008f52:	4603      	mov	r3, r0
 8008f54:	461a      	mov	r2, r3
 8008f56:	4b42      	ldr	r3, [pc, #264]	; (8009060 <Timer10+0x8a4>)
 8008f58:	4413      	add	r3, r2
 8008f5a:	4949      	ldr	r1, [pc, #292]	; (8009080 <Timer10+0x8c4>)
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	460b      	mov	r3, r1
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	8013      	strh	r3, [r2, #0]
						strcat(motsender,datasender);
 8008f64:	493e      	ldr	r1, [pc, #248]	; (8009060 <Timer10+0x8a4>)
 8008f66:	483d      	ldr	r0, [pc, #244]	; (800905c <Timer10+0x8a0>)
 8008f68:	f008 fdef 	bl	8011b4a <strcat>
						SendPc(motsender, 5, 0);
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2105      	movs	r1, #5
 8008f70:	483a      	ldr	r0, [pc, #232]	; (800905c <Timer10+0x8a0>)
 8008f72:	f7fc f9a7 	bl	80052c4 <SendPc>
						GiveVolt(lovolt);
 8008f76:	4843      	ldr	r0, [pc, #268]	; (8009084 <Timer10+0x8c8>)
 8008f78:	f7fa fb68 	bl	800364c <GiveVolt>
					osccount++;
 8008f7c:	4b3d      	ldr	r3, [pc, #244]	; (8009074 <Timer10+0x8b8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	3301      	adds	r3, #1
 8008f82:	4a3c      	ldr	r2, [pc, #240]	; (8009074 <Timer10+0x8b8>)
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	e044      	b.n	8009012 <Timer10+0x856>
					ftos(firstpt,voltage);
 8008f88:	4b3f      	ldr	r3, [pc, #252]	; (8009088 <Timer10+0x8cc>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	493f      	ldr	r1, [pc, #252]	; (800908c <Timer10+0x8d0>)
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7f8 fd12 	bl	80019b8 <ftos>
					strcat(datasender,voltage);
 8008f94:	493d      	ldr	r1, [pc, #244]	; (800908c <Timer10+0x8d0>)
 8008f96:	4832      	ldr	r0, [pc, #200]	; (8009060 <Timer10+0x8a4>)
 8008f98:	f008 fdd7 	bl	8011b4a <strcat>
					strcat(datasender,"E\0");
 8008f9c:	4830      	ldr	r0, [pc, #192]	; (8009060 <Timer10+0x8a4>)
 8008f9e:	f7f7 f913 	bl	80001c8 <strlen>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	4b2e      	ldr	r3, [pc, #184]	; (8009060 <Timer10+0x8a4>)
 8008fa8:	4413      	add	r3, r2
 8008faa:	4935      	ldr	r1, [pc, #212]	; (8009080 <Timer10+0x8c4>)
 8008fac:	461a      	mov	r2, r3
 8008fae:	460b      	mov	r3, r1
 8008fb0:	881b      	ldrh	r3, [r3, #0]
 8008fb2:	8013      	strh	r3, [r2, #0]
					strcat(motsender,datasender);
 8008fb4:	492a      	ldr	r1, [pc, #168]	; (8009060 <Timer10+0x8a4>)
 8008fb6:	4829      	ldr	r0, [pc, #164]	; (800905c <Timer10+0x8a0>)
 8008fb8:	f008 fdc7 	bl	8011b4a <strcat>
					SendPc(motsender, 5, 0);
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	2105      	movs	r1, #5
 8008fc0:	4826      	ldr	r0, [pc, #152]	; (800905c <Timer10+0x8a0>)
 8008fc2:	f7fc f97f 	bl	80052c4 <SendPc>
					GiveVolt(voltage);
 8008fc6:	4831      	ldr	r0, [pc, #196]	; (800908c <Timer10+0x8d0>)
 8008fc8:	f7fa fb40 	bl	800364c <GiveVolt>
					osc=0;
 8008fcc:	4b22      	ldr	r3, [pc, #136]	; (8009058 <Timer10+0x89c>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]
					oscpass=2;
 8008fd2:	4b1a      	ldr	r3, [pc, #104]	; (800903c <Timer10+0x880>)
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	601a      	str	r2, [r3, #0]
					stepfin=0;
 8008fd8:	4b16      	ldr	r3, [pc, #88]	; (8009034 <Timer10+0x878>)
 8008fda:	2200      	movs	r2, #0
 8008fdc:	601a      	str	r2, [r3, #0]
					osccount=0;
 8008fde:	4b25      	ldr	r3, [pc, #148]	; (8009074 <Timer10+0x8b8>)
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	601a      	str	r2, [r3, #0]
					sendexp=1;
 8008fe4:	4b1a      	ldr	r3, [pc, #104]	; (8009050 <Timer10+0x894>)
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	e012      	b.n	8009012 <Timer10+0x856>
			else if(oscsqrCount%5==0){
 8008fec:	4b1f      	ldr	r3, [pc, #124]	; (800906c <Timer10+0x8b0>)
 8008fee:	6819      	ldr	r1, [r3, #0]
 8008ff0:	4b27      	ldr	r3, [pc, #156]	; (8009090 <Timer10+0x8d4>)
 8008ff2:	fb83 2301 	smull	r2, r3, r3, r1
 8008ff6:	105a      	asrs	r2, r3, #1
 8008ff8:	17cb      	asrs	r3, r1, #31
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	1aca      	subs	r2, r1, r3
 8009004:	2a00      	cmp	r2, #0
 8009006:	d104      	bne.n	8009012 <Timer10+0x856>
				SendPc(motsender, 5, 0);
 8009008:	2200      	movs	r2, #0
 800900a:	2105      	movs	r1, #5
 800900c:	4813      	ldr	r0, [pc, #76]	; (800905c <Timer10+0x8a0>)
 800900e:	f7fc f959 	bl	80052c4 <SendPc>
			oscsqrCount++;
 8009012:	4b16      	ldr	r3, [pc, #88]	; (800906c <Timer10+0x8b0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3301      	adds	r3, #1
 8009018:	4a14      	ldr	r2, [pc, #80]	; (800906c <Timer10+0x8b0>)
 800901a:	6013      	str	r3, [r2, #0]
}
 800901c:	f000 bcdc 	b.w	80099d8 <Timer10+0x121c>
 8009020:	200073f4 	.word	0x200073f4
 8009024:	08012104 	.word	0x08012104
 8009028:	2000001c 	.word	0x2000001c
 800902c:	20004d44 	.word	0x20004d44
 8009030:	200002e8 	.word	0x200002e8
 8009034:	20001868 	.word	0x20001868
 8009038:	20006af8 	.word	0x20006af8
 800903c:	20000320 	.word	0x20000320
 8009040:	20000358 	.word	0x20000358
 8009044:	200018b0 	.word	0x200018b0
 8009048:	000186a0 	.word	0x000186a0
 800904c:	20006ec8 	.word	0x20006ec8
 8009050:	20000010 	.word	0x20000010
 8009054:	08012110 	.word	0x08012110
 8009058:	20000314 	.word	0x20000314
 800905c:	20004ce0 	.word	0x20004ce0
 8009060:	20006bd8 	.word	0x20006bd8
 8009064:	20000310 	.word	0x20000310
 8009068:	080120ac 	.word	0x080120ac
 800906c:	2000189c 	.word	0x2000189c
 8009070:	20000328 	.word	0x20000328
 8009074:	2000031c 	.word	0x2000031c
 8009078:	20000318 	.word	0x20000318
 800907c:	20000020 	.word	0x20000020
 8009080:	08012128 	.word	0x08012128
 8009084:	2000002c 	.word	0x2000002c
 8009088:	20000018 	.word	0x20000018
 800908c:	20000004 	.word	0x20000004
 8009090:	66666667 	.word	0x66666667
			if(osccount<numosc){
 8009094:	4b99      	ldr	r3, [pc, #612]	; (80092fc <Timer10+0xb40>)
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	4b99      	ldr	r3, [pc, #612]	; (8009300 <Timer10+0xb44>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	429a      	cmp	r2, r3
 800909e:	f280 81e8 	bge.w	8009472 <Timer10+0xcb6>
				if(eqstepcounter<2*stepnum){
 80090a2:	4b98      	ldr	r3, [pc, #608]	; (8009304 <Timer10+0xb48>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	005a      	lsls	r2, r3, #1
 80090a8:	4b97      	ldr	r3, [pc, #604]	; (8009308 <Timer10+0xb4c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	f340 81d4 	ble.w	800945a <Timer10+0xc9e>
					if(oscdown==1){
 80090b2:	4b96      	ldr	r3, [pc, #600]	; (800930c <Timer10+0xb50>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	f040 80d0 	bne.w	800925c <Timer10+0xaa0>
						if(eqstepcounter<stepnum){
 80090bc:	4b92      	ldr	r3, [pc, #584]	; (8009308 <Timer10+0xb4c>)
 80090be:	681a      	ldr	r2, [r3, #0]
 80090c0:	4b90      	ldr	r3, [pc, #576]	; (8009304 <Timer10+0xb48>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	da64      	bge.n	8009192 <Timer10+0x9d6>
							if(givecount%2==0){
 80090c8:	4b91      	ldr	r3, [pc, #580]	; (8009310 <Timer10+0xb54>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0301 	and.w	r3, r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d137      	bne.n	8009144 <Timer10+0x988>
								stepvolt=firstpt-stepdepth*(eqstepcounter+1);
 80090d4:	4b8f      	ldr	r3, [pc, #572]	; (8009314 <Timer10+0xb58>)
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	4b8b      	ldr	r3, [pc, #556]	; (8009308 <Timer10+0xb4c>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3301      	adds	r3, #1
 80090de:	498e      	ldr	r1, [pc, #568]	; (8009318 <Timer10+0xb5c>)
 80090e0:	6809      	ldr	r1, [r1, #0]
 80090e2:	fb01 f303 	mul.w	r3, r1, r3
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	4a8c      	ldr	r2, [pc, #560]	; (800931c <Timer10+0xb60>)
 80090ea:	6013      	str	r3, [r2, #0]
								voltnow=stepvolt;
 80090ec:	4b8b      	ldr	r3, [pc, #556]	; (800931c <Timer10+0xb60>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a8b      	ldr	r2, [pc, #556]	; (8009320 <Timer10+0xb64>)
 80090f2:	6013      	str	r3, [r2, #0]
								ftos(stepvolt,voltage);
 80090f4:	4b89      	ldr	r3, [pc, #548]	; (800931c <Timer10+0xb60>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	498a      	ldr	r1, [pc, #552]	; (8009324 <Timer10+0xb68>)
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f8 fc5c 	bl	80019b8 <ftos>
								givecount++;
 8009100:	4b83      	ldr	r3, [pc, #524]	; (8009310 <Timer10+0xb54>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3301      	adds	r3, #1
 8009106:	4a82      	ldr	r2, [pc, #520]	; (8009310 <Timer10+0xb54>)
 8009108:	6013      	str	r3, [r2, #0]
								datasender[0]=0;
 800910a:	4b87      	ldr	r3, [pc, #540]	; (8009328 <Timer10+0xb6c>)
 800910c:	2200      	movs	r2, #0
 800910e:	701a      	strb	r2, [r3, #0]
								itoa(loadnow,datasender,10);
 8009110:	4b86      	ldr	r3, [pc, #536]	; (800932c <Timer10+0xb70>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	220a      	movs	r2, #10
 8009116:	4984      	ldr	r1, [pc, #528]	; (8009328 <Timer10+0xb6c>)
 8009118:	4618      	mov	r0, r3
 800911a:	f008 fd01 	bl	8011b20 <itoa>
								strcat(datasender,"LM\0");
 800911e:	4882      	ldr	r0, [pc, #520]	; (8009328 <Timer10+0xb6c>)
 8009120:	f7f7 f852 	bl	80001c8 <strlen>
 8009124:	4603      	mov	r3, r0
 8009126:	461a      	mov	r2, r3
 8009128:	4b7f      	ldr	r3, [pc, #508]	; (8009328 <Timer10+0xb6c>)
 800912a:	4413      	add	r3, r2
 800912c:	4a80      	ldr	r2, [pc, #512]	; (8009330 <Timer10+0xb74>)
 800912e:	8811      	ldrh	r1, [r2, #0]
 8009130:	7892      	ldrb	r2, [r2, #2]
 8009132:	8019      	strh	r1, [r3, #0]
 8009134:	709a      	strb	r2, [r3, #2]
								SendPc(datasender, 5, 0);
 8009136:	2200      	movs	r2, #0
 8009138:	2105      	movs	r1, #5
 800913a:	487b      	ldr	r0, [pc, #492]	; (8009328 <Timer10+0xb6c>)
 800913c:	f7fc f8c2 	bl	80052c4 <SendPc>
}
 8009140:	f000 bc4a 	b.w	80099d8 <Timer10+0x121c>
								motsender[0]=0;
 8009144:	4b7b      	ldr	r3, [pc, #492]	; (8009334 <Timer10+0xb78>)
 8009146:	2200      	movs	r2, #0
 8009148:	701a      	strb	r2, [r3, #0]
								strcat(motsender,voltage);
 800914a:	4976      	ldr	r1, [pc, #472]	; (8009324 <Timer10+0xb68>)
 800914c:	4879      	ldr	r0, [pc, #484]	; (8009334 <Timer10+0xb78>)
 800914e:	f008 fcfc 	bl	8011b4a <strcat>
								strcat(motsender,"E\0");
 8009152:	4878      	ldr	r0, [pc, #480]	; (8009334 <Timer10+0xb78>)
 8009154:	f7f7 f838 	bl	80001c8 <strlen>
 8009158:	4603      	mov	r3, r0
 800915a:	461a      	mov	r2, r3
 800915c:	4b75      	ldr	r3, [pc, #468]	; (8009334 <Timer10+0xb78>)
 800915e:	4413      	add	r3, r2
 8009160:	4975      	ldr	r1, [pc, #468]	; (8009338 <Timer10+0xb7c>)
 8009162:	461a      	mov	r2, r3
 8009164:	460b      	mov	r3, r1
 8009166:	881b      	ldrh	r3, [r3, #0]
 8009168:	8013      	strh	r3, [r2, #0]
								SendPc(motsender, 5, 0);
 800916a:	2200      	movs	r2, #0
 800916c:	2105      	movs	r1, #5
 800916e:	4871      	ldr	r0, [pc, #452]	; (8009334 <Timer10+0xb78>)
 8009170:	f7fc f8a8 	bl	80052c4 <SendPc>
								GiveVolt(voltage);
 8009174:	486b      	ldr	r0, [pc, #428]	; (8009324 <Timer10+0xb68>)
 8009176:	f7fa fa69 	bl	800364c <GiveVolt>
								givecount++;
 800917a:	4b65      	ldr	r3, [pc, #404]	; (8009310 <Timer10+0xb54>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3301      	adds	r3, #1
 8009180:	4a63      	ldr	r2, [pc, #396]	; (8009310 <Timer10+0xb54>)
 8009182:	6013      	str	r3, [r2, #0]
								eqstepcounter++;
 8009184:	4b60      	ldr	r3, [pc, #384]	; (8009308 <Timer10+0xb4c>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3301      	adds	r3, #1
 800918a:	4a5f      	ldr	r2, [pc, #380]	; (8009308 <Timer10+0xb4c>)
 800918c:	6013      	str	r3, [r2, #0]
}
 800918e:	f000 bc23 	b.w	80099d8 <Timer10+0x121c>
						else if(eqstepcounter>=stepnum){
 8009192:	4b5d      	ldr	r3, [pc, #372]	; (8009308 <Timer10+0xb4c>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	4b5b      	ldr	r3, [pc, #364]	; (8009304 <Timer10+0xb48>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	429a      	cmp	r2, r3
 800919c:	f2c0 841c 	blt.w	80099d8 <Timer10+0x121c>
							if(givecount%2==0){
 80091a0:	4b5b      	ldr	r3, [pc, #364]	; (8009310 <Timer10+0xb54>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d131      	bne.n	8009210 <Timer10+0xa54>
								stepvolt=stepvolt+stepdepth;
 80091ac:	4b5b      	ldr	r3, [pc, #364]	; (800931c <Timer10+0xb60>)
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	4b59      	ldr	r3, [pc, #356]	; (8009318 <Timer10+0xb5c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4413      	add	r3, r2
 80091b6:	4a59      	ldr	r2, [pc, #356]	; (800931c <Timer10+0xb60>)
 80091b8:	6013      	str	r3, [r2, #0]
								voltnow=stepvolt;
 80091ba:	4b58      	ldr	r3, [pc, #352]	; (800931c <Timer10+0xb60>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a58      	ldr	r2, [pc, #352]	; (8009320 <Timer10+0xb64>)
 80091c0:	6013      	str	r3, [r2, #0]
								ftos(stepvolt,voltage);
 80091c2:	4b56      	ldr	r3, [pc, #344]	; (800931c <Timer10+0xb60>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4957      	ldr	r1, [pc, #348]	; (8009324 <Timer10+0xb68>)
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7f8 fbf5 	bl	80019b8 <ftos>
								givecount++;
 80091ce:	4b50      	ldr	r3, [pc, #320]	; (8009310 <Timer10+0xb54>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3301      	adds	r3, #1
 80091d4:	4a4e      	ldr	r2, [pc, #312]	; (8009310 <Timer10+0xb54>)
 80091d6:	6013      	str	r3, [r2, #0]
								datasender[0]=0;
 80091d8:	4b53      	ldr	r3, [pc, #332]	; (8009328 <Timer10+0xb6c>)
 80091da:	2200      	movs	r2, #0
 80091dc:	701a      	strb	r2, [r3, #0]
								itoa(loadnow,datasender,10);
 80091de:	4b53      	ldr	r3, [pc, #332]	; (800932c <Timer10+0xb70>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	220a      	movs	r2, #10
 80091e4:	4950      	ldr	r1, [pc, #320]	; (8009328 <Timer10+0xb6c>)
 80091e6:	4618      	mov	r0, r3
 80091e8:	f008 fc9a 	bl	8011b20 <itoa>
								strcat(datasender,"LM\0");
 80091ec:	484e      	ldr	r0, [pc, #312]	; (8009328 <Timer10+0xb6c>)
 80091ee:	f7f6 ffeb 	bl	80001c8 <strlen>
 80091f2:	4603      	mov	r3, r0
 80091f4:	461a      	mov	r2, r3
 80091f6:	4b4c      	ldr	r3, [pc, #304]	; (8009328 <Timer10+0xb6c>)
 80091f8:	4413      	add	r3, r2
 80091fa:	4a4d      	ldr	r2, [pc, #308]	; (8009330 <Timer10+0xb74>)
 80091fc:	8811      	ldrh	r1, [r2, #0]
 80091fe:	7892      	ldrb	r2, [r2, #2]
 8009200:	8019      	strh	r1, [r3, #0]
 8009202:	709a      	strb	r2, [r3, #2]
								SendPc(datasender, 5, 0);
 8009204:	2200      	movs	r2, #0
 8009206:	2105      	movs	r1, #5
 8009208:	4847      	ldr	r0, [pc, #284]	; (8009328 <Timer10+0xb6c>)
 800920a:	f7fc f85b 	bl	80052c4 <SendPc>
}
 800920e:	e3e3      	b.n	80099d8 <Timer10+0x121c>
								motsender[0]=0;
 8009210:	4b48      	ldr	r3, [pc, #288]	; (8009334 <Timer10+0xb78>)
 8009212:	2200      	movs	r2, #0
 8009214:	701a      	strb	r2, [r3, #0]
								strcat(motsender,voltage);
 8009216:	4943      	ldr	r1, [pc, #268]	; (8009324 <Timer10+0xb68>)
 8009218:	4846      	ldr	r0, [pc, #280]	; (8009334 <Timer10+0xb78>)
 800921a:	f008 fc96 	bl	8011b4a <strcat>
								strcat(motsender,"E\0");
 800921e:	4845      	ldr	r0, [pc, #276]	; (8009334 <Timer10+0xb78>)
 8009220:	f7f6 ffd2 	bl	80001c8 <strlen>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	4b42      	ldr	r3, [pc, #264]	; (8009334 <Timer10+0xb78>)
 800922a:	4413      	add	r3, r2
 800922c:	4942      	ldr	r1, [pc, #264]	; (8009338 <Timer10+0xb7c>)
 800922e:	461a      	mov	r2, r3
 8009230:	460b      	mov	r3, r1
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	8013      	strh	r3, [r2, #0]
								SendPc(motsender, 5, 0);
 8009236:	2200      	movs	r2, #0
 8009238:	2105      	movs	r1, #5
 800923a:	483e      	ldr	r0, [pc, #248]	; (8009334 <Timer10+0xb78>)
 800923c:	f7fc f842 	bl	80052c4 <SendPc>
								GiveVolt(voltage);
 8009240:	4838      	ldr	r0, [pc, #224]	; (8009324 <Timer10+0xb68>)
 8009242:	f7fa fa03 	bl	800364c <GiveVolt>
								givecount++;
 8009246:	4b32      	ldr	r3, [pc, #200]	; (8009310 <Timer10+0xb54>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	3301      	adds	r3, #1
 800924c:	4a30      	ldr	r2, [pc, #192]	; (8009310 <Timer10+0xb54>)
 800924e:	6013      	str	r3, [r2, #0]
								eqstepcounter++;
 8009250:	4b2d      	ldr	r3, [pc, #180]	; (8009308 <Timer10+0xb4c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3301      	adds	r3, #1
 8009256:	4a2c      	ldr	r2, [pc, #176]	; (8009308 <Timer10+0xb4c>)
 8009258:	6013      	str	r3, [r2, #0]
}
 800925a:	e3bd      	b.n	80099d8 <Timer10+0x121c>
						if(eqstepcounter<stepnum){
 800925c:	4b2a      	ldr	r3, [pc, #168]	; (8009308 <Timer10+0xb4c>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	4b28      	ldr	r3, [pc, #160]	; (8009304 <Timer10+0xb48>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	429a      	cmp	r2, r3
 8009266:	f280 8093 	bge.w	8009390 <Timer10+0xbd4>
							if(givecount%2==0){
 800926a:	4b29      	ldr	r3, [pc, #164]	; (8009310 <Timer10+0xb54>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	d166      	bne.n	8009344 <Timer10+0xb88>
								stepvolt=firstpt+expin[expcount].amp-stepdepth*(eqstepcounter+1);
 8009276:	4b31      	ldr	r3, [pc, #196]	; (800933c <Timer10+0xb80>)
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	4931      	ldr	r1, [pc, #196]	; (8009340 <Timer10+0xb84>)
 800927c:	4613      	mov	r3, r2
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	4413      	add	r3, r2
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	440b      	add	r3, r1
 8009286:	331c      	adds	r3, #28
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	4b22      	ldr	r3, [pc, #136]	; (8009314 <Timer10+0xb58>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	441a      	add	r2, r3
 8009290:	4b1d      	ldr	r3, [pc, #116]	; (8009308 <Timer10+0xb4c>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	3301      	adds	r3, #1
 8009296:	4920      	ldr	r1, [pc, #128]	; (8009318 <Timer10+0xb5c>)
 8009298:	6809      	ldr	r1, [r1, #0]
 800929a:	fb01 f303 	mul.w	r3, r1, r3
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	4a1e      	ldr	r2, [pc, #120]	; (800931c <Timer10+0xb60>)
 80092a2:	6013      	str	r3, [r2, #0]
								voltnow=stepvolt;
 80092a4:	4b1d      	ldr	r3, [pc, #116]	; (800931c <Timer10+0xb60>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a1d      	ldr	r2, [pc, #116]	; (8009320 <Timer10+0xb64>)
 80092aa:	6013      	str	r3, [r2, #0]
								ftos(stepvolt,voltage);
 80092ac:	4b1b      	ldr	r3, [pc, #108]	; (800931c <Timer10+0xb60>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	491c      	ldr	r1, [pc, #112]	; (8009324 <Timer10+0xb68>)
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7f8 fb80 	bl	80019b8 <ftos>
								givecount++;
 80092b8:	4b15      	ldr	r3, [pc, #84]	; (8009310 <Timer10+0xb54>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3301      	adds	r3, #1
 80092be:	4a14      	ldr	r2, [pc, #80]	; (8009310 <Timer10+0xb54>)
 80092c0:	6013      	str	r3, [r2, #0]
								datasender[0]=0;
 80092c2:	4b19      	ldr	r3, [pc, #100]	; (8009328 <Timer10+0xb6c>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	701a      	strb	r2, [r3, #0]
								itoa(loadnow,datasender,10);
 80092c8:	4b18      	ldr	r3, [pc, #96]	; (800932c <Timer10+0xb70>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	220a      	movs	r2, #10
 80092ce:	4916      	ldr	r1, [pc, #88]	; (8009328 <Timer10+0xb6c>)
 80092d0:	4618      	mov	r0, r3
 80092d2:	f008 fc25 	bl	8011b20 <itoa>
								strcat(datasender,"LM\0");
 80092d6:	4814      	ldr	r0, [pc, #80]	; (8009328 <Timer10+0xb6c>)
 80092d8:	f7f6 ff76 	bl	80001c8 <strlen>
 80092dc:	4603      	mov	r3, r0
 80092de:	461a      	mov	r2, r3
 80092e0:	4b11      	ldr	r3, [pc, #68]	; (8009328 <Timer10+0xb6c>)
 80092e2:	4413      	add	r3, r2
 80092e4:	4a12      	ldr	r2, [pc, #72]	; (8009330 <Timer10+0xb74>)
 80092e6:	8811      	ldrh	r1, [r2, #0]
 80092e8:	7892      	ldrb	r2, [r2, #2]
 80092ea:	8019      	strh	r1, [r3, #0]
 80092ec:	709a      	strb	r2, [r3, #2]
								SendPc(datasender, 5, 0);
 80092ee:	2200      	movs	r2, #0
 80092f0:	2105      	movs	r1, #5
 80092f2:	480d      	ldr	r0, [pc, #52]	; (8009328 <Timer10+0xb6c>)
 80092f4:	f7fb ffe6 	bl	80052c4 <SendPc>
}
 80092f8:	e36e      	b.n	80099d8 <Timer10+0x121c>
 80092fa:	bf00      	nop
 80092fc:	2000031c 	.word	0x2000031c
 8009300:	20000318 	.word	0x20000318
 8009304:	200002f8 	.word	0x200002f8
 8009308:	200002fc 	.word	0x200002fc
 800930c:	200002dc 	.word	0x200002dc
 8009310:	200002d0 	.word	0x200002d0
 8009314:	20000018 	.word	0x20000018
 8009318:	200002f0 	.word	0x200002f0
 800931c:	200002f4 	.word	0x200002f4
 8009320:	20000000 	.word	0x20000000
 8009324:	20000004 	.word	0x20000004
 8009328:	20006bd8 	.word	0x20006bd8
 800932c:	20000310 	.word	0x20000310
 8009330:	080120ac 	.word	0x080120ac
 8009334:	20004ce0 	.word	0x20004ce0
 8009338:	08012128 	.word	0x08012128
 800933c:	2000001c 	.word	0x2000001c
 8009340:	20004d44 	.word	0x20004d44
								motsender[0]=0;
 8009344:	4b98      	ldr	r3, [pc, #608]	; (80095a8 <Timer10+0xdec>)
 8009346:	2200      	movs	r2, #0
 8009348:	701a      	strb	r2, [r3, #0]
								strcat(motsender,voltage);
 800934a:	4998      	ldr	r1, [pc, #608]	; (80095ac <Timer10+0xdf0>)
 800934c:	4896      	ldr	r0, [pc, #600]	; (80095a8 <Timer10+0xdec>)
 800934e:	f008 fbfc 	bl	8011b4a <strcat>
								strcat(motsender,"E\0");
 8009352:	4895      	ldr	r0, [pc, #596]	; (80095a8 <Timer10+0xdec>)
 8009354:	f7f6 ff38 	bl	80001c8 <strlen>
 8009358:	4603      	mov	r3, r0
 800935a:	461a      	mov	r2, r3
 800935c:	4b92      	ldr	r3, [pc, #584]	; (80095a8 <Timer10+0xdec>)
 800935e:	4413      	add	r3, r2
 8009360:	4993      	ldr	r1, [pc, #588]	; (80095b0 <Timer10+0xdf4>)
 8009362:	461a      	mov	r2, r3
 8009364:	460b      	mov	r3, r1
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	8013      	strh	r3, [r2, #0]
								SendPc(motsender, 5, 0);
 800936a:	2200      	movs	r2, #0
 800936c:	2105      	movs	r1, #5
 800936e:	488e      	ldr	r0, [pc, #568]	; (80095a8 <Timer10+0xdec>)
 8009370:	f7fb ffa8 	bl	80052c4 <SendPc>
								GiveVolt(voltage);
 8009374:	488d      	ldr	r0, [pc, #564]	; (80095ac <Timer10+0xdf0>)
 8009376:	f7fa f969 	bl	800364c <GiveVolt>
								givecount++;
 800937a:	4b8e      	ldr	r3, [pc, #568]	; (80095b4 <Timer10+0xdf8>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3301      	adds	r3, #1
 8009380:	4a8c      	ldr	r2, [pc, #560]	; (80095b4 <Timer10+0xdf8>)
 8009382:	6013      	str	r3, [r2, #0]
								eqstepcounter++;
 8009384:	4b8c      	ldr	r3, [pc, #560]	; (80095b8 <Timer10+0xdfc>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3301      	adds	r3, #1
 800938a:	4a8b      	ldr	r2, [pc, #556]	; (80095b8 <Timer10+0xdfc>)
 800938c:	6013      	str	r3, [r2, #0]
}
 800938e:	e323      	b.n	80099d8 <Timer10+0x121c>
						else if(eqstepcounter>=stepnum){
 8009390:	4b89      	ldr	r3, [pc, #548]	; (80095b8 <Timer10+0xdfc>)
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	4b89      	ldr	r3, [pc, #548]	; (80095bc <Timer10+0xe00>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	f2c0 831d 	blt.w	80099d8 <Timer10+0x121c>
							if(givecount%2==0){
 800939e:	4b85      	ldr	r3, [pc, #532]	; (80095b4 <Timer10+0xdf8>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d131      	bne.n	800940e <Timer10+0xc52>
								stepvolt=stepvolt+stepdepth;
 80093aa:	4b85      	ldr	r3, [pc, #532]	; (80095c0 <Timer10+0xe04>)
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	4b85      	ldr	r3, [pc, #532]	; (80095c4 <Timer10+0xe08>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4413      	add	r3, r2
 80093b4:	4a82      	ldr	r2, [pc, #520]	; (80095c0 <Timer10+0xe04>)
 80093b6:	6013      	str	r3, [r2, #0]
								voltnow=stepvolt;
 80093b8:	4b81      	ldr	r3, [pc, #516]	; (80095c0 <Timer10+0xe04>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a82      	ldr	r2, [pc, #520]	; (80095c8 <Timer10+0xe0c>)
 80093be:	6013      	str	r3, [r2, #0]
								ftos(stepvolt,voltage);
 80093c0:	4b7f      	ldr	r3, [pc, #508]	; (80095c0 <Timer10+0xe04>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4979      	ldr	r1, [pc, #484]	; (80095ac <Timer10+0xdf0>)
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7f8 faf6 	bl	80019b8 <ftos>
								givecount++;
 80093cc:	4b79      	ldr	r3, [pc, #484]	; (80095b4 <Timer10+0xdf8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	3301      	adds	r3, #1
 80093d2:	4a78      	ldr	r2, [pc, #480]	; (80095b4 <Timer10+0xdf8>)
 80093d4:	6013      	str	r3, [r2, #0]
								datasender[0]=0;
 80093d6:	4b7d      	ldr	r3, [pc, #500]	; (80095cc <Timer10+0xe10>)
 80093d8:	2200      	movs	r2, #0
 80093da:	701a      	strb	r2, [r3, #0]
								itoa(loadnow,datasender,10);
 80093dc:	4b7c      	ldr	r3, [pc, #496]	; (80095d0 <Timer10+0xe14>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	220a      	movs	r2, #10
 80093e2:	497a      	ldr	r1, [pc, #488]	; (80095cc <Timer10+0xe10>)
 80093e4:	4618      	mov	r0, r3
 80093e6:	f008 fb9b 	bl	8011b20 <itoa>
								strcat(datasender,"LM\0");
 80093ea:	4878      	ldr	r0, [pc, #480]	; (80095cc <Timer10+0xe10>)
 80093ec:	f7f6 feec 	bl	80001c8 <strlen>
 80093f0:	4603      	mov	r3, r0
 80093f2:	461a      	mov	r2, r3
 80093f4:	4b75      	ldr	r3, [pc, #468]	; (80095cc <Timer10+0xe10>)
 80093f6:	4413      	add	r3, r2
 80093f8:	4a76      	ldr	r2, [pc, #472]	; (80095d4 <Timer10+0xe18>)
 80093fa:	8811      	ldrh	r1, [r2, #0]
 80093fc:	7892      	ldrb	r2, [r2, #2]
 80093fe:	8019      	strh	r1, [r3, #0]
 8009400:	709a      	strb	r2, [r3, #2]
								SendPc(datasender, 5, 0);
 8009402:	2200      	movs	r2, #0
 8009404:	2105      	movs	r1, #5
 8009406:	4871      	ldr	r0, [pc, #452]	; (80095cc <Timer10+0xe10>)
 8009408:	f7fb ff5c 	bl	80052c4 <SendPc>
}
 800940c:	e2e4      	b.n	80099d8 <Timer10+0x121c>
								motsender[0]=0;
 800940e:	4b66      	ldr	r3, [pc, #408]	; (80095a8 <Timer10+0xdec>)
 8009410:	2200      	movs	r2, #0
 8009412:	701a      	strb	r2, [r3, #0]
								strcat(motsender,voltage);
 8009414:	4965      	ldr	r1, [pc, #404]	; (80095ac <Timer10+0xdf0>)
 8009416:	4864      	ldr	r0, [pc, #400]	; (80095a8 <Timer10+0xdec>)
 8009418:	f008 fb97 	bl	8011b4a <strcat>
								strcat(motsender,"E\0");
 800941c:	4862      	ldr	r0, [pc, #392]	; (80095a8 <Timer10+0xdec>)
 800941e:	f7f6 fed3 	bl	80001c8 <strlen>
 8009422:	4603      	mov	r3, r0
 8009424:	461a      	mov	r2, r3
 8009426:	4b60      	ldr	r3, [pc, #384]	; (80095a8 <Timer10+0xdec>)
 8009428:	4413      	add	r3, r2
 800942a:	4961      	ldr	r1, [pc, #388]	; (80095b0 <Timer10+0xdf4>)
 800942c:	461a      	mov	r2, r3
 800942e:	460b      	mov	r3, r1
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	8013      	strh	r3, [r2, #0]
								SendPc(motsender, 5, 0);
 8009434:	2200      	movs	r2, #0
 8009436:	2105      	movs	r1, #5
 8009438:	485b      	ldr	r0, [pc, #364]	; (80095a8 <Timer10+0xdec>)
 800943a:	f7fb ff43 	bl	80052c4 <SendPc>
								GiveVolt(voltage);
 800943e:	485b      	ldr	r0, [pc, #364]	; (80095ac <Timer10+0xdf0>)
 8009440:	f7fa f904 	bl	800364c <GiveVolt>
								givecount++;
 8009444:	4b5b      	ldr	r3, [pc, #364]	; (80095b4 <Timer10+0xdf8>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3301      	adds	r3, #1
 800944a:	4a5a      	ldr	r2, [pc, #360]	; (80095b4 <Timer10+0xdf8>)
 800944c:	6013      	str	r3, [r2, #0]
								eqstepcounter++;
 800944e:	4b5a      	ldr	r3, [pc, #360]	; (80095b8 <Timer10+0xdfc>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3301      	adds	r3, #1
 8009454:	4a58      	ldr	r2, [pc, #352]	; (80095b8 <Timer10+0xdfc>)
 8009456:	6013      	str	r3, [r2, #0]
}
 8009458:	e2be      	b.n	80099d8 <Timer10+0x121c>
					eqstepcounter=0;
 800945a:	4b57      	ldr	r3, [pc, #348]	; (80095b8 <Timer10+0xdfc>)
 800945c:	2200      	movs	r2, #0
 800945e:	601a      	str	r2, [r3, #0]
					givecount=0;
 8009460:	4b54      	ldr	r3, [pc, #336]	; (80095b4 <Timer10+0xdf8>)
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
					osccount++;
 8009466:	4b5c      	ldr	r3, [pc, #368]	; (80095d8 <Timer10+0xe1c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3301      	adds	r3, #1
 800946c:	4a5a      	ldr	r2, [pc, #360]	; (80095d8 <Timer10+0xe1c>)
 800946e:	6013      	str	r3, [r2, #0]
}
 8009470:	e2b2      	b.n	80099d8 <Timer10+0x121c>
				osc=0;
 8009472:	4b5a      	ldr	r3, [pc, #360]	; (80095dc <Timer10+0xe20>)
 8009474:	2200      	movs	r2, #0
 8009476:	601a      	str	r2, [r3, #0]
				osccount=0;
 8009478:	4b57      	ldr	r3, [pc, #348]	; (80095d8 <Timer10+0xe1c>)
 800947a:	2200      	movs	r2, #0
 800947c:	601a      	str	r2, [r3, #0]
				stepfin=0;
 800947e:	4b58      	ldr	r3, [pc, #352]	; (80095e0 <Timer10+0xe24>)
 8009480:	2200      	movs	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
				oscpass=2;
 8009484:	4b57      	ldr	r3, [pc, #348]	; (80095e4 <Timer10+0xe28>)
 8009486:	2202      	movs	r2, #2
 8009488:	601a      	str	r2, [r3, #0]
				eqstepcounter=0;
 800948a:	4b4b      	ldr	r3, [pc, #300]	; (80095b8 <Timer10+0xdfc>)
 800948c:	2200      	movs	r2, #0
 800948e:	601a      	str	r2, [r3, #0]
				givecount=0;
 8009490:	4b48      	ldr	r3, [pc, #288]	; (80095b4 <Timer10+0xdf8>)
 8009492:	2200      	movs	r2, #0
 8009494:	601a      	str	r2, [r3, #0]
				sendexp=1;
 8009496:	4b54      	ldr	r3, [pc, #336]	; (80095e8 <Timer10+0xe2c>)
 8009498:	2201      	movs	r2, #1
 800949a:	601a      	str	r2, [r3, #0]
				ftos(firstpt,voltage);
 800949c:	4b53      	ldr	r3, [pc, #332]	; (80095ec <Timer10+0xe30>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4942      	ldr	r1, [pc, #264]	; (80095ac <Timer10+0xdf0>)
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7f8 fa88 	bl	80019b8 <ftos>
				motsender[0]=0;
 80094a8:	4b3f      	ldr	r3, [pc, #252]	; (80095a8 <Timer10+0xdec>)
 80094aa:	2200      	movs	r2, #0
 80094ac:	701a      	strb	r2, [r3, #0]
				strcat(motsender,voltage);
 80094ae:	493f      	ldr	r1, [pc, #252]	; (80095ac <Timer10+0xdf0>)
 80094b0:	483d      	ldr	r0, [pc, #244]	; (80095a8 <Timer10+0xdec>)
 80094b2:	f008 fb4a 	bl	8011b4a <strcat>
				strcat(motsender,"E\0");
 80094b6:	483c      	ldr	r0, [pc, #240]	; (80095a8 <Timer10+0xdec>)
 80094b8:	f7f6 fe86 	bl	80001c8 <strlen>
 80094bc:	4603      	mov	r3, r0
 80094be:	461a      	mov	r2, r3
 80094c0:	4b39      	ldr	r3, [pc, #228]	; (80095a8 <Timer10+0xdec>)
 80094c2:	4413      	add	r3, r2
 80094c4:	493a      	ldr	r1, [pc, #232]	; (80095b0 <Timer10+0xdf4>)
 80094c6:	461a      	mov	r2, r3
 80094c8:	460b      	mov	r3, r1
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	8013      	strh	r3, [r2, #0]
				SendPc(motsender, 5, 0);
 80094ce:	2200      	movs	r2, #0
 80094d0:	2105      	movs	r1, #5
 80094d2:	4835      	ldr	r0, [pc, #212]	; (80095a8 <Timer10+0xdec>)
 80094d4:	f7fb fef6 	bl	80052c4 <SendPc>
				GiveVolt(voltage);
 80094d8:	4834      	ldr	r0, [pc, #208]	; (80095ac <Timer10+0xdf0>)
 80094da:	f7fa f8b7 	bl	800364c <GiveVolt>
}
 80094de:	e27b      	b.n	80099d8 <Timer10+0x121c>
	else if(eqstep==1){//equal step
 80094e0:	4b43      	ldr	r3, [pc, #268]	; (80095f0 <Timer10+0xe34>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	f040 826b 	bne.w	80099c0 <Timer10+0x1204>
		if(eqstepcounter<2*stepnum){
 80094ea:	4b34      	ldr	r3, [pc, #208]	; (80095bc <Timer10+0xe00>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	005a      	lsls	r2, r3, #1
 80094f0:	4b31      	ldr	r3, [pc, #196]	; (80095b8 <Timer10+0xdfc>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	f340 81a2 	ble.w	800983e <Timer10+0x1082>
			if(eqstepcounter<stepnum){
 80094fa:	4b2f      	ldr	r3, [pc, #188]	; (80095b8 <Timer10+0xdfc>)
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	4b2f      	ldr	r3, [pc, #188]	; (80095bc <Timer10+0xe00>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	429a      	cmp	r2, r3
 8009504:	f280 809e 	bge.w	8009644 <Timer10+0xe88>
				if(givecount%2==0){
 8009508:	4b2a      	ldr	r3, [pc, #168]	; (80095b4 <Timer10+0xdf8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d171      	bne.n	80095f8 <Timer10+0xe3c>
					motsender[0]=0;
 8009514:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <Timer10+0xdec>)
 8009516:	2200      	movs	r2, #0
 8009518:	701a      	strb	r2, [r3, #0]
					datasender[0]=0;
 800951a:	4b2c      	ldr	r3, [pc, #176]	; (80095cc <Timer10+0xe10>)
 800951c:	2200      	movs	r2, #0
 800951e:	701a      	strb	r2, [r3, #0]
					itoa(loadnow,datasender,10);
 8009520:	4b2b      	ldr	r3, [pc, #172]	; (80095d0 <Timer10+0xe14>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	220a      	movs	r2, #10
 8009526:	4929      	ldr	r1, [pc, #164]	; (80095cc <Timer10+0xe10>)
 8009528:	4618      	mov	r0, r3
 800952a:	f008 faf9 	bl	8011b20 <itoa>
					strcat(datasender,"LM\0");
 800952e:	4827      	ldr	r0, [pc, #156]	; (80095cc <Timer10+0xe10>)
 8009530:	f7f6 fe4a 	bl	80001c8 <strlen>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	4b24      	ldr	r3, [pc, #144]	; (80095cc <Timer10+0xe10>)
 800953a:	4413      	add	r3, r2
 800953c:	4a25      	ldr	r2, [pc, #148]	; (80095d4 <Timer10+0xe18>)
 800953e:	8811      	ldrh	r1, [r2, #0]
 8009540:	7892      	ldrb	r2, [r2, #2]
 8009542:	8019      	strh	r1, [r3, #0]
 8009544:	709a      	strb	r2, [r3, #2]
					strcat(motsender,datasender);
 8009546:	4921      	ldr	r1, [pc, #132]	; (80095cc <Timer10+0xe10>)
 8009548:	4817      	ldr	r0, [pc, #92]	; (80095a8 <Timer10+0xdec>)
 800954a:	f008 fafe 	bl	8011b4a <strcat>
					SendPc(motsender, 5, 0);
 800954e:	2200      	movs	r2, #0
 8009550:	2105      	movs	r1, #5
 8009552:	4815      	ldr	r0, [pc, #84]	; (80095a8 <Timer10+0xdec>)
 8009554:	f7fb feb6 	bl	80052c4 <SendPc>
					if(firstdir==0){
 8009558:	4b26      	ldr	r3, [pc, #152]	; (80095f4 <Timer10+0xe38>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10c      	bne.n	800957a <Timer10+0xdbe>
						stepvolt=firstpt-stepdepth*(eqstepcounter+1);//
 8009560:	4b22      	ldr	r3, [pc, #136]	; (80095ec <Timer10+0xe30>)
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	4b14      	ldr	r3, [pc, #80]	; (80095b8 <Timer10+0xdfc>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3301      	adds	r3, #1
 800956a:	4916      	ldr	r1, [pc, #88]	; (80095c4 <Timer10+0xe08>)
 800956c:	6809      	ldr	r1, [r1, #0]
 800956e:	fb01 f303 	mul.w	r3, r1, r3
 8009572:	1ad3      	subs	r3, r2, r3
 8009574:	4a12      	ldr	r2, [pc, #72]	; (80095c0 <Timer10+0xe04>)
 8009576:	6013      	str	r3, [r2, #0]
 8009578:	e00b      	b.n	8009592 <Timer10+0xdd6>
						stepvolt=firstpt+stepdepth*(eqstepcounter+1);//
 800957a:	4b0f      	ldr	r3, [pc, #60]	; (80095b8 <Timer10+0xdfc>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3301      	adds	r3, #1
 8009580:	4a10      	ldr	r2, [pc, #64]	; (80095c4 <Timer10+0xe08>)
 8009582:	6812      	ldr	r2, [r2, #0]
 8009584:	fb02 f203 	mul.w	r2, r2, r3
 8009588:	4b18      	ldr	r3, [pc, #96]	; (80095ec <Timer10+0xe30>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4413      	add	r3, r2
 800958e:	4a0c      	ldr	r2, [pc, #48]	; (80095c0 <Timer10+0xe04>)
 8009590:	6013      	str	r3, [r2, #0]
					voltnow=stepvolt;
 8009592:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <Timer10+0xe04>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a0c      	ldr	r2, [pc, #48]	; (80095c8 <Timer10+0xe0c>)
 8009598:	6013      	str	r3, [r2, #0]
					ftos(stepvolt,voltage);
 800959a:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <Timer10+0xe04>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4903      	ldr	r1, [pc, #12]	; (80095ac <Timer10+0xdf0>)
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7f8 fa09 	bl	80019b8 <ftos>
 80095a6:	e047      	b.n	8009638 <Timer10+0xe7c>
 80095a8:	20004ce0 	.word	0x20004ce0
 80095ac:	20000004 	.word	0x20000004
 80095b0:	08012128 	.word	0x08012128
 80095b4:	200002d0 	.word	0x200002d0
 80095b8:	200002fc 	.word	0x200002fc
 80095bc:	200002f8 	.word	0x200002f8
 80095c0:	200002f4 	.word	0x200002f4
 80095c4:	200002f0 	.word	0x200002f0
 80095c8:	20000000 	.word	0x20000000
 80095cc:	20006bd8 	.word	0x20006bd8
 80095d0:	20000310 	.word	0x20000310
 80095d4:	080120ac 	.word	0x080120ac
 80095d8:	2000031c 	.word	0x2000031c
 80095dc:	20000314 	.word	0x20000314
 80095e0:	20001868 	.word	0x20001868
 80095e4:	20000320 	.word	0x20000320
 80095e8:	20000010 	.word	0x20000010
 80095ec:	20000018 	.word	0x20000018
 80095f0:	200002e4 	.word	0x200002e4
 80095f4:	20000304 	.word	0x20000304
					motsender[0]=0;
 80095f8:	4b9d      	ldr	r3, [pc, #628]	; (8009870 <Timer10+0x10b4>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	701a      	strb	r2, [r3, #0]
					strcat(motsender,voltage);
 80095fe:	499d      	ldr	r1, [pc, #628]	; (8009874 <Timer10+0x10b8>)
 8009600:	489b      	ldr	r0, [pc, #620]	; (8009870 <Timer10+0x10b4>)
 8009602:	f008 faa2 	bl	8011b4a <strcat>
					strcat(motsender,"E\0");
 8009606:	489a      	ldr	r0, [pc, #616]	; (8009870 <Timer10+0x10b4>)
 8009608:	f7f6 fdde 	bl	80001c8 <strlen>
 800960c:	4603      	mov	r3, r0
 800960e:	461a      	mov	r2, r3
 8009610:	4b97      	ldr	r3, [pc, #604]	; (8009870 <Timer10+0x10b4>)
 8009612:	4413      	add	r3, r2
 8009614:	4998      	ldr	r1, [pc, #608]	; (8009878 <Timer10+0x10bc>)
 8009616:	461a      	mov	r2, r3
 8009618:	460b      	mov	r3, r1
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	8013      	strh	r3, [r2, #0]
					SendPc(motsender, 5, 0);
 800961e:	2200      	movs	r2, #0
 8009620:	2105      	movs	r1, #5
 8009622:	4893      	ldr	r0, [pc, #588]	; (8009870 <Timer10+0x10b4>)
 8009624:	f7fb fe4e 	bl	80052c4 <SendPc>
					GiveVolt(voltage);
 8009628:	4892      	ldr	r0, [pc, #584]	; (8009874 <Timer10+0x10b8>)
 800962a:	f7fa f80f 	bl	800364c <GiveVolt>
					eqstepcounter++;
 800962e:	4b93      	ldr	r3, [pc, #588]	; (800987c <Timer10+0x10c0>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	3301      	adds	r3, #1
 8009634:	4a91      	ldr	r2, [pc, #580]	; (800987c <Timer10+0x10c0>)
 8009636:	6013      	str	r3, [r2, #0]
				givecount++;
 8009638:	4b91      	ldr	r3, [pc, #580]	; (8009880 <Timer10+0x10c4>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3301      	adds	r3, #1
 800963e:	4a90      	ldr	r2, [pc, #576]	; (8009880 <Timer10+0x10c4>)
 8009640:	6013      	str	r3, [r2, #0]
}
 8009642:	e1c9      	b.n	80099d8 <Timer10+0x121c>
			else if(eqstepcounter==stepnum&&calib.holdDur!=0){
 8009644:	4b8d      	ldr	r3, [pc, #564]	; (800987c <Timer10+0x10c0>)
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	4b8e      	ldr	r3, [pc, #568]	; (8009884 <Timer10+0x10c8>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	429a      	cmp	r2, r3
 800964e:	d158      	bne.n	8009702 <Timer10+0xf46>
 8009650:	4b8d      	ldr	r3, [pc, #564]	; (8009888 <Timer10+0x10cc>)
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d054      	beq.n	8009702 <Timer10+0xf46>
				calHoldCount++;
 8009658:	4b8c      	ldr	r3, [pc, #560]	; (800988c <Timer10+0x10d0>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3301      	adds	r3, #1
 800965e:	4a8b      	ldr	r2, [pc, #556]	; (800988c <Timer10+0x10d0>)
 8009660:	6013      	str	r3, [r2, #0]
				motsender[0]=0;
 8009662:	4b83      	ldr	r3, [pc, #524]	; (8009870 <Timer10+0x10b4>)
 8009664:	2200      	movs	r2, #0
 8009666:	701a      	strb	r2, [r3, #0]
				datasender[0]=0;
 8009668:	4b89      	ldr	r3, [pc, #548]	; (8009890 <Timer10+0x10d4>)
 800966a:	2200      	movs	r2, #0
 800966c:	701a      	strb	r2, [r3, #0]
				itoa(loadnow,datasender,10);
 800966e:	4b89      	ldr	r3, [pc, #548]	; (8009894 <Timer10+0x10d8>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	220a      	movs	r2, #10
 8009674:	4986      	ldr	r1, [pc, #536]	; (8009890 <Timer10+0x10d4>)
 8009676:	4618      	mov	r0, r3
 8009678:	f008 fa52 	bl	8011b20 <itoa>
				strcat(datasender,"LM\0");
 800967c:	4884      	ldr	r0, [pc, #528]	; (8009890 <Timer10+0x10d4>)
 800967e:	f7f6 fda3 	bl	80001c8 <strlen>
 8009682:	4603      	mov	r3, r0
 8009684:	461a      	mov	r2, r3
 8009686:	4b82      	ldr	r3, [pc, #520]	; (8009890 <Timer10+0x10d4>)
 8009688:	4413      	add	r3, r2
 800968a:	4a83      	ldr	r2, [pc, #524]	; (8009898 <Timer10+0x10dc>)
 800968c:	8811      	ldrh	r1, [r2, #0]
 800968e:	7892      	ldrb	r2, [r2, #2]
 8009690:	8019      	strh	r1, [r3, #0]
 8009692:	709a      	strb	r2, [r3, #2]
				strcat(motsender,datasender);
 8009694:	497e      	ldr	r1, [pc, #504]	; (8009890 <Timer10+0x10d4>)
 8009696:	4876      	ldr	r0, [pc, #472]	; (8009870 <Timer10+0x10b4>)
 8009698:	f008 fa57 	bl	8011b4a <strcat>
				SendPc(motsender, 5, 0);
 800969c:	2200      	movs	r2, #0
 800969e:	2105      	movs	r1, #5
 80096a0:	4873      	ldr	r0, [pc, #460]	; (8009870 <Timer10+0x10b4>)
 80096a2:	f7fb fe0f 	bl	80052c4 <SendPc>
				if(calHoldCount==calib.holdDur){
 80096a6:	4b78      	ldr	r3, [pc, #480]	; (8009888 <Timer10+0x10cc>)
 80096a8:	68da      	ldr	r2, [r3, #12]
 80096aa:	4b78      	ldr	r3, [pc, #480]	; (800988c <Timer10+0x10d0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d11c      	bne.n	80096ec <Timer10+0xf30>
					eqstepcounter++;
 80096b2:	4b72      	ldr	r3, [pc, #456]	; (800987c <Timer10+0x10c0>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3301      	adds	r3, #1
 80096b8:	4a70      	ldr	r2, [pc, #448]	; (800987c <Timer10+0x10c0>)
 80096ba:	6013      	str	r3, [r2, #0]
					TimeSet(&htim10, caltime*1000);
 80096bc:	4b77      	ldr	r3, [pc, #476]	; (800989c <Timer10+0x10e0>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096c4:	fb02 f303 	mul.w	r3, r2, r3
 80096c8:	4619      	mov	r1, r3
 80096ca:	4875      	ldr	r0, [pc, #468]	; (80098a0 <Timer10+0x10e4>)
 80096cc:	f001 fda4 	bl	800b218 <TimeSet>
					if(returncheck==1){
 80096d0:	4b74      	ldr	r3, [pc, #464]	; (80098a4 <Timer10+0x10e8>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d103      	bne.n	80096e0 <Timer10+0xf24>
						calHoldCount=2;
 80096d8:	4b6c      	ldr	r3, [pc, #432]	; (800988c <Timer10+0x10d0>)
 80096da:	2202      	movs	r2, #2
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	e005      	b.n	80096ec <Timer10+0xf30>
						calHoldCount=0;
 80096e0:	4b6a      	ldr	r3, [pc, #424]	; (800988c <Timer10+0x10d0>)
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
						calib.holdDur=0;
 80096e6:	4b68      	ldr	r3, [pc, #416]	; (8009888 <Timer10+0x10cc>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	60da      	str	r2, [r3, #12]
				if(calHoldCount==1){
 80096ec:	4b67      	ldr	r3, [pc, #412]	; (800988c <Timer10+0x10d0>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	f040 8171 	bne.w	80099d8 <Timer10+0x121c>
					TimeSet(&htim10, 1000);
 80096f6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80096fa:	4869      	ldr	r0, [pc, #420]	; (80098a0 <Timer10+0x10e4>)
 80096fc:	f001 fd8c 	bl	800b218 <TimeSet>
				if(calHoldCount==1){
 8009700:	e16a      	b.n	80099d8 <Timer10+0x121c>
			else if(eqstepcounter>=stepnum-1&&returncheck==1){
 8009702:	4b60      	ldr	r3, [pc, #384]	; (8009884 <Timer10+0x10c8>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	1e5a      	subs	r2, r3, #1
 8009708:	4b5c      	ldr	r3, [pc, #368]	; (800987c <Timer10+0x10c0>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	429a      	cmp	r2, r3
 800970e:	f300 8084 	bgt.w	800981a <Timer10+0x105e>
 8009712:	4b64      	ldr	r3, [pc, #400]	; (80098a4 <Timer10+0x10e8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	2b01      	cmp	r3, #1
 8009718:	d17f      	bne.n	800981a <Timer10+0x105e>
				if(givecount%2==0){
 800971a:	4b59      	ldr	r3, [pc, #356]	; (8009880 <Timer10+0x10c4>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d153      	bne.n	80097ce <Timer10+0x1012>
					motsender[0]=0;
 8009726:	4b52      	ldr	r3, [pc, #328]	; (8009870 <Timer10+0x10b4>)
 8009728:	2200      	movs	r2, #0
 800972a:	701a      	strb	r2, [r3, #0]
					datasender[0]=0;
 800972c:	4b58      	ldr	r3, [pc, #352]	; (8009890 <Timer10+0x10d4>)
 800972e:	2200      	movs	r2, #0
 8009730:	701a      	strb	r2, [r3, #0]
					itoa(loadnow,datasender,10);
 8009732:	4b58      	ldr	r3, [pc, #352]	; (8009894 <Timer10+0x10d8>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	220a      	movs	r2, #10
 8009738:	4955      	ldr	r1, [pc, #340]	; (8009890 <Timer10+0x10d4>)
 800973a:	4618      	mov	r0, r3
 800973c:	f008 f9f0 	bl	8011b20 <itoa>
					strcat(datasender,"LM\0");
 8009740:	4853      	ldr	r0, [pc, #332]	; (8009890 <Timer10+0x10d4>)
 8009742:	f7f6 fd41 	bl	80001c8 <strlen>
 8009746:	4603      	mov	r3, r0
 8009748:	461a      	mov	r2, r3
 800974a:	4b51      	ldr	r3, [pc, #324]	; (8009890 <Timer10+0x10d4>)
 800974c:	4413      	add	r3, r2
 800974e:	4a52      	ldr	r2, [pc, #328]	; (8009898 <Timer10+0x10dc>)
 8009750:	8811      	ldrh	r1, [r2, #0]
 8009752:	7892      	ldrb	r2, [r2, #2]
 8009754:	8019      	strh	r1, [r3, #0]
 8009756:	709a      	strb	r2, [r3, #2]
					strcat(motsender,datasender);
 8009758:	494d      	ldr	r1, [pc, #308]	; (8009890 <Timer10+0x10d4>)
 800975a:	4845      	ldr	r0, [pc, #276]	; (8009870 <Timer10+0x10b4>)
 800975c:	f008 f9f5 	bl	8011b4a <strcat>
					SendPc(motsender, 5, 0);
 8009760:	2200      	movs	r2, #0
 8009762:	2105      	movs	r1, #5
 8009764:	4842      	ldr	r0, [pc, #264]	; (8009870 <Timer10+0x10b4>)
 8009766:	f7fb fdad 	bl	80052c4 <SendPc>
					firstpt=voltnow;
 800976a:	4b4f      	ldr	r3, [pc, #316]	; (80098a8 <Timer10+0x10ec>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a4f      	ldr	r2, [pc, #316]	; (80098ac <Timer10+0x10f0>)
 8009770:	6013      	str	r3, [r2, #0]
					if(firstdir==1){
 8009772:	4b4f      	ldr	r3, [pc, #316]	; (80098b0 <Timer10+0x10f4>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b01      	cmp	r3, #1
 8009778:	d107      	bne.n	800978a <Timer10+0xfce>
						stepvolt=firstpt-stepdepth;//
 800977a:	4b4c      	ldr	r3, [pc, #304]	; (80098ac <Timer10+0x10f0>)
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	4b4d      	ldr	r3, [pc, #308]	; (80098b4 <Timer10+0x10f8>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	4a4c      	ldr	r2, [pc, #304]	; (80098b8 <Timer10+0x10fc>)
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	e006      	b.n	8009798 <Timer10+0xfdc>
						stepvolt=firstpt+stepdepth;//
 800978a:	4b48      	ldr	r3, [pc, #288]	; (80098ac <Timer10+0x10f0>)
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	4b49      	ldr	r3, [pc, #292]	; (80098b4 <Timer10+0x10f8>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4413      	add	r3, r2
 8009794:	4a48      	ldr	r2, [pc, #288]	; (80098b8 <Timer10+0x10fc>)
 8009796:	6013      	str	r3, [r2, #0]
					voltnow=stepvolt;
 8009798:	4b47      	ldr	r3, [pc, #284]	; (80098b8 <Timer10+0x10fc>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a42      	ldr	r2, [pc, #264]	; (80098a8 <Timer10+0x10ec>)
 800979e:	6013      	str	r3, [r2, #0]
					ftos(stepvolt,voltage);
 80097a0:	4b45      	ldr	r3, [pc, #276]	; (80098b8 <Timer10+0x10fc>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4933      	ldr	r1, [pc, #204]	; (8009874 <Timer10+0x10b8>)
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7f8 f906 	bl	80019b8 <ftos>
					if(calib.holdDur!=0 && calHoldCount==2){
 80097ac:	4b36      	ldr	r3, [pc, #216]	; (8009888 <Timer10+0x10cc>)
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d02c      	beq.n	800980e <Timer10+0x1052>
 80097b4:	4b35      	ldr	r3, [pc, #212]	; (800988c <Timer10+0x10d0>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d128      	bne.n	800980e <Timer10+0x1052>
						stepnum=stepnum+1;
 80097bc:	4b31      	ldr	r3, [pc, #196]	; (8009884 <Timer10+0x10c8>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3301      	adds	r3, #1
 80097c2:	4a30      	ldr	r2, [pc, #192]	; (8009884 <Timer10+0x10c8>)
 80097c4:	6013      	str	r3, [r2, #0]
						calHoldCount=0;
 80097c6:	4b31      	ldr	r3, [pc, #196]	; (800988c <Timer10+0x10d0>)
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	e01f      	b.n	800980e <Timer10+0x1052>
					motsender[0]=0;
 80097ce:	4b28      	ldr	r3, [pc, #160]	; (8009870 <Timer10+0x10b4>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	701a      	strb	r2, [r3, #0]
					strcat(motsender,voltage);
 80097d4:	4927      	ldr	r1, [pc, #156]	; (8009874 <Timer10+0x10b8>)
 80097d6:	4826      	ldr	r0, [pc, #152]	; (8009870 <Timer10+0x10b4>)
 80097d8:	f008 f9b7 	bl	8011b4a <strcat>
					strcat(motsender,"E\0");
 80097dc:	4824      	ldr	r0, [pc, #144]	; (8009870 <Timer10+0x10b4>)
 80097de:	f7f6 fcf3 	bl	80001c8 <strlen>
 80097e2:	4603      	mov	r3, r0
 80097e4:	461a      	mov	r2, r3
 80097e6:	4b22      	ldr	r3, [pc, #136]	; (8009870 <Timer10+0x10b4>)
 80097e8:	4413      	add	r3, r2
 80097ea:	4923      	ldr	r1, [pc, #140]	; (8009878 <Timer10+0x10bc>)
 80097ec:	461a      	mov	r2, r3
 80097ee:	460b      	mov	r3, r1
 80097f0:	881b      	ldrh	r3, [r3, #0]
 80097f2:	8013      	strh	r3, [r2, #0]
					SendPc(motsender, 5, 0);
 80097f4:	2200      	movs	r2, #0
 80097f6:	2105      	movs	r1, #5
 80097f8:	481d      	ldr	r0, [pc, #116]	; (8009870 <Timer10+0x10b4>)
 80097fa:	f7fb fd63 	bl	80052c4 <SendPc>
					GiveVolt(voltage);
 80097fe:	481d      	ldr	r0, [pc, #116]	; (8009874 <Timer10+0x10b8>)
 8009800:	f7f9 ff24 	bl	800364c <GiveVolt>
					eqstepcounter++;
 8009804:	4b1d      	ldr	r3, [pc, #116]	; (800987c <Timer10+0x10c0>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3301      	adds	r3, #1
 800980a:	4a1c      	ldr	r2, [pc, #112]	; (800987c <Timer10+0x10c0>)
 800980c:	6013      	str	r3, [r2, #0]
				givecount++;
 800980e:	4b1c      	ldr	r3, [pc, #112]	; (8009880 <Timer10+0x10c4>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	3301      	adds	r3, #1
 8009814:	4a1a      	ldr	r2, [pc, #104]	; (8009880 <Timer10+0x10c4>)
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	e0de      	b.n	80099d8 <Timer10+0x121c>
			else if(eqstepcounter>=stepnum&&returncheck==0){
 800981a:	4b18      	ldr	r3, [pc, #96]	; (800987c <Timer10+0x10c0>)
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	4b19      	ldr	r3, [pc, #100]	; (8009884 <Timer10+0x10c8>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	429a      	cmp	r2, r3
 8009824:	f2c0 80d8 	blt.w	80099d8 <Timer10+0x121c>
 8009828:	4b1e      	ldr	r3, [pc, #120]	; (80098a4 <Timer10+0x10e8>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	f040 80d3 	bne.w	80099d8 <Timer10+0x121c>
				eqstepcounter=2*stepnum;
 8009832:	4b14      	ldr	r3, [pc, #80]	; (8009884 <Timer10+0x10c8>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	4a10      	ldr	r2, [pc, #64]	; (800987c <Timer10+0x10c0>)
 800983a:	6013      	str	r3, [r2, #0]
}
 800983c:	e0cc      	b.n	80099d8 <Timer10+0x121c>
			if(expcount!=-1){
 800983e:	4b1f      	ldr	r3, [pc, #124]	; (80098bc <Timer10+0x1100>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009846:	d041      	beq.n	80098cc <Timer10+0x1110>
				eqstep=0;
 8009848:	4b1d      	ldr	r3, [pc, #116]	; (80098c0 <Timer10+0x1104>)
 800984a:	2200      	movs	r2, #0
 800984c:	601a      	str	r2, [r3, #0]
				eqstepcounter=0;
 800984e:	4b0b      	ldr	r3, [pc, #44]	; (800987c <Timer10+0x10c0>)
 8009850:	2200      	movs	r2, #0
 8009852:	601a      	str	r2, [r3, #0]
				givecount=0;
 8009854:	4b0a      	ldr	r3, [pc, #40]	; (8009880 <Timer10+0x10c4>)
 8009856:	2200      	movs	r2, #0
 8009858:	601a      	str	r2, [r3, #0]
				firstdir=0;
 800985a:	4b15      	ldr	r3, [pc, #84]	; (80098b0 <Timer10+0x10f4>)
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]
				sendexp=1;
 8009860:	4b18      	ldr	r3, [pc, #96]	; (80098c4 <Timer10+0x1108>)
 8009862:	2201      	movs	r2, #1
 8009864:	601a      	str	r2, [r3, #0]
				TimeSet(&htim10, 100000);
 8009866:	4918      	ldr	r1, [pc, #96]	; (80098c8 <Timer10+0x110c>)
 8009868:	480d      	ldr	r0, [pc, #52]	; (80098a0 <Timer10+0x10e4>)
 800986a:	f001 fcd5 	bl	800b218 <TimeSet>
}
 800986e:	e0b3      	b.n	80099d8 <Timer10+0x121c>
 8009870:	20004ce0 	.word	0x20004ce0
 8009874:	20000004 	.word	0x20000004
 8009878:	08012128 	.word	0x08012128
 800987c:	200002fc 	.word	0x200002fc
 8009880:	200002d0 	.word	0x200002d0
 8009884:	200002f8 	.word	0x200002f8
 8009888:	200018fc 	.word	0x200018fc
 800988c:	20001890 	.word	0x20001890
 8009890:	20006bd8 	.word	0x20006bd8
 8009894:	20000310 	.word	0x20000310
 8009898:	080120ac 	.word	0x080120ac
 800989c:	20000014 	.word	0x20000014
 80098a0:	20006af8 	.word	0x20006af8
 80098a4:	200002ec 	.word	0x200002ec
 80098a8:	20000000 	.word	0x20000000
 80098ac:	20000018 	.word	0x20000018
 80098b0:	20000304 	.word	0x20000304
 80098b4:	200002f0 	.word	0x200002f0
 80098b8:	200002f4 	.word	0x200002f4
 80098bc:	2000001c 	.word	0x2000001c
 80098c0:	200002e4 	.word	0x200002e4
 80098c4:	20000010 	.word	0x20000010
 80098c8:	000186a0 	.word	0x000186a0
			else if(calib.holdDur!=0 && returncheck!=0){
 80098cc:	4b43      	ldr	r3, [pc, #268]	; (80099dc <Timer10+0x1220>)
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d040      	beq.n	8009956 <Timer10+0x119a>
 80098d4:	4b42      	ldr	r3, [pc, #264]	; (80099e0 <Timer10+0x1224>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d03c      	beq.n	8009956 <Timer10+0x119a>
				calHoldCount++;
 80098dc:	4b41      	ldr	r3, [pc, #260]	; (80099e4 <Timer10+0x1228>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	3301      	adds	r3, #1
 80098e2:	4a40      	ldr	r2, [pc, #256]	; (80099e4 <Timer10+0x1228>)
 80098e4:	6013      	str	r3, [r2, #0]
				motsender[0]=0;
 80098e6:	4b40      	ldr	r3, [pc, #256]	; (80099e8 <Timer10+0x122c>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	701a      	strb	r2, [r3, #0]
				datasender[0]=0;
 80098ec:	4b3f      	ldr	r3, [pc, #252]	; (80099ec <Timer10+0x1230>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	701a      	strb	r2, [r3, #0]
				itoa(loadnow,datasender,10);
 80098f2:	4b3f      	ldr	r3, [pc, #252]	; (80099f0 <Timer10+0x1234>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	220a      	movs	r2, #10
 80098f8:	493c      	ldr	r1, [pc, #240]	; (80099ec <Timer10+0x1230>)
 80098fa:	4618      	mov	r0, r3
 80098fc:	f008 f910 	bl	8011b20 <itoa>
				strcat(datasender,"LM\0");
 8009900:	483a      	ldr	r0, [pc, #232]	; (80099ec <Timer10+0x1230>)
 8009902:	f7f6 fc61 	bl	80001c8 <strlen>
 8009906:	4603      	mov	r3, r0
 8009908:	461a      	mov	r2, r3
 800990a:	4b38      	ldr	r3, [pc, #224]	; (80099ec <Timer10+0x1230>)
 800990c:	4413      	add	r3, r2
 800990e:	4a39      	ldr	r2, [pc, #228]	; (80099f4 <Timer10+0x1238>)
 8009910:	8811      	ldrh	r1, [r2, #0]
 8009912:	7892      	ldrb	r2, [r2, #2]
 8009914:	8019      	strh	r1, [r3, #0]
 8009916:	709a      	strb	r2, [r3, #2]
				strcat(motsender,datasender);
 8009918:	4934      	ldr	r1, [pc, #208]	; (80099ec <Timer10+0x1230>)
 800991a:	4833      	ldr	r0, [pc, #204]	; (80099e8 <Timer10+0x122c>)
 800991c:	f008 f915 	bl	8011b4a <strcat>
				SendPc(motsender, 5, 0);
 8009920:	2200      	movs	r2, #0
 8009922:	2105      	movs	r1, #5
 8009924:	4830      	ldr	r0, [pc, #192]	; (80099e8 <Timer10+0x122c>)
 8009926:	f7fb fccd 	bl	80052c4 <SendPc>
				if(calHoldCount==calib.holdDur){
 800992a:	4b2c      	ldr	r3, [pc, #176]	; (80099dc <Timer10+0x1220>)
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	4b2d      	ldr	r3, [pc, #180]	; (80099e4 <Timer10+0x1228>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	429a      	cmp	r2, r3
 8009934:	d105      	bne.n	8009942 <Timer10+0x1186>
					calib.holdDur=0;
 8009936:	4b29      	ldr	r3, [pc, #164]	; (80099dc <Timer10+0x1220>)
 8009938:	2200      	movs	r2, #0
 800993a:	60da      	str	r2, [r3, #12]
					calHoldCount=0;
 800993c:	4b29      	ldr	r3, [pc, #164]	; (80099e4 <Timer10+0x1228>)
 800993e:	2200      	movs	r2, #0
 8009940:	601a      	str	r2, [r3, #0]
				if(calHoldCount==1){
 8009942:	4b28      	ldr	r3, [pc, #160]	; (80099e4 <Timer10+0x1228>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d146      	bne.n	80099d8 <Timer10+0x121c>
					TimeSet(&htim10, 1000);
 800994a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800994e:	482a      	ldr	r0, [pc, #168]	; (80099f8 <Timer10+0x123c>)
 8009950:	f001 fc62 	bl	800b218 <TimeSet>
				if(calHoldCount==1){
 8009954:	e040      	b.n	80099d8 <Timer10+0x121c>
				eqstep=0;
 8009956:	4b29      	ldr	r3, [pc, #164]	; (80099fc <Timer10+0x1240>)
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]
				eqstepcounter=0;
 800995c:	4b28      	ldr	r3, [pc, #160]	; (8009a00 <Timer10+0x1244>)
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
				givecount=0;
 8009962:	4b28      	ldr	r3, [pc, #160]	; (8009a04 <Timer10+0x1248>)
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]
				firstdir=0;
 8009968:	4b27      	ldr	r3, [pc, #156]	; (8009a08 <Timer10+0x124c>)
 800996a:	2200      	movs	r2, #0
 800996c:	601a      	str	r2, [r3, #0]
				HAL_TIM_Base_Stop_IT(&htim10);
 800996e:	4822      	ldr	r0, [pc, #136]	; (80099f8 <Timer10+0x123c>)
 8009970:	f005 faf9 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
				readingpc[0]=0;
 8009974:	4b25      	ldr	r3, [pc, #148]	; (8009a0c <Timer10+0x1250>)
 8009976:	2200      	movs	r2, #0
 8009978:	701a      	strb	r2, [r3, #0]
				strcat(readingpc,"Calibration_Finished\0");
 800997a:	4824      	ldr	r0, [pc, #144]	; (8009a0c <Timer10+0x1250>)
 800997c:	f7f6 fc24 	bl	80001c8 <strlen>
 8009980:	4603      	mov	r3, r0
 8009982:	461a      	mov	r2, r3
 8009984:	4b21      	ldr	r3, [pc, #132]	; (8009a0c <Timer10+0x1250>)
 8009986:	4413      	add	r3, r2
 8009988:	4a21      	ldr	r2, [pc, #132]	; (8009a10 <Timer10+0x1254>)
 800998a:	461d      	mov	r5, r3
 800998c:	4614      	mov	r4, r2
 800998e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009990:	6028      	str	r0, [r5, #0]
 8009992:	6069      	str	r1, [r5, #4]
 8009994:	60aa      	str	r2, [r5, #8]
 8009996:	60eb      	str	r3, [r5, #12]
 8009998:	6820      	ldr	r0, [r4, #0]
 800999a:	6128      	str	r0, [r5, #16]
 800999c:	7923      	ldrb	r3, [r4, #4]
 800999e:	752b      	strb	r3, [r5, #20]
				SendPc(readingpc, 5, ID_FIND);
 80099a0:	2202      	movs	r2, #2
 80099a2:	2105      	movs	r1, #5
 80099a4:	4819      	ldr	r0, [pc, #100]	; (8009a0c <Timer10+0x1250>)
 80099a6:	f7fb fc8d 	bl	80052c4 <SendPc>
				uart2say=1;
 80099aa:	4b1a      	ldr	r3, [pc, #104]	; (8009a14 <Timer10+0x1258>)
 80099ac:	2201      	movs	r2, #1
 80099ae:	601a      	str	r2, [r3, #0]
				ProcessRx(3);
 80099b0:	2003      	movs	r0, #3
 80099b2:	f7fb fd1f 	bl	80053f4 <ProcessRx>
				TimeSet(&htim12, 100000);
 80099b6:	4918      	ldr	r1, [pc, #96]	; (8009a18 <Timer10+0x125c>)
 80099b8:	4818      	ldr	r0, [pc, #96]	; (8009a1c <Timer10+0x1260>)
 80099ba:	f001 fc2d 	bl	800b218 <TimeSet>
}
 80099be:	e00b      	b.n	80099d8 <Timer10+0x121c>
		HAL_TIM_Base_Stop_IT(&htim10);
 80099c0:	480d      	ldr	r0, [pc, #52]	; (80099f8 <Timer10+0x123c>)
 80099c2:	f005 fad0 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
		uart2say=0;
 80099c6:	4b13      	ldr	r3, [pc, #76]	; (8009a14 <Timer10+0x1258>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]
		SendPc("TAMAMDIR", 5, 0);
 80099cc:	2200      	movs	r2, #0
 80099ce:	2105      	movs	r1, #5
 80099d0:	4813      	ldr	r0, [pc, #76]	; (8009a20 <Timer10+0x1264>)
 80099d2:	f7fb fc77 	bl	80052c4 <SendPc>
}
 80099d6:	e7ff      	b.n	80099d8 <Timer10+0x121c>
 80099d8:	bf00      	nop
 80099da:	bdb0      	pop	{r4, r5, r7, pc}
 80099dc:	200018fc 	.word	0x200018fc
 80099e0:	200002ec 	.word	0x200002ec
 80099e4:	20001890 	.word	0x20001890
 80099e8:	20004ce0 	.word	0x20004ce0
 80099ec:	20006bd8 	.word	0x20006bd8
 80099f0:	20000310 	.word	0x20000310
 80099f4:	080120ac 	.word	0x080120ac
 80099f8:	20006af8 	.word	0x20006af8
 80099fc:	200002e4 	.word	0x200002e4
 8009a00:	200002fc 	.word	0x200002fc
 8009a04:	200002d0 	.word	0x200002d0
 8009a08:	20000304 	.word	0x20000304
 8009a0c:	200073f4 	.word	0x200073f4
 8009a10:	0801212c 	.word	0x0801212c
 8009a14:	200018b0 	.word	0x200018b0
 8009a18:	000186a0 	.word	0x000186a0
 8009a1c:	20006ec8 	.word	0x20006ec8
 8009a20:	08012144 	.word	0x08012144

08009a24 <Timer11>:

void Timer11(void){
 8009a24:	b580      	push	{r7, lr}
 8009a26:	af00      	add	r7, sp, #0
	//	TimeSet(&htim11, 1000000/bossayac);
	//}
	//if(bossayac==100000){
	//	bossayac=0;
	//}
	if(pccom==0){
 8009a28:	4b43      	ldr	r3, [pc, #268]	; (8009b38 <Timer11+0x114>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d119      	bne.n	8009a64 <Timer11+0x40>
		pcInit.RxSize=1;
 8009a30:	4b42      	ldr	r3, [pc, #264]	; (8009b3c <Timer11+0x118>)
 8009a32:	2201      	movs	r2, #1
 8009a34:	611a      	str	r2, [r3, #16]
		pcInit.ComId=1;
 8009a36:	4b41      	ldr	r3, [pc, #260]	; (8009b3c <Timer11+0x118>)
 8009a38:	2201      	movs	r2, #1
 8009a3a:	761a      	strb	r2, [r3, #24]
		_uartcom3=&pcInit;
 8009a3c:	4b40      	ldr	r3, [pc, #256]	; (8009b40 <Timer11+0x11c>)
 8009a3e:	4a3f      	ldr	r2, [pc, #252]	; (8009b3c <Timer11+0x118>)
 8009a40:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3,_uartcom3->RxBuf , 1);
 8009a42:	4b3f      	ldr	r3, [pc, #252]	; (8009b40 <Timer11+0x11c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	4619      	mov	r1, r3
 8009a4c:	483d      	ldr	r0, [pc, #244]	; (8009b44 <Timer11+0x120>)
 8009a4e:	f006 fb1b 	bl	8010088 <HAL_UART_Receive_IT>
		if(initalize<5){
 8009a52:	4b3d      	ldr	r3, [pc, #244]	; (8009b48 <Timer11+0x124>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b04      	cmp	r3, #4
 8009a58:	dc6b      	bgt.n	8009b32 <Timer11+0x10e>
			initalize=-1;
 8009a5a:	4b3b      	ldr	r3, [pc, #236]	; (8009b48 <Timer11+0x124>)
 8009a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a60:	601a      	str	r2, [r3, #0]
			initalize=6;
		}
	}
	}

}
 8009a62:	e066      	b.n	8009b32 <Timer11+0x10e>
	if (initalize==0&&tryuc%2==0){//Resack of com2 pc com..
 8009a64:	4b38      	ldr	r3, [pc, #224]	; (8009b48 <Timer11+0x124>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d109      	bne.n	8009a80 <Timer11+0x5c>
 8009a6c:	4b37      	ldr	r3, [pc, #220]	; (8009b4c <Timer11+0x128>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d103      	bne.n	8009a80 <Timer11+0x5c>
		SendAct("", "");
 8009a78:	4935      	ldr	r1, [pc, #212]	; (8009b50 <Timer11+0x12c>)
 8009a7a:	4835      	ldr	r0, [pc, #212]	; (8009b50 <Timer11+0x12c>)
 8009a7c:	f001 fe7a 	bl	800b774 <SendAct>
	if(contproc==1&&tryuc%2==0){
 8009a80:	4b34      	ldr	r3, [pc, #208]	; (8009b54 <Timer11+0x130>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d154      	bne.n	8009b32 <Timer11+0x10e>
 8009a88:	4b30      	ldr	r3, [pc, #192]	; (8009b4c <Timer11+0x128>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0301 	and.w	r3, r3, #1
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d14e      	bne.n	8009b32 <Timer11+0x10e>
		adding[0]='$';
 8009a94:	4b30      	ldr	r3, [pc, #192]	; (8009b58 <Timer11+0x134>)
 8009a96:	2224      	movs	r2, #36	; 0x24
 8009a98:	701a      	strb	r2, [r3, #0]
		adding[1]='\0';
 8009a9a:	4b2f      	ldr	r3, [pc, #188]	; (8009b58 <Timer11+0x134>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	705a      	strb	r2, [r3, #1]
		if(initalize>0&&initalize<3){
 8009aa0:	4b29      	ldr	r3, [pc, #164]	; (8009b48 <Timer11+0x124>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	dd10      	ble.n	8009aca <Timer11+0xa6>
 8009aa8:	4b27      	ldr	r3, [pc, #156]	; (8009b48 <Timer11+0x124>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b02      	cmp	r3, #2
 8009aae:	dc0c      	bgt.n	8009aca <Timer11+0xa6>
			mesaj="1\0";
 8009ab0:	4b2a      	ldr	r3, [pc, #168]	; (8009b5c <Timer11+0x138>)
 8009ab2:	4a2b      	ldr	r2, [pc, #172]	; (8009b60 <Timer11+0x13c>)
 8009ab4:	601a      	str	r2, [r3, #0]
			SendAct(adding,mesaj);
 8009ab6:	4b29      	ldr	r3, [pc, #164]	; (8009b5c <Timer11+0x138>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4619      	mov	r1, r3
 8009abc:	4826      	ldr	r0, [pc, #152]	; (8009b58 <Timer11+0x134>)
 8009abe:	f001 fe59 	bl	800b774 <SendAct>
			HAL_TIM_Base_Stop_IT(&htim11);
 8009ac2:	4828      	ldr	r0, [pc, #160]	; (8009b64 <Timer11+0x140>)
 8009ac4:	f005 fa4f 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
 8009ac8:	e033      	b.n	8009b32 <Timer11+0x10e>
		else if(initalize>2&&initalize<5){
 8009aca:	4b1f      	ldr	r3, [pc, #124]	; (8009b48 <Timer11+0x124>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	dd10      	ble.n	8009af4 <Timer11+0xd0>
 8009ad2:	4b1d      	ldr	r3, [pc, #116]	; (8009b48 <Timer11+0x124>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b04      	cmp	r3, #4
 8009ad8:	dc0c      	bgt.n	8009af4 <Timer11+0xd0>
			mesaj="0\0";
 8009ada:	4b20      	ldr	r3, [pc, #128]	; (8009b5c <Timer11+0x138>)
 8009adc:	4a22      	ldr	r2, [pc, #136]	; (8009b68 <Timer11+0x144>)
 8009ade:	601a      	str	r2, [r3, #0]
			SendAct(adding,mesaj);
 8009ae0:	4b1e      	ldr	r3, [pc, #120]	; (8009b5c <Timer11+0x138>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4619      	mov	r1, r3
 8009ae6:	481c      	ldr	r0, [pc, #112]	; (8009b58 <Timer11+0x134>)
 8009ae8:	f001 fe44 	bl	800b774 <SendAct>
			HAL_TIM_Base_Stop_IT(&htim11);
 8009aec:	481d      	ldr	r0, [pc, #116]	; (8009b64 <Timer11+0x140>)
 8009aee:	f005 fa3a 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
 8009af2:	e01e      	b.n	8009b32 <Timer11+0x10e>
		else if(initalize==5){//initially set for internal control.
 8009af4:	4b14      	ldr	r3, [pc, #80]	; (8009b48 <Timer11+0x124>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b05      	cmp	r3, #5
 8009afa:	d11a      	bne.n	8009b32 <Timer11+0x10e>
			adding[0]='T';
 8009afc:	4b16      	ldr	r3, [pc, #88]	; (8009b58 <Timer11+0x134>)
 8009afe:	2254      	movs	r2, #84	; 0x54
 8009b00:	701a      	strb	r2, [r3, #0]
			mesaj="1\0";
 8009b02:	4b16      	ldr	r3, [pc, #88]	; (8009b5c <Timer11+0x138>)
 8009b04:	4a16      	ldr	r2, [pc, #88]	; (8009b60 <Timer11+0x13c>)
 8009b06:	601a      	str	r2, [r3, #0]
			SendAct(adding, mesaj);
 8009b08:	4b14      	ldr	r3, [pc, #80]	; (8009b5c <Timer11+0x138>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4812      	ldr	r0, [pc, #72]	; (8009b58 <Timer11+0x134>)
 8009b10:	f001 fe30 	bl	800b774 <SendAct>
			HAL_TIM_Base_Stop_IT(&htim11);
 8009b14:	4813      	ldr	r0, [pc, #76]	; (8009b64 <Timer11+0x140>)
 8009b16:	f005 fa26 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
			contproc=0;
 8009b1a:	4b0e      	ldr	r3, [pc, #56]	; (8009b54 <Timer11+0x130>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]
			SendPc("Connected_to_UC45_",5, ID_FIND);
 8009b20:	2202      	movs	r2, #2
 8009b22:	2105      	movs	r1, #5
 8009b24:	4811      	ldr	r0, [pc, #68]	; (8009b6c <Timer11+0x148>)
 8009b26:	f7fb fbcd 	bl	80052c4 <SendPc>
			initalize=6;
 8009b2a:	4b07      	ldr	r3, [pc, #28]	; (8009b48 <Timer11+0x124>)
 8009b2c:	2206      	movs	r2, #6
 8009b2e:	601a      	str	r2, [r3, #0]
}
 8009b30:	e7ff      	b.n	8009b32 <Timer11+0x10e>
 8009b32:	bf00      	nop
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	200018b4 	.word	0x200018b4
 8009b3c:	20000058 	.word	0x20000058
 8009b40:	20006f30 	.word	0x20006f30
 8009b44:	20006a64 	.word	0x20006a64
 8009b48:	200002c0 	.word	0x200002c0
 8009b4c:	20000038 	.word	0x20000038
 8009b50:	08012150 	.word	0x08012150
 8009b54:	200002c4 	.word	0x200002c4
 8009b58:	20007088 	.word	0x20007088
 8009b5c:	20006f6c 	.word	0x20006f6c
 8009b60:	08012154 	.word	0x08012154
 8009b64:	20006c78 	.word	0x20006c78
 8009b68:	08012158 	.word	0x08012158
 8009b6c:	0801215c 	.word	0x0801215c

08009b70 <Timer12>:

void Timer12(void){
 8009b70:	b580      	push	{r7, lr}
 8009b72:	af00      	add	r7, sp, #0
	if (!(_uartcom1->UResult & Rx_Cplt)&&sendexp==-1&&eqstep==0&&tryuc%2==0)
 8009b74:	4b4b      	ldr	r3, [pc, #300]	; (8009ca4 <Timer12+0x134>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	7e5b      	ldrb	r3, [r3, #25]
 8009b7a:	f003 0301 	and.w	r3, r3, #1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d144      	bne.n	8009c0c <Timer12+0x9c>
 8009b82:	4b49      	ldr	r3, [pc, #292]	; (8009ca8 <Timer12+0x138>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b8a:	d13f      	bne.n	8009c0c <Timer12+0x9c>
 8009b8c:	4b47      	ldr	r3, [pc, #284]	; (8009cac <Timer12+0x13c>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d13b      	bne.n	8009c0c <Timer12+0x9c>
 8009b94:	4b46      	ldr	r3, [pc, #280]	; (8009cb0 <Timer12+0x140>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f003 0301 	and.w	r3, r3, #1
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d135      	bne.n	8009c0c <Timer12+0x9c>
	{
		Rx_Timer1++;
 8009ba0:	4b44      	ldr	r3, [pc, #272]	; (8009cb4 <Timer12+0x144>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	4a43      	ldr	r2, [pc, #268]	; (8009cb4 <Timer12+0x144>)
 8009ba8:	6013      	str	r3, [r2, #0]
		if (100 <= Rx_Timer1)
 8009baa:	4b42      	ldr	r3, [pc, #264]	; (8009cb4 <Timer12+0x144>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b63      	cmp	r3, #99	; 0x63
 8009bb0:	d936      	bls.n	8009c20 <Timer12+0xb0>
		{
			_uartcom1->UResult |= Rx_Tout;
 8009bb2:	4b3c      	ldr	r3, [pc, #240]	; (8009ca4 <Timer12+0x134>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	7e5a      	ldrb	r2, [r3, #25]
 8009bb8:	4b3a      	ldr	r3, [pc, #232]	; (8009ca4 <Timer12+0x134>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f042 0204 	orr.w	r2, r2, #4
 8009bc0:	b2d2      	uxtb	r2, r2
 8009bc2:	765a      	strb	r2, [r3, #25]
			Rx_Timer1 = 0;
 8009bc4:	4b3b      	ldr	r3, [pc, #236]	; (8009cb4 <Timer12+0x144>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	601a      	str	r2, [r3, #0]
			if(pccom==1&&tryuc%2==0)
 8009bca:	4b3b      	ldr	r3, [pc, #236]	; (8009cb8 <Timer12+0x148>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d115      	bne.n	8009bfe <Timer12+0x8e>
 8009bd2:	4b37      	ldr	r3, [pc, #220]	; (8009cb0 <Timer12+0x140>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10f      	bne.n	8009bfe <Timer12+0x8e>
			{
				pcInit.ComId=2;
 8009bde:	4b37      	ldr	r3, [pc, #220]	; (8009cbc <Timer12+0x14c>)
 8009be0:	2202      	movs	r2, #2
 8009be2:	761a      	strb	r2, [r3, #24]
				SendPc("UC45_NOT_RESPONDING!", 5, ID_FIND);
 8009be4:	2202      	movs	r2, #2
 8009be6:	2105      	movs	r1, #5
 8009be8:	4835      	ldr	r0, [pc, #212]	; (8009cc0 <Timer12+0x150>)
 8009bea:	f7fb fb6b 	bl	80052c4 <SendPc>
				HAL_TIM_Base_Start_IT(&htim11);
 8009bee:	4835      	ldr	r0, [pc, #212]	; (8009cc4 <Timer12+0x154>)
 8009bf0:	f005 f995 	bl	800ef1e <HAL_TIM_Base_Start_IT>
				tryuc++;
 8009bf4:	4b2e      	ldr	r3, [pc, #184]	; (8009cb0 <Timer12+0x140>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	4a2d      	ldr	r2, [pc, #180]	; (8009cb0 <Timer12+0x140>)
 8009bfc:	6013      	str	r3, [r2, #0]
			}
			initalize=0;
 8009bfe:	4b32      	ldr	r3, [pc, #200]	; (8009cc8 <Timer12+0x158>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]
			contproc=0;
 8009c04:	4b31      	ldr	r3, [pc, #196]	; (8009ccc <Timer12+0x15c>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	601a      	str	r2, [r3, #0]
		if (100 <= Rx_Timer1)
 8009c0a:	e009      	b.n	8009c20 <Timer12+0xb0>
		}
	}
	else if((_uartcom1->UResult & Rx_Cplt)){
 8009c0c:	4b25      	ldr	r3, [pc, #148]	; (8009ca4 <Timer12+0x134>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	7e5b      	ldrb	r3, [r3, #25]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <Timer12+0xb0>
		Rx_Timer1=0;
 8009c1a:	4b26      	ldr	r3, [pc, #152]	; (8009cb4 <Timer12+0x144>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]
	//		{
	//			_uartcom1->UResult |= Tx_Tout;
	//			Tx_Timer1 = 0;
	//		}
	//	}
	if (!(_uartcom3->UResult & Rx_Cplt))
 8009c20:	4b2b      	ldr	r3, [pc, #172]	; (8009cd0 <Timer12+0x160>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	7e5b      	ldrb	r3, [r3, #25]
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d137      	bne.n	8009c9e <Timer12+0x12e>
	{
		Rx_Timer3++;
 8009c2e:	4b29      	ldr	r3, [pc, #164]	; (8009cd4 <Timer12+0x164>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	3301      	adds	r3, #1
 8009c34:	4a27      	ldr	r2, [pc, #156]	; (8009cd4 <Timer12+0x164>)
 8009c36:	6013      	str	r3, [r2, #0]
		if (10 <= Rx_Timer3)
 8009c38:	4b26      	ldr	r3, [pc, #152]	; (8009cd4 <Timer12+0x164>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b09      	cmp	r3, #9
 8009c3e:	d92e      	bls.n	8009c9e <Timer12+0x12e>
		{
			DummyRead2();
 8009c40:	f7fb fb32 	bl	80052a8 <DummyRead2>
			_uartcom3->UResult |= Rx_Tout;
 8009c44:	4b22      	ldr	r3, [pc, #136]	; (8009cd0 <Timer12+0x160>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	7e5a      	ldrb	r2, [r3, #25]
 8009c4a:	4b21      	ldr	r3, [pc, #132]	; (8009cd0 <Timer12+0x160>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f042 0204 	orr.w	r2, r2, #4
 8009c52:	b2d2      	uxtb	r2, r2
 8009c54:	765a      	strb	r2, [r3, #25]
			if((sendexp!=-1||retracting==1)&&writingpc[0]!=0 && uart2say==1 && sendingPc==0 && readPc==0){
 8009c56:	4b14      	ldr	r3, [pc, #80]	; (8009ca8 <Timer12+0x138>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c5e:	d103      	bne.n	8009c68 <Timer12+0xf8>
 8009c60:	4b1d      	ldr	r3, [pc, #116]	; (8009cd8 <Timer12+0x168>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d11a      	bne.n	8009c9e <Timer12+0x12e>
 8009c68:	4b1c      	ldr	r3, [pc, #112]	; (8009cdc <Timer12+0x16c>)
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d016      	beq.n	8009c9e <Timer12+0x12e>
 8009c70:	4b1b      	ldr	r3, [pc, #108]	; (8009ce0 <Timer12+0x170>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d112      	bne.n	8009c9e <Timer12+0x12e>
 8009c78:	4b1a      	ldr	r3, [pc, #104]	; (8009ce4 <Timer12+0x174>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10e      	bne.n	8009c9e <Timer12+0x12e>
 8009c80:	4b19      	ldr	r3, [pc, #100]	; (8009ce8 <Timer12+0x178>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10a      	bne.n	8009c9e <Timer12+0x12e>
				SendPc(writingpc, _uartcom3->RxSize, 0);
 8009c88:	4b11      	ldr	r3, [pc, #68]	; (8009cd0 <Timer12+0x160>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	4619      	mov	r1, r3
 8009c92:	4812      	ldr	r0, [pc, #72]	; (8009cdc <Timer12+0x16c>)
 8009c94:	f7fb fb16 	bl	80052c4 <SendPc>
				Rx_Timer3 = 0;
 8009c98:	4b0e      	ldr	r3, [pc, #56]	; (8009cd4 <Timer12+0x164>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	601a      	str	r2, [r3, #0]
	//			HAL_TIM_Base_Start_IT(&htim11);
	//		}
	//	}


}
 8009c9e:	bf00      	nop
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	2000745c 	.word	0x2000745c
 8009ca8:	20000010 	.word	0x20000010
 8009cac:	200002e4 	.word	0x200002e4
 8009cb0:	20000038 	.word	0x20000038
 8009cb4:	200018a8 	.word	0x200018a8
 8009cb8:	200018b4 	.word	0x200018b4
 8009cbc:	20000058 	.word	0x20000058
 8009cc0:	08012170 	.word	0x08012170
 8009cc4:	20006c78 	.word	0x20006c78
 8009cc8:	200002c0 	.word	0x200002c0
 8009ccc:	200002c4 	.word	0x200002c4
 8009cd0:	20006f30 	.word	0x20006f30
 8009cd4:	200018ac 	.word	0x200018ac
 8009cd8:	20000358 	.word	0x20000358
 8009cdc:	20007290 	.word	0x20007290
 8009ce0:	200018b0 	.word	0x200018b0
 8009ce4:	20001870 	.word	0x20001870
 8009ce8:	2000186c 	.word	0x2000186c

08009cec <Timer13>:

void Timer13(void){
 8009cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cee:	b08b      	sub	sp, #44	; 0x2c
 8009cf0:	af04      	add	r7, sp, #16
	if(movxy==1){
 8009cf2:	4b9e      	ldr	r3, [pc, #632]	; (8009f6c <Timer13+0x280>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	f040 82d9 	bne.w	800a2ae <Timer13+0x5c2>
		if(xmov==1){
 8009cfc:	4b9c      	ldr	r3, [pc, #624]	; (8009f70 <Timer13+0x284>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d113      	bne.n	8009d2c <Timer13+0x40>
			HAL_GPIO_WritePin(L293DD_ENABLE1_GPIO_Port, L293DD_ENABLE1_Pin, GPIO_PIN_SET);
 8009d04:	2201      	movs	r2, #1
 8009d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d0a:	489a      	ldr	r0, [pc, #616]	; (8009f74 <Timer13+0x288>)
 8009d0c:	f003 f8a4 	bl	800ce58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(XN_GPIO_Port, XN_Pin, GPIO_PIN_RESET);
 8009d10:	2200      	movs	r2, #0
 8009d12:	2140      	movs	r1, #64	; 0x40
 8009d14:	4898      	ldr	r0, [pc, #608]	; (8009f78 <Timer13+0x28c>)
 8009d16:	f003 f89f 	bl	800ce58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(XP_GPIO_Port, XP_Pin, GPIO_PIN_SET);
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	2120      	movs	r1, #32
 8009d1e:	4896      	ldr	r0, [pc, #600]	; (8009f78 <Timer13+0x28c>)
 8009d20:	f003 f89a 	bl	800ce58 <HAL_GPIO_WritePin>
			xmov=2;
 8009d24:	4b92      	ldr	r3, [pc, #584]	; (8009f70 <Timer13+0x284>)
 8009d26:	2202      	movs	r2, #2
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	e146      	b.n	8009fba <Timer13+0x2ce>
		}
		else if(xmov==2){
 8009d2c:	4b90      	ldr	r3, [pc, #576]	; (8009f70 <Timer13+0x284>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	f040 8083 	bne.w	8009e3c <Timer13+0x150>
			HAL_GPIO_WritePin(XP_GPIO_Port, XP_Pin, GPIO_PIN_RESET);
 8009d36:	2200      	movs	r2, #0
 8009d38:	2120      	movs	r1, #32
 8009d3a:	488f      	ldr	r0, [pc, #572]	; (8009f78 <Timer13+0x28c>)
 8009d3c:	f003 f88c 	bl	800ce58 <HAL_GPIO_WritePin>
			y_enc[0]=TIM2->CNT;
 8009d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	4a8d      	ldr	r2, [pc, #564]	; (8009f7c <Timer13+0x290>)
 8009d48:	6013      	str	r3, [r2, #0]
			x_enc[0]=TIM8->CNT;
 8009d4a:	4b8d      	ldr	r3, [pc, #564]	; (8009f80 <Timer13+0x294>)
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	4a8d      	ldr	r2, [pc, #564]	; (8009f84 <Timer13+0x298>)
 8009d50:	6013      	str	r3, [r2, #0]
			if(xcount>=xsteps){
 8009d52:	4b8d      	ldr	r3, [pc, #564]	; (8009f88 <Timer13+0x29c>)
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	4b8d      	ldr	r3, [pc, #564]	; (8009f8c <Timer13+0x2a0>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	db53      	blt.n	8009e06 <Timer13+0x11a>
				HAL_GPIO_WritePin(L293DD_ENABLE1_GPIO_Port, L293DD_ENABLE1_Pin, GPIO_PIN_RESET);
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d64:	4883      	ldr	r0, [pc, #524]	; (8009f74 <Timer13+0x288>)
 8009d66:	f003 f877 	bl	800ce58 <HAL_GPIO_WritePin>
				xmov=0;
 8009d6a:	4b81      	ldr	r3, [pc, #516]	; (8009f70 <Timer13+0x284>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]
				if(ymov==0){
 8009d70:	4b87      	ldr	r3, [pc, #540]	; (8009f90 <Timer13+0x2a4>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d102      	bne.n	8009d7e <Timer13+0x92>
					movxy=0;
 8009d78:	4b7c      	ldr	r3, [pc, #496]	; (8009f6c <Timer13+0x280>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	601a      	str	r2, [r3, #0]
				}
				xysend[0]=0;
 8009d7e:	4b85      	ldr	r3, [pc, #532]	; (8009f94 <Timer13+0x2a8>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	701a      	strb	r2, [r3, #0]
				itoa(x_enc[0],xysend,10);
 8009d84:	4b7f      	ldr	r3, [pc, #508]	; (8009f84 <Timer13+0x298>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	220a      	movs	r2, #10
 8009d8a:	4982      	ldr	r1, [pc, #520]	; (8009f94 <Timer13+0x2a8>)
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f007 fec7 	bl	8011b20 <itoa>
				strcat(xysend,"+Y\0");
 8009d92:	4880      	ldr	r0, [pc, #512]	; (8009f94 <Timer13+0x2a8>)
 8009d94:	f7f6 fa18 	bl	80001c8 <strlen>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	4b7d      	ldr	r3, [pc, #500]	; (8009f94 <Timer13+0x2a8>)
 8009d9e:	4413      	add	r3, r2
 8009da0:	4a7d      	ldr	r2, [pc, #500]	; (8009f98 <Timer13+0x2ac>)
 8009da2:	8811      	ldrh	r1, [r2, #0]
 8009da4:	7892      	ldrb	r2, [r2, #2]
 8009da6:	8019      	strh	r1, [r3, #0]
 8009da8:	709a      	strb	r2, [r3, #2]
				SendPc(xysend, 5, 0);
 8009daa:	2200      	movs	r2, #0
 8009dac:	2105      	movs	r1, #5
 8009dae:	4879      	ldr	r0, [pc, #484]	; (8009f94 <Timer13+0x2a8>)
 8009db0:	f7fb fa88 	bl	80052c4 <SendPc>
				if(joyint2>9){
 8009db4:	4b79      	ldr	r3, [pc, #484]	; (8009f9c <Timer13+0x2b0>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b09      	cmp	r3, #9
 8009dba:	dd05      	ble.n	8009dc8 <Timer13+0xdc>
					joyint2=joyint2-12;
 8009dbc:	4b77      	ldr	r3, [pc, #476]	; (8009f9c <Timer13+0x2b0>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3b0c      	subs	r3, #12
 8009dc2:	4a76      	ldr	r2, [pc, #472]	; (8009f9c <Timer13+0x2b0>)
 8009dc4:	6013      	str	r3, [r2, #0]
 8009dc6:	e008      	b.n	8009dda <Timer13+0xee>
				}
				else if(joyint2>5){
 8009dc8:	4b74      	ldr	r3, [pc, #464]	; (8009f9c <Timer13+0x2b0>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b05      	cmp	r3, #5
 8009dce:	dd04      	ble.n	8009dda <Timer13+0xee>
					joyint2 = joyint2 - 6;
 8009dd0:	4b72      	ldr	r3, [pc, #456]	; (8009f9c <Timer13+0x2b0>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3b06      	subs	r3, #6
 8009dd6:	4a71      	ldr	r2, [pc, #452]	; (8009f9c <Timer13+0x2b0>)
 8009dd8:	6013      	str	r3, [r2, #0]
				}
				if(joyint2==0){
 8009dda:	4b70      	ldr	r3, [pc, #448]	; (8009f9c <Timer13+0x2b0>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	f040 80eb 	bne.w	8009fba <Timer13+0x2ce>
					//TimeSet(&htim13, 100000);
					isHXcom=0;
 8009de4:	4b6e      	ldr	r3, [pc, #440]	; (8009fa0 <Timer13+0x2b4>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	601a      	str	r2, [r3, #0]
					if(isAutoApproach==2){
 8009dea:	4b6e      	ldr	r3, [pc, #440]	; (8009fa4 <Timer13+0x2b8>)
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	f040 80e3 	bne.w	8009fba <Timer13+0x2ce>
						autoApproach(3);
 8009df4:	2003      	movs	r0, #3
 8009df6:	f7f8 ff3f 	bl	8002c78 <autoApproach>
						encodMove=encodMove-1;
 8009dfa:	4b6b      	ldr	r3, [pc, #428]	; (8009fa8 <Timer13+0x2bc>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	4a69      	ldr	r2, [pc, #420]	; (8009fa8 <Timer13+0x2bc>)
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	e0d9      	b.n	8009fba <Timer13+0x2ce>
					}
				}
			}
			else{
				xmov=1;
 8009e06:	4b5a      	ldr	r3, [pc, #360]	; (8009f70 <Timer13+0x284>)
 8009e08:	2201      	movs	r2, #1
 8009e0a:	601a      	str	r2, [r3, #0]
				if(encodMove %2==1){
 8009e0c:	4b66      	ldr	r3, [pc, #408]	; (8009fa8 <Timer13+0x2bc>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	bfb8      	it	lt
 8009e18:	425b      	neglt	r3, r3
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d108      	bne.n	8009e30 <Timer13+0x144>
					xcount=x_enc[0]-32767;
 8009e1e:	4b59      	ldr	r3, [pc, #356]	; (8009f84 <Timer13+0x298>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 8009e26:	3b7f      	subs	r3, #127	; 0x7f
 8009e28:	461a      	mov	r2, r3
 8009e2a:	4b57      	ldr	r3, [pc, #348]	; (8009f88 <Timer13+0x29c>)
 8009e2c:	601a      	str	r2, [r3, #0]
 8009e2e:	e0c4      	b.n	8009fba <Timer13+0x2ce>
				}
				else{
					xcount++;
 8009e30:	4b55      	ldr	r3, [pc, #340]	; (8009f88 <Timer13+0x29c>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	3301      	adds	r3, #1
 8009e36:	4a54      	ldr	r2, [pc, #336]	; (8009f88 <Timer13+0x29c>)
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	e0be      	b.n	8009fba <Timer13+0x2ce>
				}
			}
		}
		else if(xmov==3){
 8009e3c:	4b4c      	ldr	r3, [pc, #304]	; (8009f70 <Timer13+0x284>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	d113      	bne.n	8009e6c <Timer13+0x180>
			HAL_GPIO_WritePin(L293DD_ENABLE1_GPIO_Port, L293DD_ENABLE1_Pin, GPIO_PIN_SET);
 8009e44:	2201      	movs	r2, #1
 8009e46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009e4a:	484a      	ldr	r0, [pc, #296]	; (8009f74 <Timer13+0x288>)
 8009e4c:	f003 f804 	bl	800ce58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(XP_GPIO_Port, XP_Pin, GPIO_PIN_RESET);
 8009e50:	2200      	movs	r2, #0
 8009e52:	2120      	movs	r1, #32
 8009e54:	4848      	ldr	r0, [pc, #288]	; (8009f78 <Timer13+0x28c>)
 8009e56:	f002 ffff 	bl	800ce58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(XN_GPIO_Port, XN_Pin, GPIO_PIN_SET);
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	2140      	movs	r1, #64	; 0x40
 8009e5e:	4846      	ldr	r0, [pc, #280]	; (8009f78 <Timer13+0x28c>)
 8009e60:	f002 fffa 	bl	800ce58 <HAL_GPIO_WritePin>
			xmov=4;
 8009e64:	4b42      	ldr	r3, [pc, #264]	; (8009f70 <Timer13+0x284>)
 8009e66:	2204      	movs	r2, #4
 8009e68:	601a      	str	r2, [r3, #0]
 8009e6a:	e0a6      	b.n	8009fba <Timer13+0x2ce>
		}
		else if(xmov==4){
 8009e6c:	4b40      	ldr	r3, [pc, #256]	; (8009f70 <Timer13+0x284>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b04      	cmp	r3, #4
 8009e72:	f040 80a2 	bne.w	8009fba <Timer13+0x2ce>
			HAL_GPIO_WritePin(XN_GPIO_Port, XN_Pin, GPIO_PIN_RESET);
 8009e76:	2200      	movs	r2, #0
 8009e78:	2140      	movs	r1, #64	; 0x40
 8009e7a:	483f      	ldr	r0, [pc, #252]	; (8009f78 <Timer13+0x28c>)
 8009e7c:	f002 ffec 	bl	800ce58 <HAL_GPIO_WritePin>
			y_enc[0]=TIM2->CNT;
 8009e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e86:	4a3d      	ldr	r2, [pc, #244]	; (8009f7c <Timer13+0x290>)
 8009e88:	6013      	str	r3, [r2, #0]
			x_enc[0]=TIM8->CNT;
 8009e8a:	4b3d      	ldr	r3, [pc, #244]	; (8009f80 <Timer13+0x294>)
 8009e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e8e:	4a3d      	ldr	r2, [pc, #244]	; (8009f84 <Timer13+0x298>)
 8009e90:	6013      	str	r3, [r2, #0]
			if(xcount>=xsteps){
 8009e92:	4b3d      	ldr	r3, [pc, #244]	; (8009f88 <Timer13+0x29c>)
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	4b3d      	ldr	r3, [pc, #244]	; (8009f8c <Timer13+0x2a0>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	db51      	blt.n	8009f42 <Timer13+0x256>
				HAL_GPIO_WritePin(L293DD_ENABLE1_GPIO_Port, L293DD_ENABLE1_Pin, GPIO_PIN_RESET);
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009ea4:	4833      	ldr	r0, [pc, #204]	; (8009f74 <Timer13+0x288>)
 8009ea6:	f002 ffd7 	bl	800ce58 <HAL_GPIO_WritePin>
				xmov=0;
 8009eaa:	4b31      	ldr	r3, [pc, #196]	; (8009f70 <Timer13+0x284>)
 8009eac:	2200      	movs	r2, #0
 8009eae:	601a      	str	r2, [r3, #0]
				if(ymov==0){
 8009eb0:	4b37      	ldr	r3, [pc, #220]	; (8009f90 <Timer13+0x2a4>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <Timer13+0x1d2>
					movxy=0;
 8009eb8:	4b2c      	ldr	r3, [pc, #176]	; (8009f6c <Timer13+0x280>)
 8009eba:	2200      	movs	r2, #0
 8009ebc:	601a      	str	r2, [r3, #0]
				}
				xysend[0]=0;
 8009ebe:	4b35      	ldr	r3, [pc, #212]	; (8009f94 <Timer13+0x2a8>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	701a      	strb	r2, [r3, #0]
				itoa(x_enc[0],xysend,10);
 8009ec4:	4b2f      	ldr	r3, [pc, #188]	; (8009f84 <Timer13+0x298>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	220a      	movs	r2, #10
 8009eca:	4932      	ldr	r1, [pc, #200]	; (8009f94 <Timer13+0x2a8>)
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f007 fe27 	bl	8011b20 <itoa>
				strcat(xysend,"-Y\0");
 8009ed2:	4830      	ldr	r0, [pc, #192]	; (8009f94 <Timer13+0x2a8>)
 8009ed4:	f7f6 f978 	bl	80001c8 <strlen>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	461a      	mov	r2, r3
 8009edc:	4b2d      	ldr	r3, [pc, #180]	; (8009f94 <Timer13+0x2a8>)
 8009ede:	4413      	add	r3, r2
 8009ee0:	4a32      	ldr	r2, [pc, #200]	; (8009fac <Timer13+0x2c0>)
 8009ee2:	8811      	ldrh	r1, [r2, #0]
 8009ee4:	7892      	ldrb	r2, [r2, #2]
 8009ee6:	8019      	strh	r1, [r3, #0]
 8009ee8:	709a      	strb	r2, [r3, #2]
				SendPc(xysend, 5, 0);
 8009eea:	2200      	movs	r2, #0
 8009eec:	2105      	movs	r1, #5
 8009eee:	4829      	ldr	r0, [pc, #164]	; (8009f94 <Timer13+0x2a8>)
 8009ef0:	f7fb f9e8 	bl	80052c4 <SendPc>
				if(joyint2>9){
 8009ef4:	4b29      	ldr	r3, [pc, #164]	; (8009f9c <Timer13+0x2b0>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b09      	cmp	r3, #9
 8009efa:	dd05      	ble.n	8009f08 <Timer13+0x21c>
					joyint2=joyint2-12;
 8009efc:	4b27      	ldr	r3, [pc, #156]	; (8009f9c <Timer13+0x2b0>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	3b0c      	subs	r3, #12
 8009f02:	4a26      	ldr	r2, [pc, #152]	; (8009f9c <Timer13+0x2b0>)
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	e008      	b.n	8009f1a <Timer13+0x22e>
				}
				else if(joyint2>5){
 8009f08:	4b24      	ldr	r3, [pc, #144]	; (8009f9c <Timer13+0x2b0>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b05      	cmp	r3, #5
 8009f0e:	dd04      	ble.n	8009f1a <Timer13+0x22e>
					joyint2 = joyint2 - 6;
 8009f10:	4b22      	ldr	r3, [pc, #136]	; (8009f9c <Timer13+0x2b0>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3b06      	subs	r3, #6
 8009f16:	4a21      	ldr	r2, [pc, #132]	; (8009f9c <Timer13+0x2b0>)
 8009f18:	6013      	str	r3, [r2, #0]
				}
				if(joyint2==0){
 8009f1a:	4b20      	ldr	r3, [pc, #128]	; (8009f9c <Timer13+0x2b0>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d14b      	bne.n	8009fba <Timer13+0x2ce>
					//TimeSet(&htim13, 100000);
					isHXcom=0;
 8009f22:	4b1f      	ldr	r3, [pc, #124]	; (8009fa0 <Timer13+0x2b4>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]
					if(isAutoApproach==2){
 8009f28:	4b1e      	ldr	r3, [pc, #120]	; (8009fa4 <Timer13+0x2b8>)
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d144      	bne.n	8009fba <Timer13+0x2ce>
						encodMove=encodMove-1;
 8009f30:	4b1d      	ldr	r3, [pc, #116]	; (8009fa8 <Timer13+0x2bc>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	3b01      	subs	r3, #1
 8009f36:	4a1c      	ldr	r2, [pc, #112]	; (8009fa8 <Timer13+0x2bc>)
 8009f38:	6013      	str	r3, [r2, #0]
						autoApproach(3);
 8009f3a:	2003      	movs	r0, #3
 8009f3c:	f7f8 fe9c 	bl	8002c78 <autoApproach>
 8009f40:	e03b      	b.n	8009fba <Timer13+0x2ce>
					}
				}
			}
			else{
				xmov=3;
 8009f42:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <Timer13+0x284>)
 8009f44:	2203      	movs	r2, #3
 8009f46:	601a      	str	r2, [r3, #0]
				if(encodMove %2==1){
 8009f48:	4b17      	ldr	r3, [pc, #92]	; (8009fa8 <Timer13+0x2bc>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f003 0301 	and.w	r3, r3, #1
 8009f52:	bfb8      	it	lt
 8009f54:	425b      	neglt	r3, r3
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d12a      	bne.n	8009fb0 <Timer13+0x2c4>
					xcount=32767-x_enc[0];
 8009f5a:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <Timer13+0x298>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 8009f62:	337f      	adds	r3, #127	; 0x7f
 8009f64:	461a      	mov	r2, r3
 8009f66:	4b08      	ldr	r3, [pc, #32]	; (8009f88 <Timer13+0x29c>)
 8009f68:	601a      	str	r2, [r3, #0]
 8009f6a:	e026      	b.n	8009fba <Timer13+0x2ce>
 8009f6c:	20000368 	.word	0x20000368
 8009f70:	2000036c 	.word	0x2000036c
 8009f74:	40020400 	.word	0x40020400
 8009f78:	40021000 	.word	0x40021000
 8009f7c:	20006f60 	.word	0x20006f60
 8009f80:	40010400 	.word	0x40010400
 8009f84:	20006f50 	.word	0x20006f50
 8009f88:	20001874 	.word	0x20001874
 8009f8c:	20000374 	.word	0x20000374
 8009f90:	20000370 	.word	0x20000370
 8009f94:	20006f44 	.word	0x20006f44
 8009f98:	08012188 	.word	0x08012188
 8009f9c:	2000181c 	.word	0x2000181c
 8009fa0:	20001830 	.word	0x20001830
 8009fa4:	200002d8 	.word	0x200002d8
 8009fa8:	2000037c 	.word	0x2000037c
 8009fac:	0801218c 	.word	0x0801218c
				}
				else{
					xcount++;
 8009fb0:	4ba2      	ldr	r3, [pc, #648]	; (800a23c <Timer13+0x550>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	4aa1      	ldr	r2, [pc, #644]	; (800a23c <Timer13+0x550>)
 8009fb8:	6013      	str	r3, [r2, #0]
				}
			}

		}
		if(ymov==1){
 8009fba:	4ba1      	ldr	r3, [pc, #644]	; (800a240 <Timer13+0x554>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d115      	bne.n	8009fee <Timer13+0x302>
			HAL_GPIO_WritePin(L293DD_ENABLE2_GPIO_Port, L293DD_ENABLE2_Pin, GPIO_PIN_SET);
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009fc8:	489e      	ldr	r0, [pc, #632]	; (800a244 <Timer13+0x558>)
 8009fca:	f002 ff45 	bl	800ce58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YN_GPIO_Port, YN_Pin, GPIO_PIN_RESET);
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009fd4:	489b      	ldr	r0, [pc, #620]	; (800a244 <Timer13+0x558>)
 8009fd6:	f002 ff3f 	bl	800ce58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YP_GPIO_Port, YP_Pin, GPIO_PIN_SET);
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009fe0:	4898      	ldr	r0, [pc, #608]	; (800a244 <Timer13+0x558>)
 8009fe2:	f002 ff39 	bl	800ce58 <HAL_GPIO_WritePin>
			ymov=2;
 8009fe6:	4b96      	ldr	r3, [pc, #600]	; (800a240 <Timer13+0x554>)
 8009fe8:	2202      	movs	r2, #2
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	e15f      	b.n	800a2ae <Timer13+0x5c2>
		}
		else if(ymov==2){
 8009fee:	4b94      	ldr	r3, [pc, #592]	; (800a240 <Timer13+0x554>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	f040 808a 	bne.w	800a10c <Timer13+0x420>
			HAL_GPIO_WritePin(YP_GPIO_Port, YP_Pin, GPIO_PIN_RESET);
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009ffe:	4891      	ldr	r0, [pc, #580]	; (800a244 <Timer13+0x558>)
 800a000:	f002 ff2a 	bl	800ce58 <HAL_GPIO_WritePin>
			y_enc[0]=TIM2->CNT;
 800a004:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00a:	4a8f      	ldr	r2, [pc, #572]	; (800a248 <Timer13+0x55c>)
 800a00c:	6013      	str	r3, [r2, #0]
			x_enc[0]=TIM8->CNT;
 800a00e:	4b8f      	ldr	r3, [pc, #572]	; (800a24c <Timer13+0x560>)
 800a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a012:	4a8f      	ldr	r2, [pc, #572]	; (800a250 <Timer13+0x564>)
 800a014:	6013      	str	r3, [r2, #0]
			if(ycount>=ysteps){
 800a016:	4b8f      	ldr	r3, [pc, #572]	; (800a254 <Timer13+0x568>)
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	4b8f      	ldr	r3, [pc, #572]	; (800a258 <Timer13+0x56c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	db5e      	blt.n	800a0e0 <Timer13+0x3f4>
				HAL_GPIO_WritePin(L293DD_ENABLE2_GPIO_Port, L293DD_ENABLE2_Pin, GPIO_PIN_RESET);
 800a022:	2200      	movs	r2, #0
 800a024:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a028:	4886      	ldr	r0, [pc, #536]	; (800a244 <Timer13+0x558>)
 800a02a:	f002 ff15 	bl	800ce58 <HAL_GPIO_WritePin>
				ymov=0;
 800a02e:	4b84      	ldr	r3, [pc, #528]	; (800a240 <Timer13+0x554>)
 800a030:	2200      	movs	r2, #0
 800a032:	601a      	str	r2, [r3, #0]
				if(xmov==0){
 800a034:	4b89      	ldr	r3, [pc, #548]	; (800a25c <Timer13+0x570>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d102      	bne.n	800a042 <Timer13+0x356>
					movxy=0;
 800a03c:	4b88      	ldr	r3, [pc, #544]	; (800a260 <Timer13+0x574>)
 800a03e:	2200      	movs	r2, #0
 800a040:	601a      	str	r2, [r3, #0]
				}
				xysend[0]=0;
 800a042:	4b88      	ldr	r3, [pc, #544]	; (800a264 <Timer13+0x578>)
 800a044:	2200      	movs	r2, #0
 800a046:	701a      	strb	r2, [r3, #0]
				itoa(y_enc[0],xysend,10);
 800a048:	4b7f      	ldr	r3, [pc, #508]	; (800a248 <Timer13+0x55c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	220a      	movs	r2, #10
 800a04e:	4985      	ldr	r1, [pc, #532]	; (800a264 <Timer13+0x578>)
 800a050:	4618      	mov	r0, r3
 800a052:	f007 fd65 	bl	8011b20 <itoa>
				strcat(xysend,"+X\0");
 800a056:	4883      	ldr	r0, [pc, #524]	; (800a264 <Timer13+0x578>)
 800a058:	f7f6 f8b6 	bl	80001c8 <strlen>
 800a05c:	4603      	mov	r3, r0
 800a05e:	461a      	mov	r2, r3
 800a060:	4b80      	ldr	r3, [pc, #512]	; (800a264 <Timer13+0x578>)
 800a062:	4413      	add	r3, r2
 800a064:	4a80      	ldr	r2, [pc, #512]	; (800a268 <Timer13+0x57c>)
 800a066:	8811      	ldrh	r1, [r2, #0]
 800a068:	7892      	ldrb	r2, [r2, #2]
 800a06a:	8019      	strh	r1, [r3, #0]
 800a06c:	709a      	strb	r2, [r3, #2]
				SendPc(xysend, 5, 0);
 800a06e:	2200      	movs	r2, #0
 800a070:	2105      	movs	r1, #5
 800a072:	487c      	ldr	r0, [pc, #496]	; (800a264 <Timer13+0x578>)
 800a074:	f7fb f926 	bl	80052c4 <SendPc>
				if(joyint2 %2 ==0){
 800a078:	4b7c      	ldr	r3, [pc, #496]	; (800a26c <Timer13+0x580>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 0301 	and.w	r3, r3, #1
 800a080:	2b00      	cmp	r3, #0
 800a082:	d105      	bne.n	800a090 <Timer13+0x3a4>
					joyint2 = joyint2-2;
 800a084:	4b79      	ldr	r3, [pc, #484]	; (800a26c <Timer13+0x580>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3b02      	subs	r3, #2
 800a08a:	4a78      	ldr	r2, [pc, #480]	; (800a26c <Timer13+0x580>)
 800a08c:	6013      	str	r3, [r2, #0]
 800a08e:	e011      	b.n	800a0b4 <Timer13+0x3c8>
				}
				else if(joyint2 %3 == 0){
 800a090:	4b76      	ldr	r3, [pc, #472]	; (800a26c <Timer13+0x580>)
 800a092:	6819      	ldr	r1, [r3, #0]
 800a094:	4b76      	ldr	r3, [pc, #472]	; (800a270 <Timer13+0x584>)
 800a096:	fb83 3201 	smull	r3, r2, r3, r1
 800a09a:	17cb      	asrs	r3, r1, #31
 800a09c:	1ad2      	subs	r2, r2, r3
 800a09e:	4613      	mov	r3, r2
 800a0a0:	005b      	lsls	r3, r3, #1
 800a0a2:	4413      	add	r3, r2
 800a0a4:	1aca      	subs	r2, r1, r3
 800a0a6:	2a00      	cmp	r2, #0
 800a0a8:	d104      	bne.n	800a0b4 <Timer13+0x3c8>
					joyint2 = joyint2-3;
 800a0aa:	4b70      	ldr	r3, [pc, #448]	; (800a26c <Timer13+0x580>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	3b03      	subs	r3, #3
 800a0b0:	4a6e      	ldr	r2, [pc, #440]	; (800a26c <Timer13+0x580>)
 800a0b2:	6013      	str	r3, [r2, #0]
				}
				if(joyint2==0){
 800a0b4:	4b6d      	ldr	r3, [pc, #436]	; (800a26c <Timer13+0x580>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	f040 80f8 	bne.w	800a2ae <Timer13+0x5c2>
					//TimeSet(&htim13, 100000);
					isHXcom=0;
 800a0be:	4b6d      	ldr	r3, [pc, #436]	; (800a274 <Timer13+0x588>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	601a      	str	r2, [r3, #0]
					if(isAutoApproach==2){
 800a0c4:	4b6c      	ldr	r3, [pc, #432]	; (800a278 <Timer13+0x58c>)
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	f040 80f0 	bne.w	800a2ae <Timer13+0x5c2>
						encodMove=encodMove-2;
 800a0ce:	4b6b      	ldr	r3, [pc, #428]	; (800a27c <Timer13+0x590>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	3b02      	subs	r3, #2
 800a0d4:	4a69      	ldr	r2, [pc, #420]	; (800a27c <Timer13+0x590>)
 800a0d6:	6013      	str	r3, [r2, #0]
						autoApproach(3);
 800a0d8:	2003      	movs	r0, #3
 800a0da:	f7f8 fdcd 	bl	8002c78 <autoApproach>
 800a0de:	e0e6      	b.n	800a2ae <Timer13+0x5c2>
					}
				}
			}
			else{
				ymov=1;
 800a0e0:	4b57      	ldr	r3, [pc, #348]	; (800a240 <Timer13+0x554>)
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	601a      	str	r2, [r3, #0]
				if(encodMove >=2){
 800a0e6:	4b65      	ldr	r3, [pc, #404]	; (800a27c <Timer13+0x590>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	dd08      	ble.n	800a100 <Timer13+0x414>
					ycount=y_enc[0]-32767;
 800a0ee:	4b56      	ldr	r3, [pc, #344]	; (800a248 <Timer13+0x55c>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f5a3 43ff 	sub.w	r3, r3, #32640	; 0x7f80
 800a0f6:	3b7f      	subs	r3, #127	; 0x7f
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4b56      	ldr	r3, [pc, #344]	; (800a254 <Timer13+0x568>)
 800a0fc:	601a      	str	r2, [r3, #0]
 800a0fe:	e0d6      	b.n	800a2ae <Timer13+0x5c2>
				}
				else{
					ycount++;
 800a100:	4b54      	ldr	r3, [pc, #336]	; (800a254 <Timer13+0x568>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3301      	adds	r3, #1
 800a106:	4a53      	ldr	r2, [pc, #332]	; (800a254 <Timer13+0x568>)
 800a108:	6013      	str	r3, [r2, #0]
 800a10a:	e0d0      	b.n	800a2ae <Timer13+0x5c2>
				}
			}
		}
		else if(ymov==3){
 800a10c:	4b4c      	ldr	r3, [pc, #304]	; (800a240 <Timer13+0x554>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b03      	cmp	r3, #3
 800a112:	d115      	bne.n	800a140 <Timer13+0x454>
			HAL_GPIO_WritePin(L293DD_ENABLE2_GPIO_Port, L293DD_ENABLE2_Pin, GPIO_PIN_SET);
 800a114:	2201      	movs	r2, #1
 800a116:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a11a:	484a      	ldr	r0, [pc, #296]	; (800a244 <Timer13+0x558>)
 800a11c:	f002 fe9c 	bl	800ce58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YP_GPIO_Port, YP_Pin, GPIO_PIN_RESET);
 800a120:	2200      	movs	r2, #0
 800a122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a126:	4847      	ldr	r0, [pc, #284]	; (800a244 <Timer13+0x558>)
 800a128:	f002 fe96 	bl	800ce58 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(YN_GPIO_Port, YN_Pin, GPIO_PIN_SET);
 800a12c:	2201      	movs	r2, #1
 800a12e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a132:	4844      	ldr	r0, [pc, #272]	; (800a244 <Timer13+0x558>)
 800a134:	f002 fe90 	bl	800ce58 <HAL_GPIO_WritePin>
			ymov=4;
 800a138:	4b41      	ldr	r3, [pc, #260]	; (800a240 <Timer13+0x554>)
 800a13a:	2204      	movs	r2, #4
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	e0b6      	b.n	800a2ae <Timer13+0x5c2>
		}
		else if(ymov==4){
 800a140:	4b3f      	ldr	r3, [pc, #252]	; (800a240 <Timer13+0x554>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b04      	cmp	r3, #4
 800a146:	f040 80b2 	bne.w	800a2ae <Timer13+0x5c2>
			HAL_GPIO_WritePin(YN_GPIO_Port, YN_Pin, GPIO_PIN_RESET);
 800a14a:	2200      	movs	r2, #0
 800a14c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a150:	483c      	ldr	r0, [pc, #240]	; (800a244 <Timer13+0x558>)
 800a152:	f002 fe81 	bl	800ce58 <HAL_GPIO_WritePin>
			y_enc[0]=TIM2->CNT;
 800a156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a15a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a15c:	4a3a      	ldr	r2, [pc, #232]	; (800a248 <Timer13+0x55c>)
 800a15e:	6013      	str	r3, [r2, #0]
			x_enc[0]=TIM8->CNT;
 800a160:	4b3a      	ldr	r3, [pc, #232]	; (800a24c <Timer13+0x560>)
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	4a3a      	ldr	r2, [pc, #232]	; (800a250 <Timer13+0x564>)
 800a166:	6013      	str	r3, [r2, #0]
			if(ycount>=ysteps){
 800a168:	4b3a      	ldr	r3, [pc, #232]	; (800a254 <Timer13+0x568>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	4b3a      	ldr	r3, [pc, #232]	; (800a258 <Timer13+0x56c>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	429a      	cmp	r2, r3
 800a172:	f2c0 8087 	blt.w	800a284 <Timer13+0x598>
				HAL_GPIO_WritePin(L293DD_ENABLE2_GPIO_Port, L293DD_ENABLE2_Pin, GPIO_PIN_RESET);
 800a176:	2200      	movs	r2, #0
 800a178:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a17c:	4831      	ldr	r0, [pc, #196]	; (800a244 <Timer13+0x558>)
 800a17e:	f002 fe6b 	bl	800ce58 <HAL_GPIO_WritePin>
				ymov=0;
 800a182:	4b2f      	ldr	r3, [pc, #188]	; (800a240 <Timer13+0x554>)
 800a184:	2200      	movs	r2, #0
 800a186:	601a      	str	r2, [r3, #0]
				if(xmov==0){
 800a188:	4b34      	ldr	r3, [pc, #208]	; (800a25c <Timer13+0x570>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d102      	bne.n	800a196 <Timer13+0x4aa>
					movxy=0;
 800a190:	4b33      	ldr	r3, [pc, #204]	; (800a260 <Timer13+0x574>)
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
				}
				ycount=0;
 800a196:	4b2f      	ldr	r3, [pc, #188]	; (800a254 <Timer13+0x568>)
 800a198:	2200      	movs	r2, #0
 800a19a:	601a      	str	r2, [r3, #0]
				ysteps=0;
 800a19c:	4b2e      	ldr	r3, [pc, #184]	; (800a258 <Timer13+0x56c>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	601a      	str	r2, [r3, #0]
				xysend[0]=0;
 800a1a2:	4b30      	ldr	r3, [pc, #192]	; (800a264 <Timer13+0x578>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	701a      	strb	r2, [r3, #0]
				itoa(y_enc[0],xysend,10);
 800a1a8:	4b27      	ldr	r3, [pc, #156]	; (800a248 <Timer13+0x55c>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	220a      	movs	r2, #10
 800a1ae:	492d      	ldr	r1, [pc, #180]	; (800a264 <Timer13+0x578>)
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	f007 fcb5 	bl	8011b20 <itoa>
				strcat(xysend,"-X\0");
 800a1b6:	482b      	ldr	r0, [pc, #172]	; (800a264 <Timer13+0x578>)
 800a1b8:	f7f6 f806 	bl	80001c8 <strlen>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	461a      	mov	r2, r3
 800a1c0:	4b28      	ldr	r3, [pc, #160]	; (800a264 <Timer13+0x578>)
 800a1c2:	4413      	add	r3, r2
 800a1c4:	4a2e      	ldr	r2, [pc, #184]	; (800a280 <Timer13+0x594>)
 800a1c6:	8811      	ldrh	r1, [r2, #0]
 800a1c8:	7892      	ldrb	r2, [r2, #2]
 800a1ca:	8019      	strh	r1, [r3, #0]
 800a1cc:	709a      	strb	r2, [r3, #2]
				SendPc(xysend, 5, 0);
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	2105      	movs	r1, #5
 800a1d2:	4824      	ldr	r0, [pc, #144]	; (800a264 <Timer13+0x578>)
 800a1d4:	f7fb f876 	bl	80052c4 <SendPc>
				if(joyint2 %2 ==0){
 800a1d8:	4b24      	ldr	r3, [pc, #144]	; (800a26c <Timer13+0x580>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d105      	bne.n	800a1f0 <Timer13+0x504>
					joyint2 = joyint2-2;
 800a1e4:	4b21      	ldr	r3, [pc, #132]	; (800a26c <Timer13+0x580>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	3b02      	subs	r3, #2
 800a1ea:	4a20      	ldr	r2, [pc, #128]	; (800a26c <Timer13+0x580>)
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	e011      	b.n	800a214 <Timer13+0x528>
				}
				else if(joyint2 %3 == 0){
 800a1f0:	4b1e      	ldr	r3, [pc, #120]	; (800a26c <Timer13+0x580>)
 800a1f2:	6819      	ldr	r1, [r3, #0]
 800a1f4:	4b1e      	ldr	r3, [pc, #120]	; (800a270 <Timer13+0x584>)
 800a1f6:	fb83 3201 	smull	r3, r2, r3, r1
 800a1fa:	17cb      	asrs	r3, r1, #31
 800a1fc:	1ad2      	subs	r2, r2, r3
 800a1fe:	4613      	mov	r3, r2
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	4413      	add	r3, r2
 800a204:	1aca      	subs	r2, r1, r3
 800a206:	2a00      	cmp	r2, #0
 800a208:	d104      	bne.n	800a214 <Timer13+0x528>
					joyint2 = joyint2-3;
 800a20a:	4b18      	ldr	r3, [pc, #96]	; (800a26c <Timer13+0x580>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	3b03      	subs	r3, #3
 800a210:	4a16      	ldr	r2, [pc, #88]	; (800a26c <Timer13+0x580>)
 800a212:	6013      	str	r3, [r2, #0]
				}
				if(joyint2==0){
 800a214:	4b15      	ldr	r3, [pc, #84]	; (800a26c <Timer13+0x580>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d148      	bne.n	800a2ae <Timer13+0x5c2>
					//TimeSet(&htim13, 100000);
					isHXcom=0;
 800a21c:	4b15      	ldr	r3, [pc, #84]	; (800a274 <Timer13+0x588>)
 800a21e:	2200      	movs	r2, #0
 800a220:	601a      	str	r2, [r3, #0]
					if(isAutoApproach==2){
 800a222:	4b15      	ldr	r3, [pc, #84]	; (800a278 <Timer13+0x58c>)
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	2b02      	cmp	r3, #2
 800a228:	d141      	bne.n	800a2ae <Timer13+0x5c2>
						encodMove=encodMove-2;
 800a22a:	4b14      	ldr	r3, [pc, #80]	; (800a27c <Timer13+0x590>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3b02      	subs	r3, #2
 800a230:	4a12      	ldr	r2, [pc, #72]	; (800a27c <Timer13+0x590>)
 800a232:	6013      	str	r3, [r2, #0]
						autoApproach(3);
 800a234:	2003      	movs	r0, #3
 800a236:	f7f8 fd1f 	bl	8002c78 <autoApproach>
 800a23a:	e038      	b.n	800a2ae <Timer13+0x5c2>
 800a23c:	20001874 	.word	0x20001874
 800a240:	20000370 	.word	0x20000370
 800a244:	40020c00 	.word	0x40020c00
 800a248:	20006f60 	.word	0x20006f60
 800a24c:	40010400 	.word	0x40010400
 800a250:	20006f50 	.word	0x20006f50
 800a254:	20001878 	.word	0x20001878
 800a258:	20000378 	.word	0x20000378
 800a25c:	2000036c 	.word	0x2000036c
 800a260:	20000368 	.word	0x20000368
 800a264:	20006f44 	.word	0x20006f44
 800a268:	08012190 	.word	0x08012190
 800a26c:	2000181c 	.word	0x2000181c
 800a270:	55555556 	.word	0x55555556
 800a274:	20001830 	.word	0x20001830
 800a278:	200002d8 	.word	0x200002d8
 800a27c:	2000037c 	.word	0x2000037c
 800a280:	08012194 	.word	0x08012194
					}
				}
			}
			else{
				ymov=3;
 800a284:	4b5e      	ldr	r3, [pc, #376]	; (800a400 <Timer13+0x714>)
 800a286:	2203      	movs	r2, #3
 800a288:	601a      	str	r2, [r3, #0]
				if(encodMove >=2){
 800a28a:	4b5e      	ldr	r3, [pc, #376]	; (800a404 <Timer13+0x718>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b01      	cmp	r3, #1
 800a290:	dd08      	ble.n	800a2a4 <Timer13+0x5b8>
					ycount=32767-y_enc[0];
 800a292:	4b5d      	ldr	r3, [pc, #372]	; (800a408 <Timer13+0x71c>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f5c3 43ff 	rsb	r3, r3, #32640	; 0x7f80
 800a29a:	337f      	adds	r3, #127	; 0x7f
 800a29c:	461a      	mov	r2, r3
 800a29e:	4b5b      	ldr	r3, [pc, #364]	; (800a40c <Timer13+0x720>)
 800a2a0:	601a      	str	r2, [r3, #0]
 800a2a2:	e004      	b.n	800a2ae <Timer13+0x5c2>
				}
				else{
					ycount++;
 800a2a4:	4b59      	ldr	r3, [pc, #356]	; (800a40c <Timer13+0x720>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	4a58      	ldr	r2, [pc, #352]	; (800a40c <Timer13+0x720>)
 800a2ac:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}

	if(isHXcom==0){
 800a2ae:	4b58      	ldr	r3, [pc, #352]	; (800a410 <Timer13+0x724>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d123      	bne.n	800a2fe <Timer13+0x612>
		if(HX711_Available()){
 800a2b6:	f7f7 f801 	bl	80012bc <HX711_Available>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d016      	beq.n	800a2ee <Timer13+0x602>
			instant=HX711_Value(instant,1);
 800a2c0:	4e54      	ldr	r6, [pc, #336]	; (800a414 <Timer13+0x728>)
 800a2c2:	463d      	mov	r5, r7
 800a2c4:	4b53      	ldr	r3, [pc, #332]	; (800a414 <Timer13+0x728>)
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	9203      	str	r2, [sp, #12]
 800a2ca:	466c      	mov	r4, sp
 800a2cc:	f103 020c 	add.w	r2, r3, #12
 800a2d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800a2d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a2d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2d8:	4628      	mov	r0, r5
 800a2da:	f7f6 ff49 	bl	8001170 <HX711_Value>
 800a2de:	4635      	mov	r5, r6
 800a2e0:	463c      	mov	r4, r7
 800a2e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a2e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a2ea:	e885 0003 	stmia.w	r5, {r0, r1}
		}
		if(loadFeed==0){
 800a2ee:	4b4a      	ldr	r3, [pc, #296]	; (800a418 <Timer13+0x72c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d103      	bne.n	800a2fe <Timer13+0x612>
			loadnow=instant.scalelive;
 800a2f6:	4b47      	ldr	r3, [pc, #284]	; (800a414 <Timer13+0x728>)
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	4a48      	ldr	r2, [pc, #288]	; (800a41c <Timer13+0x730>)
 800a2fc:	6013      	str	r3, [r2, #0]
		}
	}

	if(approaching==1&&automot==1&&isAutoApproach==4){//!!automot cond control need
 800a2fe:	4b48      	ldr	r3, [pc, #288]	; (800a420 <Timer13+0x734>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b01      	cmp	r3, #1
 800a304:	d12a      	bne.n	800a35c <Timer13+0x670>
 800a306:	4b47      	ldr	r3, [pc, #284]	; (800a424 <Timer13+0x738>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	d126      	bne.n	800a35c <Timer13+0x670>
 800a30e:	4b46      	ldr	r3, [pc, #280]	; (800a428 <Timer13+0x73c>)
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	2b04      	cmp	r3, #4
 800a314:	d122      	bne.n	800a35c <Timer13+0x670>
		if(loadcon==1&&(loadnow>=contact||(app==2&&pcDecision==0))){
 800a316:	4b45      	ldr	r3, [pc, #276]	; (800a42c <Timer13+0x740>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	f040 809c 	bne.w	800a458 <Timer13+0x76c>
 800a320:	4b3e      	ldr	r3, [pc, #248]	; (800a41c <Timer13+0x730>)
 800a322:	681a      	ldr	r2, [r3, #0]
 800a324:	4b42      	ldr	r3, [pc, #264]	; (800a430 <Timer13+0x744>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	429a      	cmp	r2, r3
 800a32a:	da09      	bge.n	800a340 <Timer13+0x654>
 800a32c:	4b41      	ldr	r3, [pc, #260]	; (800a434 <Timer13+0x748>)
 800a32e:	781b      	ldrb	r3, [r3, #0]
 800a330:	2b02      	cmp	r3, #2
 800a332:	f040 8091 	bne.w	800a458 <Timer13+0x76c>
 800a336:	4b40      	ldr	r3, [pc, #256]	; (800a438 <Timer13+0x74c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f040 808c 	bne.w	800a458 <Timer13+0x76c>
			automot=0;
 800a340:	4b38      	ldr	r3, [pc, #224]	; (800a424 <Timer13+0x738>)
 800a342:	2200      	movs	r2, #0
 800a344:	601a      	str	r2, [r3, #0]
			stepsay=0;
 800a346:	4b3d      	ldr	r3, [pc, #244]	; (800a43c <Timer13+0x750>)
 800a348:	2200      	movs	r2, #0
 800a34a:	601a      	str	r2, [r3, #0]
			stopmot=0;
 800a34c:	4b3c      	ldr	r3, [pc, #240]	; (800a440 <Timer13+0x754>)
 800a34e:	2200      	movs	r2, #0
 800a350:	601a      	str	r2, [r3, #0]
			motorTouchpt=motpos;
 800a352:	4b3c      	ldr	r3, [pc, #240]	; (800a444 <Timer13+0x758>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	4a3c      	ldr	r2, [pc, #240]	; (800a448 <Timer13+0x75c>)
 800a358:	6013      	str	r3, [r2, #0]
		if(loadcon==1&&(loadnow>=contact||(app==2&&pcDecision==0))){
 800a35a:	e07d      	b.n	800a458 <Timer13+0x76c>
		}
	}
	else if(automot==1&&dir==0&&approaching==0){
 800a35c:	4b31      	ldr	r3, [pc, #196]	; (800a424 <Timer13+0x738>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d125      	bne.n	800a3b0 <Timer13+0x6c4>
 800a364:	4b39      	ldr	r3, [pc, #228]	; (800a44c <Timer13+0x760>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d121      	bne.n	800a3b0 <Timer13+0x6c4>
 800a36c:	4b2c      	ldr	r3, [pc, #176]	; (800a420 <Timer13+0x734>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d11d      	bne.n	800a3b0 <Timer13+0x6c4>
		if(loadcon==1&&(loadnow>=contact||(app==2&&pcDecision==0))){
 800a374:	4b2d      	ldr	r3, [pc, #180]	; (800a42c <Timer13+0x740>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d115      	bne.n	800a3a8 <Timer13+0x6bc>
 800a37c:	4b27      	ldr	r3, [pc, #156]	; (800a41c <Timer13+0x730>)
 800a37e:	681a      	ldr	r2, [r3, #0]
 800a380:	4b2b      	ldr	r3, [pc, #172]	; (800a430 <Timer13+0x744>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	da07      	bge.n	800a398 <Timer13+0x6ac>
 800a388:	4b2a      	ldr	r3, [pc, #168]	; (800a434 <Timer13+0x748>)
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d10b      	bne.n	800a3a8 <Timer13+0x6bc>
 800a390:	4b29      	ldr	r3, [pc, #164]	; (800a438 <Timer13+0x74c>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d107      	bne.n	800a3a8 <Timer13+0x6bc>
			sensdist=0;
 800a398:	4b2d      	ldr	r3, [pc, #180]	; (800a450 <Timer13+0x764>)
 800a39a:	2200      	movs	r2, #0
 800a39c:	601a      	str	r2, [r3, #0]
			motorTouchpt=motpos;
 800a39e:	4b29      	ldr	r3, [pc, #164]	; (800a444 <Timer13+0x758>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a29      	ldr	r2, [pc, #164]	; (800a448 <Timer13+0x75c>)
 800a3a4:	6013      	str	r3, [r2, #0]
		if(loadcon==1&&(loadnow>=contact||(app==2&&pcDecision==0))){
 800a3a6:	e058      	b.n	800a45a <Timer13+0x76e>
		}
		else{
			sensdist=1;
 800a3a8:	4b29      	ldr	r3, [pc, #164]	; (800a450 <Timer13+0x764>)
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	601a      	str	r2, [r3, #0]
		if(loadcon==1&&(loadnow>=contact||(app==2&&pcDecision==0))){
 800a3ae:	e054      	b.n	800a45a <Timer13+0x76e>
		}
	}
	else if(retracting==1&&automot==1&&isAutoApproach==4){//!!automot cond control need
 800a3b0:	4b28      	ldr	r3, [pc, #160]	; (800a454 <Timer13+0x768>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d150      	bne.n	800a45a <Timer13+0x76e>
 800a3b8:	4b1a      	ldr	r3, [pc, #104]	; (800a424 <Timer13+0x738>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d14c      	bne.n	800a45a <Timer13+0x76e>
 800a3c0:	4b19      	ldr	r3, [pc, #100]	; (800a428 <Timer13+0x73c>)
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b04      	cmp	r3, #4
 800a3c6:	d148      	bne.n	800a45a <Timer13+0x76e>
		if(loadcon==1&&(loadnow<=contact||(app==2&&pcDecision==0))){
 800a3c8:	4b18      	ldr	r3, [pc, #96]	; (800a42c <Timer13+0x740>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d144      	bne.n	800a45a <Timer13+0x76e>
 800a3d0:	4b12      	ldr	r3, [pc, #72]	; (800a41c <Timer13+0x730>)
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	4b16      	ldr	r3, [pc, #88]	; (800a430 <Timer13+0x744>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	dd07      	ble.n	800a3ec <Timer13+0x700>
 800a3dc:	4b15      	ldr	r3, [pc, #84]	; (800a434 <Timer13+0x748>)
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d13a      	bne.n	800a45a <Timer13+0x76e>
 800a3e4:	4b14      	ldr	r3, [pc, #80]	; (800a438 <Timer13+0x74c>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d136      	bne.n	800a45a <Timer13+0x76e>
			automot=0;
 800a3ec:	4b0d      	ldr	r3, [pc, #52]	; (800a424 <Timer13+0x738>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	601a      	str	r2, [r3, #0]
			stepsay=0;
 800a3f2:	4b12      	ldr	r3, [pc, #72]	; (800a43c <Timer13+0x750>)
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	601a      	str	r2, [r3, #0]
			stopmot=0;
 800a3f8:	4b11      	ldr	r3, [pc, #68]	; (800a440 <Timer13+0x754>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	e02c      	b.n	800a45a <Timer13+0x76e>
 800a400:	20000370 	.word	0x20000370
 800a404:	2000037c 	.word	0x2000037c
 800a408:	20006f60 	.word	0x20006f60
 800a40c:	20001878 	.word	0x20001878
 800a410:	20001830 	.word	0x20001830
 800a414:	20006bc0 	.word	0x20006bc0
 800a418:	2000030c 	.word	0x2000030c
 800a41c:	20000310 	.word	0x20000310
 800a420:	20001898 	.word	0x20001898
 800a424:	2000034c 	.word	0x2000034c
 800a428:	200002d8 	.word	0x200002d8
 800a42c:	20001824 	.word	0x20001824
 800a430:	20001828 	.word	0x20001828
 800a434:	20006964 	.word	0x20006964
 800a438:	20001860 	.word	0x20001860
 800a43c:	20000334 	.word	0x20000334
 800a440:	2000033c 	.word	0x2000033c
 800a444:	20000360 	.word	0x20000360
 800a448:	2000187c 	.word	0x2000187c
 800a44c:	20000338 	.word	0x20000338
 800a450:	20000040 	.word	0x20000040
 800a454:	20000358 	.word	0x20000358
		if(loadcon==1&&(loadnow>=contact||(app==2&&pcDecision==0))){
 800a458:	bf00      	nop
		}
	}
	if(contsend==1&&sendingPc==0&&readPc==0&&automot==0){
 800a45a:	4b89      	ldr	r3, [pc, #548]	; (800a680 <Timer13+0x994>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d126      	bne.n	800a4b0 <Timer13+0x7c4>
 800a462:	4b88      	ldr	r3, [pc, #544]	; (800a684 <Timer13+0x998>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d122      	bne.n	800a4b0 <Timer13+0x7c4>
 800a46a:	4b87      	ldr	r3, [pc, #540]	; (800a688 <Timer13+0x99c>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d11e      	bne.n	800a4b0 <Timer13+0x7c4>
 800a472:	4b86      	ldr	r3, [pc, #536]	; (800a68c <Timer13+0x9a0>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d11a      	bne.n	800a4b0 <Timer13+0x7c4>
		datasender[0]=0;
 800a47a:	4b85      	ldr	r3, [pc, #532]	; (800a690 <Timer13+0x9a4>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	701a      	strb	r2, [r3, #0]
		itoa(loadnow,datasender,10);
 800a480:	4b84      	ldr	r3, [pc, #528]	; (800a694 <Timer13+0x9a8>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	220a      	movs	r2, #10
 800a486:	4982      	ldr	r1, [pc, #520]	; (800a690 <Timer13+0x9a4>)
 800a488:	4618      	mov	r0, r3
 800a48a:	f007 fb49 	bl	8011b20 <itoa>
		strcat(datasender,"LM\0");
 800a48e:	4880      	ldr	r0, [pc, #512]	; (800a690 <Timer13+0x9a4>)
 800a490:	f7f5 fe9a 	bl	80001c8 <strlen>
 800a494:	4603      	mov	r3, r0
 800a496:	461a      	mov	r2, r3
 800a498:	4b7d      	ldr	r3, [pc, #500]	; (800a690 <Timer13+0x9a4>)
 800a49a:	4413      	add	r3, r2
 800a49c:	4a7e      	ldr	r2, [pc, #504]	; (800a698 <Timer13+0x9ac>)
 800a49e:	8811      	ldrh	r1, [r2, #0]
 800a4a0:	7892      	ldrb	r2, [r2, #2]
 800a4a2:	8019      	strh	r1, [r3, #0]
 800a4a4:	709a      	strb	r2, [r3, #2]
		SendPc(datasender, 5, 2);
 800a4a6:	2202      	movs	r2, #2
 800a4a8:	2105      	movs	r1, #5
 800a4aa:	4879      	ldr	r0, [pc, #484]	; (800a690 <Timer13+0x9a4>)
 800a4ac:	f7fa ff0a 	bl	80052c4 <SendPc>
	}
	if(isAutoApproach==3)
 800a4b0:	4b7a      	ldr	r3, [pc, #488]	; (800a69c <Timer13+0x9b0>)
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	2b03      	cmp	r3, #3
 800a4b6:	f040 8491 	bne.w	800addc <Timer13+0x10f0>
	{
		if(app==1||app==2){
 800a4ba:	4b79      	ldr	r3, [pc, #484]	; (800a6a0 <Timer13+0x9b4>)
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d004      	beq.n	800a4cc <Timer13+0x7e0>
 800a4c2:	4b77      	ldr	r3, [pc, #476]	; (800a6a0 <Timer13+0x9b4>)
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	2b02      	cmp	r3, #2
 800a4c8:	f040 83ec 	bne.w	800aca4 <Timer13+0xfb8>
			if(appOrret){
 800a4cc:	4b75      	ldr	r3, [pc, #468]	; (800a6a4 <Timer13+0x9b8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f000 81b3 	beq.w	800a83c <Timer13+0xb50>
				if(((loadnow<thresholdApp&&app==1)||(pcDecision==1&&app==2)) && (voltnow >= -1000000 && motorcon==0) && emergency==0){
 800a4d6:	4b6f      	ldr	r3, [pc, #444]	; (800a694 <Timer13+0x9a8>)
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	4b73      	ldr	r3, [pc, #460]	; (800a6a8 <Timer13+0x9bc>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	da03      	bge.n	800a4ea <Timer13+0x7fe>
 800a4e2:	4b6f      	ldr	r3, [pc, #444]	; (800a6a0 <Timer13+0x9b4>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d009      	beq.n	800a4fe <Timer13+0x812>
 800a4ea:	4b70      	ldr	r3, [pc, #448]	; (800a6ac <Timer13+0x9c0>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	f040 8152 	bne.w	800a798 <Timer13+0xaac>
 800a4f4:	4b6a      	ldr	r3, [pc, #424]	; (800a6a0 <Timer13+0x9b4>)
 800a4f6:	781b      	ldrb	r3, [r3, #0]
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	f040 814d 	bne.w	800a798 <Timer13+0xaac>
 800a4fe:	4b6c      	ldr	r3, [pc, #432]	; (800a6b0 <Timer13+0x9c4>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a6c      	ldr	r2, [pc, #432]	; (800a6b4 <Timer13+0x9c8>)
 800a504:	4293      	cmp	r3, r2
 800a506:	f2c0 8147 	blt.w	800a798 <Timer13+0xaac>
 800a50a:	4b6b      	ldr	r3, [pc, #428]	; (800a6b8 <Timer13+0x9cc>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f040 8142 	bne.w	800a798 <Timer13+0xaac>
 800a514:	4b69      	ldr	r3, [pc, #420]	; (800a6bc <Timer13+0x9d0>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f040 813d 	bne.w	800a798 <Timer13+0xaac>
					approaching=1;
 800a51e:	4b68      	ldr	r3, [pc, #416]	; (800a6c0 <Timer13+0x9d4>)
 800a520:	2201      	movs	r2, #1
 800a522:	601a      	str	r2, [r3, #0]
					if((onlyAct==0 && voltnow <= first-delta)||motorapp==1){
 800a524:	4b67      	ldr	r3, [pc, #412]	; (800a6c4 <Timer13+0x9d8>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d108      	bne.n	800a53e <Timer13+0x852>
 800a52c:	4b66      	ldr	r3, [pc, #408]	; (800a6c8 <Timer13+0x9dc>)
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	4b66      	ldr	r3, [pc, #408]	; (800a6cc <Timer13+0x9e0>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	1ad2      	subs	r2, r2, r3
 800a536:	4b5e      	ldr	r3, [pc, #376]	; (800a6b0 <Timer13+0x9c4>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	da03      	bge.n	800a546 <Timer13+0x85a>
 800a53e:	4b64      	ldr	r3, [pc, #400]	; (800a6d0 <Timer13+0x9e4>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d176      	bne.n	800a634 <Timer13+0x948>
						if(motorapp==0){//!(10um) move -->& scan > ~10um
 800a546:	4b62      	ldr	r3, [pc, #392]	; (800a6d0 <Timer13+0x9e4>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d161      	bne.n	800a612 <Timer13+0x926>
							voltnow=voltnow+delta;
 800a54e:	4b58      	ldr	r3, [pc, #352]	; (800a6b0 <Timer13+0x9c4>)
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	4b5e      	ldr	r3, [pc, #376]	; (800a6cc <Timer13+0x9e0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4413      	add	r3, r2
 800a558:	4a55      	ldr	r2, [pc, #340]	; (800a6b0 <Timer13+0x9c4>)
 800a55a:	6013      	str	r3, [r2, #0]
							ftos(voltnow,voltage);
 800a55c:	4b54      	ldr	r3, [pc, #336]	; (800a6b0 <Timer13+0x9c4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	495c      	ldr	r1, [pc, #368]	; (800a6d4 <Timer13+0x9e8>)
 800a562:	4618      	mov	r0, r3
 800a564:	f7f7 fa28 	bl	80019b8 <ftos>
							motsender[0]=0;
 800a568:	4b5b      	ldr	r3, [pc, #364]	; (800a6d8 <Timer13+0x9ec>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	701a      	strb	r2, [r3, #0]
							datasender[0]=0;
 800a56e:	4b48      	ldr	r3, [pc, #288]	; (800a690 <Timer13+0x9a4>)
 800a570:	2200      	movs	r2, #0
 800a572:	701a      	strb	r2, [r3, #0]
							itoa(loadnow,motsender,10);
 800a574:	4b47      	ldr	r3, [pc, #284]	; (800a694 <Timer13+0x9a8>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	220a      	movs	r2, #10
 800a57a:	4957      	ldr	r1, [pc, #348]	; (800a6d8 <Timer13+0x9ec>)
 800a57c:	4618      	mov	r0, r3
 800a57e:	f007 facf 	bl	8011b20 <itoa>
							strcat(motsender,"LM\0");
 800a582:	4855      	ldr	r0, [pc, #340]	; (800a6d8 <Timer13+0x9ec>)
 800a584:	f7f5 fe20 	bl	80001c8 <strlen>
 800a588:	4603      	mov	r3, r0
 800a58a:	461a      	mov	r2, r3
 800a58c:	4b52      	ldr	r3, [pc, #328]	; (800a6d8 <Timer13+0x9ec>)
 800a58e:	4413      	add	r3, r2
 800a590:	4a41      	ldr	r2, [pc, #260]	; (800a698 <Timer13+0x9ac>)
 800a592:	8811      	ldrh	r1, [r2, #0]
 800a594:	7892      	ldrb	r2, [r2, #2]
 800a596:	8019      	strh	r1, [r3, #0]
 800a598:	709a      	strb	r2, [r3, #2]
							strcat(datasender,voltage);
 800a59a:	494e      	ldr	r1, [pc, #312]	; (800a6d4 <Timer13+0x9e8>)
 800a59c:	483c      	ldr	r0, [pc, #240]	; (800a690 <Timer13+0x9a4>)
 800a59e:	f007 fad4 	bl	8011b4a <strcat>
							strcat(datasender,"E\0");
 800a5a2:	483b      	ldr	r0, [pc, #236]	; (800a690 <Timer13+0x9a4>)
 800a5a4:	f7f5 fe10 	bl	80001c8 <strlen>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	4b38      	ldr	r3, [pc, #224]	; (800a690 <Timer13+0x9a4>)
 800a5ae:	4413      	add	r3, r2
 800a5b0:	494a      	ldr	r1, [pc, #296]	; (800a6dc <Timer13+0x9f0>)
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	8013      	strh	r3, [r2, #0]
							strcat(motsender,datasender);
 800a5ba:	4935      	ldr	r1, [pc, #212]	; (800a690 <Timer13+0x9a4>)
 800a5bc:	4846      	ldr	r0, [pc, #280]	; (800a6d8 <Timer13+0x9ec>)
 800a5be:	f007 fac4 	bl	8011b4a <strcat>
							SendPc(motsender, 5, 4);
 800a5c2:	2204      	movs	r2, #4
 800a5c4:	2105      	movs	r1, #5
 800a5c6:	4844      	ldr	r0, [pc, #272]	; (800a6d8 <Timer13+0x9ec>)
 800a5c8:	f7fa fe7c 	bl	80052c4 <SendPc>
							GiveVolt(voltage);
 800a5cc:	4841      	ldr	r0, [pc, #260]	; (800a6d4 <Timer13+0x9e8>)
 800a5ce:	f7f9 f83d 	bl	800364c <GiveVolt>
							if(speedmode==3){
 800a5d2:	4b43      	ldr	r3, [pc, #268]	; (800a6e0 <Timer13+0x9f4>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d103      	bne.n	800a5e2 <Timer13+0x8f6>
								stepsay=2*2;
 800a5da:	4b42      	ldr	r3, [pc, #264]	; (800a6e4 <Timer13+0x9f8>)
 800a5dc:	2204      	movs	r2, #4
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	e00e      	b.n	800a600 <Timer13+0x914>
							}
							else if(speedmode==4){
 800a5e2:	4b3f      	ldr	r3, [pc, #252]	; (800a6e0 <Timer13+0x9f4>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2b04      	cmp	r3, #4
 800a5e8:	d103      	bne.n	800a5f2 <Timer13+0x906>
								stepsay=4*2;
 800a5ea:	4b3e      	ldr	r3, [pc, #248]	; (800a6e4 <Timer13+0x9f8>)
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	601a      	str	r2, [r3, #0]
 800a5f0:	e006      	b.n	800a600 <Timer13+0x914>
							}
							else if(speedmode==5){
 800a5f2:	4b3b      	ldr	r3, [pc, #236]	; (800a6e0 <Timer13+0x9f4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b05      	cmp	r3, #5
 800a5f8:	d102      	bne.n	800a600 <Timer13+0x914>
								stepsay=8*2;
 800a5fa:	4b3a      	ldr	r3, [pc, #232]	; (800a6e4 <Timer13+0x9f8>)
 800a5fc:	2210      	movs	r2, #16
 800a5fe:	601a      	str	r2, [r3, #0]
							}
							automot=0;
 800a600:	4b22      	ldr	r3, [pc, #136]	; (800a68c <Timer13+0x9a0>)
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
							TimeSet(&htim9, 10000);
 800a606:	f242 7110 	movw	r1, #10000	; 0x2710
 800a60a:	4837      	ldr	r0, [pc, #220]	; (800a6e8 <Timer13+0x9fc>)
 800a60c:	f000 fe04 	bl	800b218 <TimeSet>
 800a610:	e009      	b.n	800a626 <Timer13+0x93a>
						}
						else{
							speedmode=5;
 800a612:	4b33      	ldr	r3, [pc, #204]	; (800a6e0 <Timer13+0x9f4>)
 800a614:	2205      	movs	r2, #5
 800a616:	601a      	str	r2, [r3, #0]
							automot=1;
 800a618:	4b1c      	ldr	r3, [pc, #112]	; (800a68c <Timer13+0x9a0>)
 800a61a:	2201      	movs	r2, #1
 800a61c:	601a      	str	r2, [r3, #0]
							TimeSet(&htim9, 200000);
 800a61e:	4933      	ldr	r1, [pc, #204]	; (800a6ec <Timer13+0xa00>)
 800a620:	4831      	ldr	r0, [pc, #196]	; (800a6e8 <Timer13+0x9fc>)
 800a622:	f000 fdf9 	bl	800b218 <TimeSet>
						}
						isAutoApproach=4;
 800a626:	4b1d      	ldr	r3, [pc, #116]	; (800a69c <Timer13+0x9b0>)
 800a628:	2204      	movs	r2, #4
 800a62a:	701a      	strb	r2, [r3, #0]
						StepD(0);
 800a62c:	2000      	movs	r0, #0
 800a62e:	f7f8 ff37 	bl	80034a0 <StepD>
 800a632:	e0b0      	b.n	800a796 <Timer13+0xaaa>
					}
					else if(((loadnow<thresholdApp&&app==1)||(pcDecision==1&&app==2)) && voltnow-increment < -1000000 ){
 800a634:	4b17      	ldr	r3, [pc, #92]	; (800a694 <Timer13+0x9a8>)
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	4b1b      	ldr	r3, [pc, #108]	; (800a6a8 <Timer13+0x9bc>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	da03      	bge.n	800a648 <Timer13+0x95c>
 800a640:	4b17      	ldr	r3, [pc, #92]	; (800a6a0 <Timer13+0x9b4>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	2b01      	cmp	r3, #1
 800a646:	d007      	beq.n	800a658 <Timer13+0x96c>
 800a648:	4b18      	ldr	r3, [pc, #96]	; (800a6ac <Timer13+0x9c0>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d155      	bne.n	800a6fc <Timer13+0xa10>
 800a650:	4b13      	ldr	r3, [pc, #76]	; (800a6a0 <Timer13+0x9b4>)
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	2b02      	cmp	r3, #2
 800a656:	d151      	bne.n	800a6fc <Timer13+0xa10>
 800a658:	4b15      	ldr	r3, [pc, #84]	; (800a6b0 <Timer13+0x9c4>)
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	4b24      	ldr	r3, [pc, #144]	; (800a6f0 <Timer13+0xa04>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	1ad3      	subs	r3, r2, r3
 800a662:	4a14      	ldr	r2, [pc, #80]	; (800a6b4 <Timer13+0x9c8>)
 800a664:	4293      	cmp	r3, r2
 800a666:	da49      	bge.n	800a6fc <Timer13+0xa10>
						SendPc("OutRange", 5, 4);
 800a668:	2204      	movs	r2, #4
 800a66a:	2105      	movs	r1, #5
 800a66c:	4821      	ldr	r0, [pc, #132]	; (800a6f4 <Timer13+0xa08>)
 800a66e:	f7fa fe29 	bl	80052c4 <SendPc>
						HAL_TIM_Base_Stop_IT(&htim10);
 800a672:	4821      	ldr	r0, [pc, #132]	; (800a6f8 <Timer13+0xa0c>)
 800a674:	f004 fc77 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
						isAutoApproach=0;
 800a678:	4b08      	ldr	r3, [pc, #32]	; (800a69c <Timer13+0x9b0>)
 800a67a:	2200      	movs	r2, #0
 800a67c:	701a      	strb	r2, [r3, #0]
 800a67e:	e08a      	b.n	800a796 <Timer13+0xaaa>
 800a680:	2000182c 	.word	0x2000182c
 800a684:	20001870 	.word	0x20001870
 800a688:	2000186c 	.word	0x2000186c
 800a68c:	2000034c 	.word	0x2000034c
 800a690:	20006bd8 	.word	0x20006bd8
 800a694:	20000310 	.word	0x20000310
 800a698:	080120ac 	.word	0x080120ac
 800a69c:	200002d8 	.word	0x200002d8
 800a6a0:	20006964 	.word	0x20006964
 800a6a4:	20000388 	.word	0x20000388
 800a6a8:	20001858 	.word	0x20001858
 800a6ac:	20001860 	.word	0x20001860
 800a6b0:	20000000 	.word	0x20000000
 800a6b4:	fff0bdc0 	.word	0xfff0bdc0
 800a6b8:	20000340 	.word	0x20000340
 800a6bc:	200002cc 	.word	0x200002cc
 800a6c0:	20001898 	.word	0x20001898
 800a6c4:	20001864 	.word	0x20001864
 800a6c8:	20000384 	.word	0x20000384
 800a6cc:	20000050 	.word	0x20000050
 800a6d0:	20000344 	.word	0x20000344
 800a6d4:	20000004 	.word	0x20000004
 800a6d8:	20004ce0 	.word	0x20004ce0
 800a6dc:	08012128 	.word	0x08012128
 800a6e0:	20000354 	.word	0x20000354
 800a6e4:	20000334 	.word	0x20000334
 800a6e8:	20006d84 	.word	0x20006d84
 800a6ec:	00030d40 	.word	0x00030d40
 800a6f0:	20000054 	.word	0x20000054
 800a6f4:	08012198 	.word	0x08012198
 800a6f8:	20006af8 	.word	0x20006af8
					}
					else if(motorapp!=1 && durummot==0){
 800a6fc:	4b9f      	ldr	r3, [pc, #636]	; (800a97c <Timer13+0xc90>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	2b01      	cmp	r3, #1
 800a702:	f000 8092 	beq.w	800a82a <Timer13+0xb3e>
 800a706:	4b9e      	ldr	r3, [pc, #632]	; (800a980 <Timer13+0xc94>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f040 808d 	bne.w	800a82a <Timer13+0xb3e>
						voltnow=voltnow-increment;
 800a710:	4b9c      	ldr	r3, [pc, #624]	; (800a984 <Timer13+0xc98>)
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	4b9c      	ldr	r3, [pc, #624]	; (800a988 <Timer13+0xc9c>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	4a9a      	ldr	r2, [pc, #616]	; (800a984 <Timer13+0xc98>)
 800a71c:	6013      	str	r3, [r2, #0]
						ftos(voltnow,voltage);
 800a71e:	4b99      	ldr	r3, [pc, #612]	; (800a984 <Timer13+0xc98>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	499a      	ldr	r1, [pc, #616]	; (800a98c <Timer13+0xca0>)
 800a724:	4618      	mov	r0, r3
 800a726:	f7f7 f947 	bl	80019b8 <ftos>
						motsender[0]=0;
 800a72a:	4b99      	ldr	r3, [pc, #612]	; (800a990 <Timer13+0xca4>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	701a      	strb	r2, [r3, #0]
						datasender[0]=0;
 800a730:	4b98      	ldr	r3, [pc, #608]	; (800a994 <Timer13+0xca8>)
 800a732:	2200      	movs	r2, #0
 800a734:	701a      	strb	r2, [r3, #0]
						itoa(loadnow,motsender,10);
 800a736:	4b98      	ldr	r3, [pc, #608]	; (800a998 <Timer13+0xcac>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	220a      	movs	r2, #10
 800a73c:	4994      	ldr	r1, [pc, #592]	; (800a990 <Timer13+0xca4>)
 800a73e:	4618      	mov	r0, r3
 800a740:	f007 f9ee 	bl	8011b20 <itoa>
						strcat(motsender,"LM\0");
 800a744:	4892      	ldr	r0, [pc, #584]	; (800a990 <Timer13+0xca4>)
 800a746:	f7f5 fd3f 	bl	80001c8 <strlen>
 800a74a:	4603      	mov	r3, r0
 800a74c:	461a      	mov	r2, r3
 800a74e:	4b90      	ldr	r3, [pc, #576]	; (800a990 <Timer13+0xca4>)
 800a750:	4413      	add	r3, r2
 800a752:	4a92      	ldr	r2, [pc, #584]	; (800a99c <Timer13+0xcb0>)
 800a754:	8811      	ldrh	r1, [r2, #0]
 800a756:	7892      	ldrb	r2, [r2, #2]
 800a758:	8019      	strh	r1, [r3, #0]
 800a75a:	709a      	strb	r2, [r3, #2]
						strcat(datasender,voltage);
 800a75c:	498b      	ldr	r1, [pc, #556]	; (800a98c <Timer13+0xca0>)
 800a75e:	488d      	ldr	r0, [pc, #564]	; (800a994 <Timer13+0xca8>)
 800a760:	f007 f9f3 	bl	8011b4a <strcat>
						strcat(datasender,"E\0");
 800a764:	488b      	ldr	r0, [pc, #556]	; (800a994 <Timer13+0xca8>)
 800a766:	f7f5 fd2f 	bl	80001c8 <strlen>
 800a76a:	4603      	mov	r3, r0
 800a76c:	461a      	mov	r2, r3
 800a76e:	4b89      	ldr	r3, [pc, #548]	; (800a994 <Timer13+0xca8>)
 800a770:	4413      	add	r3, r2
 800a772:	498b      	ldr	r1, [pc, #556]	; (800a9a0 <Timer13+0xcb4>)
 800a774:	461a      	mov	r2, r3
 800a776:	460b      	mov	r3, r1
 800a778:	881b      	ldrh	r3, [r3, #0]
 800a77a:	8013      	strh	r3, [r2, #0]
						strcat(motsender,datasender);
 800a77c:	4985      	ldr	r1, [pc, #532]	; (800a994 <Timer13+0xca8>)
 800a77e:	4884      	ldr	r0, [pc, #528]	; (800a990 <Timer13+0xca4>)
 800a780:	f007 f9e3 	bl	8011b4a <strcat>
						SendPc(motsender, 5, 0);
 800a784:	2200      	movs	r2, #0
 800a786:	2105      	movs	r1, #5
 800a788:	4881      	ldr	r0, [pc, #516]	; (800a990 <Timer13+0xca4>)
 800a78a:	f7fa fd9b 	bl	80052c4 <SendPc>
						GiveVolt(voltage);
 800a78e:	487f      	ldr	r0, [pc, #508]	; (800a98c <Timer13+0xca0>)
 800a790:	f7f8 ff5c 	bl	800364c <GiveVolt>
					if((onlyAct==0 && voltnow <= first-delta)||motorapp==1){
 800a794:	e049      	b.n	800a82a <Timer13+0xb3e>
 800a796:	e048      	b.n	800a82a <Timer13+0xb3e>
					}
				}
				else if((loadnow < thresholdApp && app==1)){
 800a798:	4b7f      	ldr	r3, [pc, #508]	; (800a998 <Timer13+0xcac>)
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	4b81      	ldr	r3, [pc, #516]	; (800a9a4 <Timer13+0xcb8>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	da19      	bge.n	800a7d8 <Timer13+0xaec>
 800a7a4:	4b80      	ldr	r3, [pc, #512]	; (800a9a8 <Timer13+0xcbc>)
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d115      	bne.n	800a7d8 <Timer13+0xaec>
					isAutoApproach=0;
 800a7ac:	4b7f      	ldr	r3, [pc, #508]	; (800a9ac <Timer13+0xcc0>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	701a      	strb	r2, [r3, #0]
					SendPc("Not_Approached\0", 5, 4);
 800a7b2:	2204      	movs	r2, #4
 800a7b4:	2105      	movs	r1, #5
 800a7b6:	487e      	ldr	r0, [pc, #504]	; (800a9b0 <Timer13+0xcc4>)
 800a7b8:	f7fa fd84 	bl	80052c4 <SendPc>
					uart2say=1;
 800a7bc:	4b7d      	ldr	r3, [pc, #500]	; (800a9b4 <Timer13+0xcc8>)
 800a7be:	2201      	movs	r2, #1
 800a7c0:	601a      	str	r2, [r3, #0]
					sendexp=1;
 800a7c2:	4b7d      	ldr	r3, [pc, #500]	; (800a9b8 <Timer13+0xccc>)
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12, 100000);
 800a7c8:	497c      	ldr	r1, [pc, #496]	; (800a9bc <Timer13+0xcd0>)
 800a7ca:	487d      	ldr	r0, [pc, #500]	; (800a9c0 <Timer13+0xcd4>)
 800a7cc:	f000 fd24 	bl	800b218 <TimeSet>
					approaching=0;
 800a7d0:	4b7c      	ldr	r3, [pc, #496]	; (800a9c4 <Timer13+0xcd8>)
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	601a      	str	r2, [r3, #0]
 800a7d6:	e029      	b.n	800a82c <Timer13+0xb40>
				}
				else if((emergency==0&&app==1)){
 800a7d8:	4b7b      	ldr	r3, [pc, #492]	; (800a9c8 <Timer13+0xcdc>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d125      	bne.n	800a82c <Timer13+0xb40>
 800a7e0:	4b71      	ldr	r3, [pc, #452]	; (800a9a8 <Timer13+0xcbc>)
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d121      	bne.n	800a82c <Timer13+0xb40>
					stopmot=1;
 800a7e8:	4b78      	ldr	r3, [pc, #480]	; (800a9cc <Timer13+0xce0>)
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	601a      	str	r2, [r3, #0]
					isAutoApproach=5;
 800a7ee:	4b6f      	ldr	r3, [pc, #444]	; (800a9ac <Timer13+0xcc0>)
 800a7f0:	2205      	movs	r2, #5
 800a7f2:	701a      	strb	r2, [r3, #0]
					SendPc("Approach_Complete\0", 5, 4);
 800a7f4:	2204      	movs	r2, #4
 800a7f6:	2105      	movs	r1, #5
 800a7f8:	4875      	ldr	r0, [pc, #468]	; (800a9d0 <Timer13+0xce4>)
 800a7fa:	f7fa fd63 	bl	80052c4 <SendPc>
					uart2say=1;
 800a7fe:	4b6d      	ldr	r3, [pc, #436]	; (800a9b4 <Timer13+0xcc8>)
 800a800:	2201      	movs	r2, #1
 800a802:	601a      	str	r2, [r3, #0]
					sendexp=1;
 800a804:	4b6c      	ldr	r3, [pc, #432]	; (800a9b8 <Timer13+0xccc>)
 800a806:	2201      	movs	r2, #1
 800a808:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12, 100000);
 800a80a:	496c      	ldr	r1, [pc, #432]	; (800a9bc <Timer13+0xcd0>)
 800a80c:	486c      	ldr	r0, [pc, #432]	; (800a9c0 <Timer13+0xcd4>)
 800a80e:	f000 fd03 	bl	800b218 <TimeSet>
					actTouchpt=voltnow;
 800a812:	4b5c      	ldr	r3, [pc, #368]	; (800a984 <Timer13+0xc98>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a6f      	ldr	r2, [pc, #444]	; (800a9d4 <Timer13+0xce8>)
 800a818:	6013      	str	r3, [r2, #0]
					initialMotor=motpos;
 800a81a:	4b6f      	ldr	r3, [pc, #444]	; (800a9d8 <Timer13+0xcec>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a6f      	ldr	r2, [pc, #444]	; (800a9dc <Timer13+0xcf0>)
 800a820:	6013      	str	r3, [r2, #0]
					approaching=0;
 800a822:	4b68      	ldr	r3, [pc, #416]	; (800a9c4 <Timer13+0xcd8>)
 800a824:	2200      	movs	r2, #0
 800a826:	601a      	str	r2, [r3, #0]
 800a828:	e000      	b.n	800a82c <Timer13+0xb40>
					if((onlyAct==0 && voltnow <= first-delta)||motorapp==1){
 800a82a:	bf00      	nop
					//Save actuator and motor psts for retract etc;
				}
				pcDecision=0;
 800a82c:	4b6c      	ldr	r3, [pc, #432]	; (800a9e0 <Timer13+0xcf4>)
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]
				emergency=0;
 800a832:	4b65      	ldr	r3, [pc, #404]	; (800a9c8 <Timer13+0xcdc>)
 800a834:	2200      	movs	r2, #0
 800a836:	601a      	str	r2, [r3, #0]
			if(appOrret){
 800a838:	f000 bcae 	b.w	800b198 <Timer13+0x14ac>
			}
			else{
				if(dxy){
 800a83c:	4b69      	ldr	r3, [pc, #420]	; (800a9e4 <Timer13+0xcf8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	f000 80e9 	beq.w	800aa18 <Timer13+0xd2c>
					if(motorapp){
 800a846:	4b4d      	ldr	r3, [pc, #308]	; (800a97c <Timer13+0xc90>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d014      	beq.n	800a878 <Timer13+0xb8c>
						speedmode=5;
 800a84e:	4b66      	ldr	r3, [pc, #408]	; (800a9e8 <Timer13+0xcfc>)
 800a850:	2205      	movs	r2, #5
 800a852:	601a      	str	r2, [r3, #0]
						stepsay=motpos-initialMotor;
 800a854:	4b60      	ldr	r3, [pc, #384]	; (800a9d8 <Timer13+0xcec>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	4b60      	ldr	r3, [pc, #384]	; (800a9dc <Timer13+0xcf0>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	4a63      	ldr	r2, [pc, #396]	; (800a9ec <Timer13+0xd00>)
 800a860:	6013      	str	r3, [r2, #0]
						automot=0;
 800a862:	4b63      	ldr	r3, [pc, #396]	; (800a9f0 <Timer13+0xd04>)
 800a864:	2200      	movs	r2, #0
 800a866:	601a      	str	r2, [r3, #0]
						TimeSet(&htim9, 200000);
 800a868:	4962      	ldr	r1, [pc, #392]	; (800a9f4 <Timer13+0xd08>)
 800a86a:	4863      	ldr	r0, [pc, #396]	; (800a9f8 <Timer13+0xd0c>)
 800a86c:	f000 fcd4 	bl	800b218 <TimeSet>
						StepD(1);
 800a870:	2001      	movs	r0, #1
 800a872:	f7f8 fe15 	bl	80034a0 <StepD>
 800a876:	e1d3      	b.n	800ac20 <Timer13+0xf34>
					}
					else{
						if(voltnow < actTouchpt+3*increment && voltnow+increment<7500000){
 800a878:	4b43      	ldr	r3, [pc, #268]	; (800a988 <Timer13+0xc9c>)
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	4613      	mov	r3, r2
 800a87e:	005b      	lsls	r3, r3, #1
 800a880:	441a      	add	r2, r3
 800a882:	4b54      	ldr	r3, [pc, #336]	; (800a9d4 <Timer13+0xce8>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	441a      	add	r2, r3
 800a888:	4b3e      	ldr	r3, [pc, #248]	; (800a984 <Timer13+0xc98>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	dd4e      	ble.n	800a92e <Timer13+0xc42>
 800a890:	4b3c      	ldr	r3, [pc, #240]	; (800a984 <Timer13+0xc98>)
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	4b3c      	ldr	r3, [pc, #240]	; (800a988 <Timer13+0xc9c>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4413      	add	r3, r2
 800a89a:	4a58      	ldr	r2, [pc, #352]	; (800a9fc <Timer13+0xd10>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	dc46      	bgt.n	800a92e <Timer13+0xc42>
							voltnow=voltnow+increment;
 800a8a0:	4b38      	ldr	r3, [pc, #224]	; (800a984 <Timer13+0xc98>)
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	4b38      	ldr	r3, [pc, #224]	; (800a988 <Timer13+0xc9c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	4a36      	ldr	r2, [pc, #216]	; (800a984 <Timer13+0xc98>)
 800a8ac:	6013      	str	r3, [r2, #0]
							ftos(voltnow,voltage);
 800a8ae:	4b35      	ldr	r3, [pc, #212]	; (800a984 <Timer13+0xc98>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4936      	ldr	r1, [pc, #216]	; (800a98c <Timer13+0xca0>)
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7f7 f87f 	bl	80019b8 <ftos>
							motsender[0]=0;
 800a8ba:	4b35      	ldr	r3, [pc, #212]	; (800a990 <Timer13+0xca4>)
 800a8bc:	2200      	movs	r2, #0
 800a8be:	701a      	strb	r2, [r3, #0]
							datasender[0]=0;
 800a8c0:	4b34      	ldr	r3, [pc, #208]	; (800a994 <Timer13+0xca8>)
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	701a      	strb	r2, [r3, #0]
							itoa(loadnow,motsender,10);
 800a8c6:	4b34      	ldr	r3, [pc, #208]	; (800a998 <Timer13+0xcac>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	220a      	movs	r2, #10
 800a8cc:	4930      	ldr	r1, [pc, #192]	; (800a990 <Timer13+0xca4>)
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f007 f926 	bl	8011b20 <itoa>
							strcat(motsender,"LM\0");
 800a8d4:	482e      	ldr	r0, [pc, #184]	; (800a990 <Timer13+0xca4>)
 800a8d6:	f7f5 fc77 	bl	80001c8 <strlen>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	461a      	mov	r2, r3
 800a8de:	4b2c      	ldr	r3, [pc, #176]	; (800a990 <Timer13+0xca4>)
 800a8e0:	4413      	add	r3, r2
 800a8e2:	4a2e      	ldr	r2, [pc, #184]	; (800a99c <Timer13+0xcb0>)
 800a8e4:	8811      	ldrh	r1, [r2, #0]
 800a8e6:	7892      	ldrb	r2, [r2, #2]
 800a8e8:	8019      	strh	r1, [r3, #0]
 800a8ea:	709a      	strb	r2, [r3, #2]
							strcat(datasender,voltage);
 800a8ec:	4927      	ldr	r1, [pc, #156]	; (800a98c <Timer13+0xca0>)
 800a8ee:	4829      	ldr	r0, [pc, #164]	; (800a994 <Timer13+0xca8>)
 800a8f0:	f007 f92b 	bl	8011b4a <strcat>
							strcat(datasender,"E\0");
 800a8f4:	4827      	ldr	r0, [pc, #156]	; (800a994 <Timer13+0xca8>)
 800a8f6:	f7f5 fc67 	bl	80001c8 <strlen>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	461a      	mov	r2, r3
 800a8fe:	4b25      	ldr	r3, [pc, #148]	; (800a994 <Timer13+0xca8>)
 800a900:	4413      	add	r3, r2
 800a902:	4927      	ldr	r1, [pc, #156]	; (800a9a0 <Timer13+0xcb4>)
 800a904:	461a      	mov	r2, r3
 800a906:	460b      	mov	r3, r1
 800a908:	881b      	ldrh	r3, [r3, #0]
 800a90a:	8013      	strh	r3, [r2, #0]
							strcat(motsender,datasender);
 800a90c:	4921      	ldr	r1, [pc, #132]	; (800a994 <Timer13+0xca8>)
 800a90e:	4820      	ldr	r0, [pc, #128]	; (800a990 <Timer13+0xca4>)
 800a910:	f007 f91b 	bl	8011b4a <strcat>
							if(sendingPc==0){
 800a914:	4b3a      	ldr	r3, [pc, #232]	; (800aa00 <Timer13+0xd14>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d104      	bne.n	800a926 <Timer13+0xc3a>
								SendPc(motsender, 5, 0);
 800a91c:	2200      	movs	r2, #0
 800a91e:	2105      	movs	r1, #5
 800a920:	481b      	ldr	r0, [pc, #108]	; (800a990 <Timer13+0xca4>)
 800a922:	f7fa fccf 	bl	80052c4 <SendPc>
							}
							GiveVolt(voltage);
 800a926:	4819      	ldr	r0, [pc, #100]	; (800a98c <Timer13+0xca0>)
 800a928:	f7f8 fe90 	bl	800364c <GiveVolt>
 800a92c:	e178      	b.n	800ac20 <Timer13+0xf34>
						}
						else{
							dxy=0;
 800a92e:	4b2d      	ldr	r3, [pc, #180]	; (800a9e4 <Timer13+0xcf8>)
 800a930:	2200      	movs	r2, #0
 800a932:	601a      	str	r2, [r3, #0]
							retracting=0;
 800a934:	4b33      	ldr	r3, [pc, #204]	; (800aa04 <Timer13+0xd18>)
 800a936:	2200      	movs	r2, #0
 800a938:	601a      	str	r2, [r3, #0]
							thresholdApp = contact + loadnow;
 800a93a:	4b33      	ldr	r3, [pc, #204]	; (800aa08 <Timer13+0xd1c>)
 800a93c:	681a      	ldr	r2, [r3, #0]
 800a93e:	4b16      	ldr	r3, [pc, #88]	; (800a998 <Timer13+0xcac>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4413      	add	r3, r2
 800a944:	4a17      	ldr	r2, [pc, #92]	; (800a9a4 <Timer13+0xcb8>)
 800a946:	6013      	str	r3, [r2, #0]
							if(expcount<step){
 800a948:	4b30      	ldr	r3, [pc, #192]	; (800aa0c <Timer13+0xd20>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	4b30      	ldr	r3, [pc, #192]	; (800aa10 <Timer13+0xd24>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	429a      	cmp	r2, r3
 800a952:	da03      	bge.n	800a95c <Timer13+0xc70>
								isAutoApproach=1;
 800a954:	4b15      	ldr	r3, [pc, #84]	; (800a9ac <Timer13+0xcc0>)
 800a956:	2201      	movs	r2, #1
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	e161      	b.n	800ac20 <Timer13+0xf34>
							}
							else{//if its last step
								isAutoApproach=5;
 800a95c:	4b13      	ldr	r3, [pc, #76]	; (800a9ac <Timer13+0xcc0>)
 800a95e:	2205      	movs	r2, #5
 800a960:	701a      	strb	r2, [r3, #0]
								uart2say=1;
 800a962:	4b14      	ldr	r3, [pc, #80]	; (800a9b4 <Timer13+0xcc8>)
 800a964:	2201      	movs	r2, #1
 800a966:	601a      	str	r2, [r3, #0]
								TimeSet(&htim12, 100000);
 800a968:	4914      	ldr	r1, [pc, #80]	; (800a9bc <Timer13+0xcd0>)
 800a96a:	4815      	ldr	r0, [pc, #84]	; (800a9c0 <Timer13+0xcd4>)
 800a96c:	f000 fc54 	bl	800b218 <TimeSet>
								SendPc("Retract_Complete\0", 5, 4);
 800a970:	2204      	movs	r2, #4
 800a972:	2105      	movs	r1, #5
 800a974:	4827      	ldr	r0, [pc, #156]	; (800aa14 <Timer13+0xd28>)
 800a976:	f7fa fca5 	bl	80052c4 <SendPc>
 800a97a:	e151      	b.n	800ac20 <Timer13+0xf34>
 800a97c:	20000344 	.word	0x20000344
 800a980:	20000330 	.word	0x20000330
 800a984:	20000000 	.word	0x20000000
 800a988:	20000054 	.word	0x20000054
 800a98c:	20000004 	.word	0x20000004
 800a990:	20004ce0 	.word	0x20004ce0
 800a994:	20006bd8 	.word	0x20006bd8
 800a998:	20000310 	.word	0x20000310
 800a99c:	080120ac 	.word	0x080120ac
 800a9a0:	08012128 	.word	0x08012128
 800a9a4:	20001858 	.word	0x20001858
 800a9a8:	20006964 	.word	0x20006964
 800a9ac:	200002d8 	.word	0x200002d8
 800a9b0:	080121a4 	.word	0x080121a4
 800a9b4:	200018b0 	.word	0x200018b0
 800a9b8:	20000010 	.word	0x20000010
 800a9bc:	000186a0 	.word	0x000186a0
 800a9c0:	20006ec8 	.word	0x20006ec8
 800a9c4:	20001898 	.word	0x20001898
 800a9c8:	200002cc 	.word	0x200002cc
 800a9cc:	2000033c 	.word	0x2000033c
 800a9d0:	080120c4 	.word	0x080120c4
 800a9d4:	20001880 	.word	0x20001880
 800a9d8:	20000360 	.word	0x20000360
 800a9dc:	20001894 	.word	0x20001894
 800a9e0:	20001860 	.word	0x20001860
 800a9e4:	20000390 	.word	0x20000390
 800a9e8:	20000354 	.word	0x20000354
 800a9ec:	20000334 	.word	0x20000334
 800a9f0:	2000034c 	.word	0x2000034c
 800a9f4:	00030d40 	.word	0x00030d40
 800a9f8:	20006d84 	.word	0x20006d84
 800a9fc:	007270df 	.word	0x007270df
 800aa00:	20001870 	.word	0x20001870
 800aa04:	20000358 	.word	0x20000358
 800aa08:	20001828 	.word	0x20001828
 800aa0c:	2000001c 	.word	0x2000001c
 800aa10:	200002e8 	.word	0x200002e8
 800aa14:	080121b4 	.word	0x080121b4
							}
						}
					}
				}
				else if(emergency==0 && holdRet!=1 && (((loadnow > thresholdApp && app==1) || (pcDecision==2 && app==2)) && voltnow+increment < 7500000 && motorapp==0)){
 800aa18:	4b83      	ldr	r3, [pc, #524]	; (800ac28 <Timer13+0xf3c>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d17e      	bne.n	800ab1e <Timer13+0xe32>
 800aa20:	4b82      	ldr	r3, [pc, #520]	; (800ac2c <Timer13+0xf40>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d07a      	beq.n	800ab1e <Timer13+0xe32>
 800aa28:	4b81      	ldr	r3, [pc, #516]	; (800ac30 <Timer13+0xf44>)
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	4b81      	ldr	r3, [pc, #516]	; (800ac34 <Timer13+0xf48>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	dd03      	ble.n	800aa3c <Timer13+0xd50>
 800aa34:	4b80      	ldr	r3, [pc, #512]	; (800ac38 <Timer13+0xf4c>)
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d007      	beq.n	800aa4c <Timer13+0xd60>
 800aa3c:	4b7f      	ldr	r3, [pc, #508]	; (800ac3c <Timer13+0xf50>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	d16c      	bne.n	800ab1e <Timer13+0xe32>
 800aa44:	4b7c      	ldr	r3, [pc, #496]	; (800ac38 <Timer13+0xf4c>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	d168      	bne.n	800ab1e <Timer13+0xe32>
 800aa4c:	4b7c      	ldr	r3, [pc, #496]	; (800ac40 <Timer13+0xf54>)
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	4b7c      	ldr	r3, [pc, #496]	; (800ac44 <Timer13+0xf58>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4413      	add	r3, r2
 800aa56:	4a7c      	ldr	r2, [pc, #496]	; (800ac48 <Timer13+0xf5c>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	dc60      	bgt.n	800ab1e <Timer13+0xe32>
 800aa5c:	4b7b      	ldr	r3, [pc, #492]	; (800ac4c <Timer13+0xf60>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d15c      	bne.n	800ab1e <Timer13+0xe32>
					if(holdRet!=2 && ((loadnow<=holdPos&&app==1)||pcDecision==3)){//pcDecision for hold at retract state
 800aa64:	4b71      	ldr	r3, [pc, #452]	; (800ac2c <Timer13+0xf40>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d011      	beq.n	800aa90 <Timer13+0xda4>
 800aa6c:	4b70      	ldr	r3, [pc, #448]	; (800ac30 <Timer13+0xf44>)
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	4b77      	ldr	r3, [pc, #476]	; (800ac50 <Timer13+0xf64>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	dc03      	bgt.n	800aa80 <Timer13+0xd94>
 800aa78:	4b6f      	ldr	r3, [pc, #444]	; (800ac38 <Timer13+0xf4c>)
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d003      	beq.n	800aa88 <Timer13+0xd9c>
 800aa80:	4b6e      	ldr	r3, [pc, #440]	; (800ac3c <Timer13+0xf50>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d103      	bne.n	800aa90 <Timer13+0xda4>
						holdRet=1;
 800aa88:	4b68      	ldr	r3, [pc, #416]	; (800ac2c <Timer13+0xf40>)
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	601a      	str	r2, [r3, #0]
					if(holdRet!=2 && ((loadnow<=holdPos&&app==1)||pcDecision==3)){//pcDecision for hold at retract state
 800aa8e:	e0c7      	b.n	800ac20 <Timer13+0xf34>
					}
					else{
						voltnow=voltnow+increment;
 800aa90:	4b6b      	ldr	r3, [pc, #428]	; (800ac40 <Timer13+0xf54>)
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	4b6b      	ldr	r3, [pc, #428]	; (800ac44 <Timer13+0xf58>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4413      	add	r3, r2
 800aa9a:	4a69      	ldr	r2, [pc, #420]	; (800ac40 <Timer13+0xf54>)
 800aa9c:	6013      	str	r3, [r2, #0]
						ftos(voltnow,voltage);
 800aa9e:	4b68      	ldr	r3, [pc, #416]	; (800ac40 <Timer13+0xf54>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	496c      	ldr	r1, [pc, #432]	; (800ac54 <Timer13+0xf68>)
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7f6 ff87 	bl	80019b8 <ftos>
						motsender[0]=0;
 800aaaa:	4b6b      	ldr	r3, [pc, #428]	; (800ac58 <Timer13+0xf6c>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	701a      	strb	r2, [r3, #0]
						datasender[0]=0;
 800aab0:	4b6a      	ldr	r3, [pc, #424]	; (800ac5c <Timer13+0xf70>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	701a      	strb	r2, [r3, #0]
						itoa(loadnow,motsender,10);
 800aab6:	4b5e      	ldr	r3, [pc, #376]	; (800ac30 <Timer13+0xf44>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	220a      	movs	r2, #10
 800aabc:	4966      	ldr	r1, [pc, #408]	; (800ac58 <Timer13+0xf6c>)
 800aabe:	4618      	mov	r0, r3
 800aac0:	f007 f82e 	bl	8011b20 <itoa>
						strcat(motsender,"LM\0");
 800aac4:	4864      	ldr	r0, [pc, #400]	; (800ac58 <Timer13+0xf6c>)
 800aac6:	f7f5 fb7f 	bl	80001c8 <strlen>
 800aaca:	4603      	mov	r3, r0
 800aacc:	461a      	mov	r2, r3
 800aace:	4b62      	ldr	r3, [pc, #392]	; (800ac58 <Timer13+0xf6c>)
 800aad0:	4413      	add	r3, r2
 800aad2:	4a63      	ldr	r2, [pc, #396]	; (800ac60 <Timer13+0xf74>)
 800aad4:	8811      	ldrh	r1, [r2, #0]
 800aad6:	7892      	ldrb	r2, [r2, #2]
 800aad8:	8019      	strh	r1, [r3, #0]
 800aada:	709a      	strb	r2, [r3, #2]
						strcat(datasender,voltage);
 800aadc:	495d      	ldr	r1, [pc, #372]	; (800ac54 <Timer13+0xf68>)
 800aade:	485f      	ldr	r0, [pc, #380]	; (800ac5c <Timer13+0xf70>)
 800aae0:	f007 f833 	bl	8011b4a <strcat>
						strcat(datasender,"E\0");
 800aae4:	485d      	ldr	r0, [pc, #372]	; (800ac5c <Timer13+0xf70>)
 800aae6:	f7f5 fb6f 	bl	80001c8 <strlen>
 800aaea:	4603      	mov	r3, r0
 800aaec:	461a      	mov	r2, r3
 800aaee:	4b5b      	ldr	r3, [pc, #364]	; (800ac5c <Timer13+0xf70>)
 800aaf0:	4413      	add	r3, r2
 800aaf2:	495c      	ldr	r1, [pc, #368]	; (800ac64 <Timer13+0xf78>)
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	8013      	strh	r3, [r2, #0]
						strcat(motsender,datasender);
 800aafc:	4957      	ldr	r1, [pc, #348]	; (800ac5c <Timer13+0xf70>)
 800aafe:	4856      	ldr	r0, [pc, #344]	; (800ac58 <Timer13+0xf6c>)
 800ab00:	f007 f823 	bl	8011b4a <strcat>
						if(sendingPc==0){
 800ab04:	4b58      	ldr	r3, [pc, #352]	; (800ac68 <Timer13+0xf7c>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d104      	bne.n	800ab16 <Timer13+0xe2a>
							SendPc(motsender, 5, 0);
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2105      	movs	r1, #5
 800ab10:	4851      	ldr	r0, [pc, #324]	; (800ac58 <Timer13+0xf6c>)
 800ab12:	f7fa fbd7 	bl	80052c4 <SendPc>
						}
						GiveVolt(voltage);
 800ab16:	484f      	ldr	r0, [pc, #316]	; (800ac54 <Timer13+0xf68>)
 800ab18:	f7f8 fd98 	bl	800364c <GiveVolt>
					if(holdRet!=2 && ((loadnow<=holdPos&&app==1)||pcDecision==3)){//pcDecision for hold at retract state
 800ab1c:	e080      	b.n	800ac20 <Timer13+0xf34>
					}
				}
				else if(holdRet==1){
 800ab1e:	4b43      	ldr	r3, [pc, #268]	; (800ac2c <Timer13+0xf40>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b01      	cmp	r3, #1
 800ab24:	d111      	bne.n	800ab4a <Timer13+0xe5e>
					holdRetCnt++;
 800ab26:	4b51      	ldr	r3, [pc, #324]	; (800ac6c <Timer13+0xf80>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	4a4f      	ldr	r2, [pc, #316]	; (800ac6c <Timer13+0xf80>)
 800ab2e:	6013      	str	r3, [r2, #0]
					if(holdRetCnt>=holdRetDur){
 800ab30:	4b4e      	ldr	r3, [pc, #312]	; (800ac6c <Timer13+0xf80>)
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	4b4e      	ldr	r3, [pc, #312]	; (800ac70 <Timer13+0xf84>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	db71      	blt.n	800ac20 <Timer13+0xf34>
						holdRetCnt=0;
 800ab3c:	4b4b      	ldr	r3, [pc, #300]	; (800ac6c <Timer13+0xf80>)
 800ab3e:	2200      	movs	r2, #0
 800ab40:	601a      	str	r2, [r3, #0]
						holdRet=2;
 800ab42:	4b3a      	ldr	r3, [pc, #232]	; (800ac2c <Timer13+0xf40>)
 800ab44:	2202      	movs	r2, #2
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	e06a      	b.n	800ac20 <Timer13+0xf34>
					}
				}
				else if(emergency == 0 && (motorapp==1 || (voltnow+increment >= 7500000 && onlyAct==0 && ( (loadnow > thresholdApp && app==1) || (pcDecision==2&&app==2) ) ) )){
 800ab4a:	4b37      	ldr	r3, [pc, #220]	; (800ac28 <Timer13+0xf3c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d132      	bne.n	800abb8 <Timer13+0xecc>
 800ab52:	4b3e      	ldr	r3, [pc, #248]	; (800ac4c <Timer13+0xf60>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d01d      	beq.n	800ab96 <Timer13+0xeaa>
 800ab5a:	4b39      	ldr	r3, [pc, #228]	; (800ac40 <Timer13+0xf54>)
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	4b39      	ldr	r3, [pc, #228]	; (800ac44 <Timer13+0xf58>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4413      	add	r3, r2
 800ab64:	4a38      	ldr	r2, [pc, #224]	; (800ac48 <Timer13+0xf5c>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	dd26      	ble.n	800abb8 <Timer13+0xecc>
 800ab6a:	4b42      	ldr	r3, [pc, #264]	; (800ac74 <Timer13+0xf88>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d122      	bne.n	800abb8 <Timer13+0xecc>
 800ab72:	4b2f      	ldr	r3, [pc, #188]	; (800ac30 <Timer13+0xf44>)
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	4b2f      	ldr	r3, [pc, #188]	; (800ac34 <Timer13+0xf48>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	dd03      	ble.n	800ab86 <Timer13+0xe9a>
 800ab7e:	4b2e      	ldr	r3, [pc, #184]	; (800ac38 <Timer13+0xf4c>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d007      	beq.n	800ab96 <Timer13+0xeaa>
 800ab86:	4b2d      	ldr	r3, [pc, #180]	; (800ac3c <Timer13+0xf50>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d114      	bne.n	800abb8 <Timer13+0xecc>
 800ab8e:	4b2a      	ldr	r3, [pc, #168]	; (800ac38 <Timer13+0xf4c>)
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d110      	bne.n	800abb8 <Timer13+0xecc>
					isAutoApproach=4;
 800ab96:	4b38      	ldr	r3, [pc, #224]	; (800ac78 <Timer13+0xf8c>)
 800ab98:	2204      	movs	r2, #4
 800ab9a:	701a      	strb	r2, [r3, #0]
					automot=1;//burada sürekli çekiyoruz artık motorla ..
 800ab9c:	4b37      	ldr	r3, [pc, #220]	; (800ac7c <Timer13+0xf90>)
 800ab9e:	2201      	movs	r2, #1
 800aba0:	601a      	str	r2, [r3, #0]
					TimeSet(&htim9, 200000);
 800aba2:	4937      	ldr	r1, [pc, #220]	; (800ac80 <Timer13+0xf94>)
 800aba4:	4837      	ldr	r0, [pc, #220]	; (800ac84 <Timer13+0xf98>)
 800aba6:	f000 fb37 	bl	800b218 <TimeSet>
					StepD(1);
 800abaa:	2001      	movs	r0, #1
 800abac:	f7f8 fc78 	bl	80034a0 <StepD>
					//first=voltnow+delta;
					pcDecision=0;
 800abb0:	4b22      	ldr	r3, [pc, #136]	; (800ac3c <Timer13+0xf50>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	601a      	str	r2, [r3, #0]
 800abb6:	e033      	b.n	800ac20 <Timer13+0xf34>
				}
				else if((loadnow <= thresholdApp && app==1) && emergency == 0){//!!
 800abb8:	4b1d      	ldr	r3, [pc, #116]	; (800ac30 <Timer13+0xf44>)
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	4b1d      	ldr	r3, [pc, #116]	; (800ac34 <Timer13+0xf48>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	dc2d      	bgt.n	800ac20 <Timer13+0xf34>
 800abc4:	4b1c      	ldr	r3, [pc, #112]	; (800ac38 <Timer13+0xf4c>)
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	2b01      	cmp	r3, #1
 800abca:	d129      	bne.n	800ac20 <Timer13+0xf34>
 800abcc:	4b16      	ldr	r3, [pc, #88]	; (800ac28 <Timer13+0xf3c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d125      	bne.n	800ac20 <Timer13+0xf34>
					retracting=2;
 800abd4:	4b2c      	ldr	r3, [pc, #176]	; (800ac88 <Timer13+0xf9c>)
 800abd6:	2202      	movs	r2, #2
 800abd8:	601a      	str	r2, [r3, #0]
					uart2say=1;
 800abda:	4b2c      	ldr	r3, [pc, #176]	; (800ac8c <Timer13+0xfa0>)
 800abdc:	2201      	movs	r2, #1
 800abde:	601a      	str	r2, [r3, #0]
					TimeSet(&htim12, 100000);
 800abe0:	492b      	ldr	r1, [pc, #172]	; (800ac90 <Timer13+0xfa4>)
 800abe2:	482c      	ldr	r0, [pc, #176]	; (800ac94 <Timer13+0xfa8>)
 800abe4:	f000 fb18 	bl	800b218 <TimeSet>
					if(expcount<step){
 800abe8:	4b2b      	ldr	r3, [pc, #172]	; (800ac98 <Timer13+0xfac>)
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	4b2b      	ldr	r3, [pc, #172]	; (800ac9c <Timer13+0xfb0>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	429a      	cmp	r2, r3
 800abf2:	da03      	bge.n	800abfc <Timer13+0xf10>
						isAutoApproach=1;
 800abf4:	4b20      	ldr	r3, [pc, #128]	; (800ac78 <Timer13+0xf8c>)
 800abf6:	2201      	movs	r2, #1
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	e011      	b.n	800ac20 <Timer13+0xf34>
					}
					else{//if its last step
						retracting=0;
 800abfc:	4b22      	ldr	r3, [pc, #136]	; (800ac88 <Timer13+0xf9c>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	601a      	str	r2, [r3, #0]
						isAutoApproach=5;
 800ac02:	4b1d      	ldr	r3, [pc, #116]	; (800ac78 <Timer13+0xf8c>)
 800ac04:	2205      	movs	r2, #5
 800ac06:	701a      	strb	r2, [r3, #0]
						uart2say=1;
 800ac08:	4b20      	ldr	r3, [pc, #128]	; (800ac8c <Timer13+0xfa0>)
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	601a      	str	r2, [r3, #0]
						TimeSet(&htim12, 100000);
 800ac0e:	4920      	ldr	r1, [pc, #128]	; (800ac90 <Timer13+0xfa4>)
 800ac10:	4820      	ldr	r0, [pc, #128]	; (800ac94 <Timer13+0xfa8>)
 800ac12:	f000 fb01 	bl	800b218 <TimeSet>
						SendPc("Retract_Complete\0", 5, 4);
 800ac16:	2204      	movs	r2, #4
 800ac18:	2105      	movs	r1, #5
 800ac1a:	4821      	ldr	r0, [pc, #132]	; (800aca0 <Timer13+0xfb4>)
 800ac1c:	f7fa fb52 	bl	80052c4 <SendPc>
					}
				}
				emergency=0;
 800ac20:	4b01      	ldr	r3, [pc, #4]	; (800ac28 <Timer13+0xf3c>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
			if(appOrret){
 800ac26:	e2b7      	b.n	800b198 <Timer13+0x14ac>
 800ac28:	200002cc 	.word	0x200002cc
 800ac2c:	20001884 	.word	0x20001884
 800ac30:	20000310 	.word	0x20000310
 800ac34:	20001858 	.word	0x20001858
 800ac38:	20006964 	.word	0x20006964
 800ac3c:	20001860 	.word	0x20001860
 800ac40:	20000000 	.word	0x20000000
 800ac44:	20000054 	.word	0x20000054
 800ac48:	007270df 	.word	0x007270df
 800ac4c:	20000344 	.word	0x20000344
 800ac50:	20000380 	.word	0x20000380
 800ac54:	20000004 	.word	0x20000004
 800ac58:	20004ce0 	.word	0x20004ce0
 800ac5c:	20006bd8 	.word	0x20006bd8
 800ac60:	080120ac 	.word	0x080120ac
 800ac64:	08012128 	.word	0x08012128
 800ac68:	20001870 	.word	0x20001870
 800ac6c:	20001888 	.word	0x20001888
 800ac70:	2000188c 	.word	0x2000188c
 800ac74:	20001864 	.word	0x20001864
 800ac78:	200002d8 	.word	0x200002d8
 800ac7c:	2000034c 	.word	0x2000034c
 800ac80:	00030d40 	.word	0x00030d40
 800ac84:	20006d84 	.word	0x20006d84
 800ac88:	20000358 	.word	0x20000358
 800ac8c:	200018b0 	.word	0x200018b0
 800ac90:	000186a0 	.word	0x000186a0
 800ac94:	20006ec8 	.word	0x20006ec8
 800ac98:	2000001c 	.word	0x2000001c
 800ac9c:	200002e8 	.word	0x200002e8
 800aca0:	080121b4 	.word	0x080121b4
			}
		}
		else if(app==0){
 800aca4:	4b95      	ldr	r3, [pc, #596]	; (800aefc <Timer13+0x1210>)
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f040 8275 	bne.w	800b198 <Timer13+0x14ac>
			if(!appOrret){
 800acae:	4b94      	ldr	r3, [pc, #592]	; (800af00 <Timer13+0x1214>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f040 8270 	bne.w	800b198 <Timer13+0x14ac>
				//get to initial pst !motor con only motor step !not motor con only actuator step
				if(motorcon==0){
 800acb8:	4b92      	ldr	r3, [pc, #584]	; (800af04 <Timer13+0x1218>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d172      	bne.n	800ada6 <Timer13+0x10ba>
					retracting=1;
 800acc0:	4b91      	ldr	r3, [pc, #580]	; (800af08 <Timer13+0x121c>)
 800acc2:	2201      	movs	r2, #1
 800acc4:	601a      	str	r2, [r3, #0]
					if(voltnow < initialPos + 5*increment && voltnow+increment < 7500000){
 800acc6:	4b91      	ldr	r3, [pc, #580]	; (800af0c <Timer13+0x1220>)
 800acc8:	681a      	ldr	r2, [r3, #0]
 800acca:	4613      	mov	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	441a      	add	r2, r3
 800acd0:	4b8f      	ldr	r3, [pc, #572]	; (800af10 <Timer13+0x1224>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	441a      	add	r2, r3
 800acd6:	4b8f      	ldr	r3, [pc, #572]	; (800af14 <Timer13+0x1228>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	dd4e      	ble.n	800ad7c <Timer13+0x1090>
 800acde:	4b8d      	ldr	r3, [pc, #564]	; (800af14 <Timer13+0x1228>)
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	4b8a      	ldr	r3, [pc, #552]	; (800af0c <Timer13+0x1220>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4413      	add	r3, r2
 800ace8:	4a8b      	ldr	r2, [pc, #556]	; (800af18 <Timer13+0x122c>)
 800acea:	4293      	cmp	r3, r2
 800acec:	dc46      	bgt.n	800ad7c <Timer13+0x1090>
						voltnow=voltnow+increment;
 800acee:	4b89      	ldr	r3, [pc, #548]	; (800af14 <Timer13+0x1228>)
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	4b86      	ldr	r3, [pc, #536]	; (800af0c <Timer13+0x1220>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4413      	add	r3, r2
 800acf8:	4a86      	ldr	r2, [pc, #536]	; (800af14 <Timer13+0x1228>)
 800acfa:	6013      	str	r3, [r2, #0]
						ftos(voltnow,voltage);
 800acfc:	4b85      	ldr	r3, [pc, #532]	; (800af14 <Timer13+0x1228>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4986      	ldr	r1, [pc, #536]	; (800af1c <Timer13+0x1230>)
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7f6 fe58 	bl	80019b8 <ftos>
						motsender[0]=0;
 800ad08:	4b85      	ldr	r3, [pc, #532]	; (800af20 <Timer13+0x1234>)
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	701a      	strb	r2, [r3, #0]
						datasender[0]=0;
 800ad0e:	4b85      	ldr	r3, [pc, #532]	; (800af24 <Timer13+0x1238>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	701a      	strb	r2, [r3, #0]
						itoa(loadnow,motsender,10);
 800ad14:	4b84      	ldr	r3, [pc, #528]	; (800af28 <Timer13+0x123c>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	220a      	movs	r2, #10
 800ad1a:	4981      	ldr	r1, [pc, #516]	; (800af20 <Timer13+0x1234>)
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f006 feff 	bl	8011b20 <itoa>
						strcat(motsender,"LM\0");
 800ad22:	487f      	ldr	r0, [pc, #508]	; (800af20 <Timer13+0x1234>)
 800ad24:	f7f5 fa50 	bl	80001c8 <strlen>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	4b7c      	ldr	r3, [pc, #496]	; (800af20 <Timer13+0x1234>)
 800ad2e:	4413      	add	r3, r2
 800ad30:	4a7e      	ldr	r2, [pc, #504]	; (800af2c <Timer13+0x1240>)
 800ad32:	8811      	ldrh	r1, [r2, #0]
 800ad34:	7892      	ldrb	r2, [r2, #2]
 800ad36:	8019      	strh	r1, [r3, #0]
 800ad38:	709a      	strb	r2, [r3, #2]
						strcat(datasender,voltage);
 800ad3a:	4978      	ldr	r1, [pc, #480]	; (800af1c <Timer13+0x1230>)
 800ad3c:	4879      	ldr	r0, [pc, #484]	; (800af24 <Timer13+0x1238>)
 800ad3e:	f006 ff04 	bl	8011b4a <strcat>
						strcat(datasender,"E\0");
 800ad42:	4878      	ldr	r0, [pc, #480]	; (800af24 <Timer13+0x1238>)
 800ad44:	f7f5 fa40 	bl	80001c8 <strlen>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	4b75      	ldr	r3, [pc, #468]	; (800af24 <Timer13+0x1238>)
 800ad4e:	4413      	add	r3, r2
 800ad50:	4977      	ldr	r1, [pc, #476]	; (800af30 <Timer13+0x1244>)
 800ad52:	461a      	mov	r2, r3
 800ad54:	460b      	mov	r3, r1
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	8013      	strh	r3, [r2, #0]
						strcat(motsender,datasender);
 800ad5a:	4972      	ldr	r1, [pc, #456]	; (800af24 <Timer13+0x1238>)
 800ad5c:	4870      	ldr	r0, [pc, #448]	; (800af20 <Timer13+0x1234>)
 800ad5e:	f006 fef4 	bl	8011b4a <strcat>
						if(sendingPc==0){
 800ad62:	4b74      	ldr	r3, [pc, #464]	; (800af34 <Timer13+0x1248>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d104      	bne.n	800ad74 <Timer13+0x1088>
							SendPc(motsender, 5, 0);
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	2105      	movs	r1, #5
 800ad6e:	486c      	ldr	r0, [pc, #432]	; (800af20 <Timer13+0x1234>)
 800ad70:	f7fa faa8 	bl	80052c4 <SendPc>
						}
						GiveVolt(voltage);
 800ad74:	4869      	ldr	r0, [pc, #420]	; (800af1c <Timer13+0x1230>)
 800ad76:	f7f8 fc69 	bl	800364c <GiveVolt>
 800ad7a:	e20d      	b.n	800b198 <Timer13+0x14ac>
					}
					else{
						thresholdApp = contact + loadnow;
 800ad7c:	4b6e      	ldr	r3, [pc, #440]	; (800af38 <Timer13+0x124c>)
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	4b69      	ldr	r3, [pc, #420]	; (800af28 <Timer13+0x123c>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4413      	add	r3, r2
 800ad86:	4a6d      	ldr	r2, [pc, #436]	; (800af3c <Timer13+0x1250>)
 800ad88:	6013      	str	r3, [r2, #0]
						uart2say=1;
 800ad8a:	4b6d      	ldr	r3, [pc, #436]	; (800af40 <Timer13+0x1254>)
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	601a      	str	r2, [r3, #0]
						TimeSet(&htim12, 100000);
 800ad90:	496c      	ldr	r1, [pc, #432]	; (800af44 <Timer13+0x1258>)
 800ad92:	486d      	ldr	r0, [pc, #436]	; (800af48 <Timer13+0x125c>)
 800ad94:	f000 fa40 	bl	800b218 <TimeSet>
						retracting=0;
 800ad98:	4b5b      	ldr	r3, [pc, #364]	; (800af08 <Timer13+0x121c>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	601a      	str	r2, [r3, #0]
						isAutoApproach=1;
 800ad9e:	4b6b      	ldr	r3, [pc, #428]	; (800af4c <Timer13+0x1260>)
 800ada0:	2201      	movs	r2, #1
 800ada2:	701a      	strb	r2, [r3, #0]

			}
			sendexp=1;
		}
	}
}
 800ada4:	e1f8      	b.n	800b198 <Timer13+0x14ac>
					isAutoApproach=4;
 800ada6:	4b69      	ldr	r3, [pc, #420]	; (800af4c <Timer13+0x1260>)
 800ada8:	2204      	movs	r2, #4
 800adaa:	701a      	strb	r2, [r3, #0]
					retracting=1;
 800adac:	4b56      	ldr	r3, [pc, #344]	; (800af08 <Timer13+0x121c>)
 800adae:	2201      	movs	r2, #1
 800adb0:	601a      	str	r2, [r3, #0]
					automot=1;
 800adb2:	4b67      	ldr	r3, [pc, #412]	; (800af50 <Timer13+0x1264>)
 800adb4:	2201      	movs	r2, #1
 800adb6:	601a      	str	r2, [r3, #0]
					speedmode=5;
 800adb8:	4b66      	ldr	r3, [pc, #408]	; (800af54 <Timer13+0x1268>)
 800adba:	2205      	movs	r2, #5
 800adbc:	601a      	str	r2, [r3, #0]
					stepsay=motpos-initialMotor;
 800adbe:	4b66      	ldr	r3, [pc, #408]	; (800af58 <Timer13+0x126c>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	4b66      	ldr	r3, [pc, #408]	; (800af5c <Timer13+0x1270>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	4a65      	ldr	r2, [pc, #404]	; (800af60 <Timer13+0x1274>)
 800adca:	6013      	str	r3, [r2, #0]
					TimeSet(&htim9, 200000);
 800adcc:	4965      	ldr	r1, [pc, #404]	; (800af64 <Timer13+0x1278>)
 800adce:	4866      	ldr	r0, [pc, #408]	; (800af68 <Timer13+0x127c>)
 800add0:	f000 fa22 	bl	800b218 <TimeSet>
					StepD(1);
 800add4:	2001      	movs	r0, #1
 800add6:	f7f8 fb63 	bl	80034a0 <StepD>
}
 800adda:	e1dd      	b.n	800b198 <Timer13+0x14ac>
	else if(loadIndent==1){
 800addc:	4b63      	ldr	r3, [pc, #396]	; (800af6c <Timer13+0x1280>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	f040 81d9 	bne.w	800b198 <Timer13+0x14ac>
		if((expin[expcount].depth-thresholdApp>loadnow)||pcDecision==1){
 800ade6:	4b62      	ldr	r3, [pc, #392]	; (800af70 <Timer13+0x1284>)
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	4962      	ldr	r1, [pc, #392]	; (800af74 <Timer13+0x1288>)
 800adec:	4613      	mov	r3, r2
 800adee:	00db      	lsls	r3, r3, #3
 800adf0:	4413      	add	r3, r2
 800adf2:	00db      	lsls	r3, r3, #3
 800adf4:	440b      	add	r3, r1
 800adf6:	330c      	adds	r3, #12
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	4b50      	ldr	r3, [pc, #320]	; (800af3c <Timer13+0x1250>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	1ad2      	subs	r2, r2, r3
 800ae00:	4b49      	ldr	r3, [pc, #292]	; (800af28 <Timer13+0x123c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	dc04      	bgt.n	800ae12 <Timer13+0x1126>
 800ae08:	4b5b      	ldr	r3, [pc, #364]	; (800af78 <Timer13+0x128c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	f040 80f3 	bne.w	800aff8 <Timer13+0x130c>
			if(motorcon){
 800ae12:	4b3c      	ldr	r3, [pc, #240]	; (800af04 <Timer13+0x1218>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d018      	beq.n	800ae4c <Timer13+0x1160>
				if(joyint1!=1){
 800ae1a:	4b58      	ldr	r3, [pc, #352]	; (800af7c <Timer13+0x1290>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	f000 80e6 	beq.w	800aff0 <Timer13+0x1304>
					stopmot=1;
 800ae24:	4b56      	ldr	r3, [pc, #344]	; (800af80 <Timer13+0x1294>)
 800ae26:	2201      	movs	r2, #1
 800ae28:	601a      	str	r2, [r3, #0]
					TimeSet(&htim9, 200000);
 800ae2a:	494e      	ldr	r1, [pc, #312]	; (800af64 <Timer13+0x1278>)
 800ae2c:	484e      	ldr	r0, [pc, #312]	; (800af68 <Timer13+0x127c>)
 800ae2e:	f000 f9f3 	bl	800b218 <TimeSet>
					speedmode=5;
 800ae32:	4b48      	ldr	r3, [pc, #288]	; (800af54 <Timer13+0x1268>)
 800ae34:	2205      	movs	r2, #5
 800ae36:	601a      	str	r2, [r3, #0]
					automot=1;
 800ae38:	4b45      	ldr	r3, [pc, #276]	; (800af50 <Timer13+0x1264>)
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	601a      	str	r2, [r3, #0]
					StepD(0);
 800ae3e:	2000      	movs	r0, #0
 800ae40:	f7f8 fb2e 	bl	80034a0 <StepD>
					joyint1=1;
 800ae44:	4b4d      	ldr	r3, [pc, #308]	; (800af7c <Timer13+0x1290>)
 800ae46:	2201      	movs	r2, #1
 800ae48:	601a      	str	r2, [r3, #0]
 800ae4a:	e0d1      	b.n	800aff0 <Timer13+0x1304>
				if(givecount%2==0){
 800ae4c:	4b4d      	ldr	r3, [pc, #308]	; (800af84 <Timer13+0x1298>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0301 	and.w	r3, r3, #1
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d140      	bne.n	800aeda <Timer13+0x11ee>
					if(holdcount<2){
 800ae58:	4b4b      	ldr	r3, [pc, #300]	; (800af88 <Timer13+0x129c>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	dc25      	bgt.n	800aeac <Timer13+0x11c0>
						motsender[0]=0;
 800ae60:	4b2f      	ldr	r3, [pc, #188]	; (800af20 <Timer13+0x1234>)
 800ae62:	2200      	movs	r2, #0
 800ae64:	701a      	strb	r2, [r3, #0]
						datasender[0]=0;
 800ae66:	4b2f      	ldr	r3, [pc, #188]	; (800af24 <Timer13+0x1238>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	701a      	strb	r2, [r3, #0]
						itoa(loadnow,datasender,10);
 800ae6c:	4b2e      	ldr	r3, [pc, #184]	; (800af28 <Timer13+0x123c>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	220a      	movs	r2, #10
 800ae72:	492c      	ldr	r1, [pc, #176]	; (800af24 <Timer13+0x1238>)
 800ae74:	4618      	mov	r0, r3
 800ae76:	f006 fe53 	bl	8011b20 <itoa>
						strcat(datasender,"LM\0");
 800ae7a:	482a      	ldr	r0, [pc, #168]	; (800af24 <Timer13+0x1238>)
 800ae7c:	f7f5 f9a4 	bl	80001c8 <strlen>
 800ae80:	4603      	mov	r3, r0
 800ae82:	461a      	mov	r2, r3
 800ae84:	4b27      	ldr	r3, [pc, #156]	; (800af24 <Timer13+0x1238>)
 800ae86:	4413      	add	r3, r2
 800ae88:	4a28      	ldr	r2, [pc, #160]	; (800af2c <Timer13+0x1240>)
 800ae8a:	8811      	ldrh	r1, [r2, #0]
 800ae8c:	7892      	ldrb	r2, [r2, #2]
 800ae8e:	8019      	strh	r1, [r3, #0]
 800ae90:	709a      	strb	r2, [r3, #2]
						strcat(motsender,datasender);
 800ae92:	4924      	ldr	r1, [pc, #144]	; (800af24 <Timer13+0x1238>)
 800ae94:	4822      	ldr	r0, [pc, #136]	; (800af20 <Timer13+0x1234>)
 800ae96:	f006 fe58 	bl	8011b4a <strcat>
						if(sendingPc==0){
 800ae9a:	4b26      	ldr	r3, [pc, #152]	; (800af34 <Timer13+0x1248>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d104      	bne.n	800aeac <Timer13+0x11c0>
							SendPc(motsender, 5, 0);
 800aea2:	2200      	movs	r2, #0
 800aea4:	2105      	movs	r1, #5
 800aea6:	481e      	ldr	r0, [pc, #120]	; (800af20 <Timer13+0x1234>)
 800aea8:	f7fa fa0c 	bl	80052c4 <SendPc>
					stepvolt=firstpt-stepdepth*(eqstepcounter+1);
 800aeac:	4b37      	ldr	r3, [pc, #220]	; (800af8c <Timer13+0x12a0>)
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	4b37      	ldr	r3, [pc, #220]	; (800af90 <Timer13+0x12a4>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	4937      	ldr	r1, [pc, #220]	; (800af94 <Timer13+0x12a8>)
 800aeb8:	6809      	ldr	r1, [r1, #0]
 800aeba:	fb01 f303 	mul.w	r3, r1, r3
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	4a35      	ldr	r2, [pc, #212]	; (800af98 <Timer13+0x12ac>)
 800aec2:	6013      	str	r3, [r2, #0]
					voltnow=stepvolt;
 800aec4:	4b34      	ldr	r3, [pc, #208]	; (800af98 <Timer13+0x12ac>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a12      	ldr	r2, [pc, #72]	; (800af14 <Timer13+0x1228>)
 800aeca:	6013      	str	r3, [r2, #0]
					ftos(stepvolt,voltage);
 800aecc:	4b32      	ldr	r3, [pc, #200]	; (800af98 <Timer13+0x12ac>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4912      	ldr	r1, [pc, #72]	; (800af1c <Timer13+0x1230>)
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7f6 fd70 	bl	80019b8 <ftos>
 800aed8:	e085      	b.n	800afe6 <Timer13+0x12fa>
					motsender[0]=0;
 800aeda:	4b11      	ldr	r3, [pc, #68]	; (800af20 <Timer13+0x1234>)
 800aedc:	2200      	movs	r2, #0
 800aede:	701a      	strb	r2, [r3, #0]
					if(voltnow<=-1000000){
 800aee0:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <Timer13+0x1228>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a2d      	ldr	r2, [pc, #180]	; (800af9c <Timer13+0x12b0>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	da5c      	bge.n	800afa4 <Timer13+0x12b8>
						loadIndent=0;
 800aeea:	4b20      	ldr	r3, [pc, #128]	; (800af6c <Timer13+0x1280>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]
						SendPc("OutRange", 5, 4);
 800aef0:	2204      	movs	r2, #4
 800aef2:	2105      	movs	r1, #5
 800aef4:	482a      	ldr	r0, [pc, #168]	; (800afa0 <Timer13+0x12b4>)
 800aef6:	f7fa f9e5 	bl	80052c4 <SendPc>
 800aefa:	e074      	b.n	800afe6 <Timer13+0x12fa>
 800aefc:	20006964 	.word	0x20006964
 800af00:	20000388 	.word	0x20000388
 800af04:	20000340 	.word	0x20000340
 800af08:	20000358 	.word	0x20000358
 800af0c:	20000054 	.word	0x20000054
 800af10:	2000004c 	.word	0x2000004c
 800af14:	20000000 	.word	0x20000000
 800af18:	007270df 	.word	0x007270df
 800af1c:	20000004 	.word	0x20000004
 800af20:	20004ce0 	.word	0x20004ce0
 800af24:	20006bd8 	.word	0x20006bd8
 800af28:	20000310 	.word	0x20000310
 800af2c:	080120ac 	.word	0x080120ac
 800af30:	08012128 	.word	0x08012128
 800af34:	20001870 	.word	0x20001870
 800af38:	20001828 	.word	0x20001828
 800af3c:	20001858 	.word	0x20001858
 800af40:	200018b0 	.word	0x200018b0
 800af44:	000186a0 	.word	0x000186a0
 800af48:	20006ec8 	.word	0x20006ec8
 800af4c:	200002d8 	.word	0x200002d8
 800af50:	2000034c 	.word	0x2000034c
 800af54:	20000354 	.word	0x20000354
 800af58:	20000360 	.word	0x20000360
 800af5c:	20001894 	.word	0x20001894
 800af60:	20000334 	.word	0x20000334
 800af64:	00030d40 	.word	0x00030d40
 800af68:	20006d84 	.word	0x20006d84
 800af6c:	2000038c 	.word	0x2000038c
 800af70:	2000001c 	.word	0x2000001c
 800af74:	20004d44 	.word	0x20004d44
 800af78:	20001860 	.word	0x20001860
 800af7c:	20001818 	.word	0x20001818
 800af80:	2000033c 	.word	0x2000033c
 800af84:	200002d0 	.word	0x200002d0
 800af88:	20000324 	.word	0x20000324
 800af8c:	20000018 	.word	0x20000018
 800af90:	200002fc 	.word	0x200002fc
 800af94:	200002f0 	.word	0x200002f0
 800af98:	200002f4 	.word	0x200002f4
 800af9c:	fff0bdc1 	.word	0xfff0bdc1
 800afa0:	08012198 	.word	0x08012198
						strcat(motsender,voltage);
 800afa4:	497e      	ldr	r1, [pc, #504]	; (800b1a0 <Timer13+0x14b4>)
 800afa6:	487f      	ldr	r0, [pc, #508]	; (800b1a4 <Timer13+0x14b8>)
 800afa8:	f006 fdcf 	bl	8011b4a <strcat>
						strcat(motsender,"E\0");
 800afac:	487d      	ldr	r0, [pc, #500]	; (800b1a4 <Timer13+0x14b8>)
 800afae:	f7f5 f90b 	bl	80001c8 <strlen>
 800afb2:	4603      	mov	r3, r0
 800afb4:	461a      	mov	r2, r3
 800afb6:	4b7b      	ldr	r3, [pc, #492]	; (800b1a4 <Timer13+0x14b8>)
 800afb8:	4413      	add	r3, r2
 800afba:	497b      	ldr	r1, [pc, #492]	; (800b1a8 <Timer13+0x14bc>)
 800afbc:	461a      	mov	r2, r3
 800afbe:	460b      	mov	r3, r1
 800afc0:	881b      	ldrh	r3, [r3, #0]
 800afc2:	8013      	strh	r3, [r2, #0]
						if(sendingPc==0){
 800afc4:	4b79      	ldr	r3, [pc, #484]	; (800b1ac <Timer13+0x14c0>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <Timer13+0x12ea>
							SendPc(motsender, 5, 0);
 800afcc:	2200      	movs	r2, #0
 800afce:	2105      	movs	r1, #5
 800afd0:	4874      	ldr	r0, [pc, #464]	; (800b1a4 <Timer13+0x14b8>)
 800afd2:	f7fa f977 	bl	80052c4 <SendPc>
						GiveVolt(voltage);
 800afd6:	4872      	ldr	r0, [pc, #456]	; (800b1a0 <Timer13+0x14b4>)
 800afd8:	f7f8 fb38 	bl	800364c <GiveVolt>
						eqstepcounter++;
 800afdc:	4b74      	ldr	r3, [pc, #464]	; (800b1b0 <Timer13+0x14c4>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	3301      	adds	r3, #1
 800afe2:	4a73      	ldr	r2, [pc, #460]	; (800b1b0 <Timer13+0x14c4>)
 800afe4:	6013      	str	r3, [r2, #0]
				givecount++;
 800afe6:	4b73      	ldr	r3, [pc, #460]	; (800b1b4 <Timer13+0x14c8>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3301      	adds	r3, #1
 800afec:	4a71      	ldr	r2, [pc, #452]	; (800b1b4 <Timer13+0x14c8>)
 800afee:	6013      	str	r3, [r2, #0]
			pcDecision=0;
 800aff0:	4b71      	ldr	r3, [pc, #452]	; (800b1b8 <Timer13+0x14cc>)
 800aff2:	2200      	movs	r2, #0
 800aff4:	601a      	str	r2, [r3, #0]
 800aff6:	e0cf      	b.n	800b198 <Timer13+0x14ac>
		else if(expin[expcount].depth+thresholdApp<loadnow || pcDecision==2){
 800aff8:	4b70      	ldr	r3, [pc, #448]	; (800b1bc <Timer13+0x14d0>)
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	4970      	ldr	r1, [pc, #448]	; (800b1c0 <Timer13+0x14d4>)
 800affe:	4613      	mov	r3, r2
 800b000:	00db      	lsls	r3, r3, #3
 800b002:	4413      	add	r3, r2
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	440b      	add	r3, r1
 800b008:	330c      	adds	r3, #12
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	4b6d      	ldr	r3, [pc, #436]	; (800b1c4 <Timer13+0x14d8>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	441a      	add	r2, r3
 800b012:	4b6d      	ldr	r3, [pc, #436]	; (800b1c8 <Timer13+0x14dc>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	429a      	cmp	r2, r3
 800b018:	db04      	blt.n	800b024 <Timer13+0x1338>
 800b01a:	4b67      	ldr	r3, [pc, #412]	; (800b1b8 <Timer13+0x14cc>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	2b02      	cmp	r3, #2
 800b020:	f040 80ac 	bne.w	800b17c <Timer13+0x1490>
			if(motorcon){
 800b024:	4b69      	ldr	r3, [pc, #420]	; (800b1cc <Timer13+0x14e0>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d018      	beq.n	800b05e <Timer13+0x1372>
				if(joyint1!=2){
 800b02c:	4b68      	ldr	r3, [pc, #416]	; (800b1d0 <Timer13+0x14e4>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2b02      	cmp	r3, #2
 800b032:	f000 809f 	beq.w	800b174 <Timer13+0x1488>
					stopmot=1;
 800b036:	4b67      	ldr	r3, [pc, #412]	; (800b1d4 <Timer13+0x14e8>)
 800b038:	2201      	movs	r2, #1
 800b03a:	601a      	str	r2, [r3, #0]
					TimeSet(&htim9, 200000);
 800b03c:	4966      	ldr	r1, [pc, #408]	; (800b1d8 <Timer13+0x14ec>)
 800b03e:	4867      	ldr	r0, [pc, #412]	; (800b1dc <Timer13+0x14f0>)
 800b040:	f000 f8ea 	bl	800b218 <TimeSet>
					speedmode=5;
 800b044:	4b66      	ldr	r3, [pc, #408]	; (800b1e0 <Timer13+0x14f4>)
 800b046:	2205      	movs	r2, #5
 800b048:	601a      	str	r2, [r3, #0]
					automot=1;
 800b04a:	4b66      	ldr	r3, [pc, #408]	; (800b1e4 <Timer13+0x14f8>)
 800b04c:	2201      	movs	r2, #1
 800b04e:	601a      	str	r2, [r3, #0]
					StepD(1);
 800b050:	2001      	movs	r0, #1
 800b052:	f7f8 fa25 	bl	80034a0 <StepD>
					joyint1=2;
 800b056:	4b5e      	ldr	r3, [pc, #376]	; (800b1d0 <Timer13+0x14e4>)
 800b058:	2202      	movs	r2, #2
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	e08a      	b.n	800b174 <Timer13+0x1488>
				if(givecount%2==0){
 800b05e:	4b55      	ldr	r3, [pc, #340]	; (800b1b4 <Timer13+0x14c8>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	d140      	bne.n	800b0ec <Timer13+0x1400>
					if(holdcount<2){
 800b06a:	4b5f      	ldr	r3, [pc, #380]	; (800b1e8 <Timer13+0x14fc>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	dc25      	bgt.n	800b0be <Timer13+0x13d2>
						motsender[0]=0;
 800b072:	4b4c      	ldr	r3, [pc, #304]	; (800b1a4 <Timer13+0x14b8>)
 800b074:	2200      	movs	r2, #0
 800b076:	701a      	strb	r2, [r3, #0]
						datasender[0]=0;
 800b078:	4b5c      	ldr	r3, [pc, #368]	; (800b1ec <Timer13+0x1500>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	701a      	strb	r2, [r3, #0]
						itoa(loadnow,datasender,10);
 800b07e:	4b52      	ldr	r3, [pc, #328]	; (800b1c8 <Timer13+0x14dc>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	220a      	movs	r2, #10
 800b084:	4959      	ldr	r1, [pc, #356]	; (800b1ec <Timer13+0x1500>)
 800b086:	4618      	mov	r0, r3
 800b088:	f006 fd4a 	bl	8011b20 <itoa>
						strcat(datasender,"LM\0");
 800b08c:	4857      	ldr	r0, [pc, #348]	; (800b1ec <Timer13+0x1500>)
 800b08e:	f7f5 f89b 	bl	80001c8 <strlen>
 800b092:	4603      	mov	r3, r0
 800b094:	461a      	mov	r2, r3
 800b096:	4b55      	ldr	r3, [pc, #340]	; (800b1ec <Timer13+0x1500>)
 800b098:	4413      	add	r3, r2
 800b09a:	4a55      	ldr	r2, [pc, #340]	; (800b1f0 <Timer13+0x1504>)
 800b09c:	8811      	ldrh	r1, [r2, #0]
 800b09e:	7892      	ldrb	r2, [r2, #2]
 800b0a0:	8019      	strh	r1, [r3, #0]
 800b0a2:	709a      	strb	r2, [r3, #2]
						strcat(motsender,datasender);
 800b0a4:	4951      	ldr	r1, [pc, #324]	; (800b1ec <Timer13+0x1500>)
 800b0a6:	483f      	ldr	r0, [pc, #252]	; (800b1a4 <Timer13+0x14b8>)
 800b0a8:	f006 fd4f 	bl	8011b4a <strcat>
						if(sendingPc==0){
 800b0ac:	4b3f      	ldr	r3, [pc, #252]	; (800b1ac <Timer13+0x14c0>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d104      	bne.n	800b0be <Timer13+0x13d2>
							SendPc(motsender, 5, 0);
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	2105      	movs	r1, #5
 800b0b8:	483a      	ldr	r0, [pc, #232]	; (800b1a4 <Timer13+0x14b8>)
 800b0ba:	f7fa f903 	bl	80052c4 <SendPc>
					stepvolt=firstpt+stepdepth*(eqstepcounter+1);
 800b0be:	4b3c      	ldr	r3, [pc, #240]	; (800b1b0 <Timer13+0x14c4>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	4a4b      	ldr	r2, [pc, #300]	; (800b1f4 <Timer13+0x1508>)
 800b0c6:	6812      	ldr	r2, [r2, #0]
 800b0c8:	fb02 f203 	mul.w	r2, r2, r3
 800b0cc:	4b4a      	ldr	r3, [pc, #296]	; (800b1f8 <Timer13+0x150c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	4a4a      	ldr	r2, [pc, #296]	; (800b1fc <Timer13+0x1510>)
 800b0d4:	6013      	str	r3, [r2, #0]
					voltnow=stepvolt;
 800b0d6:	4b49      	ldr	r3, [pc, #292]	; (800b1fc <Timer13+0x1510>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a49      	ldr	r2, [pc, #292]	; (800b200 <Timer13+0x1514>)
 800b0dc:	6013      	str	r3, [r2, #0]
					ftos(stepvolt,voltage);
 800b0de:	4b47      	ldr	r3, [pc, #284]	; (800b1fc <Timer13+0x1510>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	492f      	ldr	r1, [pc, #188]	; (800b1a0 <Timer13+0x14b4>)
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7f6 fc67 	bl	80019b8 <ftos>
 800b0ea:	e03e      	b.n	800b16a <Timer13+0x147e>
					motsender[0]=0;
 800b0ec:	4b2d      	ldr	r3, [pc, #180]	; (800b1a4 <Timer13+0x14b8>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	701a      	strb	r2, [r3, #0]
					if(voltnow>=7500000){
 800b0f2:	4b43      	ldr	r3, [pc, #268]	; (800b200 <Timer13+0x1514>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a43      	ldr	r2, [pc, #268]	; (800b204 <Timer13+0x1518>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	dd15      	ble.n	800b128 <Timer13+0x143c>
						loadIndent=0;
 800b0fc:	4b42      	ldr	r3, [pc, #264]	; (800b208 <Timer13+0x151c>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
						SendPc("OutRange", 5, 4);
 800b102:	2204      	movs	r2, #4
 800b104:	2105      	movs	r1, #5
 800b106:	4841      	ldr	r0, [pc, #260]	; (800b20c <Timer13+0x1520>)
 800b108:	f7fa f8dc 	bl	80052c4 <SendPc>
						TimeSet(&htim9, 100000);
 800b10c:	4940      	ldr	r1, [pc, #256]	; (800b210 <Timer13+0x1524>)
 800b10e:	4833      	ldr	r0, [pc, #204]	; (800b1dc <Timer13+0x14f0>)
 800b110:	f000 f882 	bl	800b218 <TimeSet>
						speedmode=5;
 800b114:	4b32      	ldr	r3, [pc, #200]	; (800b1e0 <Timer13+0x14f4>)
 800b116:	2205      	movs	r2, #5
 800b118:	601a      	str	r2, [r3, #0]
						automot=1;
 800b11a:	4b32      	ldr	r3, [pc, #200]	; (800b1e4 <Timer13+0x14f8>)
 800b11c:	2201      	movs	r2, #1
 800b11e:	601a      	str	r2, [r3, #0]
						StepD(1);
 800b120:	2001      	movs	r0, #1
 800b122:	f7f8 f9bd 	bl	80034a0 <StepD>
 800b126:	e020      	b.n	800b16a <Timer13+0x147e>
						strcat(motsender,voltage);
 800b128:	491d      	ldr	r1, [pc, #116]	; (800b1a0 <Timer13+0x14b4>)
 800b12a:	481e      	ldr	r0, [pc, #120]	; (800b1a4 <Timer13+0x14b8>)
 800b12c:	f006 fd0d 	bl	8011b4a <strcat>
						strcat(motsender,"E\0");
 800b130:	481c      	ldr	r0, [pc, #112]	; (800b1a4 <Timer13+0x14b8>)
 800b132:	f7f5 f849 	bl	80001c8 <strlen>
 800b136:	4603      	mov	r3, r0
 800b138:	461a      	mov	r2, r3
 800b13a:	4b1a      	ldr	r3, [pc, #104]	; (800b1a4 <Timer13+0x14b8>)
 800b13c:	4413      	add	r3, r2
 800b13e:	491a      	ldr	r1, [pc, #104]	; (800b1a8 <Timer13+0x14bc>)
 800b140:	461a      	mov	r2, r3
 800b142:	460b      	mov	r3, r1
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	8013      	strh	r3, [r2, #0]
						if(sendingPc==0){
 800b148:	4b18      	ldr	r3, [pc, #96]	; (800b1ac <Timer13+0x14c0>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d104      	bne.n	800b15a <Timer13+0x146e>
							SendPc(motsender, 5, 0);
 800b150:	2200      	movs	r2, #0
 800b152:	2105      	movs	r1, #5
 800b154:	4813      	ldr	r0, [pc, #76]	; (800b1a4 <Timer13+0x14b8>)
 800b156:	f7fa f8b5 	bl	80052c4 <SendPc>
						GiveVolt(voltage);
 800b15a:	4811      	ldr	r0, [pc, #68]	; (800b1a0 <Timer13+0x14b4>)
 800b15c:	f7f8 fa76 	bl	800364c <GiveVolt>
						eqstepcounter++;
 800b160:	4b13      	ldr	r3, [pc, #76]	; (800b1b0 <Timer13+0x14c4>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3301      	adds	r3, #1
 800b166:	4a12      	ldr	r2, [pc, #72]	; (800b1b0 <Timer13+0x14c4>)
 800b168:	6013      	str	r3, [r2, #0]
				givecount++;
 800b16a:	4b12      	ldr	r3, [pc, #72]	; (800b1b4 <Timer13+0x14c8>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	3301      	adds	r3, #1
 800b170:	4a10      	ldr	r2, [pc, #64]	; (800b1b4 <Timer13+0x14c8>)
 800b172:	6013      	str	r3, [r2, #0]
			pcDecision=0;
 800b174:	4b10      	ldr	r3, [pc, #64]	; (800b1b8 <Timer13+0x14cc>)
 800b176:	2200      	movs	r2, #0
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	e00d      	b.n	800b198 <Timer13+0x14ac>
			if(motorcon){
 800b17c:	4b13      	ldr	r3, [pc, #76]	; (800b1cc <Timer13+0x14e0>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d005      	beq.n	800b190 <Timer13+0x14a4>
				stopmot=1;
 800b184:	4b13      	ldr	r3, [pc, #76]	; (800b1d4 <Timer13+0x14e8>)
 800b186:	2201      	movs	r2, #1
 800b188:	601a      	str	r2, [r3, #0]
				joyint1=0;
 800b18a:	4b11      	ldr	r3, [pc, #68]	; (800b1d0 <Timer13+0x14e4>)
 800b18c:	2200      	movs	r2, #0
 800b18e:	601a      	str	r2, [r3, #0]
			sendexp=1;
 800b190:	4b20      	ldr	r3, [pc, #128]	; (800b214 <Timer13+0x1528>)
 800b192:	2201      	movs	r2, #1
 800b194:	601a      	str	r2, [r3, #0]
}
 800b196:	e7ff      	b.n	800b198 <Timer13+0x14ac>
 800b198:	bf00      	nop
 800b19a:	371c      	adds	r7, #28
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1a0:	20000004 	.word	0x20000004
 800b1a4:	20004ce0 	.word	0x20004ce0
 800b1a8:	08012128 	.word	0x08012128
 800b1ac:	20001870 	.word	0x20001870
 800b1b0:	200002fc 	.word	0x200002fc
 800b1b4:	200002d0 	.word	0x200002d0
 800b1b8:	20001860 	.word	0x20001860
 800b1bc:	2000001c 	.word	0x2000001c
 800b1c0:	20004d44 	.word	0x20004d44
 800b1c4:	20001858 	.word	0x20001858
 800b1c8:	20000310 	.word	0x20000310
 800b1cc:	20000340 	.word	0x20000340
 800b1d0:	20001818 	.word	0x20001818
 800b1d4:	2000033c 	.word	0x2000033c
 800b1d8:	00030d40 	.word	0x00030d40
 800b1dc:	20006d84 	.word	0x20006d84
 800b1e0:	20000354 	.word	0x20000354
 800b1e4:	2000034c 	.word	0x2000034c
 800b1e8:	20000324 	.word	0x20000324
 800b1ec:	20006bd8 	.word	0x20006bd8
 800b1f0:	080120ac 	.word	0x080120ac
 800b1f4:	200002f0 	.word	0x200002f0
 800b1f8:	20000018 	.word	0x20000018
 800b1fc:	200002f4 	.word	0x200002f4
 800b200:	20000000 	.word	0x20000000
 800b204:	007270df 	.word	0x007270df
 800b208:	2000038c 	.word	0x2000038c
 800b20c:	08012198 	.word	0x08012198
 800b210:	000186a0 	.word	0x000186a0
 800b214:	20000010 	.word	0x20000010

0800b218 <TimeSet>:
void TimeSet(TIM_HandleTypeDef *htim, int duration){
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
	HAL_TIM_Base_Stop_IT(htim);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f003 fe9f 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
	if(duration>=100000){ //greater than 100ms up to 6.5 sec
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	4a31      	ldr	r2, [pc, #196]	; (800b2f0 <TimeSet+0xd8>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	dd10      	ble.n	800b252 <TimeSet+0x3a>
		htim->Instance->PSC=16799;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f244 129f 	movw	r2, #16799	; 0x419f
 800b238:	629a      	str	r2, [r3, #40]	; 0x28
		htim->Instance->ARR=(duration/1000)-1;
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	4a2d      	ldr	r2, [pc, #180]	; (800b2f4 <TimeSet+0xdc>)
 800b23e:	fb82 1203 	smull	r1, r2, r2, r3
 800b242:	1192      	asrs	r2, r2, #6
 800b244:	17db      	asrs	r3, r3, #31
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	1e5a      	subs	r2, r3, #1
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	62da      	str	r2, [r3, #44]	; 0x2c
 800b250:	e023      	b.n	800b29a <TimeSet+0x82>
	}
	else if(duration<=1000){ //smaller than 1ms
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b258:	dc0f      	bgt.n	800b27a <TimeSet+0x62>
		htim->Instance->PSC=84;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2254      	movs	r2, #84	; 0x54
 800b260:	629a      	str	r2, [r3, #40]	; 0x28
		htim->Instance->ARR=(duration/5)-1;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	4a24      	ldr	r2, [pc, #144]	; (800b2f8 <TimeSet+0xe0>)
 800b266:	fb82 1203 	smull	r1, r2, r2, r3
 800b26a:	1052      	asrs	r2, r2, #1
 800b26c:	17db      	asrs	r3, r3, #31
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	1e5a      	subs	r2, r3, #1
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	62da      	str	r2, [r3, #44]	; 0x2c
 800b278:	e00f      	b.n	800b29a <TimeSet+0x82>
	}
	else{ //1ms-100ms range--
		htim->Instance->PSC=1679;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f240 628f 	movw	r2, #1679	; 0x68f
 800b282:	629a      	str	r2, [r3, #40]	; 0x28
		htim->Instance->ARR=(duration/100)-1;
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	4a1d      	ldr	r2, [pc, #116]	; (800b2fc <TimeSet+0xe4>)
 800b288:	fb82 1203 	smull	r1, r2, r2, r3
 800b28c:	1152      	asrs	r2, r2, #5
 800b28e:	17db      	asrs	r3, r3, #31
 800b290:	1ad3      	subs	r3, r2, r3
 800b292:	1e5a      	subs	r2, r3, #1
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	62da      	str	r2, [r3, #44]	; 0x2c
	}
	htim->Init.Period=htim->Instance->ARR;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	60da      	str	r2, [r3, #12]
	htim->Init.Prescaler=htim->Instance->PSC;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	605a      	str	r2, [r3, #4]
	htim->Instance->CNT=0;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	625a      	str	r2, [r3, #36]	; 0x24
	if(htim!=&htim9){
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a11      	ldr	r2, [pc, #68]	; (800b300 <TimeSet+0xe8>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d003      	beq.n	800b2c6 <TimeSet+0xae>
		HAL_TIM_Base_Start_IT(htim);
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f003 fe2d 	bl	800ef1e <HAL_TIM_Base_Start_IT>
		}
		else{
			posinf=(10000/duration);
		}
	}
}
 800b2c4:	e00f      	b.n	800b2e6 <TimeSet+0xce>
		if(duration>=10000){
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	f242 720f 	movw	r2, #9999	; 0x270f
 800b2cc:	4293      	cmp	r3, r2
 800b2ce:	dd03      	ble.n	800b2d8 <TimeSet+0xc0>
			posinf=2;
 800b2d0:	4b0c      	ldr	r3, [pc, #48]	; (800b304 <TimeSet+0xec>)
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	601a      	str	r2, [r3, #0]
}
 800b2d6:	e006      	b.n	800b2e6 <TimeSet+0xce>
			posinf=(10000/duration);
 800b2d8:	f242 7210 	movw	r2, #10000	; 0x2710
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	fb92 f3f3 	sdiv	r3, r2, r3
 800b2e2:	4a08      	ldr	r2, [pc, #32]	; (800b304 <TimeSet+0xec>)
 800b2e4:	6013      	str	r3, [r2, #0]
}
 800b2e6:	bf00      	nop
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	0001869f 	.word	0x0001869f
 800b2f4:	10624dd3 	.word	0x10624dd3
 800b2f8:	66666667 	.word	0x66666667
 800b2fc:	51eb851f 	.word	0x51eb851f
 800b300:	20006d84 	.word	0x20006d84
 800b304:	20000044 	.word	0x20000044

0800b308 <TmcRx>:
		0,					//Result
		0					//ReceiveAcknowledge
};


void TmcRx(void){
 800b308:	b480      	push	{r7}
 800b30a:	af00      	add	r7, sp, #0

}
 800b30c:	bf00      	nop
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <TmcTx>:

void TmcTx(void){
 800b316:	b480      	push	{r7}
 800b318:	af00      	add	r7, sp, #0

}
 800b31a:	bf00      	nop
 800b31c:	46bd      	mov	sp, r7
 800b31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b322:	4770      	bx	lr

0800b324 <HAL_UART_RxCpltCallback>:
uint8_t _TxBuf3[TXBUFSIZE3];
uint8_t _RxBuf3[RXBUFSIZE3];
uint8_t _TxBuf2[TXBUFSIZE2];
uint8_t _RxBuf2[RXBUFSIZE2];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a0c      	ldr	r2, [pc, #48]	; (800b364 <HAL_UART_RxCpltCallback+0x40>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d102      	bne.n	800b33c <HAL_UART_RxCpltCallback+0x18>
		Uc45Rx();
 800b336:	f000 f8c9 	bl	800b4cc <Uc45Rx>
		PcRx();
	}
	else if(huart->Instance==USART2){
		TmcRx();
	}
}
 800b33a:	e00e      	b.n	800b35a <HAL_UART_RxCpltCallback+0x36>
	else if(huart->Instance==USART3){
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a09      	ldr	r2, [pc, #36]	; (800b368 <HAL_UART_RxCpltCallback+0x44>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d102      	bne.n	800b34c <HAL_UART_RxCpltCallback+0x28>
		PcRx();
 800b346:	f7f9 fb4f 	bl	80049e8 <PcRx>
}
 800b34a:	e006      	b.n	800b35a <HAL_UART_RxCpltCallback+0x36>
	else if(huart->Instance==USART2){
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	4a06      	ldr	r2, [pc, #24]	; (800b36c <HAL_UART_RxCpltCallback+0x48>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d101      	bne.n	800b35a <HAL_UART_RxCpltCallback+0x36>
		TmcRx();
 800b356:	f7ff ffd7 	bl	800b308 <TmcRx>
}
 800b35a:	bf00      	nop
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	40011000 	.word	0x40011000
 800b368:	40004800 	.word	0x40004800
 800b36c:	40004400 	.word	0x40004400

0800b370 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	4a0c      	ldr	r2, [pc, #48]	; (800b3b0 <HAL_UART_TxCpltCallback+0x40>)
 800b37e:	4293      	cmp	r3, r2
 800b380:	d102      	bne.n	800b388 <HAL_UART_TxCpltCallback+0x18>
		Uc45Tx();
 800b382:	f000 f9ad 	bl	800b6e0 <Uc45Tx>
		PcTx();
	}
	else if(huart->Instance==USART2){
		TmcTx();
	}
}
 800b386:	e00e      	b.n	800b3a6 <HAL_UART_TxCpltCallback+0x36>
	else if(huart->Instance==USART3){
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a09      	ldr	r2, [pc, #36]	; (800b3b4 <HAL_UART_TxCpltCallback+0x44>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d102      	bne.n	800b398 <HAL_UART_TxCpltCallback+0x28>
		PcTx();
 800b392:	f7f9 ff55 	bl	8005240 <PcTx>
}
 800b396:	e006      	b.n	800b3a6 <HAL_UART_TxCpltCallback+0x36>
	else if(huart->Instance==USART2){
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a06      	ldr	r2, [pc, #24]	; (800b3b8 <HAL_UART_TxCpltCallback+0x48>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d101      	bne.n	800b3a6 <HAL_UART_TxCpltCallback+0x36>
		TmcTx();
 800b3a2:	f7ff ffb8 	bl	800b316 <TmcTx>
}
 800b3a6:	bf00      	nop
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	40011000 	.word	0x40011000
 800b3b4:	40004800 	.word	0x40004800
 800b3b8:	40004400 	.word	0x40004400

0800b3bc <UartInit>:

void UartInit(void){
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	af00      	add	r7, sp, #0
	  _uartcom2.TxBuf=_TxBuf2;		//TxBuffer
 800b3c0:	4b2c      	ldr	r3, [pc, #176]	; (800b474 <UartInit+0xb8>)
 800b3c2:	4a2d      	ldr	r2, [pc, #180]	; (800b478 <UartInit+0xbc>)
 800b3c4:	601a      	str	r2, [r3, #0]
	  _uartcom2.TxSize=TXBUFSIZE2;			//TxBufferSize
 800b3c6:	4b2b      	ldr	r3, [pc, #172]	; (800b474 <UartInit+0xb8>)
 800b3c8:	22ff      	movs	r2, #255	; 0xff
 800b3ca:	605a      	str	r2, [r3, #4]
	  _uartcom2.TxCounter=0;					//TxCounter
 800b3cc:	4b29      	ldr	r3, [pc, #164]	; (800b474 <UartInit+0xb8>)
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	609a      	str	r2, [r3, #8]
	  _uartcom2.RxBuf=_RxBuf2;			//RxBuffer
 800b3d2:	4b28      	ldr	r3, [pc, #160]	; (800b474 <UartInit+0xb8>)
 800b3d4:	4a29      	ldr	r2, [pc, #164]	; (800b47c <UartInit+0xc0>)
 800b3d6:	60da      	str	r2, [r3, #12]
	  _uartcom2.RxSize=RXBUFSIZE2;			//RxBufferSize
 800b3d8:	4b26      	ldr	r3, [pc, #152]	; (800b474 <UartInit+0xb8>)
 800b3da:	22ff      	movs	r2, #255	; 0xff
 800b3dc:	611a      	str	r2, [r3, #16]
	  _uartcom2.RxCounter=0;					//RxCounter
 800b3de:	4b25      	ldr	r3, [pc, #148]	; (800b474 <UartInit+0xb8>)
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	615a      	str	r2, [r3, #20]
	  _uartcom2.ComId=0;					//ComId
 800b3e4:	4b23      	ldr	r3, [pc, #140]	; (800b474 <UartInit+0xb8>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	761a      	strb	r2, [r3, #24]
	  _uartcom2.UResult=0;					//Result
 800b3ea:	4b22      	ldr	r3, [pc, #136]	; (800b474 <UartInit+0xb8>)
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	765a      	strb	r2, [r3, #25]
	  _uartcom2.ResAck=0;					//ReceiveAcknowledge
 800b3f0:	4b20      	ldr	r3, [pc, #128]	; (800b474 <UartInit+0xb8>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	769a      	strb	r2, [r3, #26]

	  _uartcom1.TxBuf=_TxBuf1;		//TxBuffer
 800b3f6:	4b22      	ldr	r3, [pc, #136]	; (800b480 <UartInit+0xc4>)
 800b3f8:	4a22      	ldr	r2, [pc, #136]	; (800b484 <UartInit+0xc8>)
 800b3fa:	601a      	str	r2, [r3, #0]
	  _uartcom1.TxSize=TXBUFSIZE1;			//TxBufferSize
 800b3fc:	4b20      	ldr	r3, [pc, #128]	; (800b480 <UartInit+0xc4>)
 800b3fe:	2214      	movs	r2, #20
 800b400:	605a      	str	r2, [r3, #4]
	  _uartcom1.TxCounter=0;					//TxCounter
 800b402:	4b1f      	ldr	r3, [pc, #124]	; (800b480 <UartInit+0xc4>)
 800b404:	2200      	movs	r2, #0
 800b406:	609a      	str	r2, [r3, #8]
	  _uartcom1.RxBuf=_RxBuf1;			//RxBuffer
 800b408:	4b1d      	ldr	r3, [pc, #116]	; (800b480 <UartInit+0xc4>)
 800b40a:	4a1f      	ldr	r2, [pc, #124]	; (800b488 <UartInit+0xcc>)
 800b40c:	60da      	str	r2, [r3, #12]
	  _uartcom1.RxSize=RXBUFSIZE1;			//RxBufferSize
 800b40e:	4b1c      	ldr	r3, [pc, #112]	; (800b480 <UartInit+0xc4>)
 800b410:	2201      	movs	r2, #1
 800b412:	611a      	str	r2, [r3, #16]
	  _uartcom1.RxCounter=0;					//RxCounter
 800b414:	4b1a      	ldr	r3, [pc, #104]	; (800b480 <UartInit+0xc4>)
 800b416:	2200      	movs	r2, #0
 800b418:	615a      	str	r2, [r3, #20]
	  _uartcom1.ComId=0;					//ComId
 800b41a:	4b19      	ldr	r3, [pc, #100]	; (800b480 <UartInit+0xc4>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	761a      	strb	r2, [r3, #24]
	  _uartcom1.UResult=0;					//Result
 800b420:	4b17      	ldr	r3, [pc, #92]	; (800b480 <UartInit+0xc4>)
 800b422:	2200      	movs	r2, #0
 800b424:	765a      	strb	r2, [r3, #25]
	  _uartcom1.ResAck=0;					//ReceiveAcknowledge
 800b426:	4b16      	ldr	r3, [pc, #88]	; (800b480 <UartInit+0xc4>)
 800b428:	2200      	movs	r2, #0
 800b42a:	769a      	strb	r2, [r3, #26]

	  _uartcom3.TxBuf=_TxBuf3;		//TxBuffer
 800b42c:	4b17      	ldr	r3, [pc, #92]	; (800b48c <UartInit+0xd0>)
 800b42e:	4a18      	ldr	r2, [pc, #96]	; (800b490 <UartInit+0xd4>)
 800b430:	601a      	str	r2, [r3, #0]
	  _uartcom3.TxSize=TXBUFSIZE3;			//TxBufferSize
 800b432:	4b16      	ldr	r3, [pc, #88]	; (800b48c <UartInit+0xd0>)
 800b434:	22ff      	movs	r2, #255	; 0xff
 800b436:	605a      	str	r2, [r3, #4]
	  _uartcom3.TxCounter=0;					//TxCounter
 800b438:	4b14      	ldr	r3, [pc, #80]	; (800b48c <UartInit+0xd0>)
 800b43a:	2200      	movs	r2, #0
 800b43c:	609a      	str	r2, [r3, #8]
	  _uartcom3.RxBuf=_RxBuf3;			//RxBuffer
 800b43e:	4b13      	ldr	r3, [pc, #76]	; (800b48c <UartInit+0xd0>)
 800b440:	4a14      	ldr	r2, [pc, #80]	; (800b494 <UartInit+0xd8>)
 800b442:	60da      	str	r2, [r3, #12]
	  _uartcom3.RxSize=RXBUFSIZE3;			//RxBufferSize
 800b444:	4b11      	ldr	r3, [pc, #68]	; (800b48c <UartInit+0xd0>)
 800b446:	22ff      	movs	r2, #255	; 0xff
 800b448:	611a      	str	r2, [r3, #16]
	  _uartcom3.RxCounter=0;					//RxCounter
 800b44a:	4b10      	ldr	r3, [pc, #64]	; (800b48c <UartInit+0xd0>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	615a      	str	r2, [r3, #20]
	  _uartcom3.ComId=0;					//ComId
 800b450:	4b0e      	ldr	r3, [pc, #56]	; (800b48c <UartInit+0xd0>)
 800b452:	2200      	movs	r2, #0
 800b454:	761a      	strb	r2, [r3, #24]
	  _uartcom3.UResult=0;					//Result
 800b456:	4b0d      	ldr	r3, [pc, #52]	; (800b48c <UartInit+0xd0>)
 800b458:	2200      	movs	r2, #0
 800b45a:	765a      	strb	r2, [r3, #25]
	  _uartcom3.ResAck=0;					//ReceiveAcknowledge
 800b45c:	4b0b      	ldr	r3, [pc, #44]	; (800b48c <UartInit+0xd0>)
 800b45e:	2200      	movs	r2, #0
 800b460:	769a      	strb	r2, [r3, #26]
	  HAL_UART_Receive_IT(&huart3,_uartcom3.RxBuf,1);
 800b462:	4b0a      	ldr	r3, [pc, #40]	; (800b48c <UartInit+0xd0>)
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	2201      	movs	r2, #1
 800b468:	4619      	mov	r1, r3
 800b46a:	480b      	ldr	r0, [pc, #44]	; (800b498 <UartInit+0xdc>)
 800b46c:	f004 fe0c 	bl	8010088 <HAL_UART_Receive_IT>
}
 800b470:	bf00      	nop
 800b472:	bd80      	pop	{r7, pc}
 800b474:	20006f68 	.word	0x20006f68
 800b478:	20007090 	.word	0x20007090
 800b47c:	20006f88 	.word	0x20006f88
 800b480:	2000745c 	.word	0x2000745c
 800b484:	20006f74 	.word	0x20006f74
 800b488:	20007458 	.word	0x20007458
 800b48c:	20006f30 	.word	0x20006f30
 800b490:	200072f4 	.word	0x200072f4
 800b494:	20007190 	.word	0x20007190
 800b498:	20006a64 	.word	0x20006a64

0800b49c <SizeOfArray>:

uint16_t SizeOfArray(char * array)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
	uint16_t i=0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	81fb      	strh	r3, [r7, #14]
	while(array[i] != 0)
 800b4a8:	e002      	b.n	800b4b0 <SizeOfArray+0x14>
		i++;
 800b4aa:	89fb      	ldrh	r3, [r7, #14]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	81fb      	strh	r3, [r7, #14]
	while(array[i] != 0)
 800b4b0:	89fb      	ldrh	r3, [r7, #14]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d1f6      	bne.n	800b4aa <SizeOfArray+0xe>
	return i;
 800b4bc:	89fb      	ldrh	r3, [r7, #14]
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3714      	adds	r7, #20
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c8:	4770      	bx	lr
	...

0800b4cc <Uc45Rx>:
		0,					//RxCounter
		1,					//ComId
		0,					//Result
		0					//ReceiveAcknowledge
};
void Uc45Rx(void){
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	af00      	add	r7, sp, #0
	_uartcom1->RxCounter++;
 800b4d0:	4b77      	ldr	r3, [pc, #476]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	695a      	ldr	r2, [r3, #20]
 800b4d6:	3201      	adds	r2, #1
 800b4d8:	615a      	str	r2, [r3, #20]
			if(_uartcom1->RxSize > _uartcom1->RxCounter)
 800b4da:	4b75      	ldr	r3, [pc, #468]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	691a      	ldr	r2, [r3, #16]
 800b4e0:	4b73      	ldr	r3, [pc, #460]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	695b      	ldr	r3, [r3, #20]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d90c      	bls.n	800b504 <Uc45Rx+0x38>
			{
				HAL_UART_Receive_IT(&huart1, &_uartcom1->RxBuf[_uartcom1->RxCounter], 1);
 800b4ea:	4b71      	ldr	r3, [pc, #452]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	68da      	ldr	r2, [r3, #12]
 800b4f0:	4b6f      	ldr	r3, [pc, #444]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	695b      	ldr	r3, [r3, #20]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	486d      	ldr	r0, [pc, #436]	; (800b6b4 <Uc45Rx+0x1e8>)
 800b4fe:	f004 fdc3 	bl	8010088 <HAL_UART_Receive_IT>
					}
				}
			}


}
 800b502:	e0d3      	b.n	800b6ac <Uc45Rx+0x1e0>
				_uartcom1->UResult|=Rx_Cplt;
 800b504:	4b6a      	ldr	r3, [pc, #424]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	7e5a      	ldrb	r2, [r3, #25]
 800b50a:	4b69      	ldr	r3, [pc, #420]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f042 0201 	orr.w	r2, r2, #1
 800b512:	b2d2      	uxtb	r2, r2
 800b514:	765a      	strb	r2, [r3, #25]
				_uartcom1->RxCounter = 0;
 800b516:	4b66      	ldr	r3, [pc, #408]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	2200      	movs	r2, #0
 800b51c:	615a      	str	r2, [r3, #20]
				if(_uartcom1->ComId==1&&initalize>4){
 800b51e:	4b64      	ldr	r3, [pc, #400]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	7e1b      	ldrb	r3, [r3, #24]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d13c      	bne.n	800b5a2 <Uc45Rx+0xd6>
 800b528:	4b63      	ldr	r3, [pc, #396]	; (800b6b8 <Uc45Rx+0x1ec>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	dd38      	ble.n	800b5a2 <Uc45Rx+0xd6>
					if(_uartcom1->RxBuf[0]=='X'){//UC45 normal haberleşme cevabı X olmak zorunda.
 800b530:	4b5f      	ldr	r3, [pc, #380]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	2b58      	cmp	r3, #88	; 0x58
 800b53a:	d111      	bne.n	800b560 <Uc45Rx+0x94>
						_uartcom1->ResAck=1;
 800b53c:	4b5c      	ldr	r3, [pc, #368]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2201      	movs	r2, #1
 800b542:	769a      	strb	r2, [r3, #26]
						if(tryuc==101){
 800b544:	4b5d      	ldr	r3, [pc, #372]	; (800b6bc <Uc45Rx+0x1f0>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2b65      	cmp	r3, #101	; 0x65
 800b54a:	f040 80ac 	bne.w	800b6a6 <Uc45Rx+0x1da>
							SendPc("Connected to UC45\0", 5, ID_FIND);
 800b54e:	2202      	movs	r2, #2
 800b550:	2105      	movs	r1, #5
 800b552:	485b      	ldr	r0, [pc, #364]	; (800b6c0 <Uc45Rx+0x1f4>)
 800b554:	f7f9 feb6 	bl	80052c4 <SendPc>
							tryuc=0;
 800b558:	4b58      	ldr	r3, [pc, #352]	; (800b6bc <Uc45Rx+0x1f0>)
 800b55a:	2200      	movs	r2, #0
 800b55c:	601a      	str	r2, [r3, #0]
					if(_uartcom1->RxBuf[0]=='X'){//UC45 normal haberleşme cevabı X olmak zorunda.
 800b55e:	e0a2      	b.n	800b6a6 <Uc45Rx+0x1da>
						_uartcom1->ResAck=0;
 800b560:	4b53      	ldr	r3, [pc, #332]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2200      	movs	r2, #0
 800b566:	769a      	strb	r2, [r3, #26]
						initalize=0;
 800b568:	4b53      	ldr	r3, [pc, #332]	; (800b6b8 <Uc45Rx+0x1ec>)
 800b56a:	2200      	movs	r2, #0
 800b56c:	601a      	str	r2, [r3, #0]
						if(pccom==1&&tryuc%2==0){
 800b56e:	4b55      	ldr	r3, [pc, #340]	; (800b6c4 <Uc45Rx+0x1f8>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b01      	cmp	r3, #1
 800b574:	f040 8097 	bne.w	800b6a6 <Uc45Rx+0x1da>
 800b578:	4b50      	ldr	r3, [pc, #320]	; (800b6bc <Uc45Rx+0x1f0>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 0301 	and.w	r3, r3, #1
 800b580:	2b00      	cmp	r3, #0
 800b582:	f040 8090 	bne.w	800b6a6 <Uc45Rx+0x1da>
							SendPc("Restart UC45",5,2);
 800b586:	2202      	movs	r2, #2
 800b588:	2105      	movs	r1, #5
 800b58a:	484f      	ldr	r0, [pc, #316]	; (800b6c8 <Uc45Rx+0x1fc>)
 800b58c:	f7f9 fe9a 	bl	80052c4 <SendPc>
							HAL_TIM_Base_Stop_IT(&htim11);
 800b590:	484e      	ldr	r0, [pc, #312]	; (800b6cc <Uc45Rx+0x200>)
 800b592:	f003 fce8 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
							tryuc++;
 800b596:	4b49      	ldr	r3, [pc, #292]	; (800b6bc <Uc45Rx+0x1f0>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	3301      	adds	r3, #1
 800b59c:	4a47      	ldr	r2, [pc, #284]	; (800b6bc <Uc45Rx+0x1f0>)
 800b59e:	6013      	str	r3, [r2, #0]
					if(_uartcom1->RxBuf[0]=='X'){//UC45 normal haberleşme cevabı X olmak zorunda.
 800b5a0:	e081      	b.n	800b6a6 <Uc45Rx+0x1da>
				else if(_uartcom1->ComId==1&&initalize<5){
 800b5a2:	4b43      	ldr	r3, [pc, #268]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	7e1b      	ldrb	r3, [r3, #24]
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d135      	bne.n	800b618 <Uc45Rx+0x14c>
 800b5ac:	4b42      	ldr	r3, [pc, #264]	; (800b6b8 <Uc45Rx+0x1ec>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	dc31      	bgt.n	800b618 <Uc45Rx+0x14c>
					if(_uartcom1->RxBuf[0]=='X'){//UC45 normal haberleşme cevabı X olmak zorunda.
 800b5b4:	4b3e      	ldr	r3, [pc, #248]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	2b58      	cmp	r3, #88	; 0x58
 800b5be:	d10c      	bne.n	800b5da <Uc45Rx+0x10e>
						_uartcom1->ResAck=1;
 800b5c0:	4b3b      	ldr	r3, [pc, #236]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	769a      	strb	r2, [r3, #26]
						initalize++;
 800b5c8:	4b3b      	ldr	r3, [pc, #236]	; (800b6b8 <Uc45Rx+0x1ec>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	4a3a      	ldr	r2, [pc, #232]	; (800b6b8 <Uc45Rx+0x1ec>)
 800b5d0:	6013      	str	r3, [r2, #0]
						HAL_TIM_Base_Start_IT(&htim11);
 800b5d2:	483e      	ldr	r0, [pc, #248]	; (800b6cc <Uc45Rx+0x200>)
 800b5d4:	f003 fca3 	bl	800ef1e <HAL_TIM_Base_Start_IT>
					if(_uartcom1->RxBuf[0]=='X'){//UC45 normal haberleşme cevabı X olmak zorunda.
 800b5d8:	e067      	b.n	800b6aa <Uc45Rx+0x1de>
						_uartcom1->ResAck=0;
 800b5da:	4b35      	ldr	r3, [pc, #212]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	769a      	strb	r2, [r3, #26]
						initalize=0;
 800b5e2:	4b35      	ldr	r3, [pc, #212]	; (800b6b8 <Uc45Rx+0x1ec>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	601a      	str	r2, [r3, #0]
						if(pccom==1&&tryuc%2==0)
 800b5e8:	4b36      	ldr	r3, [pc, #216]	; (800b6c4 <Uc45Rx+0x1f8>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d15c      	bne.n	800b6aa <Uc45Rx+0x1de>
 800b5f0:	4b32      	ldr	r3, [pc, #200]	; (800b6bc <Uc45Rx+0x1f0>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 0301 	and.w	r3, r3, #1
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d156      	bne.n	800b6aa <Uc45Rx+0x1de>
							SendPc("Restart UC45",5,2);
 800b5fc:	2202      	movs	r2, #2
 800b5fe:	2105      	movs	r1, #5
 800b600:	4831      	ldr	r0, [pc, #196]	; (800b6c8 <Uc45Rx+0x1fc>)
 800b602:	f7f9 fe5f 	bl	80052c4 <SendPc>
							HAL_TIM_Base_Stop_IT(&htim11);
 800b606:	4831      	ldr	r0, [pc, #196]	; (800b6cc <Uc45Rx+0x200>)
 800b608:	f003 fcad 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
							tryuc++;
 800b60c:	4b2b      	ldr	r3, [pc, #172]	; (800b6bc <Uc45Rx+0x1f0>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	3301      	adds	r3, #1
 800b612:	4a2a      	ldr	r2, [pc, #168]	; (800b6bc <Uc45Rx+0x1f0>)
 800b614:	6013      	str	r3, [r2, #0]
					if(_uartcom1->RxBuf[0]=='X'){//UC45 normal haberleşme cevabı X olmak zorunda.
 800b616:	e048      	b.n	800b6aa <Uc45Rx+0x1de>
				else if(initalize==0){
 800b618:	4b27      	ldr	r3, [pc, #156]	; (800b6b8 <Uc45Rx+0x1ec>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d145      	bne.n	800b6ac <Uc45Rx+0x1e0>
					if(_uartcom1->RxBuf[0]=='Y'){
 800b620:	4b23      	ldr	r3, [pc, #140]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	2b59      	cmp	r3, #89	; 0x59
 800b62a:	d10d      	bne.n	800b648 <Uc45Rx+0x17c>
						_uartcom1->ResAck=1;
 800b62c:	4b20      	ldr	r3, [pc, #128]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2201      	movs	r2, #1
 800b632:	769a      	strb	r2, [r3, #26]
						initalize=1;
 800b634:	4b20      	ldr	r3, [pc, #128]	; (800b6b8 <Uc45Rx+0x1ec>)
 800b636:	2201      	movs	r2, #1
 800b638:	601a      	str	r2, [r3, #0]
						uc45Sender.ComId=1;
 800b63a:	4b25      	ldr	r3, [pc, #148]	; (800b6d0 <Uc45Rx+0x204>)
 800b63c:	2201      	movs	r2, #1
 800b63e:	761a      	strb	r2, [r3, #24]
						contproc=1;//gerekmeyebilir..
 800b640:	4b24      	ldr	r3, [pc, #144]	; (800b6d4 <Uc45Rx+0x208>)
 800b642:	2201      	movs	r2, #1
 800b644:	601a      	str	r2, [r3, #0]
}
 800b646:	e031      	b.n	800b6ac <Uc45Rx+0x1e0>
						_uartcom1->ResAck=0;
 800b648:	4b19      	ldr	r3, [pc, #100]	; (800b6b0 <Uc45Rx+0x1e4>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2200      	movs	r2, #0
 800b64e:	769a      	strb	r2, [r3, #26]
						bossayac++;
 800b650:	4b21      	ldr	r3, [pc, #132]	; (800b6d8 <Uc45Rx+0x20c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3301      	adds	r3, #1
 800b656:	4a20      	ldr	r2, [pc, #128]	; (800b6d8 <Uc45Rx+0x20c>)
 800b658:	6013      	str	r3, [r2, #0]
						if(pccom==1&&bossayac%5==0&&tryuc%2==0)
 800b65a:	4b1a      	ldr	r3, [pc, #104]	; (800b6c4 <Uc45Rx+0x1f8>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d124      	bne.n	800b6ac <Uc45Rx+0x1e0>
 800b662:	4b1d      	ldr	r3, [pc, #116]	; (800b6d8 <Uc45Rx+0x20c>)
 800b664:	6819      	ldr	r1, [r3, #0]
 800b666:	4b1d      	ldr	r3, [pc, #116]	; (800b6dc <Uc45Rx+0x210>)
 800b668:	fb83 2301 	smull	r2, r3, r3, r1
 800b66c:	105a      	asrs	r2, r3, #1
 800b66e:	17cb      	asrs	r3, r1, #31
 800b670:	1ad2      	subs	r2, r2, r3
 800b672:	4613      	mov	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	4413      	add	r3, r2
 800b678:	1aca      	subs	r2, r1, r3
 800b67a:	2a00      	cmp	r2, #0
 800b67c:	d116      	bne.n	800b6ac <Uc45Rx+0x1e0>
 800b67e:	4b0f      	ldr	r3, [pc, #60]	; (800b6bc <Uc45Rx+0x1f0>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b00      	cmp	r3, #0
 800b688:	d110      	bne.n	800b6ac <Uc45Rx+0x1e0>
							SendPc("Restart UC45", 5, ID_FIND);
 800b68a:	2202      	movs	r2, #2
 800b68c:	2105      	movs	r1, #5
 800b68e:	480e      	ldr	r0, [pc, #56]	; (800b6c8 <Uc45Rx+0x1fc>)
 800b690:	f7f9 fe18 	bl	80052c4 <SendPc>
							tryuc++;
 800b694:	4b09      	ldr	r3, [pc, #36]	; (800b6bc <Uc45Rx+0x1f0>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	3301      	adds	r3, #1
 800b69a:	4a08      	ldr	r2, [pc, #32]	; (800b6bc <Uc45Rx+0x1f0>)
 800b69c:	6013      	str	r3, [r2, #0]
							HAL_TIM_Base_Stop_IT(&htim11);
 800b69e:	480b      	ldr	r0, [pc, #44]	; (800b6cc <Uc45Rx+0x200>)
 800b6a0:	f003 fc61 	bl	800ef66 <HAL_TIM_Base_Stop_IT>
}
 800b6a4:	e002      	b.n	800b6ac <Uc45Rx+0x1e0>
					if(_uartcom1->RxBuf[0]=='X'){//UC45 normal haberleşme cevabı X olmak zorunda.
 800b6a6:	bf00      	nop
 800b6a8:	e000      	b.n	800b6ac <Uc45Rx+0x1e0>
					if(_uartcom1->RxBuf[0]=='X'){//UC45 normal haberleşme cevabı X olmak zorunda.
 800b6aa:	bf00      	nop
}
 800b6ac:	bf00      	nop
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	2000745c 	.word	0x2000745c
 800b6b4:	20006c38 	.word	0x20006c38
 800b6b8:	200002c0 	.word	0x200002c0
 800b6bc:	20000038 	.word	0x20000038
 800b6c0:	080121c8 	.word	0x080121c8
 800b6c4:	200018b4 	.word	0x200018b4
 800b6c8:	080121dc 	.word	0x080121dc
 800b6cc:	20006c78 	.word	0x20006c78
 800b6d0:	20000084 	.word	0x20000084
 800b6d4:	200002c4 	.word	0x200002c4
 800b6d8:	2000003c 	.word	0x2000003c
 800b6dc:	66666667 	.word	0x66666667

0800b6e0 <Uc45Tx>:

void Uc45Tx(void){
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	af00      	add	r7, sp, #0
	_uartcom1->TxCounter++;
 800b6e4:	4b18      	ldr	r3, [pc, #96]	; (800b748 <Uc45Tx+0x68>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	689a      	ldr	r2, [r3, #8]
 800b6ea:	3201      	adds	r2, #1
 800b6ec:	609a      	str	r2, [r3, #8]
	if(_uartcom1->TxSize > _uartcom1->TxCounter){
 800b6ee:	4b16      	ldr	r3, [pc, #88]	; (800b748 <Uc45Tx+0x68>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	685a      	ldr	r2, [r3, #4]
 800b6f4:	4b14      	ldr	r3, [pc, #80]	; (800b748 <Uc45Tx+0x68>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d90c      	bls.n	800b718 <Uc45Tx+0x38>
		HAL_UART_Transmit_IT(&huart1, &_uartcom1->TxBuf[_uartcom1->TxCounter], 1);
 800b6fe:	4b12      	ldr	r3, [pc, #72]	; (800b748 <Uc45Tx+0x68>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	4b10      	ldr	r3, [pc, #64]	; (800b748 <Uc45Tx+0x68>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689b      	ldr	r3, [r3, #8]
 800b70a:	4413      	add	r3, r2
 800b70c:	2201      	movs	r2, #1
 800b70e:	4619      	mov	r1, r3
 800b710:	480e      	ldr	r0, [pc, #56]	; (800b74c <Uc45Tx+0x6c>)
 800b712:	f004 fc74 	bl	800fffe <HAL_UART_Transmit_IT>
		_uartcom1->UResult|=Tx_Cplt;
		Tx_Timer1 = 0;
		_uartcom1->TxCounter = 0;
		TimeSet(&htim12, 10000);
	}
}
 800b716:	e014      	b.n	800b742 <Uc45Tx+0x62>
		_uartcom1->UResult|=Tx_Cplt;
 800b718:	4b0b      	ldr	r3, [pc, #44]	; (800b748 <Uc45Tx+0x68>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	7e5a      	ldrb	r2, [r3, #25]
 800b71e:	4b0a      	ldr	r3, [pc, #40]	; (800b748 <Uc45Tx+0x68>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f042 0202 	orr.w	r2, r2, #2
 800b726:	b2d2      	uxtb	r2, r2
 800b728:	765a      	strb	r2, [r3, #25]
		Tx_Timer1 = 0;
 800b72a:	4b09      	ldr	r3, [pc, #36]	; (800b750 <Uc45Tx+0x70>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	601a      	str	r2, [r3, #0]
		_uartcom1->TxCounter = 0;
 800b730:	4b05      	ldr	r3, [pc, #20]	; (800b748 <Uc45Tx+0x68>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2200      	movs	r2, #0
 800b736:	609a      	str	r2, [r3, #8]
		TimeSet(&htim12, 10000);
 800b738:	f242 7110 	movw	r1, #10000	; 0x2710
 800b73c:	4805      	ldr	r0, [pc, #20]	; (800b754 <Uc45Tx+0x74>)
 800b73e:	f7ff fd6b 	bl	800b218 <TimeSet>
}
 800b742:	bf00      	nop
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	2000745c 	.word	0x2000745c
 800b74c:	20006c38 	.word	0x20006c38
 800b750:	200018a0 	.word	0x200018a0
 800b754:	20006ec8 	.word	0x20006ec8

0800b758 <DummyRead1>:
void DummyRead1(){
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
	unsigned char dummyRead;
	dummyRead= USART1->DR;
 800b75e:	4b04      	ldr	r3, [pc, #16]	; (800b770 <DummyRead1+0x18>)
 800b760:	685b      	ldr	r3, [r3, #4]
 800b762:	71fb      	strb	r3, [r7, #7]
	UNUSED(dummyRead);
}
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr
 800b770:	40011000 	.word	0x40011000

0800b774 <SendAct>:
void SendAct(char *pre,char *mess){
 800b774:	b590      	push	{r4, r7, lr}
 800b776:	b083      	sub	sp, #12
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
	if(pre[0]==0){
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d112      	bne.n	800b7ac <SendAct+0x38>
		uc45Sender.ComId=0;
 800b786:	4b32      	ldr	r3, [pc, #200]	; (800b850 <SendAct+0xdc>)
 800b788:	2200      	movs	r2, #0
 800b78a:	761a      	strb	r2, [r3, #24]
		memcpy(uc45Sender.TxBuf,"E\0",1);
 800b78c:	4b30      	ldr	r3, [pc, #192]	; (800b850 <SendAct+0xdc>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2201      	movs	r2, #1
 800b792:	4930      	ldr	r1, [pc, #192]	; (800b854 <SendAct+0xe0>)
 800b794:	4618      	mov	r0, r3
 800b796:	f006 f9c5 	bl	8011b24 <memcpy>
		uc45Sender.TxBuf[1]=0;
 800b79a:	4b2d      	ldr	r3, [pc, #180]	; (800b850 <SendAct+0xdc>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	701a      	strb	r2, [r3, #0]
		uc45Sender.TxSize=1;
 800b7a4:	4b2a      	ldr	r3, [pc, #168]	; (800b850 <SendAct+0xdc>)
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	605a      	str	r2, [r3, #4]
 800b7aa:	e02f      	b.n	800b80c <SendAct+0x98>
	}
	else{
		uc45Sender.ComId=1;
 800b7ac:	4b28      	ldr	r3, [pc, #160]	; (800b850 <SendAct+0xdc>)
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	761a      	strb	r2, [r3, #24]
		strcat(pre,mess);
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f006 f9c8 	bl	8011b4a <strcat>
		strcat(pre,"E\0");
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f7f4 fd04 	bl	80001c8 <strlen>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	461a      	mov	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4413      	add	r3, r2
 800b7c8:	4922      	ldr	r1, [pc, #136]	; (800b854 <SendAct+0xe0>)
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	881b      	ldrh	r3, [r3, #0]
 800b7d0:	8013      	strh	r3, [r2, #0]
		memcpy(uc45Sender.TxBuf,pre,SizeOfArray(pre)+1);
 800b7d2:	4b1f      	ldr	r3, [pc, #124]	; (800b850 <SendAct+0xdc>)
 800b7d4:	681c      	ldr	r4, [r3, #0]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f7ff fe60 	bl	800b49c <SizeOfArray>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	3301      	adds	r3, #1
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	6879      	ldr	r1, [r7, #4]
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f006 f99d 	bl	8011b24 <memcpy>
		uc45Sender.TxBuf[SizeOfArray(pre)+1]=0;
 800b7ea:	4b19      	ldr	r3, [pc, #100]	; (800b850 <SendAct+0xdc>)
 800b7ec:	681c      	ldr	r4, [r3, #0]
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f7ff fe54 	bl	800b49c <SizeOfArray>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	4423      	add	r3, r4
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	701a      	strb	r2, [r3, #0]
		uc45Sender.TxSize=SizeOfArray(pre);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f7ff fe4c 	bl	800b49c <SizeOfArray>
 800b804:	4603      	mov	r3, r0
 800b806:	461a      	mov	r2, r3
 800b808:	4b11      	ldr	r3, [pc, #68]	; (800b850 <SendAct+0xdc>)
 800b80a:	605a      	str	r2, [r3, #4]
	}
	uc45Sender.RxSize=1;
 800b80c:	4b10      	ldr	r3, [pc, #64]	; (800b850 <SendAct+0xdc>)
 800b80e:	2201      	movs	r2, #1
 800b810:	611a      	str	r2, [r3, #16]
	uc45Sender.ResAck=0;
 800b812:	4b0f      	ldr	r3, [pc, #60]	; (800b850 <SendAct+0xdc>)
 800b814:	2200      	movs	r2, #0
 800b816:	769a      	strb	r2, [r3, #26]
	uc45Sender.UResult=0;
 800b818:	4b0d      	ldr	r3, [pc, #52]	; (800b850 <SendAct+0xdc>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	765a      	strb	r2, [r3, #25]
	_uartcom1=&uc45Sender;
 800b81e:	4b0e      	ldr	r3, [pc, #56]	; (800b858 <SendAct+0xe4>)
 800b820:	4a0b      	ldr	r2, [pc, #44]	; (800b850 <SendAct+0xdc>)
 800b822:	601a      	str	r2, [r3, #0]
	DummyRead1();
 800b824:	f7ff ff98 	bl	800b758 <DummyRead1>
	HAL_UART_Transmit_IT(&huart1, _uartcom1->TxBuf,1);
 800b828:	4b0b      	ldr	r3, [pc, #44]	; (800b858 <SendAct+0xe4>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	2201      	movs	r2, #1
 800b830:	4619      	mov	r1, r3
 800b832:	480a      	ldr	r0, [pc, #40]	; (800b85c <SendAct+0xe8>)
 800b834:	f004 fbe3 	bl	800fffe <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, _uartcom1->RxBuf, 1);
 800b838:	4b07      	ldr	r3, [pc, #28]	; (800b858 <SendAct+0xe4>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	68db      	ldr	r3, [r3, #12]
 800b83e:	2201      	movs	r2, #1
 800b840:	4619      	mov	r1, r3
 800b842:	4806      	ldr	r0, [pc, #24]	; (800b85c <SendAct+0xe8>)
 800b844:	f004 fc20 	bl	8010088 <HAL_UART_Receive_IT>
}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd90      	pop	{r4, r7, pc}
 800b850:	20000084 	.word	0x20000084
 800b854:	080121ec 	.word	0x080121ec
 800b858:	2000745c 	.word	0x2000745c
 800b85c:	20006c38 	.word	0x20006c38

0800b860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b860:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b898 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b864:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b866:	e003      	b.n	800b870 <LoopCopyDataInit>

0800b868 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b868:	4b0c      	ldr	r3, [pc, #48]	; (800b89c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b86a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b86c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b86e:	3104      	adds	r1, #4

0800b870 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b870:	480b      	ldr	r0, [pc, #44]	; (800b8a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b872:	4b0c      	ldr	r3, [pc, #48]	; (800b8a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b874:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b876:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b878:	d3f6      	bcc.n	800b868 <CopyDataInit>
  ldr  r2, =_sbss
 800b87a:	4a0b      	ldr	r2, [pc, #44]	; (800b8a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b87c:	e002      	b.n	800b884 <LoopFillZerobss>

0800b87e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b87e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b880:	f842 3b04 	str.w	r3, [r2], #4

0800b884 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b884:	4b09      	ldr	r3, [pc, #36]	; (800b8ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b886:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b888:	d3f9      	bcc.n	800b87e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b88a:	f7fc f91d 	bl	8007ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b88e:	f006 f90b 	bl	8011aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b892:	f7f8 f9cd 	bl	8003c30 <main>
  bx  lr    
 800b896:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b898:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b89c:	08012354 	.word	0x08012354
  ldr  r0, =_sdata
 800b8a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b8a4:	20000278 	.word	0x20000278
  ldr  r2, =_sbss
 800b8a8:	20000278 	.word	0x20000278
  ldr  r3, = _ebss
 800b8ac:	200078cc 	.word	0x200078cc

0800b8b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b8b0:	e7fe      	b.n	800b8b0 <ADC_IRQHandler>
	...

0800b8b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b8b8:	4b0e      	ldr	r3, [pc, #56]	; (800b8f4 <HAL_Init+0x40>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	4a0d      	ldr	r2, [pc, #52]	; (800b8f4 <HAL_Init+0x40>)
 800b8be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800b8c4:	4b0b      	ldr	r3, [pc, #44]	; (800b8f4 <HAL_Init+0x40>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a0a      	ldr	r2, [pc, #40]	; (800b8f4 <HAL_Init+0x40>)
 800b8ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b8ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800b8d0:	4b08      	ldr	r3, [pc, #32]	; (800b8f4 <HAL_Init+0x40>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a07      	ldr	r2, [pc, #28]	; (800b8f4 <HAL_Init+0x40>)
 800b8d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b8dc:	2003      	movs	r0, #3
 800b8de:	f000 fd37 	bl	800c350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b8e2:	2000      	movs	r0, #0
 800b8e4:	f000 f808 	bl	800b8f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b8e8:	f7fb fb46 	bl	8006f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b8ec:	2300      	movs	r3, #0
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	40023c00 	.word	0x40023c00

0800b8f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b900:	4b12      	ldr	r3, [pc, #72]	; (800b94c <HAL_InitTick+0x54>)
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	4b12      	ldr	r3, [pc, #72]	; (800b950 <HAL_InitTick+0x58>)
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	4619      	mov	r1, r3
 800b90a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b90e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b912:	fbb2 f3f3 	udiv	r3, r2, r3
 800b916:	4618      	mov	r0, r3
 800b918:	f000 fd4f 	bl	800c3ba <HAL_SYSTICK_Config>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d001      	beq.n	800b926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e00e      	b.n	800b944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b0f      	cmp	r3, #15
 800b92a:	d80a      	bhi.n	800b942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b92c:	2200      	movs	r2, #0
 800b92e:	6879      	ldr	r1, [r7, #4]
 800b930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b934:	f000 fd17 	bl	800c366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b938:	4a06      	ldr	r2, [pc, #24]	; (800b954 <HAL_InitTick+0x5c>)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	e000      	b.n	800b944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
}
 800b944:	4618      	mov	r0, r3
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	20000074 	.word	0x20000074
 800b950:	200000a4 	.word	0x200000a4
 800b954:	200000a0 	.word	0x200000a0

0800b958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b958:	b480      	push	{r7}
 800b95a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b95c:	4b06      	ldr	r3, [pc, #24]	; (800b978 <HAL_IncTick+0x20>)
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	461a      	mov	r2, r3
 800b962:	4b06      	ldr	r3, [pc, #24]	; (800b97c <HAL_IncTick+0x24>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4413      	add	r3, r2
 800b968:	4a04      	ldr	r2, [pc, #16]	; (800b97c <HAL_IncTick+0x24>)
 800b96a:	6013      	str	r3, [r2, #0]
}
 800b96c:	bf00      	nop
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	200000a4 	.word	0x200000a4
 800b97c:	20007460 	.word	0x20007460

0800b980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b980:	b480      	push	{r7}
 800b982:	af00      	add	r7, sp, #0
  return uwTick;
 800b984:	4b03      	ldr	r3, [pc, #12]	; (800b994 <HAL_GetTick+0x14>)
 800b986:	681b      	ldr	r3, [r3, #0]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr
 800b992:	bf00      	nop
 800b994:	20007460 	.word	0x20007460

0800b998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b9a0:	f7ff ffee 	bl	800b980 <HAL_GetTick>
 800b9a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9b0:	d005      	beq.n	800b9be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b9b2:	4b09      	ldr	r3, [pc, #36]	; (800b9d8 <HAL_Delay+0x40>)
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b9be:	bf00      	nop
 800b9c0:	f7ff ffde 	bl	800b980 <HAL_GetTick>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d8f7      	bhi.n	800b9c0 <HAL_Delay+0x28>
  {
  }
}
 800b9d0:	bf00      	nop
 800b9d2:	3710      	adds	r7, #16
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}
 800b9d8:	200000a4 	.word	0x200000a4

0800b9dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e033      	b.n	800ba5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d109      	bne.n	800ba0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f7fb fae4 	bl	8006fc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba12:	f003 0310 	and.w	r3, r3, #16
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d118      	bne.n	800ba4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ba22:	f023 0302 	bic.w	r3, r3, #2
 800ba26:	f043 0202 	orr.w	r2, r3, #2
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f000 fa40 	bl	800beb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2200      	movs	r2, #0
 800ba38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3e:	f023 0303 	bic.w	r3, r3, #3
 800ba42:	f043 0201 	orr.w	r2, r3, #1
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	641a      	str	r2, [r3, #64]	; 0x40
 800ba4a:	e001      	b.n	800ba50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800ba58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3710      	adds	r7, #16
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
	...

0800ba64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	60f8      	str	r0, [r7, #12]
 800ba6c:	60b9      	str	r1, [r7, #8]
 800ba6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800ba70:	2300      	movs	r3, #0
 800ba72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d101      	bne.n	800ba82 <HAL_ADC_Start_DMA+0x1e>
 800ba7e:	2302      	movs	r3, #2
 800ba80:	e0cc      	b.n	800bc1c <HAL_ADC_Start_DMA+0x1b8>
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2201      	movs	r2, #1
 800ba86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	f003 0301 	and.w	r3, r3, #1
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d018      	beq.n	800baca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	689a      	ldr	r2, [r3, #8]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f042 0201 	orr.w	r2, r2, #1
 800baa6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800baa8:	4b5e      	ldr	r3, [pc, #376]	; (800bc24 <HAL_ADC_Start_DMA+0x1c0>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a5e      	ldr	r2, [pc, #376]	; (800bc28 <HAL_ADC_Start_DMA+0x1c4>)
 800baae:	fba2 2303 	umull	r2, r3, r2, r3
 800bab2:	0c9a      	lsrs	r2, r3, #18
 800bab4:	4613      	mov	r3, r2
 800bab6:	005b      	lsls	r3, r3, #1
 800bab8:	4413      	add	r3, r2
 800baba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800babc:	e002      	b.n	800bac4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	3b01      	subs	r3, #1
 800bac2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1f9      	bne.n	800babe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	689b      	ldr	r3, [r3, #8]
 800bad0:	f003 0301 	and.w	r3, r3, #1
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	f040 80a0 	bne.w	800bc1a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bade:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800bae2:	f023 0301 	bic.w	r3, r3, #1
 800bae6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d007      	beq.n	800bb0c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bb04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb18:	d106      	bne.n	800bb28 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1e:	f023 0206 	bic.w	r2, r3, #6
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	645a      	str	r2, [r3, #68]	; 0x44
 800bb26:	e002      	b.n	800bb2e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bb36:	4b3d      	ldr	r3, [pc, #244]	; (800bc2c <HAL_ADC_Start_DMA+0x1c8>)
 800bb38:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3e:	4a3c      	ldr	r2, [pc, #240]	; (800bc30 <HAL_ADC_Start_DMA+0x1cc>)
 800bb40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb46:	4a3b      	ldr	r2, [pc, #236]	; (800bc34 <HAL_ADC_Start_DMA+0x1d0>)
 800bb48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb4e:	4a3a      	ldr	r2, [pc, #232]	; (800bc38 <HAL_ADC_Start_DMA+0x1d4>)
 800bb50:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800bb5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	685a      	ldr	r2, [r3, #4]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800bb6a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	689a      	ldr	r2, [r3, #8]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb7a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	334c      	adds	r3, #76	; 0x4c
 800bb86:	4619      	mov	r1, r3
 800bb88:	68ba      	ldr	r2, [r7, #8]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f000 fcd0 	bl	800c530 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	685b      	ldr	r3, [r3, #4]
 800bb94:	f003 031f 	and.w	r3, r3, #31
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d12a      	bne.n	800bbf2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a26      	ldr	r2, [pc, #152]	; (800bc3c <HAL_ADC_Start_DMA+0x1d8>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d015      	beq.n	800bbd2 <HAL_ADC_Start_DMA+0x16e>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	4a25      	ldr	r2, [pc, #148]	; (800bc40 <HAL_ADC_Start_DMA+0x1dc>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d105      	bne.n	800bbbc <HAL_ADC_Start_DMA+0x158>
 800bbb0:	4b1e      	ldr	r3, [pc, #120]	; (800bc2c <HAL_ADC_Start_DMA+0x1c8>)
 800bbb2:	685b      	ldr	r3, [r3, #4]
 800bbb4:	f003 031f 	and.w	r3, r3, #31
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00a      	beq.n	800bbd2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a20      	ldr	r2, [pc, #128]	; (800bc44 <HAL_ADC_Start_DMA+0x1e0>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d129      	bne.n	800bc1a <HAL_ADC_Start_DMA+0x1b6>
 800bbc6:	4b19      	ldr	r3, [pc, #100]	; (800bc2c <HAL_ADC_Start_DMA+0x1c8>)
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	f003 031f 	and.w	r3, r3, #31
 800bbce:	2b0f      	cmp	r3, #15
 800bbd0:	d823      	bhi.n	800bc1a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d11c      	bne.n	800bc1a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	689a      	ldr	r2, [r3, #8]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bbee:	609a      	str	r2, [r3, #8]
 800bbf0:	e013      	b.n	800bc1a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a11      	ldr	r2, [pc, #68]	; (800bc3c <HAL_ADC_Start_DMA+0x1d8>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d10e      	bne.n	800bc1a <HAL_ADC_Start_DMA+0x1b6>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	689b      	ldr	r3, [r3, #8]
 800bc02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d107      	bne.n	800bc1a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	689a      	ldr	r2, [r3, #8]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800bc18:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3718      	adds	r7, #24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	20000074 	.word	0x20000074
 800bc28:	431bde83 	.word	0x431bde83
 800bc2c:	40012300 	.word	0x40012300
 800bc30:	0800c0ad 	.word	0x0800c0ad
 800bc34:	0800c167 	.word	0x0800c167
 800bc38:	0800c183 	.word	0x0800c183
 800bc3c:	40012000 	.word	0x40012000
 800bc40:	40012100 	.word	0x40012100
 800bc44:	40012200 	.word	0x40012200

0800bc48 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800bc50:	bf00      	nop
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc84:	2b01      	cmp	r3, #1
 800bc86:	d101      	bne.n	800bc8c <HAL_ADC_ConfigChannel+0x1c>
 800bc88:	2302      	movs	r3, #2
 800bc8a:	e105      	b.n	800be98 <HAL_ADC_ConfigChannel+0x228>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b09      	cmp	r3, #9
 800bc9a:	d925      	bls.n	800bce8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	68d9      	ldr	r1, [r3, #12]
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	461a      	mov	r2, r3
 800bcaa:	4613      	mov	r3, r2
 800bcac:	005b      	lsls	r3, r3, #1
 800bcae:	4413      	add	r3, r2
 800bcb0:	3b1e      	subs	r3, #30
 800bcb2:	2207      	movs	r2, #7
 800bcb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bcb8:	43da      	mvns	r2, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	400a      	ands	r2, r1
 800bcc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68d9      	ldr	r1, [r3, #12]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	689a      	ldr	r2, [r3, #8]
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	005b      	lsls	r3, r3, #1
 800bcd8:	4403      	add	r3, r0
 800bcda:	3b1e      	subs	r3, #30
 800bcdc:	409a      	lsls	r2, r3
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	430a      	orrs	r2, r1
 800bce4:	60da      	str	r2, [r3, #12]
 800bce6:	e022      	b.n	800bd2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6919      	ldr	r1, [r3, #16]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	4413      	add	r3, r2
 800bcfc:	2207      	movs	r2, #7
 800bcfe:	fa02 f303 	lsl.w	r3, r2, r3
 800bd02:	43da      	mvns	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	400a      	ands	r2, r1
 800bd0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	6919      	ldr	r1, [r3, #16]
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	689a      	ldr	r2, [r3, #8]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	4603      	mov	r3, r0
 800bd20:	005b      	lsls	r3, r3, #1
 800bd22:	4403      	add	r3, r0
 800bd24:	409a      	lsls	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	430a      	orrs	r2, r1
 800bd2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	2b06      	cmp	r3, #6
 800bd34:	d824      	bhi.n	800bd80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	685a      	ldr	r2, [r3, #4]
 800bd40:	4613      	mov	r3, r2
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	4413      	add	r3, r2
 800bd46:	3b05      	subs	r3, #5
 800bd48:	221f      	movs	r2, #31
 800bd4a:	fa02 f303 	lsl.w	r3, r2, r3
 800bd4e:	43da      	mvns	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	400a      	ands	r2, r1
 800bd56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	4618      	mov	r0, r3
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	3b05      	subs	r3, #5
 800bd72:	fa00 f203 	lsl.w	r2, r0, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	635a      	str	r2, [r3, #52]	; 0x34
 800bd7e:	e04c      	b.n	800be1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	2b0c      	cmp	r3, #12
 800bd86:	d824      	bhi.n	800bdd2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	4613      	mov	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4413      	add	r3, r2
 800bd98:	3b23      	subs	r3, #35	; 0x23
 800bd9a:	221f      	movs	r2, #31
 800bd9c:	fa02 f303 	lsl.w	r3, r2, r3
 800bda0:	43da      	mvns	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	400a      	ands	r2, r1
 800bda8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	685a      	ldr	r2, [r3, #4]
 800bdbc:	4613      	mov	r3, r2
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	4413      	add	r3, r2
 800bdc2:	3b23      	subs	r3, #35	; 0x23
 800bdc4:	fa00 f203 	lsl.w	r2, r0, r3
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	430a      	orrs	r2, r1
 800bdce:	631a      	str	r2, [r3, #48]	; 0x30
 800bdd0:	e023      	b.n	800be1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	685a      	ldr	r2, [r3, #4]
 800bddc:	4613      	mov	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	3b41      	subs	r3, #65	; 0x41
 800bde4:	221f      	movs	r2, #31
 800bde6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdea:	43da      	mvns	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	400a      	ands	r2, r1
 800bdf2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	4618      	mov	r0, r3
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	685a      	ldr	r2, [r3, #4]
 800be06:	4613      	mov	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	3b41      	subs	r3, #65	; 0x41
 800be0e:	fa00 f203 	lsl.w	r2, r0, r3
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	430a      	orrs	r2, r1
 800be18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800be1a:	4b22      	ldr	r3, [pc, #136]	; (800bea4 <HAL_ADC_ConfigChannel+0x234>)
 800be1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a21      	ldr	r2, [pc, #132]	; (800bea8 <HAL_ADC_ConfigChannel+0x238>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d109      	bne.n	800be3c <HAL_ADC_ConfigChannel+0x1cc>
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b12      	cmp	r3, #18
 800be2e:	d105      	bne.n	800be3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4a19      	ldr	r2, [pc, #100]	; (800bea8 <HAL_ADC_ConfigChannel+0x238>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d123      	bne.n	800be8e <HAL_ADC_ConfigChannel+0x21e>
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b10      	cmp	r3, #16
 800be4c:	d003      	beq.n	800be56 <HAL_ADC_ConfigChannel+0x1e6>
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b11      	cmp	r3, #17
 800be54:	d11b      	bne.n	800be8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2b10      	cmp	r3, #16
 800be68:	d111      	bne.n	800be8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800be6a:	4b10      	ldr	r3, [pc, #64]	; (800beac <HAL_ADC_ConfigChannel+0x23c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	4a10      	ldr	r2, [pc, #64]	; (800beb0 <HAL_ADC_ConfigChannel+0x240>)
 800be70:	fba2 2303 	umull	r2, r3, r2, r3
 800be74:	0c9a      	lsrs	r2, r3, #18
 800be76:	4613      	mov	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	4413      	add	r3, r2
 800be7c:	005b      	lsls	r3, r3, #1
 800be7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800be80:	e002      	b.n	800be88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	3b01      	subs	r3, #1
 800be86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1f9      	bne.n	800be82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3714      	adds	r7, #20
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr
 800bea4:	40012300 	.word	0x40012300
 800bea8:	40012000 	.word	0x40012000
 800beac:	20000074 	.word	0x20000074
 800beb0:	431bde83 	.word	0x431bde83

0800beb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800bebc:	4b79      	ldr	r3, [pc, #484]	; (800c0a4 <ADC_Init+0x1f0>)
 800bebe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	685b      	ldr	r3, [r3, #4]
 800bec4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	685a      	ldr	r2, [r3, #4]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	431a      	orrs	r2, r3
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	685a      	ldr	r2, [r3, #4]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bee8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	6859      	ldr	r1, [r3, #4]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	021a      	lsls	r2, r3, #8
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	685a      	ldr	r2, [r3, #4]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800bf0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	6859      	ldr	r1, [r3, #4]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	689a      	ldr	r2, [r3, #8]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	430a      	orrs	r2, r1
 800bf1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	689a      	ldr	r2, [r3, #8]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6899      	ldr	r1, [r3, #8]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68da      	ldr	r2, [r3, #12]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	430a      	orrs	r2, r1
 800bf40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf46:	4a58      	ldr	r2, [pc, #352]	; (800c0a8 <ADC_Init+0x1f4>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d022      	beq.n	800bf92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	689a      	ldr	r2, [r3, #8]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bf5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6899      	ldr	r1, [r3, #8]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	430a      	orrs	r2, r1
 800bf6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bf7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6899      	ldr	r1, [r3, #8]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	430a      	orrs	r2, r1
 800bf8e:	609a      	str	r2, [r3, #8]
 800bf90:	e00f      	b.n	800bfb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	689a      	ldr	r2, [r3, #8]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800bfa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	689a      	ldr	r2, [r3, #8]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800bfb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	689a      	ldr	r2, [r3, #8]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f022 0202 	bic.w	r2, r2, #2
 800bfc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	6899      	ldr	r1, [r3, #8]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	7e1b      	ldrb	r3, [r3, #24]
 800bfcc:	005a      	lsls	r2, r3, #1
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	430a      	orrs	r2, r1
 800bfd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d01b      	beq.n	800c018 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bfee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	685a      	ldr	r2, [r3, #4]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800bffe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	6859      	ldr	r1, [r3, #4]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00a:	3b01      	subs	r3, #1
 800c00c:	035a      	lsls	r2, r3, #13
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	430a      	orrs	r2, r1
 800c014:	605a      	str	r2, [r3, #4]
 800c016:	e007      	b.n	800c028 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	685a      	ldr	r2, [r3, #4]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c026:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800c036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	69db      	ldr	r3, [r3, #28]
 800c042:	3b01      	subs	r3, #1
 800c044:	051a      	lsls	r2, r3, #20
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	430a      	orrs	r2, r1
 800c04c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	689a      	ldr	r2, [r3, #8]
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c05c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	6899      	ldr	r1, [r3, #8]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c06a:	025a      	lsls	r2, r3, #9
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	430a      	orrs	r2, r1
 800c072:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	689a      	ldr	r2, [r3, #8]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c082:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	6899      	ldr	r1, [r3, #8]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	695b      	ldr	r3, [r3, #20]
 800c08e:	029a      	lsls	r2, r3, #10
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	430a      	orrs	r2, r1
 800c096:	609a      	str	r2, [r3, #8]
}
 800c098:	bf00      	nop
 800c09a:	3714      	adds	r7, #20
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr
 800c0a4:	40012300 	.word	0x40012300
 800c0a8:	0f000001 	.word	0x0f000001

0800c0ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d13c      	bne.n	800c140 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d12b      	bne.n	800c138 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d127      	bne.n	800c138 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d006      	beq.n	800c104 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800c100:	2b00      	cmp	r3, #0
 800c102:	d119      	bne.n	800c138 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	685a      	ldr	r2, [r3, #4]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f022 0220 	bic.w	r2, r2, #32
 800c112:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c118:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d105      	bne.n	800c138 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c130:	f043 0201 	orr.w	r2, r3, #1
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c138:	68f8      	ldr	r0, [r7, #12]
 800c13a:	f7f5 fa41 	bl	80015c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c13e:	e00e      	b.n	800c15e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c144:	f003 0310 	and.w	r3, r3, #16
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d003      	beq.n	800c154 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f7ff fd85 	bl	800bc5c <HAL_ADC_ErrorCallback>
}
 800c152:	e004      	b.n	800c15e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	4798      	blx	r3
}
 800c15e:	bf00      	nop
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b084      	sub	sp, #16
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c172:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f7ff fd67 	bl	800bc48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c17a:	bf00      	nop
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b084      	sub	sp, #16
 800c186:	af00      	add	r7, sp, #0
 800c188:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2240      	movs	r2, #64	; 0x40
 800c194:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c19a:	f043 0204 	orr.w	r2, r3, #4
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f7ff fd5a 	bl	800bc5c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c1a8:	bf00      	nop
 800c1aa:	3710      	adds	r7, #16
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	bd80      	pop	{r7, pc}

0800c1b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f003 0307 	and.w	r3, r3, #7
 800c1be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c1c0:	4b0c      	ldr	r3, [pc, #48]	; (800c1f4 <__NVIC_SetPriorityGrouping+0x44>)
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c1cc:	4013      	ands	r3, r2
 800c1ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c1d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c1dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c1e2:	4a04      	ldr	r2, [pc, #16]	; (800c1f4 <__NVIC_SetPriorityGrouping+0x44>)
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	60d3      	str	r3, [r2, #12]
}
 800c1e8:	bf00      	nop
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	e000ed00 	.word	0xe000ed00

0800c1f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c1fc:	4b04      	ldr	r3, [pc, #16]	; (800c210 <__NVIC_GetPriorityGrouping+0x18>)
 800c1fe:	68db      	ldr	r3, [r3, #12]
 800c200:	0a1b      	lsrs	r3, r3, #8
 800c202:	f003 0307 	and.w	r3, r3, #7
}
 800c206:	4618      	mov	r0, r3
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr
 800c210:	e000ed00 	.word	0xe000ed00

0800c214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	4603      	mov	r3, r0
 800c21c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c21e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c222:	2b00      	cmp	r3, #0
 800c224:	db0b      	blt.n	800c23e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c226:	79fb      	ldrb	r3, [r7, #7]
 800c228:	f003 021f 	and.w	r2, r3, #31
 800c22c:	4907      	ldr	r1, [pc, #28]	; (800c24c <__NVIC_EnableIRQ+0x38>)
 800c22e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c232:	095b      	lsrs	r3, r3, #5
 800c234:	2001      	movs	r0, #1
 800c236:	fa00 f202 	lsl.w	r2, r0, r2
 800c23a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c23e:	bf00      	nop
 800c240:	370c      	adds	r7, #12
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	e000e100 	.word	0xe000e100

0800c250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c250:	b480      	push	{r7}
 800c252:	b083      	sub	sp, #12
 800c254:	af00      	add	r7, sp, #0
 800c256:	4603      	mov	r3, r0
 800c258:	6039      	str	r1, [r7, #0]
 800c25a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c25c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c260:	2b00      	cmp	r3, #0
 800c262:	db0a      	blt.n	800c27a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	b2da      	uxtb	r2, r3
 800c268:	490c      	ldr	r1, [pc, #48]	; (800c29c <__NVIC_SetPriority+0x4c>)
 800c26a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c26e:	0112      	lsls	r2, r2, #4
 800c270:	b2d2      	uxtb	r2, r2
 800c272:	440b      	add	r3, r1
 800c274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c278:	e00a      	b.n	800c290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	b2da      	uxtb	r2, r3
 800c27e:	4908      	ldr	r1, [pc, #32]	; (800c2a0 <__NVIC_SetPriority+0x50>)
 800c280:	79fb      	ldrb	r3, [r7, #7]
 800c282:	f003 030f 	and.w	r3, r3, #15
 800c286:	3b04      	subs	r3, #4
 800c288:	0112      	lsls	r2, r2, #4
 800c28a:	b2d2      	uxtb	r2, r2
 800c28c:	440b      	add	r3, r1
 800c28e:	761a      	strb	r2, [r3, #24]
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	e000e100 	.word	0xe000e100
 800c2a0:	e000ed00 	.word	0xe000ed00

0800c2a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b089      	sub	sp, #36	; 0x24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f003 0307 	and.w	r3, r3, #7
 800c2b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	f1c3 0307 	rsb	r3, r3, #7
 800c2be:	2b04      	cmp	r3, #4
 800c2c0:	bf28      	it	cs
 800c2c2:	2304      	movcs	r3, #4
 800c2c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c2c6:	69fb      	ldr	r3, [r7, #28]
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	2b06      	cmp	r3, #6
 800c2cc:	d902      	bls.n	800c2d4 <NVIC_EncodePriority+0x30>
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	3b03      	subs	r3, #3
 800c2d2:	e000      	b.n	800c2d6 <NVIC_EncodePriority+0x32>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c2d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c2dc:	69bb      	ldr	r3, [r7, #24]
 800c2de:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e2:	43da      	mvns	r2, r3
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	401a      	ands	r2, r3
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c2ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	fa01 f303 	lsl.w	r3, r1, r3
 800c2f6:	43d9      	mvns	r1, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c2fc:	4313      	orrs	r3, r2
         );
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3724      	adds	r7, #36	; 0x24
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
	...

0800c30c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	3b01      	subs	r3, #1
 800c318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c31c:	d301      	bcc.n	800c322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c31e:	2301      	movs	r3, #1
 800c320:	e00f      	b.n	800c342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c322:	4a0a      	ldr	r2, [pc, #40]	; (800c34c <SysTick_Config+0x40>)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	3b01      	subs	r3, #1
 800c328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c32a:	210f      	movs	r1, #15
 800c32c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c330:	f7ff ff8e 	bl	800c250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c334:	4b05      	ldr	r3, [pc, #20]	; (800c34c <SysTick_Config+0x40>)
 800c336:	2200      	movs	r2, #0
 800c338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c33a:	4b04      	ldr	r3, [pc, #16]	; (800c34c <SysTick_Config+0x40>)
 800c33c:	2207      	movs	r2, #7
 800c33e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	bf00      	nop
 800c34c:	e000e010 	.word	0xe000e010

0800c350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f7ff ff29 	bl	800c1b0 <__NVIC_SetPriorityGrouping>
}
 800c35e:	bf00      	nop
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c366:	b580      	push	{r7, lr}
 800c368:	b086      	sub	sp, #24
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	4603      	mov	r3, r0
 800c36e:	60b9      	str	r1, [r7, #8]
 800c370:	607a      	str	r2, [r7, #4]
 800c372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800c374:	2300      	movs	r3, #0
 800c376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c378:	f7ff ff3e 	bl	800c1f8 <__NVIC_GetPriorityGrouping>
 800c37c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	68b9      	ldr	r1, [r7, #8]
 800c382:	6978      	ldr	r0, [r7, #20]
 800c384:	f7ff ff8e 	bl	800c2a4 <NVIC_EncodePriority>
 800c388:	4602      	mov	r2, r0
 800c38a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c38e:	4611      	mov	r1, r2
 800c390:	4618      	mov	r0, r3
 800c392:	f7ff ff5d 	bl	800c250 <__NVIC_SetPriority>
}
 800c396:	bf00      	nop
 800c398:	3718      	adds	r7, #24
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bd80      	pop	{r7, pc}

0800c39e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c39e:	b580      	push	{r7, lr}
 800c3a0:	b082      	sub	sp, #8
 800c3a2:	af00      	add	r7, sp, #0
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c3a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	f7ff ff31 	bl	800c214 <__NVIC_EnableIRQ>
}
 800c3b2:	bf00      	nop
 800c3b4:	3708      	adds	r7, #8
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b082      	sub	sp, #8
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f7ff ffa2 	bl	800c30c <SysTick_Config>
 800c3c8:	4603      	mov	r3, r0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
	...

0800c3d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b086      	sub	sp, #24
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800c3e0:	f7ff face 	bl	800b980 <HAL_GetTick>
 800c3e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d101      	bne.n	800c3f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e099      	b.n	800c524 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f022 0201 	bic.w	r2, r2, #1
 800c40e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c410:	e00f      	b.n	800c432 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c412:	f7ff fab5 	bl	800b980 <HAL_GetTick>
 800c416:	4602      	mov	r2, r0
 800c418:	693b      	ldr	r3, [r7, #16]
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	2b05      	cmp	r3, #5
 800c41e:	d908      	bls.n	800c432 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2220      	movs	r2, #32
 800c424:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2203      	movs	r2, #3
 800c42a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800c42e:	2303      	movs	r3, #3
 800c430:	e078      	b.n	800c524 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d1e8      	bne.n	800c412 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800c448:	697a      	ldr	r2, [r7, #20]
 800c44a:	4b38      	ldr	r3, [pc, #224]	; (800c52c <HAL_DMA_Init+0x158>)
 800c44c:	4013      	ands	r3, r2
 800c44e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c45e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	691b      	ldr	r3, [r3, #16]
 800c464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c46a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	699b      	ldr	r3, [r3, #24]
 800c470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	6a1b      	ldr	r3, [r3, #32]
 800c47c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800c47e:	697a      	ldr	r2, [r7, #20]
 800c480:	4313      	orrs	r3, r2
 800c482:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c488:	2b04      	cmp	r3, #4
 800c48a:	d107      	bne.n	800c49c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c494:	4313      	orrs	r3, r2
 800c496:	697a      	ldr	r2, [r7, #20]
 800c498:	4313      	orrs	r3, r2
 800c49a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	695b      	ldr	r3, [r3, #20]
 800c4aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	f023 0307 	bic.w	r3, r3, #7
 800c4b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	4313      	orrs	r3, r2
 800c4bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c2:	2b04      	cmp	r3, #4
 800c4c4:	d117      	bne.n	800c4f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ca:	697a      	ldr	r2, [r7, #20]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00e      	beq.n	800c4f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fa91 	bl	800ca00 <DMA_CheckFifoParam>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d008      	beq.n	800c4f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2240      	movs	r2, #64	; 0x40
 800c4e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	e016      	b.n	800c524 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	697a      	ldr	r2, [r7, #20]
 800c4fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f000 fa48 	bl	800c994 <DMA_CalcBaseAndBitshift>
 800c504:	4603      	mov	r3, r0
 800c506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c50c:	223f      	movs	r2, #63	; 0x3f
 800c50e:	409a      	lsls	r2, r3
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	3718      	adds	r7, #24
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	f010803f 	.word	0xf010803f

0800c530 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
 800c53c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c53e:	2300      	movs	r3, #0
 800c540:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c546:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d101      	bne.n	800c556 <HAL_DMA_Start_IT+0x26>
 800c552:	2302      	movs	r3, #2
 800c554:	e040      	b.n	800c5d8 <HAL_DMA_Start_IT+0xa8>
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b01      	cmp	r3, #1
 800c568:	d12f      	bne.n	800c5ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	2202      	movs	r2, #2
 800c56e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	2200      	movs	r2, #0
 800c576:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	68b9      	ldr	r1, [r7, #8]
 800c57e:	68f8      	ldr	r0, [r7, #12]
 800c580:	f000 f9da 	bl	800c938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c588:	223f      	movs	r2, #63	; 0x3f
 800c58a:	409a      	lsls	r2, r3
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f042 0216 	orr.w	r2, r2, #22
 800c59e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d007      	beq.n	800c5b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f042 0208 	orr.w	r2, r2, #8
 800c5b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f042 0201 	orr.w	r2, r2, #1
 800c5c6:	601a      	str	r2, [r3, #0]
 800c5c8:	e005      	b.n	800c5d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800c5d2:	2302      	movs	r3, #2
 800c5d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800c5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3718      	adds	r7, #24
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b02      	cmp	r3, #2
 800c5f2:	d004      	beq.n	800c5fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2280      	movs	r2, #128	; 0x80
 800c5f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e00c      	b.n	800c618 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2205      	movs	r2, #5
 800c602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f022 0201 	bic.w	r2, r2, #1
 800c614:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c616:	2300      	movs	r3, #0
}
 800c618:	4618      	mov	r0, r3
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b086      	sub	sp, #24
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800c62c:	2300      	movs	r3, #0
 800c62e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800c630:	4b92      	ldr	r3, [pc, #584]	; (800c87c <HAL_DMA_IRQHandler+0x258>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a92      	ldr	r2, [pc, #584]	; (800c880 <HAL_DMA_IRQHandler+0x25c>)
 800c636:	fba2 2303 	umull	r2, r3, r2, r3
 800c63a:	0a9b      	lsrs	r3, r3, #10
 800c63c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c642:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c64e:	2208      	movs	r2, #8
 800c650:	409a      	lsls	r2, r3
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	4013      	ands	r3, r2
 800c656:	2b00      	cmp	r3, #0
 800c658:	d01a      	beq.n	800c690 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f003 0304 	and.w	r3, r3, #4
 800c664:	2b00      	cmp	r3, #0
 800c666:	d013      	beq.n	800c690 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	681a      	ldr	r2, [r3, #0]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f022 0204 	bic.w	r2, r2, #4
 800c676:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c67c:	2208      	movs	r2, #8
 800c67e:	409a      	lsls	r2, r3
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c688:	f043 0201 	orr.w	r2, r3, #1
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c694:	2201      	movs	r2, #1
 800c696:	409a      	lsls	r2, r3
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	4013      	ands	r3, r2
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d012      	beq.n	800c6c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	409a      	lsls	r2, r3
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6be:	f043 0202 	orr.w	r2, r3, #2
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6ca:	2204      	movs	r2, #4
 800c6cc:	409a      	lsls	r2, r3
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	4013      	ands	r3, r2
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d012      	beq.n	800c6fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 0302 	and.w	r3, r3, #2
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00b      	beq.n	800c6fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c6e8:	2204      	movs	r2, #4
 800c6ea:	409a      	lsls	r2, r3
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f4:	f043 0204 	orr.w	r2, r3, #4
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c700:	2210      	movs	r2, #16
 800c702:	409a      	lsls	r2, r3
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	4013      	ands	r3, r2
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d043      	beq.n	800c794 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 0308 	and.w	r3, r3, #8
 800c716:	2b00      	cmp	r3, #0
 800c718:	d03c      	beq.n	800c794 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c71e:	2210      	movs	r2, #16
 800c720:	409a      	lsls	r2, r3
 800c722:	693b      	ldr	r3, [r7, #16]
 800c724:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c730:	2b00      	cmp	r3, #0
 800c732:	d018      	beq.n	800c766 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d108      	bne.n	800c754 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c746:	2b00      	cmp	r3, #0
 800c748:	d024      	beq.n	800c794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	4798      	blx	r3
 800c752:	e01f      	b.n	800c794 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01b      	beq.n	800c794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	4798      	blx	r3
 800c764:	e016      	b.n	800c794 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c770:	2b00      	cmp	r3, #0
 800c772:	d107      	bne.n	800c784 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f022 0208 	bic.w	r2, r2, #8
 800c782:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d003      	beq.n	800c794 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c798:	2220      	movs	r2, #32
 800c79a:	409a      	lsls	r2, r3
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	4013      	ands	r3, r2
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f000 808e 	beq.w	800c8c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f003 0310 	and.w	r3, r3, #16
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 8086 	beq.w	800c8c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ba:	2220      	movs	r2, #32
 800c7bc:	409a      	lsls	r2, r3
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b05      	cmp	r3, #5
 800c7cc:	d136      	bne.n	800c83c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	681a      	ldr	r2, [r3, #0]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f022 0216 	bic.w	r2, r2, #22
 800c7dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	695a      	ldr	r2, [r3, #20]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d103      	bne.n	800c7fe <HAL_DMA_IRQHandler+0x1da>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d007      	beq.n	800c80e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f022 0208 	bic.w	r2, r2, #8
 800c80c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c812:	223f      	movs	r2, #63	; 0x3f
 800c814:	409a      	lsls	r2, r3
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d07d      	beq.n	800c92e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	4798      	blx	r3
        }
        return;
 800c83a:	e078      	b.n	800c92e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c846:	2b00      	cmp	r3, #0
 800c848:	d01c      	beq.n	800c884 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c854:	2b00      	cmp	r3, #0
 800c856:	d108      	bne.n	800c86a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d030      	beq.n	800c8c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	4798      	blx	r3
 800c868:	e02b      	b.n	800c8c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d027      	beq.n	800c8c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	4798      	blx	r3
 800c87a:	e022      	b.n	800c8c2 <HAL_DMA_IRQHandler+0x29e>
 800c87c:	20000074 	.word	0x20000074
 800c880:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d10f      	bne.n	800c8b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	681a      	ldr	r2, [r3, #0]
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	f022 0210 	bic.w	r2, r2, #16
 800c8a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d003      	beq.n	800c8c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d032      	beq.n	800c930 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ce:	f003 0301 	and.w	r3, r3, #1
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d022      	beq.n	800c91c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2205      	movs	r2, #5
 800c8da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f022 0201 	bic.w	r2, r2, #1
 800c8ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	60bb      	str	r3, [r7, #8]
 800c8f4:	697a      	ldr	r2, [r7, #20]
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d307      	bcc.n	800c90a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 0301 	and.w	r3, r3, #1
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1f2      	bne.n	800c8ee <HAL_DMA_IRQHandler+0x2ca>
 800c908:	e000      	b.n	800c90c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c90a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2201      	movs	r2, #1
 800c918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c920:	2b00      	cmp	r3, #0
 800c922:	d005      	beq.n	800c930 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	4798      	blx	r3
 800c92c:	e000      	b.n	800c930 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c92e:	bf00      	nop
    }
  }
}
 800c930:	3718      	adds	r7, #24
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop

0800c938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c938:	b480      	push	{r7}
 800c93a:	b085      	sub	sp, #20
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	607a      	str	r2, [r7, #4]
 800c944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	2b40      	cmp	r3, #64	; 0x40
 800c964:	d108      	bne.n	800c978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	68ba      	ldr	r2, [r7, #8]
 800c974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c976:	e007      	b.n	800c988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	68ba      	ldr	r2, [r7, #8]
 800c97e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	60da      	str	r2, [r3, #12]
}
 800c988:	bf00      	nop
 800c98a:	3714      	adds	r7, #20
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c994:	b480      	push	{r7}
 800c996:	b085      	sub	sp, #20
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	3b10      	subs	r3, #16
 800c9a4:	4a14      	ldr	r2, [pc, #80]	; (800c9f8 <DMA_CalcBaseAndBitshift+0x64>)
 800c9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800c9aa:	091b      	lsrs	r3, r3, #4
 800c9ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c9ae:	4a13      	ldr	r2, [pc, #76]	; (800c9fc <DMA_CalcBaseAndBitshift+0x68>)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	4413      	add	r3, r2
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	d909      	bls.n	800c9d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c9ca:	f023 0303 	bic.w	r3, r3, #3
 800c9ce:	1d1a      	adds	r2, r3, #4
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	659a      	str	r2, [r3, #88]	; 0x58
 800c9d4:	e007      	b.n	800c9e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c9de:	f023 0303 	bic.w	r3, r3, #3
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3714      	adds	r7, #20
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop
 800c9f8:	aaaaaaab 	.word	0xaaaaaaab
 800c9fc:	080121f8 	.word	0x080121f8

0800ca00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b085      	sub	sp, #20
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	699b      	ldr	r3, [r3, #24]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d11f      	bne.n	800ca5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	2b03      	cmp	r3, #3
 800ca1e:	d855      	bhi.n	800cacc <DMA_CheckFifoParam+0xcc>
 800ca20:	a201      	add	r2, pc, #4	; (adr r2, 800ca28 <DMA_CheckFifoParam+0x28>)
 800ca22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca26:	bf00      	nop
 800ca28:	0800ca39 	.word	0x0800ca39
 800ca2c:	0800ca4b 	.word	0x0800ca4b
 800ca30:	0800ca39 	.word	0x0800ca39
 800ca34:	0800cacd 	.word	0x0800cacd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d045      	beq.n	800cad0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca48:	e042      	b.n	800cad0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ca52:	d13f      	bne.n	800cad4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800ca54:	2301      	movs	r3, #1
 800ca56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca58:	e03c      	b.n	800cad4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	699b      	ldr	r3, [r3, #24]
 800ca5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca62:	d121      	bne.n	800caa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	d836      	bhi.n	800cad8 <DMA_CheckFifoParam+0xd8>
 800ca6a:	a201      	add	r2, pc, #4	; (adr r2, 800ca70 <DMA_CheckFifoParam+0x70>)
 800ca6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca70:	0800ca81 	.word	0x0800ca81
 800ca74:	0800ca87 	.word	0x0800ca87
 800ca78:	0800ca81 	.word	0x0800ca81
 800ca7c:	0800ca99 	.word	0x0800ca99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ca80:	2301      	movs	r3, #1
 800ca82:	73fb      	strb	r3, [r7, #15]
      break;
 800ca84:	e02f      	b.n	800cae6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d024      	beq.n	800cadc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ca96:	e021      	b.n	800cadc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800caa0:	d11e      	bne.n	800cae0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800caa6:	e01b      	b.n	800cae0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d902      	bls.n	800cab4 <DMA_CheckFifoParam+0xb4>
 800caae:	2b03      	cmp	r3, #3
 800cab0:	d003      	beq.n	800caba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800cab2:	e018      	b.n	800cae6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800cab4:	2301      	movs	r3, #1
 800cab6:	73fb      	strb	r3, [r7, #15]
      break;
 800cab8:	e015      	b.n	800cae6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cabe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00e      	beq.n	800cae4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800cac6:	2301      	movs	r3, #1
 800cac8:	73fb      	strb	r3, [r7, #15]
      break;
 800caca:	e00b      	b.n	800cae4 <DMA_CheckFifoParam+0xe4>
      break;
 800cacc:	bf00      	nop
 800cace:	e00a      	b.n	800cae6 <DMA_CheckFifoParam+0xe6>
      break;
 800cad0:	bf00      	nop
 800cad2:	e008      	b.n	800cae6 <DMA_CheckFifoParam+0xe6>
      break;
 800cad4:	bf00      	nop
 800cad6:	e006      	b.n	800cae6 <DMA_CheckFifoParam+0xe6>
      break;
 800cad8:	bf00      	nop
 800cada:	e004      	b.n	800cae6 <DMA_CheckFifoParam+0xe6>
      break;
 800cadc:	bf00      	nop
 800cade:	e002      	b.n	800cae6 <DMA_CheckFifoParam+0xe6>
      break;   
 800cae0:	bf00      	nop
 800cae2:	e000      	b.n	800cae6 <DMA_CheckFifoParam+0xe6>
      break;
 800cae4:	bf00      	nop
    }
  } 
  
  return status; 
 800cae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3714      	adds	r7, #20
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b089      	sub	sp, #36	; 0x24
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800cafe:	2300      	movs	r3, #0
 800cb00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cb02:	2300      	movs	r3, #0
 800cb04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800cb06:	2300      	movs	r3, #0
 800cb08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	61fb      	str	r3, [r7, #28]
 800cb0e:	e16b      	b.n	800cde8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800cb10:	2201      	movs	r2, #1
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	fa02 f303 	lsl.w	r3, r2, r3
 800cb18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	4013      	ands	r3, r2
 800cb22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	f040 815a 	bne.w	800cde2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	2b01      	cmp	r3, #1
 800cb34:	d00b      	beq.n	800cb4e <HAL_GPIO_Init+0x5a>
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	685b      	ldr	r3, [r3, #4]
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	d007      	beq.n	800cb4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800cb42:	2b11      	cmp	r3, #17
 800cb44:	d003      	beq.n	800cb4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	2b12      	cmp	r3, #18
 800cb4c:	d130      	bne.n	800cbb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	689b      	ldr	r3, [r3, #8]
 800cb52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	005b      	lsls	r3, r3, #1
 800cb58:	2203      	movs	r2, #3
 800cb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb5e:	43db      	mvns	r3, r3
 800cb60:	69ba      	ldr	r2, [r7, #24]
 800cb62:	4013      	ands	r3, r2
 800cb64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	68da      	ldr	r2, [r3, #12]
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	005b      	lsls	r3, r3, #1
 800cb6e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb72:	69ba      	ldr	r2, [r7, #24]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	69ba      	ldr	r2, [r7, #24]
 800cb7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800cb84:	2201      	movs	r2, #1
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	fa02 f303 	lsl.w	r3, r2, r3
 800cb8c:	43db      	mvns	r3, r3
 800cb8e:	69ba      	ldr	r2, [r7, #24]
 800cb90:	4013      	ands	r3, r2
 800cb92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	091b      	lsrs	r3, r3, #4
 800cb9a:	f003 0201 	and.w	r2, r3, #1
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	fa02 f303 	lsl.w	r3, r2, r3
 800cba4:	69ba      	ldr	r2, [r7, #24]
 800cba6:	4313      	orrs	r3, r2
 800cba8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	69ba      	ldr	r2, [r7, #24]
 800cbae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800cbb6:	69fb      	ldr	r3, [r7, #28]
 800cbb8:	005b      	lsls	r3, r3, #1
 800cbba:	2203      	movs	r2, #3
 800cbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc0:	43db      	mvns	r3, r3
 800cbc2:	69ba      	ldr	r2, [r7, #24]
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	689a      	ldr	r2, [r3, #8]
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	005b      	lsls	r3, r3, #1
 800cbd0:	fa02 f303 	lsl.w	r3, r2, r3
 800cbd4:	69ba      	ldr	r2, [r7, #24]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	69ba      	ldr	r2, [r7, #24]
 800cbde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	2b02      	cmp	r3, #2
 800cbe6:	d003      	beq.n	800cbf0 <HAL_GPIO_Init+0xfc>
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	2b12      	cmp	r3, #18
 800cbee:	d123      	bne.n	800cc38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cbf0:	69fb      	ldr	r3, [r7, #28]
 800cbf2:	08da      	lsrs	r2, r3, #3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	3208      	adds	r2, #8
 800cbf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	f003 0307 	and.w	r3, r3, #7
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	220f      	movs	r2, #15
 800cc08:	fa02 f303 	lsl.w	r3, r2, r3
 800cc0c:	43db      	mvns	r3, r3
 800cc0e:	69ba      	ldr	r2, [r7, #24]
 800cc10:	4013      	ands	r3, r2
 800cc12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	691a      	ldr	r2, [r3, #16]
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	f003 0307 	and.w	r3, r3, #7
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	fa02 f303 	lsl.w	r3, r2, r3
 800cc24:	69ba      	ldr	r2, [r7, #24]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	08da      	lsrs	r2, r3, #3
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3208      	adds	r2, #8
 800cc32:	69b9      	ldr	r1, [r7, #24]
 800cc34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	005b      	lsls	r3, r3, #1
 800cc42:	2203      	movs	r2, #3
 800cc44:	fa02 f303 	lsl.w	r3, r2, r3
 800cc48:	43db      	mvns	r3, r3
 800cc4a:	69ba      	ldr	r2, [r7, #24]
 800cc4c:	4013      	ands	r3, r2
 800cc4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	f003 0203 	and.w	r2, r3, #3
 800cc58:	69fb      	ldr	r3, [r7, #28]
 800cc5a:	005b      	lsls	r3, r3, #1
 800cc5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc60:	69ba      	ldr	r2, [r7, #24]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	69ba      	ldr	r2, [r7, #24]
 800cc6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	685b      	ldr	r3, [r3, #4]
 800cc70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f000 80b4 	beq.w	800cde2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	60fb      	str	r3, [r7, #12]
 800cc7e:	4b5f      	ldr	r3, [pc, #380]	; (800cdfc <HAL_GPIO_Init+0x308>)
 800cc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc82:	4a5e      	ldr	r2, [pc, #376]	; (800cdfc <HAL_GPIO_Init+0x308>)
 800cc84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cc88:	6453      	str	r3, [r2, #68]	; 0x44
 800cc8a:	4b5c      	ldr	r3, [pc, #368]	; (800cdfc <HAL_GPIO_Init+0x308>)
 800cc8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cc92:	60fb      	str	r3, [r7, #12]
 800cc94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cc96:	4a5a      	ldr	r2, [pc, #360]	; (800ce00 <HAL_GPIO_Init+0x30c>)
 800cc98:	69fb      	ldr	r3, [r7, #28]
 800cc9a:	089b      	lsrs	r3, r3, #2
 800cc9c:	3302      	adds	r3, #2
 800cc9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	f003 0303 	and.w	r3, r3, #3
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	220f      	movs	r2, #15
 800ccae:	fa02 f303 	lsl.w	r3, r2, r3
 800ccb2:	43db      	mvns	r3, r3
 800ccb4:	69ba      	ldr	r2, [r7, #24]
 800ccb6:	4013      	ands	r3, r2
 800ccb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a51      	ldr	r2, [pc, #324]	; (800ce04 <HAL_GPIO_Init+0x310>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d02b      	beq.n	800cd1a <HAL_GPIO_Init+0x226>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a50      	ldr	r2, [pc, #320]	; (800ce08 <HAL_GPIO_Init+0x314>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d025      	beq.n	800cd16 <HAL_GPIO_Init+0x222>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4a4f      	ldr	r2, [pc, #316]	; (800ce0c <HAL_GPIO_Init+0x318>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d01f      	beq.n	800cd12 <HAL_GPIO_Init+0x21e>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a4e      	ldr	r2, [pc, #312]	; (800ce10 <HAL_GPIO_Init+0x31c>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d019      	beq.n	800cd0e <HAL_GPIO_Init+0x21a>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4a4d      	ldr	r2, [pc, #308]	; (800ce14 <HAL_GPIO_Init+0x320>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d013      	beq.n	800cd0a <HAL_GPIO_Init+0x216>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4a4c      	ldr	r2, [pc, #304]	; (800ce18 <HAL_GPIO_Init+0x324>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d00d      	beq.n	800cd06 <HAL_GPIO_Init+0x212>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4a4b      	ldr	r2, [pc, #300]	; (800ce1c <HAL_GPIO_Init+0x328>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d007      	beq.n	800cd02 <HAL_GPIO_Init+0x20e>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	4a4a      	ldr	r2, [pc, #296]	; (800ce20 <HAL_GPIO_Init+0x32c>)
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d101      	bne.n	800ccfe <HAL_GPIO_Init+0x20a>
 800ccfa:	2307      	movs	r3, #7
 800ccfc:	e00e      	b.n	800cd1c <HAL_GPIO_Init+0x228>
 800ccfe:	2308      	movs	r3, #8
 800cd00:	e00c      	b.n	800cd1c <HAL_GPIO_Init+0x228>
 800cd02:	2306      	movs	r3, #6
 800cd04:	e00a      	b.n	800cd1c <HAL_GPIO_Init+0x228>
 800cd06:	2305      	movs	r3, #5
 800cd08:	e008      	b.n	800cd1c <HAL_GPIO_Init+0x228>
 800cd0a:	2304      	movs	r3, #4
 800cd0c:	e006      	b.n	800cd1c <HAL_GPIO_Init+0x228>
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e004      	b.n	800cd1c <HAL_GPIO_Init+0x228>
 800cd12:	2302      	movs	r3, #2
 800cd14:	e002      	b.n	800cd1c <HAL_GPIO_Init+0x228>
 800cd16:	2301      	movs	r3, #1
 800cd18:	e000      	b.n	800cd1c <HAL_GPIO_Init+0x228>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	69fa      	ldr	r2, [r7, #28]
 800cd1e:	f002 0203 	and.w	r2, r2, #3
 800cd22:	0092      	lsls	r2, r2, #2
 800cd24:	4093      	lsls	r3, r2
 800cd26:	69ba      	ldr	r2, [r7, #24]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cd2c:	4934      	ldr	r1, [pc, #208]	; (800ce00 <HAL_GPIO_Init+0x30c>)
 800cd2e:	69fb      	ldr	r3, [r7, #28]
 800cd30:	089b      	lsrs	r3, r3, #2
 800cd32:	3302      	adds	r3, #2
 800cd34:	69ba      	ldr	r2, [r7, #24]
 800cd36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800cd3a:	4b3a      	ldr	r3, [pc, #232]	; (800ce24 <HAL_GPIO_Init+0x330>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cd40:	693b      	ldr	r3, [r7, #16]
 800cd42:	43db      	mvns	r3, r3
 800cd44:	69ba      	ldr	r2, [r7, #24]
 800cd46:	4013      	ands	r3, r2
 800cd48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d003      	beq.n	800cd5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800cd56:	69ba      	ldr	r2, [r7, #24]
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800cd5e:	4a31      	ldr	r2, [pc, #196]	; (800ce24 <HAL_GPIO_Init+0x330>)
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800cd64:	4b2f      	ldr	r3, [pc, #188]	; (800ce24 <HAL_GPIO_Init+0x330>)
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	43db      	mvns	r3, r3
 800cd6e:	69ba      	ldr	r2, [r7, #24]
 800cd70:	4013      	ands	r3, r2
 800cd72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	685b      	ldr	r3, [r3, #4]
 800cd78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d003      	beq.n	800cd88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800cd80:	69ba      	ldr	r2, [r7, #24]
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800cd88:	4a26      	ldr	r2, [pc, #152]	; (800ce24 <HAL_GPIO_Init+0x330>)
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800cd8e:	4b25      	ldr	r3, [pc, #148]	; (800ce24 <HAL_GPIO_Init+0x330>)
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	43db      	mvns	r3, r3
 800cd98:	69ba      	ldr	r2, [r7, #24]
 800cd9a:	4013      	ands	r3, r2
 800cd9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d003      	beq.n	800cdb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800cdaa:	69ba      	ldr	r2, [r7, #24]
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800cdb2:	4a1c      	ldr	r2, [pc, #112]	; (800ce24 <HAL_GPIO_Init+0x330>)
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800cdb8:	4b1a      	ldr	r3, [pc, #104]	; (800ce24 <HAL_GPIO_Init+0x330>)
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	43db      	mvns	r3, r3
 800cdc2:	69ba      	ldr	r2, [r7, #24]
 800cdc4:	4013      	ands	r3, r2
 800cdc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800cdc8:	683b      	ldr	r3, [r7, #0]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d003      	beq.n	800cddc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800cdd4:	69ba      	ldr	r2, [r7, #24]
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800cddc:	4a11      	ldr	r2, [pc, #68]	; (800ce24 <HAL_GPIO_Init+0x330>)
 800cdde:	69bb      	ldr	r3, [r7, #24]
 800cde0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	3301      	adds	r3, #1
 800cde6:	61fb      	str	r3, [r7, #28]
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	2b0f      	cmp	r3, #15
 800cdec:	f67f ae90 	bls.w	800cb10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800cdf0:	bf00      	nop
 800cdf2:	3724      	adds	r7, #36	; 0x24
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	40023800 	.word	0x40023800
 800ce00:	40013800 	.word	0x40013800
 800ce04:	40020000 	.word	0x40020000
 800ce08:	40020400 	.word	0x40020400
 800ce0c:	40020800 	.word	0x40020800
 800ce10:	40020c00 	.word	0x40020c00
 800ce14:	40021000 	.word	0x40021000
 800ce18:	40021400 	.word	0x40021400
 800ce1c:	40021800 	.word	0x40021800
 800ce20:	40021c00 	.word	0x40021c00
 800ce24:	40013c00 	.word	0x40013c00

0800ce28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	460b      	mov	r3, r1
 800ce32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	691a      	ldr	r2, [r3, #16]
 800ce38:	887b      	ldrh	r3, [r7, #2]
 800ce3a:	4013      	ands	r3, r2
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d002      	beq.n	800ce46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ce40:	2301      	movs	r3, #1
 800ce42:	73fb      	strb	r3, [r7, #15]
 800ce44:	e001      	b.n	800ce4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ce46:	2300      	movs	r3, #0
 800ce48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ce4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3714      	adds	r7, #20
 800ce50:	46bd      	mov	sp, r7
 800ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce56:	4770      	bx	lr

0800ce58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	460b      	mov	r3, r1
 800ce62:	807b      	strh	r3, [r7, #2]
 800ce64:	4613      	mov	r3, r2
 800ce66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ce68:	787b      	ldrb	r3, [r7, #1]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d003      	beq.n	800ce76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ce6e:	887a      	ldrh	r2, [r7, #2]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ce74:	e003      	b.n	800ce7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ce76:	887b      	ldrh	r3, [r7, #2]
 800ce78:	041a      	lsls	r2, r3, #16
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	619a      	str	r2, [r3, #24]
}
 800ce7e:	bf00      	nop
 800ce80:	370c      	adds	r7, #12
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr

0800ce8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ce8a:	b480      	push	{r7}
 800ce8c:	b083      	sub	sp, #12
 800ce8e:	af00      	add	r7, sp, #0
 800ce90:	6078      	str	r0, [r7, #4]
 800ce92:	460b      	mov	r3, r1
 800ce94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	695a      	ldr	r2, [r3, #20]
 800ce9a:	887b      	ldrh	r3, [r7, #2]
 800ce9c:	401a      	ands	r2, r3
 800ce9e:	887b      	ldrh	r3, [r7, #2]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d104      	bne.n	800ceae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cea4:	887b      	ldrh	r3, [r7, #2]
 800cea6:	041a      	lsls	r2, r3, #16
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800ceac:	e002      	b.n	800ceb4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800ceae:	887a      	ldrh	r2, [r7, #2]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	619a      	str	r2, [r3, #24]
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	4603      	mov	r3, r0
 800cec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ceca:	4b08      	ldr	r3, [pc, #32]	; (800ceec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cecc:	695a      	ldr	r2, [r3, #20]
 800cece:	88fb      	ldrh	r3, [r7, #6]
 800ced0:	4013      	ands	r3, r2
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d006      	beq.n	800cee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ced6:	4a05      	ldr	r2, [pc, #20]	; (800ceec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ced8:	88fb      	ldrh	r3, [r7, #6]
 800ceda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cedc:	88fb      	ldrh	r3, [r7, #6]
 800cede:	4618      	mov	r0, r3
 800cee0:	f7f6 fcb8 	bl	8003854 <HAL_GPIO_EXTI_Callback>
  }
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	40013c00 	.word	0x40013c00

0800cef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d101      	bne.n	800cf02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	e11f      	b.n	800d142 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d106      	bne.n	800cf1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f7fa f906 	bl	8007128 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2224      	movs	r2, #36	; 0x24
 800cf20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f022 0201 	bic.w	r2, r2, #1
 800cf32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800cf54:	f000 ff8c 	bl	800de70 <HAL_RCC_GetPCLK1Freq>
 800cf58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	685b      	ldr	r3, [r3, #4]
 800cf5e:	4a7b      	ldr	r2, [pc, #492]	; (800d14c <HAL_I2C_Init+0x25c>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d807      	bhi.n	800cf74 <HAL_I2C_Init+0x84>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	4a7a      	ldr	r2, [pc, #488]	; (800d150 <HAL_I2C_Init+0x260>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	bf94      	ite	ls
 800cf6c:	2301      	movls	r3, #1
 800cf6e:	2300      	movhi	r3, #0
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	e006      	b.n	800cf82 <HAL_I2C_Init+0x92>
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	4a77      	ldr	r2, [pc, #476]	; (800d154 <HAL_I2C_Init+0x264>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	bf94      	ite	ls
 800cf7c:	2301      	movls	r3, #1
 800cf7e:	2300      	movhi	r3, #0
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d001      	beq.n	800cf8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e0db      	b.n	800d142 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	4a72      	ldr	r2, [pc, #456]	; (800d158 <HAL_I2C_Init+0x268>)
 800cf8e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf92:	0c9b      	lsrs	r3, r3, #18
 800cf94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	685b      	ldr	r3, [r3, #4]
 800cf9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	68ba      	ldr	r2, [r7, #8]
 800cfa6:	430a      	orrs	r2, r1
 800cfa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	6a1b      	ldr	r3, [r3, #32]
 800cfb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	4a64      	ldr	r2, [pc, #400]	; (800d14c <HAL_I2C_Init+0x25c>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d802      	bhi.n	800cfc4 <HAL_I2C_Init+0xd4>
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	e009      	b.n	800cfd8 <HAL_I2C_Init+0xe8>
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cfca:	fb02 f303 	mul.w	r3, r2, r3
 800cfce:	4a63      	ldr	r2, [pc, #396]	; (800d15c <HAL_I2C_Init+0x26c>)
 800cfd0:	fba2 2303 	umull	r2, r3, r2, r3
 800cfd4:	099b      	lsrs	r3, r3, #6
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	6812      	ldr	r2, [r2, #0]
 800cfdc:	430b      	orrs	r3, r1
 800cfde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	69db      	ldr	r3, [r3, #28]
 800cfe6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800cfea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	4956      	ldr	r1, [pc, #344]	; (800d14c <HAL_I2C_Init+0x25c>)
 800cff4:	428b      	cmp	r3, r1
 800cff6:	d80d      	bhi.n	800d014 <HAL_I2C_Init+0x124>
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	1e59      	subs	r1, r3, #1
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	685b      	ldr	r3, [r3, #4]
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	fbb1 f3f3 	udiv	r3, r1, r3
 800d006:	3301      	adds	r3, #1
 800d008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d00c:	2b04      	cmp	r3, #4
 800d00e:	bf38      	it	cc
 800d010:	2304      	movcc	r3, #4
 800d012:	e04f      	b.n	800d0b4 <HAL_I2C_Init+0x1c4>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d111      	bne.n	800d040 <HAL_I2C_Init+0x150>
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	1e58      	subs	r0, r3, #1
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6859      	ldr	r1, [r3, #4]
 800d024:	460b      	mov	r3, r1
 800d026:	005b      	lsls	r3, r3, #1
 800d028:	440b      	add	r3, r1
 800d02a:	fbb0 f3f3 	udiv	r3, r0, r3
 800d02e:	3301      	adds	r3, #1
 800d030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d034:	2b00      	cmp	r3, #0
 800d036:	bf0c      	ite	eq
 800d038:	2301      	moveq	r3, #1
 800d03a:	2300      	movne	r3, #0
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	e012      	b.n	800d066 <HAL_I2C_Init+0x176>
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	1e58      	subs	r0, r3, #1
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6859      	ldr	r1, [r3, #4]
 800d048:	460b      	mov	r3, r1
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	440b      	add	r3, r1
 800d04e:	0099      	lsls	r1, r3, #2
 800d050:	440b      	add	r3, r1
 800d052:	fbb0 f3f3 	udiv	r3, r0, r3
 800d056:	3301      	adds	r3, #1
 800d058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	bf0c      	ite	eq
 800d060:	2301      	moveq	r3, #1
 800d062:	2300      	movne	r3, #0
 800d064:	b2db      	uxtb	r3, r3
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <HAL_I2C_Init+0x17e>
 800d06a:	2301      	movs	r3, #1
 800d06c:	e022      	b.n	800d0b4 <HAL_I2C_Init+0x1c4>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	689b      	ldr	r3, [r3, #8]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d10e      	bne.n	800d094 <HAL_I2C_Init+0x1a4>
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	1e58      	subs	r0, r3, #1
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6859      	ldr	r1, [r3, #4]
 800d07e:	460b      	mov	r3, r1
 800d080:	005b      	lsls	r3, r3, #1
 800d082:	440b      	add	r3, r1
 800d084:	fbb0 f3f3 	udiv	r3, r0, r3
 800d088:	3301      	adds	r3, #1
 800d08a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d08e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d092:	e00f      	b.n	800d0b4 <HAL_I2C_Init+0x1c4>
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	1e58      	subs	r0, r3, #1
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6859      	ldr	r1, [r3, #4]
 800d09c:	460b      	mov	r3, r1
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	440b      	add	r3, r1
 800d0a2:	0099      	lsls	r1, r3, #2
 800d0a4:	440b      	add	r3, r1
 800d0a6:	fbb0 f3f3 	udiv	r3, r0, r3
 800d0aa:	3301      	adds	r3, #1
 800d0ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d0b4:	6879      	ldr	r1, [r7, #4]
 800d0b6:	6809      	ldr	r1, [r1, #0]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	69da      	ldr	r2, [r3, #28]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6a1b      	ldr	r3, [r3, #32]
 800d0ce:	431a      	orrs	r2, r3
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	430a      	orrs	r2, r1
 800d0d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800d0e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	6911      	ldr	r1, [r2, #16]
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	68d2      	ldr	r2, [r2, #12]
 800d0ee:	4311      	orrs	r1, r2
 800d0f0:	687a      	ldr	r2, [r7, #4]
 800d0f2:	6812      	ldr	r2, [r2, #0]
 800d0f4:	430b      	orrs	r3, r1
 800d0f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	695a      	ldr	r2, [r3, #20]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	699b      	ldr	r3, [r3, #24]
 800d10a:	431a      	orrs	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	430a      	orrs	r2, r1
 800d112:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f042 0201 	orr.w	r2, r2, #1
 800d122:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2200      	movs	r2, #0
 800d128:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2220      	movs	r2, #32
 800d12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d140:	2300      	movs	r3, #0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
 800d14a:	bf00      	nop
 800d14c:	000186a0 	.word	0x000186a0
 800d150:	001e847f 	.word	0x001e847f
 800d154:	003d08ff 	.word	0x003d08ff
 800d158:	431bde83 	.word	0x431bde83
 800d15c:	10624dd3 	.word	0x10624dd3

0800d160 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af02      	add	r7, sp, #8
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	4608      	mov	r0, r1
 800d16a:	4611      	mov	r1, r2
 800d16c:	461a      	mov	r2, r3
 800d16e:	4603      	mov	r3, r0
 800d170:	817b      	strh	r3, [r7, #10]
 800d172:	460b      	mov	r3, r1
 800d174:	813b      	strh	r3, [r7, #8]
 800d176:	4613      	mov	r3, r2
 800d178:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d17a:	f7fe fc01 	bl	800b980 <HAL_GetTick>
 800d17e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d186:	b2db      	uxtb	r3, r3
 800d188:	2b20      	cmp	r3, #32
 800d18a:	f040 80d9 	bne.w	800d340 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	2319      	movs	r3, #25
 800d194:	2201      	movs	r2, #1
 800d196:	496d      	ldr	r1, [pc, #436]	; (800d34c <HAL_I2C_Mem_Write+0x1ec>)
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f000 fc7f 	bl	800da9c <I2C_WaitOnFlagUntilTimeout>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d001      	beq.n	800d1a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800d1a4:	2302      	movs	r3, #2
 800d1a6:	e0cc      	b.n	800d342 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1ae:	2b01      	cmp	r3, #1
 800d1b0:	d101      	bne.n	800d1b6 <HAL_I2C_Mem_Write+0x56>
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	e0c5      	b.n	800d342 <HAL_I2C_Mem_Write+0x1e2>
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 0301 	and.w	r3, r3, #1
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d007      	beq.n	800d1dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	681a      	ldr	r2, [r3, #0]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f042 0201 	orr.w	r2, r2, #1
 800d1da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d1ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2221      	movs	r2, #33	; 0x21
 800d1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2240      	movs	r2, #64	; 0x40
 800d1f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2200      	movs	r2, #0
 800d200:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	6a3a      	ldr	r2, [r7, #32]
 800d206:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d20c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d212:	b29a      	uxth	r2, r3
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	4a4d      	ldr	r2, [pc, #308]	; (800d350 <HAL_I2C_Mem_Write+0x1f0>)
 800d21c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d21e:	88f8      	ldrh	r0, [r7, #6]
 800d220:	893a      	ldrh	r2, [r7, #8]
 800d222:	8979      	ldrh	r1, [r7, #10]
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	9301      	str	r3, [sp, #4]
 800d228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d22a:	9300      	str	r3, [sp, #0]
 800d22c:	4603      	mov	r3, r0
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f000 fab6 	bl	800d7a0 <I2C_RequestMemoryWrite>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d052      	beq.n	800d2e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e081      	b.n	800d342 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f000 fd00 	bl	800dc48 <I2C_WaitOnTXEFlagUntilTimeout>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00d      	beq.n	800d26a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d252:	2b04      	cmp	r3, #4
 800d254:	d107      	bne.n	800d266 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d264:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800d266:	2301      	movs	r3, #1
 800d268:	e06b      	b.n	800d342 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d26e:	781a      	ldrb	r2, [r3, #0]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27a:	1c5a      	adds	r2, r3, #1
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d284:	3b01      	subs	r3, #1
 800d286:	b29a      	uxth	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d290:	b29b      	uxth	r3, r3
 800d292:	3b01      	subs	r3, #1
 800d294:	b29a      	uxth	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	695b      	ldr	r3, [r3, #20]
 800d2a0:	f003 0304 	and.w	r3, r3, #4
 800d2a4:	2b04      	cmp	r3, #4
 800d2a6:	d11b      	bne.n	800d2e0 <HAL_I2C_Mem_Write+0x180>
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d017      	beq.n	800d2e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b4:	781a      	ldrb	r2, [r3, #0]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2ca:	3b01      	subs	r3, #1
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	b29a      	uxth	r2, r3
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1aa      	bne.n	800d23e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2e8:	697a      	ldr	r2, [r7, #20]
 800d2ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2ec:	68f8      	ldr	r0, [r7, #12]
 800d2ee:	f000 fcec 	bl	800dcca <I2C_WaitOnBTFFlagUntilTimeout>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00d      	beq.n	800d314 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fc:	2b04      	cmp	r3, #4
 800d2fe:	d107      	bne.n	800d310 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d30e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	e016      	b.n	800d342 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d322:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2220      	movs	r2, #32
 800d328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d33c:	2300      	movs	r3, #0
 800d33e:	e000      	b.n	800d342 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800d340:	2302      	movs	r3, #2
  }
}
 800d342:	4618      	mov	r0, r3
 800d344:	3718      	adds	r7, #24
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	00100002 	.word	0x00100002
 800d350:	ffff0000 	.word	0xffff0000

0800d354 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b08c      	sub	sp, #48	; 0x30
 800d358:	af02      	add	r7, sp, #8
 800d35a:	60f8      	str	r0, [r7, #12]
 800d35c:	4608      	mov	r0, r1
 800d35e:	4611      	mov	r1, r2
 800d360:	461a      	mov	r2, r3
 800d362:	4603      	mov	r3, r0
 800d364:	817b      	strh	r3, [r7, #10]
 800d366:	460b      	mov	r3, r1
 800d368:	813b      	strh	r3, [r7, #8]
 800d36a:	4613      	mov	r3, r2
 800d36c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800d36e:	f7fe fb07 	bl	800b980 <HAL_GetTick>
 800d372:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	2b20      	cmp	r3, #32
 800d37e:	f040 8208 	bne.w	800d792 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800d382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	2319      	movs	r3, #25
 800d388:	2201      	movs	r2, #1
 800d38a:	497b      	ldr	r1, [pc, #492]	; (800d578 <HAL_I2C_Mem_Read+0x224>)
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f000 fb85 	bl	800da9c <I2C_WaitOnFlagUntilTimeout>
 800d392:	4603      	mov	r3, r0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d001      	beq.n	800d39c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800d398:	2302      	movs	r3, #2
 800d39a:	e1fb      	b.n	800d794 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d101      	bne.n	800d3aa <HAL_I2C_Mem_Read+0x56>
 800d3a6:	2302      	movs	r3, #2
 800d3a8:	e1f4      	b.n	800d794 <HAL_I2C_Mem_Read+0x440>
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f003 0301 	and.w	r3, r3, #1
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	d007      	beq.n	800d3d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f042 0201 	orr.w	r2, r2, #1
 800d3ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d3de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2222      	movs	r2, #34	; 0x22
 800d3e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	2240      	movs	r2, #64	; 0x40
 800d3ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800d400:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d406:	b29a      	uxth	r2, r3
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	4a5b      	ldr	r2, [pc, #364]	; (800d57c <HAL_I2C_Mem_Read+0x228>)
 800d410:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d412:	88f8      	ldrh	r0, [r7, #6]
 800d414:	893a      	ldrh	r2, [r7, #8]
 800d416:	8979      	ldrh	r1, [r7, #10]
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	9301      	str	r3, [sp, #4]
 800d41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	4603      	mov	r3, r0
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	f000 fa52 	bl	800d8cc <I2C_RequestMemoryRead>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d001      	beq.n	800d432 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	e1b0      	b.n	800d794 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d436:	2b00      	cmp	r3, #0
 800d438:	d113      	bne.n	800d462 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d43a:	2300      	movs	r3, #0
 800d43c:	623b      	str	r3, [r7, #32]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	695b      	ldr	r3, [r3, #20]
 800d444:	623b      	str	r3, [r7, #32]
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	699b      	ldr	r3, [r3, #24]
 800d44c:	623b      	str	r3, [r7, #32]
 800d44e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	681a      	ldr	r2, [r3, #0]
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d45e:	601a      	str	r2, [r3, #0]
 800d460:	e184      	b.n	800d76c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d466:	2b01      	cmp	r3, #1
 800d468:	d11b      	bne.n	800d4a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	681a      	ldr	r2, [r3, #0]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d478:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d47a:	2300      	movs	r3, #0
 800d47c:	61fb      	str	r3, [r7, #28]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	695b      	ldr	r3, [r3, #20]
 800d484:	61fb      	str	r3, [r7, #28]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	699b      	ldr	r3, [r3, #24]
 800d48c:	61fb      	str	r3, [r7, #28]
 800d48e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d49e:	601a      	str	r2, [r3, #0]
 800d4a0:	e164      	b.n	800d76c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d11b      	bne.n	800d4e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d4b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d4c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	61bb      	str	r3, [r7, #24]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	695b      	ldr	r3, [r3, #20]
 800d4d4:	61bb      	str	r3, [r7, #24]
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	699b      	ldr	r3, [r3, #24]
 800d4dc:	61bb      	str	r3, [r7, #24]
 800d4de:	69bb      	ldr	r3, [r7, #24]
 800d4e0:	e144      	b.n	800d76c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	617b      	str	r3, [r7, #20]
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	695b      	ldr	r3, [r3, #20]
 800d4ec:	617b      	str	r3, [r7, #20]
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	699b      	ldr	r3, [r3, #24]
 800d4f4:	617b      	str	r3, [r7, #20]
 800d4f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800d4f8:	e138      	b.n	800d76c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	f200 80f1 	bhi.w	800d6e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d123      	bne.n	800d554 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d50e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f000 fc1b 	bl	800dd4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d001      	beq.n	800d520 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800d51c:	2301      	movs	r3, #1
 800d51e:	e139      	b.n	800d794 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	691a      	ldr	r2, [r3, #16]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d52a:	b2d2      	uxtb	r2, r2
 800d52c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d53c:	3b01      	subs	r3, #1
 800d53e:	b29a      	uxth	r2, r3
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d548:	b29b      	uxth	r3, r3
 800d54a:	3b01      	subs	r3, #1
 800d54c:	b29a      	uxth	r2, r3
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d552:	e10b      	b.n	800d76c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d14e      	bne.n	800d5fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d562:	2200      	movs	r2, #0
 800d564:	4906      	ldr	r1, [pc, #24]	; (800d580 <HAL_I2C_Mem_Read+0x22c>)
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f000 fa98 	bl	800da9c <I2C_WaitOnFlagUntilTimeout>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d008      	beq.n	800d584 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800d572:	2301      	movs	r3, #1
 800d574:	e10e      	b.n	800d794 <HAL_I2C_Mem_Read+0x440>
 800d576:	bf00      	nop
 800d578:	00100002 	.word	0x00100002
 800d57c:	ffff0000 	.word	0xffff0000
 800d580:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d592:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	691a      	ldr	r2, [r3, #16]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d59e:	b2d2      	uxtb	r2, r2
 800d5a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a6:	1c5a      	adds	r2, r3, #1
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	691a      	ldr	r2, [r3, #16]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d0:	b2d2      	uxtb	r2, r2
 800d5d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	3b01      	subs	r3, #1
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d5f8:	e0b8      	b.n	800d76c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fc:	9300      	str	r3, [sp, #0]
 800d5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d600:	2200      	movs	r2, #0
 800d602:	4966      	ldr	r1, [pc, #408]	; (800d79c <HAL_I2C_Mem_Read+0x448>)
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 fa49 	bl	800da9c <I2C_WaitOnFlagUntilTimeout>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d001      	beq.n	800d614 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800d610:	2301      	movs	r3, #1
 800d612:	e0bf      	b.n	800d794 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d622:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	691a      	ldr	r2, [r3, #16]
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d62e:	b2d2      	uxtb	r2, r2
 800d630:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d636:	1c5a      	adds	r2, r3, #1
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d640:	3b01      	subs	r3, #1
 800d642:	b29a      	uxth	r2, r3
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	3b01      	subs	r3, #1
 800d650:	b29a      	uxth	r2, r3
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800d656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65c:	2200      	movs	r2, #0
 800d65e:	494f      	ldr	r1, [pc, #316]	; (800d79c <HAL_I2C_Mem_Read+0x448>)
 800d660:	68f8      	ldr	r0, [r7, #12]
 800d662:	f000 fa1b 	bl	800da9c <I2C_WaitOnFlagUntilTimeout>
 800d666:	4603      	mov	r3, r0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d001      	beq.n	800d670 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	e091      	b.n	800d794 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d67e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	691a      	ldr	r2, [r3, #16]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d68a:	b2d2      	uxtb	r2, r2
 800d68c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d692:	1c5a      	adds	r2, r3, #1
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d69c:	3b01      	subs	r3, #1
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	b29a      	uxth	r2, r3
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	691a      	ldr	r2, [r3, #16]
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6bc:	b2d2      	uxtb	r2, r2
 800d6be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6c4:	1c5a      	adds	r2, r3, #1
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d6e4:	e042      	b.n	800d76c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f000 fb2e 	bl	800dd4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d001      	beq.n	800d6fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e04c      	b.n	800d794 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	691a      	ldr	r2, [r3, #16]
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d704:	b2d2      	uxtb	r2, r2
 800d706:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70c:	1c5a      	adds	r2, r3, #1
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d716:	3b01      	subs	r3, #1
 800d718:	b29a      	uxth	r2, r3
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d722:	b29b      	uxth	r3, r3
 800d724:	3b01      	subs	r3, #1
 800d726:	b29a      	uxth	r2, r3
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	f003 0304 	and.w	r3, r3, #4
 800d736:	2b04      	cmp	r3, #4
 800d738:	d118      	bne.n	800d76c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	691a      	ldr	r2, [r3, #16]
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d744:	b2d2      	uxtb	r2, r2
 800d746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74c:	1c5a      	adds	r2, r3, #1
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d756:	3b01      	subs	r3, #1
 800d758:	b29a      	uxth	r2, r3
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d762:	b29b      	uxth	r3, r3
 800d764:	3b01      	subs	r3, #1
 800d766:	b29a      	uxth	r2, r3
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d770:	2b00      	cmp	r3, #0
 800d772:	f47f aec2 	bne.w	800d4fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2220      	movs	r2, #32
 800d77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	2200      	movs	r2, #0
 800d782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d78e:	2300      	movs	r3, #0
 800d790:	e000      	b.n	800d794 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800d792:	2302      	movs	r3, #2
  }
}
 800d794:	4618      	mov	r0, r3
 800d796:	3728      	adds	r7, #40	; 0x28
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	00010004 	.word	0x00010004

0800d7a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b088      	sub	sp, #32
 800d7a4:	af02      	add	r7, sp, #8
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	4608      	mov	r0, r1
 800d7aa:	4611      	mov	r1, r2
 800d7ac:	461a      	mov	r2, r3
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	817b      	strh	r3, [r7, #10]
 800d7b2:	460b      	mov	r3, r1
 800d7b4:	813b      	strh	r3, [r7, #8]
 800d7b6:	4613      	mov	r3, r2
 800d7b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	681a      	ldr	r2, [r3, #0]
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d7c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	6a3b      	ldr	r3, [r7, #32]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d7d6:	68f8      	ldr	r0, [r7, #12]
 800d7d8:	f000 f960 	bl	800da9c <I2C_WaitOnFlagUntilTimeout>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00d      	beq.n	800d7fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7f0:	d103      	bne.n	800d7fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d7fa:	2303      	movs	r3, #3
 800d7fc:	e05f      	b.n	800d8be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d7fe:	897b      	ldrh	r3, [r7, #10]
 800d800:	b2db      	uxtb	r3, r3
 800d802:	461a      	mov	r2, r3
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d80c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d810:	6a3a      	ldr	r2, [r7, #32]
 800d812:	492d      	ldr	r1, [pc, #180]	; (800d8c8 <I2C_RequestMemoryWrite+0x128>)
 800d814:	68f8      	ldr	r0, [r7, #12]
 800d816:	f000 f998 	bl	800db4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d001      	beq.n	800d824 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	e04c      	b.n	800d8be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d824:	2300      	movs	r3, #0
 800d826:	617b      	str	r3, [r7, #20]
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	695b      	ldr	r3, [r3, #20]
 800d82e:	617b      	str	r3, [r7, #20]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	699b      	ldr	r3, [r3, #24]
 800d836:	617b      	str	r3, [r7, #20]
 800d838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d83a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d83c:	6a39      	ldr	r1, [r7, #32]
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f000 fa02 	bl	800dc48 <I2C_WaitOnTXEFlagUntilTimeout>
 800d844:	4603      	mov	r3, r0
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00d      	beq.n	800d866 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d84e:	2b04      	cmp	r3, #4
 800d850:	d107      	bne.n	800d862 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	e02b      	b.n	800d8be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d866:	88fb      	ldrh	r3, [r7, #6]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d105      	bne.n	800d878 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d86c:	893b      	ldrh	r3, [r7, #8]
 800d86e:	b2da      	uxtb	r2, r3
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	611a      	str	r2, [r3, #16]
 800d876:	e021      	b.n	800d8bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d878:	893b      	ldrh	r3, [r7, #8]
 800d87a:	0a1b      	lsrs	r3, r3, #8
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	b2da      	uxtb	r2, r3
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d888:	6a39      	ldr	r1, [r7, #32]
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	f000 f9dc 	bl	800dc48 <I2C_WaitOnTXEFlagUntilTimeout>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00d      	beq.n	800d8b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89a:	2b04      	cmp	r3, #4
 800d89c:	d107      	bne.n	800d8ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	e005      	b.n	800d8be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d8b2:	893b      	ldrh	r3, [r7, #8]
 800d8b4:	b2da      	uxtb	r2, r3
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d8bc:	2300      	movs	r3, #0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3718      	adds	r7, #24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	00010002 	.word	0x00010002

0800d8cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b088      	sub	sp, #32
 800d8d0:	af02      	add	r7, sp, #8
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	4608      	mov	r0, r1
 800d8d6:	4611      	mov	r1, r2
 800d8d8:	461a      	mov	r2, r3
 800d8da:	4603      	mov	r3, r0
 800d8dc:	817b      	strh	r3, [r7, #10]
 800d8de:	460b      	mov	r3, r1
 800d8e0:	813b      	strh	r3, [r7, #8]
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	681a      	ldr	r2, [r3, #0]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d8f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d904:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	6a3b      	ldr	r3, [r7, #32]
 800d90c:	2200      	movs	r2, #0
 800d90e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d912:	68f8      	ldr	r0, [r7, #12]
 800d914:	f000 f8c2 	bl	800da9c <I2C_WaitOnFlagUntilTimeout>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00d      	beq.n	800d93a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d92c:	d103      	bne.n	800d936 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d934:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d936:	2303      	movs	r3, #3
 800d938:	e0aa      	b.n	800da90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d93a:	897b      	ldrh	r3, [r7, #10]
 800d93c:	b2db      	uxtb	r3, r3
 800d93e:	461a      	mov	r2, r3
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d948:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d94c:	6a3a      	ldr	r2, [r7, #32]
 800d94e:	4952      	ldr	r1, [pc, #328]	; (800da98 <I2C_RequestMemoryRead+0x1cc>)
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f000 f8fa 	bl	800db4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d001      	beq.n	800d960 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d95c:	2301      	movs	r3, #1
 800d95e:	e097      	b.n	800da90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d960:	2300      	movs	r3, #0
 800d962:	617b      	str	r3, [r7, #20]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	695b      	ldr	r3, [r3, #20]
 800d96a:	617b      	str	r3, [r7, #20]
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	617b      	str	r3, [r7, #20]
 800d974:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d978:	6a39      	ldr	r1, [r7, #32]
 800d97a:	68f8      	ldr	r0, [r7, #12]
 800d97c:	f000 f964 	bl	800dc48 <I2C_WaitOnTXEFlagUntilTimeout>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00d      	beq.n	800d9a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d98a:	2b04      	cmp	r3, #4
 800d98c:	d107      	bne.n	800d99e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	681a      	ldr	r2, [r3, #0]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d99c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e076      	b.n	800da90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d9a2:	88fb      	ldrh	r3, [r7, #6]
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d105      	bne.n	800d9b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d9a8:	893b      	ldrh	r3, [r7, #8]
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	611a      	str	r2, [r3, #16]
 800d9b2:	e021      	b.n	800d9f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d9b4:	893b      	ldrh	r3, [r7, #8]
 800d9b6:	0a1b      	lsrs	r3, r3, #8
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9c4:	6a39      	ldr	r1, [r7, #32]
 800d9c6:	68f8      	ldr	r0, [r7, #12]
 800d9c8:	f000 f93e 	bl	800dc48 <I2C_WaitOnTXEFlagUntilTimeout>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d00d      	beq.n	800d9ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d6:	2b04      	cmp	r3, #4
 800d9d8:	d107      	bne.n	800d9ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d9e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	e050      	b.n	800da90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d9ee:	893b      	ldrh	r3, [r7, #8]
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9fa:	6a39      	ldr	r1, [r7, #32]
 800d9fc:	68f8      	ldr	r0, [r7, #12]
 800d9fe:	f000 f923 	bl	800dc48 <I2C_WaitOnTXEFlagUntilTimeout>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d00d      	beq.n	800da24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da0c:	2b04      	cmp	r3, #4
 800da0e:	d107      	bne.n	800da20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	681a      	ldr	r2, [r3, #0]
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800da1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800da20:	2301      	movs	r3, #1
 800da22:	e035      	b.n	800da90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f000 f82b 	bl	800da9c <I2C_WaitOnFlagUntilTimeout>
 800da46:	4603      	mov	r3, r0
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d00d      	beq.n	800da68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da5a:	d103      	bne.n	800da64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800da64:	2303      	movs	r3, #3
 800da66:	e013      	b.n	800da90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800da68:	897b      	ldrh	r3, [r7, #10]
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	f043 0301 	orr.w	r3, r3, #1
 800da70:	b2da      	uxtb	r2, r3
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800da78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7a:	6a3a      	ldr	r2, [r7, #32]
 800da7c:	4906      	ldr	r1, [pc, #24]	; (800da98 <I2C_RequestMemoryRead+0x1cc>)
 800da7e:	68f8      	ldr	r0, [r7, #12]
 800da80:	f000 f863 	bl	800db4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d001      	beq.n	800da8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800da8a:	2301      	movs	r3, #1
 800da8c:	e000      	b.n	800da90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800da8e:	2300      	movs	r3, #0
}
 800da90:	4618      	mov	r0, r3
 800da92:	3718      	adds	r7, #24
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	00010002 	.word	0x00010002

0800da9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b084      	sub	sp, #16
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	603b      	str	r3, [r7, #0]
 800daa8:	4613      	mov	r3, r2
 800daaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800daac:	e025      	b.n	800dafa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dab4:	d021      	beq.n	800dafa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dab6:	f7fd ff63 	bl	800b980 <HAL_GetTick>
 800daba:	4602      	mov	r2, r0
 800dabc:	69bb      	ldr	r3, [r7, #24]
 800dabe:	1ad3      	subs	r3, r2, r3
 800dac0:	683a      	ldr	r2, [r7, #0]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d302      	bcc.n	800dacc <I2C_WaitOnFlagUntilTimeout+0x30>
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d116      	bne.n	800dafa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2200      	movs	r2, #0
 800dad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2220      	movs	r2, #32
 800dad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dae6:	f043 0220 	orr.w	r2, r3, #32
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800daf6:	2301      	movs	r3, #1
 800daf8:	e023      	b.n	800db42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	0c1b      	lsrs	r3, r3, #16
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	2b01      	cmp	r3, #1
 800db02:	d10d      	bne.n	800db20 <I2C_WaitOnFlagUntilTimeout+0x84>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	695b      	ldr	r3, [r3, #20]
 800db0a:	43da      	mvns	r2, r3
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	4013      	ands	r3, r2
 800db10:	b29b      	uxth	r3, r3
 800db12:	2b00      	cmp	r3, #0
 800db14:	bf0c      	ite	eq
 800db16:	2301      	moveq	r3, #1
 800db18:	2300      	movne	r3, #0
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	461a      	mov	r2, r3
 800db1e:	e00c      	b.n	800db3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	699b      	ldr	r3, [r3, #24]
 800db26:	43da      	mvns	r2, r3
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	4013      	ands	r3, r2
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	2b00      	cmp	r3, #0
 800db30:	bf0c      	ite	eq
 800db32:	2301      	moveq	r3, #1
 800db34:	2300      	movne	r3, #0
 800db36:	b2db      	uxtb	r3, r3
 800db38:	461a      	mov	r2, r3
 800db3a:	79fb      	ldrb	r3, [r7, #7]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d0b6      	beq.n	800daae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800db40:	2300      	movs	r3, #0
}
 800db42:	4618      	mov	r0, r3
 800db44:	3710      	adds	r7, #16
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b084      	sub	sp, #16
 800db4e:	af00      	add	r7, sp, #0
 800db50:	60f8      	str	r0, [r7, #12]
 800db52:	60b9      	str	r1, [r7, #8]
 800db54:	607a      	str	r2, [r7, #4]
 800db56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800db58:	e051      	b.n	800dbfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	695b      	ldr	r3, [r3, #20]
 800db60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800db64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db68:	d123      	bne.n	800dbb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800db82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	2200      	movs	r2, #0
 800db88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2220      	movs	r2, #32
 800db8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2200      	movs	r2, #0
 800db96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db9e:	f043 0204 	orr.w	r2, r3, #4
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	e046      	b.n	800dc40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbb8:	d021      	beq.n	800dbfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dbba:	f7fd fee1 	bl	800b980 <HAL_GetTick>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	429a      	cmp	r2, r3
 800dbc8:	d302      	bcc.n	800dbd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d116      	bne.n	800dbfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2220      	movs	r2, #32
 800dbda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbea:	f043 0220 	orr.w	r2, r3, #32
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e020      	b.n	800dc40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	0c1b      	lsrs	r3, r3, #16
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d10c      	bne.n	800dc22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	695b      	ldr	r3, [r3, #20]
 800dc0e:	43da      	mvns	r2, r3
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	4013      	ands	r3, r2
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	bf14      	ite	ne
 800dc1a:	2301      	movne	r3, #1
 800dc1c:	2300      	moveq	r3, #0
 800dc1e:	b2db      	uxtb	r3, r3
 800dc20:	e00b      	b.n	800dc3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	699b      	ldr	r3, [r3, #24]
 800dc28:	43da      	mvns	r2, r3
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	bf14      	ite	ne
 800dc34:	2301      	movne	r3, #1
 800dc36:	2300      	moveq	r3, #0
 800dc38:	b2db      	uxtb	r3, r3
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d18d      	bne.n	800db5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dc54:	e02d      	b.n	800dcb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f000 f8ce 	bl	800ddf8 <I2C_IsAcknowledgeFailed>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	e02d      	b.n	800dcc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc6c:	d021      	beq.n	800dcb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dc6e:	f7fd fe87 	bl	800b980 <HAL_GetTick>
 800dc72:	4602      	mov	r2, r0
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	1ad3      	subs	r3, r2, r3
 800dc78:	68ba      	ldr	r2, [r7, #8]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d302      	bcc.n	800dc84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d116      	bne.n	800dcb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	2220      	movs	r2, #32
 800dc8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2200      	movs	r2, #0
 800dc96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc9e:	f043 0220 	orr.w	r2, r3, #32
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dcae:	2301      	movs	r3, #1
 800dcb0:	e007      	b.n	800dcc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	695b      	ldr	r3, [r3, #20]
 800dcb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcbc:	2b80      	cmp	r3, #128	; 0x80
 800dcbe:	d1ca      	bne.n	800dc56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dcc0:	2300      	movs	r3, #0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}

0800dcca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b084      	sub	sp, #16
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	60f8      	str	r0, [r7, #12]
 800dcd2:	60b9      	str	r1, [r7, #8]
 800dcd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dcd6:	e02d      	b.n	800dd34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800dcd8:	68f8      	ldr	r0, [r7, #12]
 800dcda:	f000 f88d 	bl	800ddf8 <I2C_IsAcknowledgeFailed>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800dce4:	2301      	movs	r3, #1
 800dce6:	e02d      	b.n	800dd44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcee:	d021      	beq.n	800dd34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dcf0:	f7fd fe46 	bl	800b980 <HAL_GetTick>
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	1ad3      	subs	r3, r2, r3
 800dcfa:	68ba      	ldr	r2, [r7, #8]
 800dcfc:	429a      	cmp	r2, r3
 800dcfe:	d302      	bcc.n	800dd06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d116      	bne.n	800dd34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	2220      	movs	r2, #32
 800dd10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	2200      	movs	r2, #0
 800dd18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd20:	f043 0220 	orr.w	r2, r3, #32
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800dd30:	2301      	movs	r3, #1
 800dd32:	e007      	b.n	800dd44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	695b      	ldr	r3, [r3, #20]
 800dd3a:	f003 0304 	and.w	r3, r3, #4
 800dd3e:	2b04      	cmp	r3, #4
 800dd40:	d1ca      	bne.n	800dcd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800dd42:	2300      	movs	r3, #0
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3710      	adds	r7, #16
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b084      	sub	sp, #16
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	60f8      	str	r0, [r7, #12]
 800dd54:	60b9      	str	r1, [r7, #8]
 800dd56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dd58:	e042      	b.n	800dde0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	695b      	ldr	r3, [r3, #20]
 800dd60:	f003 0310 	and.w	r3, r3, #16
 800dd64:	2b10      	cmp	r3, #16
 800dd66:	d119      	bne.n	800dd9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f06f 0210 	mvn.w	r2, #16
 800dd70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2200      	movs	r2, #0
 800dd76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	2220      	movs	r2, #32
 800dd7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	e029      	b.n	800ddf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd9c:	f7fd fdf0 	bl	800b980 <HAL_GetTick>
 800dda0:	4602      	mov	r2, r0
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	1ad3      	subs	r3, r2, r3
 800dda6:	68ba      	ldr	r2, [r7, #8]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d302      	bcc.n	800ddb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d116      	bne.n	800dde0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2220      	movs	r2, #32
 800ddbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddcc:	f043 0220 	orr.w	r2, r3, #32
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800dddc:	2301      	movs	r3, #1
 800ddde:	e007      	b.n	800ddf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	695b      	ldr	r3, [r3, #20]
 800dde6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddea:	2b40      	cmp	r3, #64	; 0x40
 800ddec:	d1b5      	bne.n	800dd5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800ddee:	2300      	movs	r3, #0
}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	695b      	ldr	r3, [r3, #20]
 800de06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de0e:	d11b      	bne.n	800de48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800de18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2200      	movs	r2, #0
 800de1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2220      	movs	r2, #32
 800de24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de34:	f043 0204 	orr.w	r2, r3, #4
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800de44:	2301      	movs	r3, #1
 800de46:	e000      	b.n	800de4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800de48:	2300      	movs	r3, #0
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	370c      	adds	r7, #12
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
	...

0800de58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800de58:	b480      	push	{r7}
 800de5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800de5c:	4b03      	ldr	r3, [pc, #12]	; (800de6c <HAL_RCC_GetHCLKFreq+0x14>)
 800de5e:	681b      	ldr	r3, [r3, #0]
}
 800de60:	4618      	mov	r0, r3
 800de62:	46bd      	mov	sp, r7
 800de64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de68:	4770      	bx	lr
 800de6a:	bf00      	nop
 800de6c:	20000074 	.word	0x20000074

0800de70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800de74:	f7ff fff0 	bl	800de58 <HAL_RCC_GetHCLKFreq>
 800de78:	4601      	mov	r1, r0
 800de7a:	4b05      	ldr	r3, [pc, #20]	; (800de90 <HAL_RCC_GetPCLK1Freq+0x20>)
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	0a9b      	lsrs	r3, r3, #10
 800de80:	f003 0307 	and.w	r3, r3, #7
 800de84:	4a03      	ldr	r2, [pc, #12]	; (800de94 <HAL_RCC_GetPCLK1Freq+0x24>)
 800de86:	5cd3      	ldrb	r3, [r2, r3]
 800de88:	fa21 f303 	lsr.w	r3, r1, r3
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	40023800 	.word	0x40023800
 800de94:	080121f0 	.word	0x080121f0

0800de98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800de9c:	f7ff ffdc 	bl	800de58 <HAL_RCC_GetHCLKFreq>
 800dea0:	4601      	mov	r1, r0
 800dea2:	4b05      	ldr	r3, [pc, #20]	; (800deb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	0b5b      	lsrs	r3, r3, #13
 800dea8:	f003 0307 	and.w	r3, r3, #7
 800deac:	4a03      	ldr	r2, [pc, #12]	; (800debc <HAL_RCC_GetPCLK2Freq+0x24>)
 800deae:	5cd3      	ldrb	r3, [r2, r3]
 800deb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	40023800 	.word	0x40023800
 800debc:	080121f0 	.word	0x080121f0

0800dec0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800dec0:	b580      	push	{r7, lr}
 800dec2:	b082      	sub	sp, #8
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d101      	bne.n	800ded2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800dece:	2301      	movs	r3, #1
 800ded0:	e022      	b.n	800df18 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d105      	bne.n	800deea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	2200      	movs	r2, #0
 800dee2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f7f9 f9bf 	bl	8007268 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2203      	movs	r2, #3
 800deee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 f814 	bl	800df20 <HAL_SD_InitCard>
 800def8:	4603      	mov	r3, r0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d001      	beq.n	800df02 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	e00a      	b.n	800df18 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2201      	movs	r2, #1
 800df12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800df16:	2300      	movs	r3, #0
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df20:	b5b0      	push	{r4, r5, r7, lr}
 800df22:	b08e      	sub	sp, #56	; 0x38
 800df24:	af04      	add	r7, sp, #16
 800df26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800df28:	2300      	movs	r3, #0
 800df2a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800df2c:	2300      	movs	r3, #0
 800df2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800df30:	2300      	movs	r3, #0
 800df32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800df34:	2300      	movs	r3, #0
 800df36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800df38:	2300      	movs	r3, #0
 800df3a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800df3c:	2376      	movs	r3, #118	; 0x76
 800df3e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681d      	ldr	r5, [r3, #0]
 800df44:	466c      	mov	r4, sp
 800df46:	f107 0314 	add.w	r3, r7, #20
 800df4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800df4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df52:	f107 0308 	add.w	r3, r7, #8
 800df56:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df58:	4628      	mov	r0, r5
 800df5a:	f002 fe93 	bl	8010c84 <SDIO_Init>
 800df5e:	4603      	mov	r3, r0
 800df60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800df64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d001      	beq.n	800df70 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800df6c:	2301      	movs	r3, #1
 800df6e:	e031      	b.n	800dfd4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800df70:	4b1a      	ldr	r3, [pc, #104]	; (800dfdc <HAL_SD_InitCard+0xbc>)
 800df72:	2200      	movs	r2, #0
 800df74:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4618      	mov	r0, r3
 800df7c:	f002 fecb 	bl	8010d16 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800df80:	4b16      	ldr	r3, [pc, #88]	; (800dfdc <HAL_SD_InitCard+0xbc>)
 800df82:	2201      	movs	r2, #1
 800df84:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 fe84 	bl	800ec94 <SD_PowerON>
 800df8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d00b      	beq.n	800dfac <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2201      	movs	r2, #1
 800df98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfa0:	6a3b      	ldr	r3, [r7, #32]
 800dfa2:	431a      	orrs	r2, r3
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	e013      	b.n	800dfd4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 fda3 	bl	800eaf8 <SD_InitCard>
 800dfb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfb4:	6a3b      	ldr	r3, [r7, #32]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00b      	beq.n	800dfd2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	431a      	orrs	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	e000      	b.n	800dfd4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3728      	adds	r7, #40	; 0x28
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bdb0      	pop	{r4, r5, r7, pc}
 800dfdc:	422580a0 	.word	0x422580a0

0800dfe0 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b092      	sub	sp, #72	; 0x48
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
 800dfec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dfee:	f7fd fcc7 	bl	800b980 <HAL_GetTick>
 800dff2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d107      	bne.n	800e012 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e006:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e00e:	2301      	movs	r3, #1
 800e010:	e1d9      	b.n	800e3c6 <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	f040 81cc 	bne.w	800e3b8 <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2200      	movs	r2, #0
 800e024:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	441a      	add	r2, r3
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e030:	429a      	cmp	r2, r3
 800e032:	d907      	bls.n	800e044 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e038:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e040:	2301      	movs	r3, #1
 800e042:	e1c0      	b.n	800e3c6 <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2203      	movs	r2, #3
 800e048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	2200      	movs	r2, #0
 800e052:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d002      	beq.n	800e062 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800e05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e05e:	025b      	lsls	r3, r3, #9
 800e060:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e06a:	4618      	mov	r0, r3
 800e06c:	f002 fee6 	bl	8010e3c <SDMMC_CmdBlockLength>
 800e070:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800e072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e074:	2b00      	cmp	r3, #0
 800e076:	d00f      	beq.n	800e098 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	4a9b      	ldr	r2, [pc, #620]	; (800e2ec <HAL_SD_ReadBlocks+0x30c>)
 800e07e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e086:	431a      	orrs	r2, r3
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2201      	movs	r2, #1
 800e090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e094:	2301      	movs	r3, #1
 800e096:	e196      	b.n	800e3c6 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e09c:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	025b      	lsls	r3, r3, #9
 800e0a2:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e0a4:	2390      	movs	r3, #144	; 0x90
 800e0a6:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e0a8:	2302      	movs	r3, #2
 800e0aa:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f107 0214 	add.w	r2, r7, #20
 800e0bc:	4611      	mov	r1, r2
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f002 fe90 	bl	8010de4 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d90a      	bls.n	800e0e0 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2202      	movs	r2, #2
 800e0ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f002 fef4 	bl	8010ec4 <SDMMC_CmdReadMultiBlock>
 800e0dc:	6478      	str	r0, [r7, #68]	; 0x44
 800e0de:	e009      	b.n	800e0f4 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f002 fec7 	bl	8010e80 <SDMMC_CmdReadSingleBlock>
 800e0f2:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d012      	beq.n	800e120 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	4a7b      	ldr	r2, [pc, #492]	; (800e2ec <HAL_SD_ReadBlocks+0x30c>)
 800e100:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e108:	431a      	orrs	r2, r3
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	2201      	movs	r2, #1
 800e112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	2200      	movs	r2, #0
 800e11a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e11c:	2301      	movs	r3, #1
 800e11e:	e152      	b.n	800e3c6 <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800e124:	e061      	b.n	800e1ea <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e12c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e130:	2b00      	cmp	r3, #0
 800e132:	d03c      	beq.n	800e1ae <HAL_SD_ReadBlocks+0x1ce>
 800e134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e136:	2b00      	cmp	r3, #0
 800e138:	d039      	beq.n	800e1ae <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800e13a:	2300      	movs	r3, #0
 800e13c:	643b      	str	r3, [r7, #64]	; 0x40
 800e13e:	e033      	b.n	800e1a8 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	4618      	mov	r0, r3
 800e146:	f002 fdc8 	bl	8010cda <SDIO_ReadFIFO>
 800e14a:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800e14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14e:	b2da      	uxtb	r2, r3
 800e150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e152:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e156:	3301      	adds	r3, #1
 800e158:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e15c:	3b01      	subs	r3, #1
 800e15e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800e160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e162:	0a1b      	lsrs	r3, r3, #8
 800e164:	b2da      	uxtb	r2, r3
 800e166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e168:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e16c:	3301      	adds	r3, #1
 800e16e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e172:	3b01      	subs	r3, #1
 800e174:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e178:	0c1b      	lsrs	r3, r3, #16
 800e17a:	b2da      	uxtb	r2, r3
 800e17c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e17e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e182:	3301      	adds	r3, #1
 800e184:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e188:	3b01      	subs	r3, #1
 800e18a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800e18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18e:	0e1b      	lsrs	r3, r3, #24
 800e190:	b2da      	uxtb	r2, r3
 800e192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e194:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800e196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e198:	3301      	adds	r3, #1
 800e19a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800e1a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	643b      	str	r3, [r7, #64]	; 0x40
 800e1a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1aa:	2b07      	cmp	r3, #7
 800e1ac:	d9c8      	bls.n	800e140 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e1ae:	f7fd fbe7 	bl	800b980 <HAL_GetTick>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b6:	1ad3      	subs	r3, r2, r3
 800e1b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d902      	bls.n	800e1c4 <HAL_SD_ReadBlocks+0x1e4>
 800e1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d112      	bne.n	800e1ea <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4a48      	ldr	r2, [pc, #288]	; (800e2ec <HAL_SD_ReadBlocks+0x30c>)
 800e1ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800e1e6:	2303      	movs	r3, #3
 800e1e8:	e0ed      	b.n	800e3c6 <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1f0:	f240 332a 	movw	r3, #810	; 0x32a
 800e1f4:	4013      	ands	r3, r2
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d095      	beq.n	800e126 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e204:	2b00      	cmp	r3, #0
 800e206:	d022      	beq.n	800e24e <HAL_SD_ReadBlocks+0x26e>
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b01      	cmp	r3, #1
 800e20c:	d91f      	bls.n	800e24e <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e212:	2b03      	cmp	r3, #3
 800e214:	d01b      	beq.n	800e24e <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4618      	mov	r0, r3
 800e21c:	f002 feb8 	bl	8010f90 <SDMMC_CmdStopTransfer>
 800e220:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800e222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e224:	2b00      	cmp	r3, #0
 800e226:	d012      	beq.n	800e24e <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4a2f      	ldr	r2, [pc, #188]	; (800e2ec <HAL_SD_ReadBlocks+0x30c>)
 800e22e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e236:	431a      	orrs	r2, r3
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	2201      	movs	r2, #1
 800e240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2200      	movs	r2, #0
 800e248:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	e0bb      	b.n	800e3c6 <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e254:	f003 0308 	and.w	r3, r3, #8
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d012      	beq.n	800e282 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	4a22      	ldr	r2, [pc, #136]	; (800e2ec <HAL_SD_ReadBlocks+0x30c>)
 800e262:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e268:	f043 0208 	orr.w	r2, r3, #8
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2201      	movs	r2, #1
 800e274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2200      	movs	r2, #0
 800e27c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e27e:	2301      	movs	r3, #1
 800e280:	e0a1      	b.n	800e3c6 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e288:	f003 0302 	and.w	r3, r3, #2
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d012      	beq.n	800e2b6 <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	4a15      	ldr	r2, [pc, #84]	; (800e2ec <HAL_SD_ReadBlocks+0x30c>)
 800e296:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29c:	f043 0202 	orr.w	r2, r3, #2
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e087      	b.n	800e3c6 <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2bc:	f003 0320 	and.w	r3, r3, #32
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d064      	beq.n	800e38e <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a08      	ldr	r2, [pc, #32]	; (800e2ec <HAL_SD_ReadBlocks+0x30c>)
 800e2ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d0:	f043 0220 	orr.w	r2, r3, #32
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e06d      	b.n	800e3c6 <HAL_SD_ReadBlocks+0x3e6>
 800e2ea:	bf00      	nop
 800e2ec:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f002 fcf0 	bl	8010cda <SDIO_ReadFIFO>
 800e2fa:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800e2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fe:	b2da      	uxtb	r2, r3
 800e300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e302:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e306:	3301      	adds	r3, #1
 800e308:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e30a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e30c:	3b01      	subs	r3, #1
 800e30e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800e310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e312:	0a1b      	lsrs	r3, r3, #8
 800e314:	b2da      	uxtb	r2, r3
 800e316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e318:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e31c:	3301      	adds	r3, #1
 800e31e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e322:	3b01      	subs	r3, #1
 800e324:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800e326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e328:	0c1b      	lsrs	r3, r3, #16
 800e32a:	b2da      	uxtb	r2, r3
 800e32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e32e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e332:	3301      	adds	r3, #1
 800e334:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e338:	3b01      	subs	r3, #1
 800e33a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800e33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e33e:	0e1b      	lsrs	r3, r3, #24
 800e340:	b2da      	uxtb	r2, r3
 800e342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e344:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800e346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e348:	3301      	adds	r3, #1
 800e34a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800e34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e34e:	3b01      	subs	r3, #1
 800e350:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e352:	f7fd fb15 	bl	800b980 <HAL_GetTick>
 800e356:	4602      	mov	r2, r0
 800e358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e35a:	1ad3      	subs	r3, r2, r3
 800e35c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e35e:	429a      	cmp	r2, r3
 800e360:	d902      	bls.n	800e368 <HAL_SD_ReadBlocks+0x388>
 800e362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e364:	2b00      	cmp	r3, #0
 800e366:	d112      	bne.n	800e38e <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a18      	ldr	r2, [pc, #96]	; (800e3d0 <HAL_SD_ReadBlocks+0x3f0>)
 800e36e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e374:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	2201      	movs	r2, #1
 800e380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	2200      	movs	r2, #0
 800e388:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800e38a:	2301      	movs	r3, #1
 800e38c:	e01b      	b.n	800e3c6 <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d002      	beq.n	800e3a2 <HAL_SD_ReadBlocks+0x3c2>
 800e39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d1a6      	bne.n	800e2f0 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f240 523a 	movw	r2, #1338	; 0x53a
 800e3aa:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	2201      	movs	r2, #1
 800e3b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	e006      	b.n	800e3c6 <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e3c4:	2301      	movs	r3, #1
  }
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3748      	adds	r7, #72	; 0x48
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	004005ff 	.word	0x004005ff

0800e3d4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b092      	sub	sp, #72	; 0x48
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	607a      	str	r2, [r7, #4]
 800e3e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e3e2:	f7fd facd 	bl	800b980 <HAL_GetTick>
 800e3e6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d107      	bne.n	800e406 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e402:	2301      	movs	r3, #1
 800e404:	e184      	b.n	800e710 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	2b01      	cmp	r3, #1
 800e410:	f040 8177 	bne.w	800e702 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	2200      	movs	r2, #0
 800e418:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e41a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	441a      	add	r2, r3
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e424:	429a      	cmp	r2, r3
 800e426:	d907      	bls.n	800e438 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e42c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800e434:	2301      	movs	r3, #1
 800e436:	e16b      	b.n	800e710 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	2203      	movs	r2, #3
 800e43c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2200      	movs	r2, #0
 800e446:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d002      	beq.n	800e456 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800e450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e452:	025b      	lsls	r3, r3, #9
 800e454:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e45e:	4618      	mov	r0, r3
 800e460:	f002 fcec 	bl	8010e3c <SDMMC_CmdBlockLength>
 800e464:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800e466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00f      	beq.n	800e48c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4a9d      	ldr	r2, [pc, #628]	; (800e6e8 <HAL_SD_WriteBlocks+0x314>)
 800e472:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e47a:	431a      	orrs	r2, r3
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	2201      	movs	r2, #1
 800e484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e488:	2301      	movs	r3, #1
 800e48a:	e141      	b.n	800e710 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e48c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e490:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	025b      	lsls	r3, r3, #9
 800e496:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800e498:	2390      	movs	r3, #144	; 0x90
 800e49a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800e49c:	2300      	movs	r3, #0
 800e49e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	f107 0218 	add.w	r2, r7, #24
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f002 fc96 	bl	8010de4 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d90a      	bls.n	800e4d4 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2220      	movs	r2, #32
 800e4c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f002 fd3e 	bl	8010f4c <SDMMC_CmdWriteMultiBlock>
 800e4d0:	6478      	str	r0, [r7, #68]	; 0x44
 800e4d2:	e009      	b.n	800e4e8 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2210      	movs	r2, #16
 800e4d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	f002 fd11 	bl	8010f08 <SDMMC_CmdWriteSingleBlock>
 800e4e6:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d012      	beq.n	800e514 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4a7d      	ldr	r2, [pc, #500]	; (800e6e8 <HAL_SD_WriteBlocks+0x314>)
 800e4f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e4fc:	431a      	orrs	r2, r3
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2201      	movs	r2, #1
 800e506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2200      	movs	r2, #0
 800e50e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e510:	2301      	movs	r3, #1
 800e512:	e0fd      	b.n	800e710 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800e514:	69fb      	ldr	r3, [r7, #28]
 800e516:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800e518:	e065      	b.n	800e5e6 <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e520:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e524:	2b00      	cmp	r3, #0
 800e526:	d040      	beq.n	800e5aa <HAL_SD_WriteBlocks+0x1d6>
 800e528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d03d      	beq.n	800e5aa <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800e52e:	2300      	movs	r3, #0
 800e530:	643b      	str	r3, [r7, #64]	; 0x40
 800e532:	e037      	b.n	800e5a4 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800e534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e536:	781b      	ldrb	r3, [r3, #0]
 800e538:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e53c:	3301      	adds	r3, #1
 800e53e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e542:	3b01      	subs	r3, #1
 800e544:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800e546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	021a      	lsls	r2, r3, #8
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	4313      	orrs	r3, r2
 800e550:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e554:	3301      	adds	r3, #1
 800e556:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e55a:	3b01      	subs	r3, #1
 800e55c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800e55e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	041a      	lsls	r2, r3, #16
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	4313      	orrs	r3, r2
 800e568:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e56c:	3301      	adds	r3, #1
 800e56e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e572:	3b01      	subs	r3, #1
 800e574:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	061a      	lsls	r2, r3, #24
 800e57c:	697b      	ldr	r3, [r7, #20]
 800e57e:	4313      	orrs	r3, r2
 800e580:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800e582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e584:	3301      	adds	r3, #1
 800e586:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800e588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58a:	3b01      	subs	r3, #1
 800e58c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f107 0214 	add.w	r2, r7, #20
 800e596:	4611      	mov	r1, r2
 800e598:	4618      	mov	r0, r3
 800e59a:	f002 fbab 	bl	8010cf4 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800e59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	643b      	str	r3, [r7, #64]	; 0x40
 800e5a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5a6:	2b07      	cmp	r3, #7
 800e5a8:	d9c4      	bls.n	800e534 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800e5aa:	f7fd f9e9 	bl	800b980 <HAL_GetTick>
 800e5ae:	4602      	mov	r2, r0
 800e5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b2:	1ad3      	subs	r3, r2, r3
 800e5b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d902      	bls.n	800e5c0 <HAL_SD_WriteBlocks+0x1ec>
 800e5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d112      	bne.n	800e5e6 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a48      	ldr	r2, [pc, #288]	; (800e6e8 <HAL_SD_WriteBlocks+0x314>)
 800e5c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e5cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5ce:	431a      	orrs	r2, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800e5e2:	2303      	movs	r3, #3
 800e5e4:	e094      	b.n	800e710 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5ec:	f240 331a 	movw	r3, #794	; 0x31a
 800e5f0:	4013      	ands	r3, r2
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d091      	beq.n	800e51a <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e600:	2b00      	cmp	r3, #0
 800e602:	d022      	beq.n	800e64a <HAL_SD_WriteBlocks+0x276>
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	2b01      	cmp	r3, #1
 800e608:	d91f      	bls.n	800e64a <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e60e:	2b03      	cmp	r3, #3
 800e610:	d01b      	beq.n	800e64a <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4618      	mov	r0, r3
 800e618:	f002 fcba 	bl	8010f90 <SDMMC_CmdStopTransfer>
 800e61c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800e61e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e620:	2b00      	cmp	r3, #0
 800e622:	d012      	beq.n	800e64a <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a2f      	ldr	r2, [pc, #188]	; (800e6e8 <HAL_SD_WriteBlocks+0x314>)
 800e62a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e632:	431a      	orrs	r2, r3
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2201      	movs	r2, #1
 800e63c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2200      	movs	r2, #0
 800e644:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800e646:	2301      	movs	r3, #1
 800e648:	e062      	b.n	800e710 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e650:	f003 0308 	and.w	r3, r3, #8
 800e654:	2b00      	cmp	r3, #0
 800e656:	d012      	beq.n	800e67e <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a22      	ldr	r2, [pc, #136]	; (800e6e8 <HAL_SD_WriteBlocks+0x314>)
 800e65e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e664:	f043 0208 	orr.w	r2, r3, #8
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2201      	movs	r2, #1
 800e670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2200      	movs	r2, #0
 800e678:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	e048      	b.n	800e710 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e684:	f003 0302 	and.w	r3, r3, #2
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d012      	beq.n	800e6b2 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	4a15      	ldr	r2, [pc, #84]	; (800e6e8 <HAL_SD_WriteBlocks+0x314>)
 800e692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e698:	f043 0202 	orr.w	r2, r3, #2
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	e02e      	b.n	800e710 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b8:	f003 0310 	and.w	r3, r3, #16
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d015      	beq.n	800e6ec <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a08      	ldr	r2, [pc, #32]	; (800e6e8 <HAL_SD_WriteBlocks+0x314>)
 800e6c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6cc:	f043 0210 	orr.w	r2, r3, #16
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	e014      	b.n	800e710 <HAL_SD_WriteBlocks+0x33c>
 800e6e6:	bf00      	nop
 800e6e8:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	f240 523a 	movw	r2, #1338	; 0x53a
 800e6f4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	2201      	movs	r2, #1
 800e6fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800e6fe:	2300      	movs	r3, #0
 800e700:	e006      	b.n	800e710 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e706:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800e70e:	2301      	movs	r3, #1
  }
}
 800e710:	4618      	mov	r0, r3
 800e712:	3748      	adds	r7, #72	; 0x48
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e726:	0f9b      	lsrs	r3, r3, #30
 800e728:	b2da      	uxtb	r2, r3
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e732:	0e9b      	lsrs	r3, r3, #26
 800e734:	b2db      	uxtb	r3, r3
 800e736:	f003 030f 	and.w	r3, r3, #15
 800e73a:	b2da      	uxtb	r2, r3
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e744:	0e1b      	lsrs	r3, r3, #24
 800e746:	b2db      	uxtb	r3, r3
 800e748:	f003 0303 	and.w	r3, r3, #3
 800e74c:	b2da      	uxtb	r2, r3
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e756:	0c1b      	lsrs	r3, r3, #16
 800e758:	b2da      	uxtb	r2, r3
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e762:	0a1b      	lsrs	r3, r3, #8
 800e764:	b2da      	uxtb	r2, r3
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e76e:	b2da      	uxtb	r2, r3
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e778:	0d1b      	lsrs	r3, r3, #20
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e784:	0c1b      	lsrs	r3, r3, #16
 800e786:	b2db      	uxtb	r3, r3
 800e788:	f003 030f 	and.w	r3, r3, #15
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e796:	0bdb      	lsrs	r3, r3, #15
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	f003 0301 	and.w	r3, r3, #1
 800e79e:	b2da      	uxtb	r2, r3
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7a8:	0b9b      	lsrs	r3, r3, #14
 800e7aa:	b2db      	uxtb	r3, r3
 800e7ac:	f003 0301 	and.w	r3, r3, #1
 800e7b0:	b2da      	uxtb	r2, r3
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7ba:	0b5b      	lsrs	r3, r3, #13
 800e7bc:	b2db      	uxtb	r3, r3
 800e7be:	f003 0301 	and.w	r3, r3, #1
 800e7c2:	b2da      	uxtb	r2, r3
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7cc:	0b1b      	lsrs	r3, r3, #12
 800e7ce:	b2db      	uxtb	r3, r3
 800e7d0:	f003 0301 	and.w	r3, r3, #1
 800e7d4:	b2da      	uxtb	r2, r3
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	2200      	movs	r2, #0
 800e7de:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d163      	bne.n	800e8b0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7ec:	009a      	lsls	r2, r3, #2
 800e7ee:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e7f2:	4013      	ands	r3, r2
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e7f8:	0f92      	lsrs	r2, r2, #30
 800e7fa:	431a      	orrs	r2, r3
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e804:	0edb      	lsrs	r3, r3, #27
 800e806:	b2db      	uxtb	r3, r3
 800e808:	f003 0307 	and.w	r3, r3, #7
 800e80c:	b2da      	uxtb	r2, r3
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e816:	0e1b      	lsrs	r3, r3, #24
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	f003 0307 	and.w	r3, r3, #7
 800e81e:	b2da      	uxtb	r2, r3
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e828:	0d5b      	lsrs	r3, r3, #21
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	f003 0307 	and.w	r3, r3, #7
 800e830:	b2da      	uxtb	r2, r3
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e83a:	0c9b      	lsrs	r3, r3, #18
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	f003 0307 	and.w	r3, r3, #7
 800e842:	b2da      	uxtb	r2, r3
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e84c:	0bdb      	lsrs	r3, r3, #15
 800e84e:	b2db      	uxtb	r3, r3
 800e850:	f003 0307 	and.w	r3, r3, #7
 800e854:	b2da      	uxtb	r2, r3
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	691b      	ldr	r3, [r3, #16]
 800e85e:	1c5a      	adds	r2, r3, #1
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	7e1b      	ldrb	r3, [r3, #24]
 800e868:	b2db      	uxtb	r3, r3
 800e86a:	f003 0307 	and.w	r3, r3, #7
 800e86e:	3302      	adds	r3, #2
 800e870:	2201      	movs	r2, #1
 800e872:	fa02 f303 	lsl.w	r3, r2, r3
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e87a:	fb02 f203 	mul.w	r2, r2, r3
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	7a1b      	ldrb	r3, [r3, #8]
 800e886:	b2db      	uxtb	r3, r3
 800e888:	f003 030f 	and.w	r3, r3, #15
 800e88c:	2201      	movs	r2, #1
 800e88e:	409a      	lsls	r2, r3
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e898:	687a      	ldr	r2, [r7, #4]
 800e89a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e89c:	0a52      	lsrs	r2, r2, #9
 800e89e:	fb02 f203 	mul.w	r2, r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8ac:	661a      	str	r2, [r3, #96]	; 0x60
 800e8ae:	e031      	b.n	800e914 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8b4:	2b01      	cmp	r3, #1
 800e8b6:	d11d      	bne.n	800e8f4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8bc:	041b      	lsls	r3, r3, #16
 800e8be:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8c6:	0c1b      	lsrs	r3, r3, #16
 800e8c8:	431a      	orrs	r2, r3
 800e8ca:	683b      	ldr	r3, [r7, #0]
 800e8cc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	691b      	ldr	r3, [r3, #16]
 800e8d2:	3301      	adds	r3, #1
 800e8d4:	029a      	lsls	r2, r3, #10
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8e8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	661a      	str	r2, [r3, #96]	; 0x60
 800e8f2:	e00f      	b.n	800e914 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	4a58      	ldr	r2, [pc, #352]	; (800ea5c <HAL_SD_GetCardCSD+0x344>)
 800e8fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e900:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2201      	movs	r2, #1
 800e90c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e910:	2301      	movs	r3, #1
 800e912:	e09d      	b.n	800ea50 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e918:	0b9b      	lsrs	r3, r3, #14
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	f003 0301 	and.w	r3, r3, #1
 800e920:	b2da      	uxtb	r2, r3
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e92a:	09db      	lsrs	r3, r3, #7
 800e92c:	b2db      	uxtb	r3, r3
 800e92e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e932:	b2da      	uxtb	r2, r3
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e93c:	b2db      	uxtb	r3, r3
 800e93e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e942:	b2da      	uxtb	r2, r3
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e94c:	0fdb      	lsrs	r3, r3, #31
 800e94e:	b2da      	uxtb	r2, r3
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e958:	0f5b      	lsrs	r3, r3, #29
 800e95a:	b2db      	uxtb	r3, r3
 800e95c:	f003 0303 	and.w	r3, r3, #3
 800e960:	b2da      	uxtb	r2, r3
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e96a:	0e9b      	lsrs	r3, r3, #26
 800e96c:	b2db      	uxtb	r3, r3
 800e96e:	f003 0307 	and.w	r3, r3, #7
 800e972:	b2da      	uxtb	r2, r3
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e97c:	0d9b      	lsrs	r3, r3, #22
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	f003 030f 	and.w	r3, r3, #15
 800e984:	b2da      	uxtb	r2, r3
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e98e:	0d5b      	lsrs	r3, r3, #21
 800e990:	b2db      	uxtb	r3, r3
 800e992:	f003 0301 	and.w	r3, r3, #1
 800e996:	b2da      	uxtb	r2, r3
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	2200      	movs	r2, #0
 800e9a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9aa:	0c1b      	lsrs	r3, r3, #16
 800e9ac:	b2db      	uxtb	r3, r3
 800e9ae:	f003 0301 	and.w	r3, r3, #1
 800e9b2:	b2da      	uxtb	r2, r3
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9be:	0bdb      	lsrs	r3, r3, #15
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	f003 0301 	and.w	r3, r3, #1
 800e9c6:	b2da      	uxtb	r2, r3
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9d2:	0b9b      	lsrs	r3, r3, #14
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	f003 0301 	and.w	r3, r3, #1
 800e9da:	b2da      	uxtb	r2, r3
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9e6:	0b5b      	lsrs	r3, r3, #13
 800e9e8:	b2db      	uxtb	r3, r3
 800e9ea:	f003 0301 	and.w	r3, r3, #1
 800e9ee:	b2da      	uxtb	r2, r3
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9fa:	0b1b      	lsrs	r3, r3, #12
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	f003 0301 	and.w	r3, r3, #1
 800ea02:	b2da      	uxtb	r2, r3
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea0e:	0a9b      	lsrs	r3, r3, #10
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	f003 0303 	and.w	r3, r3, #3
 800ea16:	b2da      	uxtb	r2, r3
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea22:	0a1b      	lsrs	r3, r3, #8
 800ea24:	b2db      	uxtb	r3, r3
 800ea26:	f003 0303 	and.w	r3, r3, #3
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	683b      	ldr	r3, [r7, #0]
 800ea2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea36:	085b      	lsrs	r3, r3, #1
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea3e:	b2da      	uxtb	r2, r3
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	2201      	movs	r2, #1
 800ea4a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr
 800ea5c:	004005ff 	.word	0x004005ff

0800ea60 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b083      	sub	sp, #12
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea6e:	683b      	ldr	r3, [r7, #0]
 800ea70:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b086      	sub	sp, #24
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800eac0:	2300      	movs	r3, #0
 800eac2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800eac4:	f107 030c 	add.w	r3, r7, #12
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f970 	bl	800edb0 <SD_SendStatus>
 800ead0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d005      	beq.n	800eae4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	431a      	orrs	r2, r3
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	0a5b      	lsrs	r3, r3, #9
 800eae8:	f003 030f 	and.w	r3, r3, #15
 800eaec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800eaee:	693b      	ldr	r3, [r7, #16]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3718      	adds	r7, #24
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800eaf8:	b5b0      	push	{r4, r5, r7, lr}
 800eafa:	b094      	sub	sp, #80	; 0x50
 800eafc:	af04      	add	r7, sp, #16
 800eafe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800eb00:	2301      	movs	r3, #1
 800eb02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f002 f913 	bl	8010d34 <SDIO_GetPowerState>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d102      	bne.n	800eb1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800eb18:	e0b7      	b.n	800ec8a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb1e:	2b03      	cmp	r3, #3
 800eb20:	d02f      	beq.n	800eb82 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	4618      	mov	r0, r3
 800eb28:	f002 faf9 	bl	801111e <SDMMC_CmdSendCID>
 800eb2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d001      	beq.n	800eb38 <SD_InitCard+0x40>
    {
      return errorstate;
 800eb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb36:	e0a8      	b.n	800ec8a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	4618      	mov	r0, r3
 800eb40:	f002 f93d 	bl	8010dbe <SDIO_GetResponse>
 800eb44:	4602      	mov	r2, r0
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	2104      	movs	r1, #4
 800eb50:	4618      	mov	r0, r3
 800eb52:	f002 f934 	bl	8010dbe <SDIO_GetResponse>
 800eb56:	4602      	mov	r2, r0
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2108      	movs	r1, #8
 800eb62:	4618      	mov	r0, r3
 800eb64:	f002 f92b 	bl	8010dbe <SDIO_GetResponse>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	210c      	movs	r1, #12
 800eb74:	4618      	mov	r0, r3
 800eb76:	f002 f922 	bl	8010dbe <SDIO_GetResponse>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb86:	2b03      	cmp	r3, #3
 800eb88:	d00d      	beq.n	800eba6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	f107 020e 	add.w	r2, r7, #14
 800eb92:	4611      	mov	r1, r2
 800eb94:	4618      	mov	r0, r3
 800eb96:	f002 faff 	bl	8011198 <SDMMC_CmdSetRelAdd>
 800eb9a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800eb9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d001      	beq.n	800eba6 <SD_InitCard+0xae>
    {
      return errorstate;
 800eba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eba4:	e071      	b.n	800ec8a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebaa:	2b03      	cmp	r3, #3
 800ebac:	d036      	beq.n	800ec1c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ebae:	89fb      	ldrh	r3, [r7, #14]
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebbe:	041b      	lsls	r3, r3, #16
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	4610      	mov	r0, r2
 800ebc4:	f002 fac9 	bl	801115a <SDMMC_CmdSendCSD>
 800ebc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ebca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d001      	beq.n	800ebd4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ebd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebd2:	e05a      	b.n	800ec8a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2100      	movs	r1, #0
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f002 f8ef 	bl	8010dbe <SDIO_GetResponse>
 800ebe0:	4602      	mov	r2, r0
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	2104      	movs	r1, #4
 800ebec:	4618      	mov	r0, r3
 800ebee:	f002 f8e6 	bl	8010dbe <SDIO_GetResponse>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	2108      	movs	r1, #8
 800ebfe:	4618      	mov	r0, r3
 800ec00:	f002 f8dd 	bl	8010dbe <SDIO_GetResponse>
 800ec04:	4602      	mov	r2, r0
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	210c      	movs	r1, #12
 800ec10:	4618      	mov	r0, r3
 800ec12:	f002 f8d4 	bl	8010dbe <SDIO_GetResponse>
 800ec16:	4602      	mov	r2, r0
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	2104      	movs	r1, #4
 800ec22:	4618      	mov	r0, r3
 800ec24:	f002 f8cb 	bl	8010dbe <SDIO_GetResponse>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	0d1a      	lsrs	r2, r3, #20
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ec30:	f107 0310 	add.w	r3, r7, #16
 800ec34:	4619      	mov	r1, r3
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f7ff fd6e 	bl	800e718 <HAL_SD_GetCardCSD>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d002      	beq.n	800ec48 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ec42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ec46:	e020      	b.n	800ec8a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6819      	ldr	r1, [r3, #0]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec50:	041b      	lsls	r3, r3, #16
 800ec52:	f04f 0400 	mov.w	r4, #0
 800ec56:	461a      	mov	r2, r3
 800ec58:	4623      	mov	r3, r4
 800ec5a:	4608      	mov	r0, r1
 800ec5c:	f002 f9ba 	bl	8010fd4 <SDMMC_CmdSelDesel>
 800ec60:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d001      	beq.n	800ec6c <SD_InitCard+0x174>
  {
    return errorstate;
 800ec68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec6a:	e00e      	b.n	800ec8a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681d      	ldr	r5, [r3, #0]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	466c      	mov	r4, sp
 800ec74:	f103 0210 	add.w	r2, r3, #16
 800ec78:	ca07      	ldmia	r2, {r0, r1, r2}
 800ec7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ec7e:	3304      	adds	r3, #4
 800ec80:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ec82:	4628      	mov	r0, r5
 800ec84:	f001 fffe 	bl	8010c84 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ec88:	2300      	movs	r3, #0
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3740      	adds	r7, #64	; 0x40
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ec94 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ec9c:	2300      	movs	r3, #0
 800ec9e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800eca0:	2300      	movs	r3, #0
 800eca2:	617b      	str	r3, [r7, #20]
 800eca4:	2300      	movs	r3, #0
 800eca6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	4618      	mov	r0, r3
 800ecae:	f002 f9b4 	bl	801101a <SDMMC_CmdGoIdleState>
 800ecb2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d001      	beq.n	800ecbe <SD_PowerON+0x2a>
  {
    return errorstate;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	e072      	b.n	800eda4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	f002 f9c7 	bl	8011056 <SDMMC_CmdOperCond>
 800ecc8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d00d      	beq.n	800ecec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f002 f99d 	bl	801101a <SDMMC_CmdGoIdleState>
 800ece0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d004      	beq.n	800ecf2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	e05b      	b.n	800eda4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ecf6:	2b01      	cmp	r3, #1
 800ecf8:	d137      	bne.n	800ed6a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2100      	movs	r1, #0
 800ed00:	4618      	mov	r0, r3
 800ed02:	f002 f9c7 	bl	8011094 <SDMMC_CmdAppCommand>
 800ed06:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d02d      	beq.n	800ed6a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ed12:	e047      	b.n	800eda4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2100      	movs	r1, #0
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f002 f9ba 	bl	8011094 <SDMMC_CmdAppCommand>
 800ed20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d001      	beq.n	800ed2c <SD_PowerON+0x98>
    {
      return errorstate;
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	e03b      	b.n	800eda4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	491e      	ldr	r1, [pc, #120]	; (800edac <SD_PowerON+0x118>)
 800ed32:	4618      	mov	r0, r3
 800ed34:	f002 f9d0 	bl	80110d8 <SDMMC_CmdAppOperCommand>
 800ed38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d002      	beq.n	800ed46 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ed44:	e02e      	b.n	800eda4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2100      	movs	r1, #0
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f002 f836 	bl	8010dbe <SDIO_GetResponse>
 800ed52:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	0fdb      	lsrs	r3, r3, #31
 800ed58:	2b01      	cmp	r3, #1
 800ed5a:	d101      	bne.n	800ed60 <SD_PowerON+0xcc>
 800ed5c:	2301      	movs	r3, #1
 800ed5e:	e000      	b.n	800ed62 <SD_PowerON+0xce>
 800ed60:	2300      	movs	r3, #0
 800ed62:	613b      	str	r3, [r7, #16]

    count++;
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	3301      	adds	r3, #1
 800ed68:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ed70:	4293      	cmp	r3, r2
 800ed72:	d802      	bhi.n	800ed7a <SD_PowerON+0xe6>
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d0cc      	beq.n	800ed14 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ed80:	4293      	cmp	r3, r2
 800ed82:	d902      	bls.n	800ed8a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ed84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ed88:	e00c      	b.n	800eda4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d003      	beq.n	800ed9c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2201      	movs	r2, #1
 800ed98:	645a      	str	r2, [r3, #68]	; 0x44
 800ed9a:	e002      	b.n	800eda2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800eda2:	2300      	movs	r3, #0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3718      	adds	r7, #24
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	c1100000 	.word	0xc1100000

0800edb0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b084      	sub	sp, #16
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d102      	bne.n	800edc6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800edc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800edc4:	e018      	b.n	800edf8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edce:	041b      	lsls	r3, r3, #16
 800edd0:	4619      	mov	r1, r3
 800edd2:	4610      	mov	r0, r2
 800edd4:	f002 fa01 	bl	80111da <SDMMC_CmdSendStatus>
 800edd8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	e009      	b.n	800edf8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2100      	movs	r1, #0
 800edea:	4618      	mov	r0, r3
 800edec:	f001 ffe7 	bl	8010dbe <SDIO_GetResponse>
 800edf0:	4602      	mov	r2, r0
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3710      	adds	r7, #16
 800edfc:	46bd      	mov	sp, r7
 800edfe:	bd80      	pop	{r7, pc}

0800ee00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b082      	sub	sp, #8
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d101      	bne.n	800ee12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee0e:	2301      	movs	r3, #1
 800ee10:	e056      	b.n	800eec0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	2200      	movs	r2, #0
 800ee16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d106      	bne.n	800ee32 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f7f8 fa83 	bl	8007338 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2202      	movs	r2, #2
 800ee36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee48:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	685a      	ldr	r2, [r3, #4]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	431a      	orrs	r2, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	431a      	orrs	r2, r3
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	691b      	ldr	r3, [r3, #16]
 800ee5e:	431a      	orrs	r2, r3
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	695b      	ldr	r3, [r3, #20]
 800ee64:	431a      	orrs	r2, r3
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	699b      	ldr	r3, [r3, #24]
 800ee6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ee6e:	431a      	orrs	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	69db      	ldr	r3, [r3, #28]
 800ee74:	431a      	orrs	r2, r3
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	6a1b      	ldr	r3, [r3, #32]
 800ee7a:	ea42 0103 	orr.w	r1, r2, r3
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	430a      	orrs	r2, r1
 800ee88:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	699b      	ldr	r3, [r3, #24]
 800ee8e:	0c1b      	lsrs	r3, r3, #16
 800ee90:	f003 0104 	and.w	r1, r3, #4
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	430a      	orrs	r2, r1
 800ee9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	69da      	ldr	r2, [r3, #28]
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800eeae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2201      	movs	r2, #1
 800eeba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800eebe:	2300      	movs	r3, #0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3708      	adds	r7, #8
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd80      	pop	{r7, pc}

0800eec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d101      	bne.n	800eeda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eed6:	2301      	movs	r3, #1
 800eed8:	e01d      	b.n	800ef16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eee0:	b2db      	uxtb	r3, r3
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d106      	bne.n	800eef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f7f8 fb84 	bl	80075fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2202      	movs	r2, #2
 800eef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	3304      	adds	r3, #4
 800ef04:	4619      	mov	r1, r3
 800ef06:	4610      	mov	r0, r2
 800ef08:	f000 fc3a 	bl	800f780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef14:	2300      	movs	r3, #0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3708      	adds	r7, #8
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ef1e:	b480      	push	{r7}
 800ef20:	b085      	sub	sp, #20
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	68da      	ldr	r2, [r3, #12]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f042 0201 	orr.w	r2, r2, #1
 800ef34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	689b      	ldr	r3, [r3, #8]
 800ef3c:	f003 0307 	and.w	r3, r3, #7
 800ef40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2b06      	cmp	r3, #6
 800ef46:	d007      	beq.n	800ef58 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	681a      	ldr	r2, [r3, #0]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	f042 0201 	orr.w	r2, r2, #1
 800ef56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ef58:	2300      	movs	r3, #0
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3714      	adds	r7, #20
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef64:	4770      	bx	lr

0800ef66 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ef66:	b480      	push	{r7}
 800ef68:	b083      	sub	sp, #12
 800ef6a:	af00      	add	r7, sp, #0
 800ef6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	68da      	ldr	r2, [r3, #12]
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	f022 0201 	bic.w	r2, r2, #1
 800ef7c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	6a1a      	ldr	r2, [r3, #32]
 800ef84:	f241 1311 	movw	r3, #4369	; 0x1111
 800ef88:	4013      	ands	r3, r2
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d10f      	bne.n	800efae <HAL_TIM_Base_Stop_IT+0x48>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	6a1a      	ldr	r2, [r3, #32]
 800ef94:	f240 4344 	movw	r3, #1092	; 0x444
 800ef98:	4013      	ands	r3, r2
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d107      	bne.n	800efae <HAL_TIM_Base_Stop_IT+0x48>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f022 0201 	bic.w	r2, r2, #1
 800efac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800efae:	2300      	movs	r3, #0
}
 800efb0:	4618      	mov	r0, r3
 800efb2:	370c      	adds	r7, #12
 800efb4:	46bd      	mov	sp, r7
 800efb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efba:	4770      	bx	lr

0800efbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d101      	bne.n	800efce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800efca:	2301      	movs	r3, #1
 800efcc:	e01d      	b.n	800f00a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d106      	bne.n	800efe8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f7f8 fa10 	bl	8007408 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2202      	movs	r2, #2
 800efec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	3304      	adds	r3, #4
 800eff8:	4619      	mov	r1, r3
 800effa:	4610      	mov	r0, r2
 800effc:	f000 fbc0 	bl	800f780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	2201      	movs	r2, #1
 800f004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f008:	2300      	movs	r3, #0
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3708      	adds	r7, #8
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
	...

0800f014 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2201      	movs	r2, #1
 800f024:	6839      	ldr	r1, [r7, #0]
 800f026:	4618      	mov	r0, r3
 800f028:	f000 fe94 	bl	800fd54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a15      	ldr	r2, [pc, #84]	; (800f088 <HAL_TIM_PWM_Start+0x74>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d004      	beq.n	800f040 <HAL_TIM_PWM_Start+0x2c>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4a14      	ldr	r2, [pc, #80]	; (800f08c <HAL_TIM_PWM_Start+0x78>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d101      	bne.n	800f044 <HAL_TIM_PWM_Start+0x30>
 800f040:	2301      	movs	r3, #1
 800f042:	e000      	b.n	800f046 <HAL_TIM_PWM_Start+0x32>
 800f044:	2300      	movs	r3, #0
 800f046:	2b00      	cmp	r3, #0
 800f048:	d007      	beq.n	800f05a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	f003 0307 	and.w	r3, r3, #7
 800f064:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2b06      	cmp	r3, #6
 800f06a:	d007      	beq.n	800f07c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f042 0201 	orr.w	r2, r2, #1
 800f07a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f07c:	2300      	movs	r3, #0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3710      	adds	r7, #16
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}
 800f086:	bf00      	nop
 800f088:	40010000 	.word	0x40010000
 800f08c:	40010400 	.word	0x40010400

0800f090 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d101      	bne.n	800f0a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f0a0:	2301      	movs	r3, #1
 800f0a2:	e083      	b.n	800f1ac <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0aa:	b2db      	uxtb	r3, r3
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d106      	bne.n	800f0be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7f8 f9dd 	bl	8007478 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2202      	movs	r2, #2
 800f0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	689b      	ldr	r3, [r3, #8]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	6812      	ldr	r2, [r2, #0]
 800f0d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f0d4:	f023 0307 	bic.w	r3, r3, #7
 800f0d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	3304      	adds	r3, #4
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	4610      	mov	r0, r2
 800f0e6:	f000 fb4b 	bl	800f780 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	699b      	ldr	r3, [r3, #24]
 800f0f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	6a1b      	ldr	r3, [r3, #32]
 800f100:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	697a      	ldr	r2, [r7, #20]
 800f108:	4313      	orrs	r3, r2
 800f10a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f112:	f023 0303 	bic.w	r3, r3, #3
 800f116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	689a      	ldr	r2, [r3, #8]
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	699b      	ldr	r3, [r3, #24]
 800f120:	021b      	lsls	r3, r3, #8
 800f122:	4313      	orrs	r3, r2
 800f124:	693a      	ldr	r2, [r7, #16]
 800f126:	4313      	orrs	r3, r2
 800f128:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f12a:	693b      	ldr	r3, [r7, #16]
 800f12c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f130:	f023 030c 	bic.w	r3, r3, #12
 800f134:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f13c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	68da      	ldr	r2, [r3, #12]
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	69db      	ldr	r3, [r3, #28]
 800f14a:	021b      	lsls	r3, r3, #8
 800f14c:	4313      	orrs	r3, r2
 800f14e:	693a      	ldr	r2, [r7, #16]
 800f150:	4313      	orrs	r3, r2
 800f152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	691b      	ldr	r3, [r3, #16]
 800f158:	011a      	lsls	r2, r3, #4
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	6a1b      	ldr	r3, [r3, #32]
 800f15e:	031b      	lsls	r3, r3, #12
 800f160:	4313      	orrs	r3, r2
 800f162:	693a      	ldr	r2, [r7, #16]
 800f164:	4313      	orrs	r3, r2
 800f166:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f16e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f176:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	685a      	ldr	r2, [r3, #4]
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	695b      	ldr	r3, [r3, #20]
 800f180:	011b      	lsls	r3, r3, #4
 800f182:	4313      	orrs	r3, r2
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	4313      	orrs	r3, r2
 800f188:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	697a      	ldr	r2, [r7, #20]
 800f190:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	693a      	ldr	r2, [r7, #16]
 800f198:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1aa:	2300      	movs	r3, #0
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3718      	adds	r7, #24
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b082      	sub	sp, #8
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d002      	beq.n	800f1ca <HAL_TIM_Encoder_Start+0x16>
 800f1c4:	2b04      	cmp	r3, #4
 800f1c6:	d008      	beq.n	800f1da <HAL_TIM_Encoder_Start+0x26>
 800f1c8:	e00f      	b.n	800f1ea <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	2100      	movs	r1, #0
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f000 fdbe 	bl	800fd54 <TIM_CCxChannelCmd>
      break;
 800f1d8:	e016      	b.n	800f208 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	2104      	movs	r1, #4
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f000 fdb6 	bl	800fd54 <TIM_CCxChannelCmd>
      break;
 800f1e8:	e00e      	b.n	800f208 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	2100      	movs	r1, #0
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f000 fdae 	bl	800fd54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	2104      	movs	r1, #4
 800f200:	4618      	mov	r0, r3
 800f202:	f000 fda7 	bl	800fd54 <TIM_CCxChannelCmd>
      break;
 800f206:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	681a      	ldr	r2, [r3, #0]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	f042 0201 	orr.w	r2, r2, #1
 800f216:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}

0800f222 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f222:	b580      	push	{r7, lr}
 800f224:	b082      	sub	sp, #8
 800f226:	af00      	add	r7, sp, #0
 800f228:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	691b      	ldr	r3, [r3, #16]
 800f230:	f003 0302 	and.w	r3, r3, #2
 800f234:	2b02      	cmp	r3, #2
 800f236:	d122      	bne.n	800f27e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	68db      	ldr	r3, [r3, #12]
 800f23e:	f003 0302 	and.w	r3, r3, #2
 800f242:	2b02      	cmp	r3, #2
 800f244:	d11b      	bne.n	800f27e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f06f 0202 	mvn.w	r2, #2
 800f24e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2201      	movs	r2, #1
 800f254:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	699b      	ldr	r3, [r3, #24]
 800f25c:	f003 0303 	and.w	r3, r3, #3
 800f260:	2b00      	cmp	r3, #0
 800f262:	d003      	beq.n	800f26c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 fa6c 	bl	800f742 <HAL_TIM_IC_CaptureCallback>
 800f26a:	e005      	b.n	800f278 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 fa5e 	bl	800f72e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 fa6f 	bl	800f756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2200      	movs	r2, #0
 800f27c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	691b      	ldr	r3, [r3, #16]
 800f284:	f003 0304 	and.w	r3, r3, #4
 800f288:	2b04      	cmp	r3, #4
 800f28a:	d122      	bne.n	800f2d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	68db      	ldr	r3, [r3, #12]
 800f292:	f003 0304 	and.w	r3, r3, #4
 800f296:	2b04      	cmp	r3, #4
 800f298:	d11b      	bne.n	800f2d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f06f 0204 	mvn.w	r2, #4
 800f2a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2202      	movs	r2, #2
 800f2a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	699b      	ldr	r3, [r3, #24]
 800f2b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d003      	beq.n	800f2c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f000 fa42 	bl	800f742 <HAL_TIM_IC_CaptureCallback>
 800f2be:	e005      	b.n	800f2cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 fa34 	bl	800f72e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f000 fa45 	bl	800f756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	691b      	ldr	r3, [r3, #16]
 800f2d8:	f003 0308 	and.w	r3, r3, #8
 800f2dc:	2b08      	cmp	r3, #8
 800f2de:	d122      	bne.n	800f326 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	f003 0308 	and.w	r3, r3, #8
 800f2ea:	2b08      	cmp	r3, #8
 800f2ec:	d11b      	bne.n	800f326 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f06f 0208 	mvn.w	r2, #8
 800f2f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2204      	movs	r2, #4
 800f2fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	69db      	ldr	r3, [r3, #28]
 800f304:	f003 0303 	and.w	r3, r3, #3
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d003      	beq.n	800f314 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f000 fa18 	bl	800f742 <HAL_TIM_IC_CaptureCallback>
 800f312:	e005      	b.n	800f320 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 fa0a 	bl	800f72e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fa1b 	bl	800f756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2200      	movs	r2, #0
 800f324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	691b      	ldr	r3, [r3, #16]
 800f32c:	f003 0310 	and.w	r3, r3, #16
 800f330:	2b10      	cmp	r3, #16
 800f332:	d122      	bne.n	800f37a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	f003 0310 	and.w	r3, r3, #16
 800f33e:	2b10      	cmp	r3, #16
 800f340:	d11b      	bne.n	800f37a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f06f 0210 	mvn.w	r2, #16
 800f34a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2208      	movs	r2, #8
 800f350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	69db      	ldr	r3, [r3, #28]
 800f358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d003      	beq.n	800f368 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 f9ee 	bl	800f742 <HAL_TIM_IC_CaptureCallback>
 800f366:	e005      	b.n	800f374 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	f000 f9e0 	bl	800f72e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f000 f9f1 	bl	800f756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2200      	movs	r2, #0
 800f378:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	691b      	ldr	r3, [r3, #16]
 800f380:	f003 0301 	and.w	r3, r3, #1
 800f384:	2b01      	cmp	r3, #1
 800f386:	d10e      	bne.n	800f3a6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	f003 0301 	and.w	r3, r3, #1
 800f392:	2b01      	cmp	r3, #1
 800f394:	d107      	bne.n	800f3a6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f06f 0201 	mvn.w	r2, #1
 800f39e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f7f8 fba7 	bl	8007af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3b0:	2b80      	cmp	r3, #128	; 0x80
 800f3b2:	d10e      	bne.n	800f3d2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3be:	2b80      	cmp	r3, #128	; 0x80
 800f3c0:	d107      	bne.n	800f3d2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f3ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f000 fdbf 	bl	800ff50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3dc:	2b40      	cmp	r3, #64	; 0x40
 800f3de:	d10e      	bne.n	800f3fe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	68db      	ldr	r3, [r3, #12]
 800f3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3ea:	2b40      	cmp	r3, #64	; 0x40
 800f3ec:	d107      	bne.n	800f3fe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f3f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f000 f9b6 	bl	800f76a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	691b      	ldr	r3, [r3, #16]
 800f404:	f003 0320 	and.w	r3, r3, #32
 800f408:	2b20      	cmp	r3, #32
 800f40a:	d10e      	bne.n	800f42a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	f003 0320 	and.w	r3, r3, #32
 800f416:	2b20      	cmp	r3, #32
 800f418:	d107      	bne.n	800f42a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f06f 0220 	mvn.w	r2, #32
 800f422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 fd89 	bl	800ff3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f42a:	bf00      	nop
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
	...

0800f434 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
 800f43a:	60f8      	str	r0, [r7, #12]
 800f43c:	60b9      	str	r1, [r7, #8]
 800f43e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f446:	2b01      	cmp	r3, #1
 800f448:	d101      	bne.n	800f44e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f44a:	2302      	movs	r3, #2
 800f44c:	e0b4      	b.n	800f5b8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	2201      	movs	r2, #1
 800f452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	2202      	movs	r2, #2
 800f45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2b0c      	cmp	r3, #12
 800f462:	f200 809f 	bhi.w	800f5a4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f466:	a201      	add	r2, pc, #4	; (adr r2, 800f46c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f46c:	0800f4a1 	.word	0x0800f4a1
 800f470:	0800f5a5 	.word	0x0800f5a5
 800f474:	0800f5a5 	.word	0x0800f5a5
 800f478:	0800f5a5 	.word	0x0800f5a5
 800f47c:	0800f4e1 	.word	0x0800f4e1
 800f480:	0800f5a5 	.word	0x0800f5a5
 800f484:	0800f5a5 	.word	0x0800f5a5
 800f488:	0800f5a5 	.word	0x0800f5a5
 800f48c:	0800f523 	.word	0x0800f523
 800f490:	0800f5a5 	.word	0x0800f5a5
 800f494:	0800f5a5 	.word	0x0800f5a5
 800f498:	0800f5a5 	.word	0x0800f5a5
 800f49c:	0800f563 	.word	0x0800f563
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	68b9      	ldr	r1, [r7, #8]
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f000 fa0a 	bl	800f8c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	699a      	ldr	r2, [r3, #24]
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	f042 0208 	orr.w	r2, r2, #8
 800f4ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	699a      	ldr	r2, [r3, #24]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	f022 0204 	bic.w	r2, r2, #4
 800f4ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	6999      	ldr	r1, [r3, #24]
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	691a      	ldr	r2, [r3, #16]
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	430a      	orrs	r2, r1
 800f4dc:	619a      	str	r2, [r3, #24]
      break;
 800f4de:	e062      	b.n	800f5a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	68b9      	ldr	r1, [r7, #8]
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f000 fa5a 	bl	800f9a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	699a      	ldr	r2, [r3, #24]
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f4fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	699a      	ldr	r2, [r3, #24]
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f50a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	6999      	ldr	r1, [r3, #24]
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	691b      	ldr	r3, [r3, #16]
 800f516:	021a      	lsls	r2, r3, #8
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	430a      	orrs	r2, r1
 800f51e:	619a      	str	r2, [r3, #24]
      break;
 800f520:	e041      	b.n	800f5a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	68b9      	ldr	r1, [r7, #8]
 800f528:	4618      	mov	r0, r3
 800f52a:	f000 faaf 	bl	800fa8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	69da      	ldr	r2, [r3, #28]
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	f042 0208 	orr.w	r2, r2, #8
 800f53c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	69da      	ldr	r2, [r3, #28]
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f022 0204 	bic.w	r2, r2, #4
 800f54c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	69d9      	ldr	r1, [r3, #28]
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	691a      	ldr	r2, [r3, #16]
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	430a      	orrs	r2, r1
 800f55e:	61da      	str	r2, [r3, #28]
      break;
 800f560:	e021      	b.n	800f5a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	68b9      	ldr	r1, [r7, #8]
 800f568:	4618      	mov	r0, r3
 800f56a:	f000 fb03 	bl	800fb74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	69da      	ldr	r2, [r3, #28]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f57c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	69da      	ldr	r2, [r3, #28]
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f58c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	69d9      	ldr	r1, [r3, #28]
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	691b      	ldr	r3, [r3, #16]
 800f598:	021a      	lsls	r2, r3, #8
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	430a      	orrs	r2, r1
 800f5a0:	61da      	str	r2, [r3, #28]
      break;
 800f5a2:	e000      	b.n	800f5a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f5a4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	2201      	movs	r2, #1
 800f5aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5b6:	2300      	movs	r3, #0
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3710      	adds	r7, #16
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d101      	bne.n	800f5d8 <HAL_TIM_ConfigClockSource+0x18>
 800f5d4:	2302      	movs	r3, #2
 800f5d6:	e0a6      	b.n	800f726 <HAL_TIM_ConfigClockSource+0x166>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2201      	movs	r2, #1
 800f5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2202      	movs	r2, #2
 800f5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	689b      	ldr	r3, [r3, #8]
 800f5ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800f5f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f5fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	68fa      	ldr	r2, [r7, #12]
 800f606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	2b40      	cmp	r3, #64	; 0x40
 800f60e:	d067      	beq.n	800f6e0 <HAL_TIM_ConfigClockSource+0x120>
 800f610:	2b40      	cmp	r3, #64	; 0x40
 800f612:	d80b      	bhi.n	800f62c <HAL_TIM_ConfigClockSource+0x6c>
 800f614:	2b10      	cmp	r3, #16
 800f616:	d073      	beq.n	800f700 <HAL_TIM_ConfigClockSource+0x140>
 800f618:	2b10      	cmp	r3, #16
 800f61a:	d802      	bhi.n	800f622 <HAL_TIM_ConfigClockSource+0x62>
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d06f      	beq.n	800f700 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800f620:	e078      	b.n	800f714 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f622:	2b20      	cmp	r3, #32
 800f624:	d06c      	beq.n	800f700 <HAL_TIM_ConfigClockSource+0x140>
 800f626:	2b30      	cmp	r3, #48	; 0x30
 800f628:	d06a      	beq.n	800f700 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800f62a:	e073      	b.n	800f714 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f62c:	2b70      	cmp	r3, #112	; 0x70
 800f62e:	d00d      	beq.n	800f64c <HAL_TIM_ConfigClockSource+0x8c>
 800f630:	2b70      	cmp	r3, #112	; 0x70
 800f632:	d804      	bhi.n	800f63e <HAL_TIM_ConfigClockSource+0x7e>
 800f634:	2b50      	cmp	r3, #80	; 0x50
 800f636:	d033      	beq.n	800f6a0 <HAL_TIM_ConfigClockSource+0xe0>
 800f638:	2b60      	cmp	r3, #96	; 0x60
 800f63a:	d041      	beq.n	800f6c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800f63c:	e06a      	b.n	800f714 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800f63e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f642:	d066      	beq.n	800f712 <HAL_TIM_ConfigClockSource+0x152>
 800f644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f648:	d017      	beq.n	800f67a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800f64a:	e063      	b.n	800f714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6818      	ldr	r0, [r3, #0]
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	6899      	ldr	r1, [r3, #8]
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	685a      	ldr	r2, [r3, #4]
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	f000 fb5a 	bl	800fd14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	689b      	ldr	r3, [r3, #8]
 800f666:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f66e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	609a      	str	r2, [r3, #8]
      break;
 800f678:	e04c      	b.n	800f714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6818      	ldr	r0, [r3, #0]
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	6899      	ldr	r1, [r3, #8]
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	685a      	ldr	r2, [r3, #4]
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	f000 fb43 	bl	800fd14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	689a      	ldr	r2, [r3, #8]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f69c:	609a      	str	r2, [r3, #8]
      break;
 800f69e:	e039      	b.n	800f714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	6818      	ldr	r0, [r3, #0]
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	6859      	ldr	r1, [r3, #4]
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	f000 fab7 	bl	800fc20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	2150      	movs	r1, #80	; 0x50
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f000 fb10 	bl	800fcde <TIM_ITRx_SetConfig>
      break;
 800f6be:	e029      	b.n	800f714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6818      	ldr	r0, [r3, #0]
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	6859      	ldr	r1, [r3, #4]
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	68db      	ldr	r3, [r3, #12]
 800f6cc:	461a      	mov	r2, r3
 800f6ce:	f000 fad6 	bl	800fc7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	2160      	movs	r1, #96	; 0x60
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f000 fb00 	bl	800fcde <TIM_ITRx_SetConfig>
      break;
 800f6de:	e019      	b.n	800f714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6818      	ldr	r0, [r3, #0]
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	6859      	ldr	r1, [r3, #4]
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	f000 fa97 	bl	800fc20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2140      	movs	r1, #64	; 0x40
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f000 faf0 	bl	800fcde <TIM_ITRx_SetConfig>
      break;
 800f6fe:	e009      	b.n	800f714 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681a      	ldr	r2, [r3, #0]
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4619      	mov	r1, r3
 800f70a:	4610      	mov	r0, r2
 800f70c:	f000 fae7 	bl	800fcde <TIM_ITRx_SetConfig>
      break;
 800f710:	e000      	b.n	800f714 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800f712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	2201      	movs	r2, #1
 800f718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2200      	movs	r2, #0
 800f720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f724:	2300      	movs	r3, #0
}
 800f726:	4618      	mov	r0, r3
 800f728:	3710      	adds	r7, #16
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}

0800f72e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f72e:	b480      	push	{r7}
 800f730:	b083      	sub	sp, #12
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f736:	bf00      	nop
 800f738:	370c      	adds	r7, #12
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr

0800f742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f742:	b480      	push	{r7}
 800f744:	b083      	sub	sp, #12
 800f746:	af00      	add	r7, sp, #0
 800f748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f74a:	bf00      	nop
 800f74c:	370c      	adds	r7, #12
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr

0800f756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f756:	b480      	push	{r7}
 800f758:	b083      	sub	sp, #12
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f75e:	bf00      	nop
 800f760:	370c      	adds	r7, #12
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr

0800f76a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f76a:	b480      	push	{r7}
 800f76c:	b083      	sub	sp, #12
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f772:	bf00      	nop
 800f774:	370c      	adds	r7, #12
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr
	...

0800f780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f780:	b480      	push	{r7}
 800f782:	b085      	sub	sp, #20
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	4a40      	ldr	r2, [pc, #256]	; (800f894 <TIM_Base_SetConfig+0x114>)
 800f794:	4293      	cmp	r3, r2
 800f796:	d013      	beq.n	800f7c0 <TIM_Base_SetConfig+0x40>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f79e:	d00f      	beq.n	800f7c0 <TIM_Base_SetConfig+0x40>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	4a3d      	ldr	r2, [pc, #244]	; (800f898 <TIM_Base_SetConfig+0x118>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d00b      	beq.n	800f7c0 <TIM_Base_SetConfig+0x40>
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	4a3c      	ldr	r2, [pc, #240]	; (800f89c <TIM_Base_SetConfig+0x11c>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d007      	beq.n	800f7c0 <TIM_Base_SetConfig+0x40>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a3b      	ldr	r2, [pc, #236]	; (800f8a0 <TIM_Base_SetConfig+0x120>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d003      	beq.n	800f7c0 <TIM_Base_SetConfig+0x40>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4a3a      	ldr	r2, [pc, #232]	; (800f8a4 <TIM_Base_SetConfig+0x124>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d108      	bne.n	800f7d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	4a2f      	ldr	r2, [pc, #188]	; (800f894 <TIM_Base_SetConfig+0x114>)
 800f7d6:	4293      	cmp	r3, r2
 800f7d8:	d02b      	beq.n	800f832 <TIM_Base_SetConfig+0xb2>
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7e0:	d027      	beq.n	800f832 <TIM_Base_SetConfig+0xb2>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4a2c      	ldr	r2, [pc, #176]	; (800f898 <TIM_Base_SetConfig+0x118>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d023      	beq.n	800f832 <TIM_Base_SetConfig+0xb2>
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	4a2b      	ldr	r2, [pc, #172]	; (800f89c <TIM_Base_SetConfig+0x11c>)
 800f7ee:	4293      	cmp	r3, r2
 800f7f0:	d01f      	beq.n	800f832 <TIM_Base_SetConfig+0xb2>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	4a2a      	ldr	r2, [pc, #168]	; (800f8a0 <TIM_Base_SetConfig+0x120>)
 800f7f6:	4293      	cmp	r3, r2
 800f7f8:	d01b      	beq.n	800f832 <TIM_Base_SetConfig+0xb2>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	4a29      	ldr	r2, [pc, #164]	; (800f8a4 <TIM_Base_SetConfig+0x124>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d017      	beq.n	800f832 <TIM_Base_SetConfig+0xb2>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4a28      	ldr	r2, [pc, #160]	; (800f8a8 <TIM_Base_SetConfig+0x128>)
 800f806:	4293      	cmp	r3, r2
 800f808:	d013      	beq.n	800f832 <TIM_Base_SetConfig+0xb2>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	4a27      	ldr	r2, [pc, #156]	; (800f8ac <TIM_Base_SetConfig+0x12c>)
 800f80e:	4293      	cmp	r3, r2
 800f810:	d00f      	beq.n	800f832 <TIM_Base_SetConfig+0xb2>
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	4a26      	ldr	r2, [pc, #152]	; (800f8b0 <TIM_Base_SetConfig+0x130>)
 800f816:	4293      	cmp	r3, r2
 800f818:	d00b      	beq.n	800f832 <TIM_Base_SetConfig+0xb2>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	4a25      	ldr	r2, [pc, #148]	; (800f8b4 <TIM_Base_SetConfig+0x134>)
 800f81e:	4293      	cmp	r3, r2
 800f820:	d007      	beq.n	800f832 <TIM_Base_SetConfig+0xb2>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	4a24      	ldr	r2, [pc, #144]	; (800f8b8 <TIM_Base_SetConfig+0x138>)
 800f826:	4293      	cmp	r3, r2
 800f828:	d003      	beq.n	800f832 <TIM_Base_SetConfig+0xb2>
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	4a23      	ldr	r2, [pc, #140]	; (800f8bc <TIM_Base_SetConfig+0x13c>)
 800f82e:	4293      	cmp	r3, r2
 800f830:	d108      	bne.n	800f844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f83a:	683b      	ldr	r3, [r7, #0]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	68fa      	ldr	r2, [r7, #12]
 800f840:	4313      	orrs	r3, r2
 800f842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	4313      	orrs	r3, r2
 800f850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	68fa      	ldr	r2, [r7, #12]
 800f856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	689a      	ldr	r2, [r3, #8]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4a0a      	ldr	r2, [pc, #40]	; (800f894 <TIM_Base_SetConfig+0x114>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d003      	beq.n	800f878 <TIM_Base_SetConfig+0xf8>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4a0c      	ldr	r2, [pc, #48]	; (800f8a4 <TIM_Base_SetConfig+0x124>)
 800f874:	4293      	cmp	r3, r2
 800f876:	d103      	bne.n	800f880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	691a      	ldr	r2, [r3, #16]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2201      	movs	r2, #1
 800f884:	615a      	str	r2, [r3, #20]
}
 800f886:	bf00      	nop
 800f888:	3714      	adds	r7, #20
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	40010000 	.word	0x40010000
 800f898:	40000400 	.word	0x40000400
 800f89c:	40000800 	.word	0x40000800
 800f8a0:	40000c00 	.word	0x40000c00
 800f8a4:	40010400 	.word	0x40010400
 800f8a8:	40014000 	.word	0x40014000
 800f8ac:	40014400 	.word	0x40014400
 800f8b0:	40014800 	.word	0x40014800
 800f8b4:	40001800 	.word	0x40001800
 800f8b8:	40001c00 	.word	0x40001c00
 800f8bc:	40002000 	.word	0x40002000

0800f8c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b087      	sub	sp, #28
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6a1b      	ldr	r3, [r3, #32]
 800f8ce:	f023 0201 	bic.w	r2, r3, #1
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6a1b      	ldr	r3, [r3, #32]
 800f8da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	685b      	ldr	r3, [r3, #4]
 800f8e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	699b      	ldr	r3, [r3, #24]
 800f8e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	f023 0303 	bic.w	r3, r3, #3
 800f8f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	4313      	orrs	r3, r2
 800f900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	f023 0302 	bic.w	r3, r3, #2
 800f908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	689b      	ldr	r3, [r3, #8]
 800f90e:	697a      	ldr	r2, [r7, #20]
 800f910:	4313      	orrs	r3, r2
 800f912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	4a20      	ldr	r2, [pc, #128]	; (800f998 <TIM_OC1_SetConfig+0xd8>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d003      	beq.n	800f924 <TIM_OC1_SetConfig+0x64>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4a1f      	ldr	r2, [pc, #124]	; (800f99c <TIM_OC1_SetConfig+0xdc>)
 800f920:	4293      	cmp	r3, r2
 800f922:	d10c      	bne.n	800f93e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	f023 0308 	bic.w	r3, r3, #8
 800f92a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	697a      	ldr	r2, [r7, #20]
 800f932:	4313      	orrs	r3, r2
 800f934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	f023 0304 	bic.w	r3, r3, #4
 800f93c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	4a15      	ldr	r2, [pc, #84]	; (800f998 <TIM_OC1_SetConfig+0xd8>)
 800f942:	4293      	cmp	r3, r2
 800f944:	d003      	beq.n	800f94e <TIM_OC1_SetConfig+0x8e>
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	4a14      	ldr	r2, [pc, #80]	; (800f99c <TIM_OC1_SetConfig+0xdc>)
 800f94a:	4293      	cmp	r3, r2
 800f94c:	d111      	bne.n	800f972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f95c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	695b      	ldr	r3, [r3, #20]
 800f962:	693a      	ldr	r2, [r7, #16]
 800f964:	4313      	orrs	r3, r2
 800f966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	699b      	ldr	r3, [r3, #24]
 800f96c:	693a      	ldr	r2, [r7, #16]
 800f96e:	4313      	orrs	r3, r2
 800f970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	693a      	ldr	r2, [r7, #16]
 800f976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	685a      	ldr	r2, [r3, #4]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	697a      	ldr	r2, [r7, #20]
 800f98a:	621a      	str	r2, [r3, #32]
}
 800f98c:	bf00      	nop
 800f98e:	371c      	adds	r7, #28
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr
 800f998:	40010000 	.word	0x40010000
 800f99c:	40010400 	.word	0x40010400

0800f9a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b087      	sub	sp, #28
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
 800f9a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6a1b      	ldr	r3, [r3, #32]
 800f9ae:	f023 0210 	bic.w	r2, r3, #16
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6a1b      	ldr	r3, [r3, #32]
 800f9ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	699b      	ldr	r3, [r3, #24]
 800f9c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	021b      	lsls	r3, r3, #8
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	4313      	orrs	r3, r2
 800f9e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f9e4:	697b      	ldr	r3, [r7, #20]
 800f9e6:	f023 0320 	bic.w	r3, r3, #32
 800f9ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	689b      	ldr	r3, [r3, #8]
 800f9f0:	011b      	lsls	r3, r3, #4
 800f9f2:	697a      	ldr	r2, [r7, #20]
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4a22      	ldr	r2, [pc, #136]	; (800fa84 <TIM_OC2_SetConfig+0xe4>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d003      	beq.n	800fa08 <TIM_OC2_SetConfig+0x68>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4a21      	ldr	r2, [pc, #132]	; (800fa88 <TIM_OC2_SetConfig+0xe8>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d10d      	bne.n	800fa24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	011b      	lsls	r3, r3, #4
 800fa16:	697a      	ldr	r2, [r7, #20]
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	4a17      	ldr	r2, [pc, #92]	; (800fa84 <TIM_OC2_SetConfig+0xe4>)
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d003      	beq.n	800fa34 <TIM_OC2_SetConfig+0x94>
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	4a16      	ldr	r2, [pc, #88]	; (800fa88 <TIM_OC2_SetConfig+0xe8>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d113      	bne.n	800fa5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	695b      	ldr	r3, [r3, #20]
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	693a      	ldr	r2, [r7, #16]
 800fa4c:	4313      	orrs	r3, r2
 800fa4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	699b      	ldr	r3, [r3, #24]
 800fa54:	009b      	lsls	r3, r3, #2
 800fa56:	693a      	ldr	r2, [r7, #16]
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	693a      	ldr	r2, [r7, #16]
 800fa60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fa68:	683b      	ldr	r3, [r7, #0]
 800fa6a:	685a      	ldr	r2, [r3, #4]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	697a      	ldr	r2, [r7, #20]
 800fa74:	621a      	str	r2, [r3, #32]
}
 800fa76:	bf00      	nop
 800fa78:	371c      	adds	r7, #28
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr
 800fa82:	bf00      	nop
 800fa84:	40010000 	.word	0x40010000
 800fa88:	40010400 	.word	0x40010400

0800fa8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b087      	sub	sp, #28
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6a1b      	ldr	r3, [r3, #32]
 800fa9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	6a1b      	ldr	r3, [r3, #32]
 800faa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	685b      	ldr	r3, [r3, #4]
 800faac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	69db      	ldr	r3, [r3, #28]
 800fab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800faba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f023 0303 	bic.w	r3, r3, #3
 800fac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fac4:	683b      	ldr	r3, [r7, #0]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	68fa      	ldr	r2, [r7, #12]
 800faca:	4313      	orrs	r3, r2
 800facc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fad6:	683b      	ldr	r3, [r7, #0]
 800fad8:	689b      	ldr	r3, [r3, #8]
 800fada:	021b      	lsls	r3, r3, #8
 800fadc:	697a      	ldr	r2, [r7, #20]
 800fade:	4313      	orrs	r3, r2
 800fae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	4a21      	ldr	r2, [pc, #132]	; (800fb6c <TIM_OC3_SetConfig+0xe0>)
 800fae6:	4293      	cmp	r3, r2
 800fae8:	d003      	beq.n	800faf2 <TIM_OC3_SetConfig+0x66>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4a20      	ldr	r2, [pc, #128]	; (800fb70 <TIM_OC3_SetConfig+0xe4>)
 800faee:	4293      	cmp	r3, r2
 800faf0:	d10d      	bne.n	800fb0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800faf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	68db      	ldr	r3, [r3, #12]
 800fafe:	021b      	lsls	r3, r3, #8
 800fb00:	697a      	ldr	r2, [r7, #20]
 800fb02:	4313      	orrs	r3, r2
 800fb04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4a16      	ldr	r2, [pc, #88]	; (800fb6c <TIM_OC3_SetConfig+0xe0>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d003      	beq.n	800fb1e <TIM_OC3_SetConfig+0x92>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	4a15      	ldr	r2, [pc, #84]	; (800fb70 <TIM_OC3_SetConfig+0xe4>)
 800fb1a:	4293      	cmp	r3, r2
 800fb1c:	d113      	bne.n	800fb46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	695b      	ldr	r3, [r3, #20]
 800fb32:	011b      	lsls	r3, r3, #4
 800fb34:	693a      	ldr	r2, [r7, #16]
 800fb36:	4313      	orrs	r3, r2
 800fb38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	699b      	ldr	r3, [r3, #24]
 800fb3e:	011b      	lsls	r3, r3, #4
 800fb40:	693a      	ldr	r2, [r7, #16]
 800fb42:	4313      	orrs	r3, r2
 800fb44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	693a      	ldr	r2, [r7, #16]
 800fb4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	68fa      	ldr	r2, [r7, #12]
 800fb50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	685a      	ldr	r2, [r3, #4]
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	697a      	ldr	r2, [r7, #20]
 800fb5e:	621a      	str	r2, [r3, #32]
}
 800fb60:	bf00      	nop
 800fb62:	371c      	adds	r7, #28
 800fb64:	46bd      	mov	sp, r7
 800fb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6a:	4770      	bx	lr
 800fb6c:	40010000 	.word	0x40010000
 800fb70:	40010400 	.word	0x40010400

0800fb74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b087      	sub	sp, #28
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6a1b      	ldr	r3, [r3, #32]
 800fb82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	6a1b      	ldr	r3, [r3, #32]
 800fb8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	685b      	ldr	r3, [r3, #4]
 800fb94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	69db      	ldr	r3, [r3, #28]
 800fb9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	021b      	lsls	r3, r3, #8
 800fbb2:	68fa      	ldr	r2, [r7, #12]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	689b      	ldr	r3, [r3, #8]
 800fbc4:	031b      	lsls	r3, r3, #12
 800fbc6:	693a      	ldr	r2, [r7, #16]
 800fbc8:	4313      	orrs	r3, r2
 800fbca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	4a12      	ldr	r2, [pc, #72]	; (800fc18 <TIM_OC4_SetConfig+0xa4>)
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	d003      	beq.n	800fbdc <TIM_OC4_SetConfig+0x68>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	4a11      	ldr	r2, [pc, #68]	; (800fc1c <TIM_OC4_SetConfig+0xa8>)
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d109      	bne.n	800fbf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	695b      	ldr	r3, [r3, #20]
 800fbe8:	019b      	lsls	r3, r3, #6
 800fbea:	697a      	ldr	r2, [r7, #20]
 800fbec:	4313      	orrs	r3, r2
 800fbee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	697a      	ldr	r2, [r7, #20]
 800fbf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	68fa      	ldr	r2, [r7, #12]
 800fbfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	685a      	ldr	r2, [r3, #4]
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	693a      	ldr	r2, [r7, #16]
 800fc08:	621a      	str	r2, [r3, #32]
}
 800fc0a:	bf00      	nop
 800fc0c:	371c      	adds	r7, #28
 800fc0e:	46bd      	mov	sp, r7
 800fc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc14:	4770      	bx	lr
 800fc16:	bf00      	nop
 800fc18:	40010000 	.word	0x40010000
 800fc1c:	40010400 	.word	0x40010400

0800fc20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc20:	b480      	push	{r7}
 800fc22:	b087      	sub	sp, #28
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	60f8      	str	r0, [r7, #12]
 800fc28:	60b9      	str	r1, [r7, #8]
 800fc2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	6a1b      	ldr	r3, [r3, #32]
 800fc30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	6a1b      	ldr	r3, [r3, #32]
 800fc36:	f023 0201 	bic.w	r2, r3, #1
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	699b      	ldr	r3, [r3, #24]
 800fc42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800fc4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	011b      	lsls	r3, r3, #4
 800fc50:	693a      	ldr	r2, [r7, #16]
 800fc52:	4313      	orrs	r3, r2
 800fc54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	f023 030a 	bic.w	r3, r3, #10
 800fc5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fc5e:	697a      	ldr	r2, [r7, #20]
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	4313      	orrs	r3, r2
 800fc64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	693a      	ldr	r2, [r7, #16]
 800fc6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	697a      	ldr	r2, [r7, #20]
 800fc70:	621a      	str	r2, [r3, #32]
}
 800fc72:	bf00      	nop
 800fc74:	371c      	adds	r7, #28
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr

0800fc7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fc7e:	b480      	push	{r7}
 800fc80:	b087      	sub	sp, #28
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	60f8      	str	r0, [r7, #12]
 800fc86:	60b9      	str	r1, [r7, #8]
 800fc88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	6a1b      	ldr	r3, [r3, #32]
 800fc8e:	f023 0210 	bic.w	r2, r3, #16
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	699b      	ldr	r3, [r3, #24]
 800fc9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6a1b      	ldr	r3, [r3, #32]
 800fca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800fca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	031b      	lsls	r3, r3, #12
 800fcae:	697a      	ldr	r2, [r7, #20]
 800fcb0:	4313      	orrs	r3, r2
 800fcb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fcb4:	693b      	ldr	r3, [r7, #16]
 800fcb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800fcba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	011b      	lsls	r3, r3, #4
 800fcc0:	693a      	ldr	r2, [r7, #16]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	697a      	ldr	r2, [r7, #20]
 800fcca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	693a      	ldr	r2, [r7, #16]
 800fcd0:	621a      	str	r2, [r3, #32]
}
 800fcd2:	bf00      	nop
 800fcd4:	371c      	adds	r7, #28
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr

0800fcde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fcde:	b480      	push	{r7}
 800fce0:	b085      	sub	sp, #20
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
 800fce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fcf6:	683a      	ldr	r2, [r7, #0]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	f043 0307 	orr.w	r3, r3, #7
 800fd00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	609a      	str	r2, [r3, #8]
}
 800fd08:	bf00      	nop
 800fd0a:	3714      	adds	r7, #20
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr

0800fd14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b087      	sub	sp, #28
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]
 800fd20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	689b      	ldr	r3, [r3, #8]
 800fd26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fd2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fd30:	683b      	ldr	r3, [r7, #0]
 800fd32:	021a      	lsls	r2, r3, #8
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	431a      	orrs	r2, r3
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	697a      	ldr	r2, [r7, #20]
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	697a      	ldr	r2, [r7, #20]
 800fd46:	609a      	str	r2, [r3, #8]
}
 800fd48:	bf00      	nop
 800fd4a:	371c      	adds	r7, #28
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr

0800fd54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fd54:	b480      	push	{r7}
 800fd56:	b087      	sub	sp, #28
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	f003 031f 	and.w	r3, r3, #31
 800fd66:	2201      	movs	r2, #1
 800fd68:	fa02 f303 	lsl.w	r3, r2, r3
 800fd6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	6a1a      	ldr	r2, [r3, #32]
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	43db      	mvns	r3, r3
 800fd76:	401a      	ands	r2, r3
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	6a1a      	ldr	r2, [r3, #32]
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	f003 031f 	and.w	r3, r3, #31
 800fd86:	6879      	ldr	r1, [r7, #4]
 800fd88:	fa01 f303 	lsl.w	r3, r1, r3
 800fd8c:	431a      	orrs	r2, r3
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	621a      	str	r2, [r3, #32]
}
 800fd92:	bf00      	nop
 800fd94:	371c      	adds	r7, #28
 800fd96:	46bd      	mov	sp, r7
 800fd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9c:	4770      	bx	lr
	...

0800fda0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b085      	sub	sp, #20
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
 800fda8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdb0:	2b01      	cmp	r3, #1
 800fdb2:	d101      	bne.n	800fdb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fdb4:	2302      	movs	r3, #2
 800fdb6:	e05a      	b.n	800fe6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	2201      	movs	r2, #1
 800fdbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2202      	movs	r2, #2
 800fdc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	685b      	ldr	r3, [r3, #4]
 800fdce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	689b      	ldr	r3, [r3, #8]
 800fdd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	4313      	orrs	r3, r2
 800fde8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	68fa      	ldr	r2, [r7, #12]
 800fdf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4a21      	ldr	r2, [pc, #132]	; (800fe7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d022      	beq.n	800fe42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe04:	d01d      	beq.n	800fe42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4a1d      	ldr	r2, [pc, #116]	; (800fe80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d018      	beq.n	800fe42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	4a1b      	ldr	r2, [pc, #108]	; (800fe84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d013      	beq.n	800fe42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	4a1a      	ldr	r2, [pc, #104]	; (800fe88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fe20:	4293      	cmp	r3, r2
 800fe22:	d00e      	beq.n	800fe42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	4a18      	ldr	r2, [pc, #96]	; (800fe8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d009      	beq.n	800fe42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a17      	ldr	r2, [pc, #92]	; (800fe90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d004      	beq.n	800fe42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4a15      	ldr	r2, [pc, #84]	; (800fe94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d10c      	bne.n	800fe5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	4313      	orrs	r3, r2
 800fe52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	68ba      	ldr	r2, [r7, #8]
 800fe5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	2201      	movs	r2, #1
 800fe60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2200      	movs	r2, #0
 800fe68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe6c:	2300      	movs	r3, #0
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3714      	adds	r7, #20
 800fe72:	46bd      	mov	sp, r7
 800fe74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe78:	4770      	bx	lr
 800fe7a:	bf00      	nop
 800fe7c:	40010000 	.word	0x40010000
 800fe80:	40000400 	.word	0x40000400
 800fe84:	40000800 	.word	0x40000800
 800fe88:	40000c00 	.word	0x40000c00
 800fe8c:	40010400 	.word	0x40010400
 800fe90:	40014000 	.word	0x40014000
 800fe94:	40001800 	.word	0x40001800

0800fe98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
 800fea0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fea2:	2300      	movs	r3, #0
 800fea4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800feac:	2b01      	cmp	r3, #1
 800feae:	d101      	bne.n	800feb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800feb0:	2302      	movs	r3, #2
 800feb2:	e03d      	b.n	800ff30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2201      	movs	r2, #1
 800feb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	689b      	ldr	r3, [r3, #8]
 800fed4:	4313      	orrs	r3, r2
 800fed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	685b      	ldr	r3, [r3, #4]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4313      	orrs	r3, r2
 800fef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	691b      	ldr	r3, [r3, #16]
 800fefe:	4313      	orrs	r3, r2
 800ff00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	695b      	ldr	r3, [r3, #20]
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	69db      	ldr	r3, [r3, #28]
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	68fa      	ldr	r2, [r7, #12]
 800ff24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3714      	adds	r7, #20
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff44:	bf00      	nop
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr

0800ff50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b083      	sub	sp, #12
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff58:	bf00      	nop
 800ff5a:	370c      	adds	r7, #12
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b082      	sub	sp, #8
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d101      	bne.n	800ff76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff72:	2301      	movs	r3, #1
 800ff74:	e03f      	b.n	800fff6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ff7c:	b2db      	uxtb	r3, r3
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d106      	bne.n	800ff90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2200      	movs	r2, #0
 800ff86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f7f7 fc10 	bl	80077b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2224      	movs	r2, #36	; 0x24
 800ff94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	68da      	ldr	r2, [r3, #12]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ffa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f000 faef 	bl	801058c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	691a      	ldr	r2, [r3, #16]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ffbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	695a      	ldr	r2, [r3, #20]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ffcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	68da      	ldr	r2, [r3, #12]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ffdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2220      	movs	r2, #32
 800ffe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2220      	movs	r2, #32
 800fff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fff4:	2300      	movs	r3, #0
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3708      	adds	r7, #8
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fffe:	b480      	push	{r7}
 8010000:	b085      	sub	sp, #20
 8010002:	af00      	add	r7, sp, #0
 8010004:	60f8      	str	r0, [r7, #12]
 8010006:	60b9      	str	r1, [r7, #8]
 8010008:	4613      	mov	r3, r2
 801000a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010012:	b2db      	uxtb	r3, r3
 8010014:	2b20      	cmp	r3, #32
 8010016:	d130      	bne.n	801007a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d002      	beq.n	8010024 <HAL_UART_Transmit_IT+0x26>
 801001e:	88fb      	ldrh	r3, [r7, #6]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d101      	bne.n	8010028 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8010024:	2301      	movs	r3, #1
 8010026:	e029      	b.n	801007c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801002e:	2b01      	cmp	r3, #1
 8010030:	d101      	bne.n	8010036 <HAL_UART_Transmit_IT+0x38>
 8010032:	2302      	movs	r3, #2
 8010034:	e022      	b.n	801007c <HAL_UART_Transmit_IT+0x7e>
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	2201      	movs	r2, #1
 801003a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	68ba      	ldr	r2, [r7, #8]
 8010042:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	88fa      	ldrh	r2, [r7, #6]
 8010048:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	88fa      	ldrh	r2, [r7, #6]
 801004e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	2200      	movs	r2, #0
 8010054:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2221      	movs	r2, #33	; 0x21
 801005a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2200      	movs	r2, #0
 8010062:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	68da      	ldr	r2, [r3, #12]
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010074:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8010076:	2300      	movs	r3, #0
 8010078:	e000      	b.n	801007c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 801007a:	2302      	movs	r3, #2
  }
}
 801007c:	4618      	mov	r0, r3
 801007e:	3714      	adds	r7, #20
 8010080:	46bd      	mov	sp, r7
 8010082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010086:	4770      	bx	lr

08010088 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010088:	b480      	push	{r7}
 801008a:	b085      	sub	sp, #20
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	4613      	mov	r3, r2
 8010094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801009c:	b2db      	uxtb	r3, r3
 801009e:	2b20      	cmp	r3, #32
 80100a0:	d140      	bne.n	8010124 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d002      	beq.n	80100ae <HAL_UART_Receive_IT+0x26>
 80100a8:	88fb      	ldrh	r3, [r7, #6]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d101      	bne.n	80100b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80100ae:	2301      	movs	r3, #1
 80100b0:	e039      	b.n	8010126 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d101      	bne.n	80100c0 <HAL_UART_Receive_IT+0x38>
 80100bc:	2302      	movs	r3, #2
 80100be:	e032      	b.n	8010126 <HAL_UART_Receive_IT+0x9e>
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	2201      	movs	r2, #1
 80100c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	68ba      	ldr	r2, [r7, #8]
 80100cc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	88fa      	ldrh	r2, [r7, #6]
 80100d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	88fa      	ldrh	r2, [r7, #6]
 80100d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	2200      	movs	r2, #0
 80100de:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2222      	movs	r2, #34	; 0x22
 80100e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2200      	movs	r2, #0
 80100ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	68da      	ldr	r2, [r3, #12]
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80100fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	695a      	ldr	r2, [r3, #20]
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f042 0201 	orr.w	r2, r2, #1
 801010e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	68da      	ldr	r2, [r3, #12]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f042 0220 	orr.w	r2, r2, #32
 801011e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8010120:	2300      	movs	r3, #0
 8010122:	e000      	b.n	8010126 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8010124:	2302      	movs	r3, #2
  }
}
 8010126:	4618      	mov	r0, r3
 8010128:	3714      	adds	r7, #20
 801012a:	46bd      	mov	sp, r7
 801012c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010130:	4770      	bx	lr
	...

08010134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b088      	sub	sp, #32
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	68db      	ldr	r3, [r3, #12]
 801014a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	695b      	ldr	r3, [r3, #20]
 8010152:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8010154:	2300      	movs	r3, #0
 8010156:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8010158:	2300      	movs	r3, #0
 801015a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	f003 030f 	and.w	r3, r3, #15
 8010162:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d10d      	bne.n	8010186 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	f003 0320 	and.w	r3, r3, #32
 8010170:	2b00      	cmp	r3, #0
 8010172:	d008      	beq.n	8010186 <HAL_UART_IRQHandler+0x52>
 8010174:	69bb      	ldr	r3, [r7, #24]
 8010176:	f003 0320 	and.w	r3, r3, #32
 801017a:	2b00      	cmp	r3, #0
 801017c:	d003      	beq.n	8010186 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f000 f982 	bl	8010488 <UART_Receive_IT>
      return;
 8010184:	e0d1      	b.n	801032a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010186:	693b      	ldr	r3, [r7, #16]
 8010188:	2b00      	cmp	r3, #0
 801018a:	f000 80b0 	beq.w	80102ee <HAL_UART_IRQHandler+0x1ba>
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	f003 0301 	and.w	r3, r3, #1
 8010194:	2b00      	cmp	r3, #0
 8010196:	d105      	bne.n	80101a4 <HAL_UART_IRQHandler+0x70>
 8010198:	69bb      	ldr	r3, [r7, #24]
 801019a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 801019e:	2b00      	cmp	r3, #0
 80101a0:	f000 80a5 	beq.w	80102ee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	f003 0301 	and.w	r3, r3, #1
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d00a      	beq.n	80101c4 <HAL_UART_IRQHandler+0x90>
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d005      	beq.n	80101c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101bc:	f043 0201 	orr.w	r2, r3, #1
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	f003 0304 	and.w	r3, r3, #4
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00a      	beq.n	80101e4 <HAL_UART_IRQHandler+0xb0>
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	f003 0301 	and.w	r3, r3, #1
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d005      	beq.n	80101e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101dc:	f043 0202 	orr.w	r2, r3, #2
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80101e4:	69fb      	ldr	r3, [r7, #28]
 80101e6:	f003 0302 	and.w	r3, r3, #2
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00a      	beq.n	8010204 <HAL_UART_IRQHandler+0xd0>
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	f003 0301 	and.w	r3, r3, #1
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d005      	beq.n	8010204 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101fc:	f043 0204 	orr.w	r2, r3, #4
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	f003 0308 	and.w	r3, r3, #8
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00f      	beq.n	801022e <HAL_UART_IRQHandler+0xfa>
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	f003 0320 	and.w	r3, r3, #32
 8010214:	2b00      	cmp	r3, #0
 8010216:	d104      	bne.n	8010222 <HAL_UART_IRQHandler+0xee>
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	f003 0301 	and.w	r3, r3, #1
 801021e:	2b00      	cmp	r3, #0
 8010220:	d005      	beq.n	801022e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010226:	f043 0208 	orr.w	r2, r3, #8
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010232:	2b00      	cmp	r3, #0
 8010234:	d078      	beq.n	8010328 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010236:	69fb      	ldr	r3, [r7, #28]
 8010238:	f003 0320 	and.w	r3, r3, #32
 801023c:	2b00      	cmp	r3, #0
 801023e:	d007      	beq.n	8010250 <HAL_UART_IRQHandler+0x11c>
 8010240:	69bb      	ldr	r3, [r7, #24]
 8010242:	f003 0320 	and.w	r3, r3, #32
 8010246:	2b00      	cmp	r3, #0
 8010248:	d002      	beq.n	8010250 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 f91c 	bl	8010488 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	695b      	ldr	r3, [r3, #20]
 8010256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801025a:	2b40      	cmp	r3, #64	; 0x40
 801025c:	bf0c      	ite	eq
 801025e:	2301      	moveq	r3, #1
 8010260:	2300      	movne	r3, #0
 8010262:	b2db      	uxtb	r3, r3
 8010264:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801026a:	f003 0308 	and.w	r3, r3, #8
 801026e:	2b00      	cmp	r3, #0
 8010270:	d102      	bne.n	8010278 <HAL_UART_IRQHandler+0x144>
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d031      	beq.n	80102dc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f000 f865 	bl	8010348 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	695b      	ldr	r3, [r3, #20]
 8010284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010288:	2b40      	cmp	r3, #64	; 0x40
 801028a:	d123      	bne.n	80102d4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	695a      	ldr	r2, [r3, #20]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801029a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d013      	beq.n	80102cc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102a8:	4a21      	ldr	r2, [pc, #132]	; (8010330 <HAL_UART_IRQHandler+0x1fc>)
 80102aa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fc f995 	bl	800c5e0 <HAL_DMA_Abort_IT>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d016      	beq.n	80102ea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102c2:	687a      	ldr	r2, [r7, #4]
 80102c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80102c6:	4610      	mov	r0, r2
 80102c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102ca:	e00e      	b.n	80102ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f000 f831 	bl	8010334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102d2:	e00a      	b.n	80102ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f000 f82d 	bl	8010334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102da:	e006      	b.n	80102ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f000 f829 	bl	8010334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80102e8:	e01e      	b.n	8010328 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102ea:	bf00      	nop
    return;
 80102ec:	e01c      	b.n	8010328 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80102ee:	69fb      	ldr	r3, [r7, #28]
 80102f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d008      	beq.n	801030a <HAL_UART_IRQHandler+0x1d6>
 80102f8:	69bb      	ldr	r3, [r7, #24]
 80102fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d003      	beq.n	801030a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 f852 	bl	80103ac <UART_Transmit_IT>
    return;
 8010308:	e00f      	b.n	801032a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010310:	2b00      	cmp	r3, #0
 8010312:	d00a      	beq.n	801032a <HAL_UART_IRQHandler+0x1f6>
 8010314:	69bb      	ldr	r3, [r7, #24]
 8010316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801031a:	2b00      	cmp	r3, #0
 801031c:	d005      	beq.n	801032a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	f000 f89a 	bl	8010458 <UART_EndTransmit_IT>
    return;
 8010324:	bf00      	nop
 8010326:	e000      	b.n	801032a <HAL_UART_IRQHandler+0x1f6>
    return;
 8010328:	bf00      	nop
  }
}
 801032a:	3720      	adds	r7, #32
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	08010385 	.word	0x08010385

08010334 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010334:	b480      	push	{r7}
 8010336:	b083      	sub	sp, #12
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801033c:	bf00      	nop
 801033e:	370c      	adds	r7, #12
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr

08010348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	68da      	ldr	r2, [r3, #12]
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801035e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	695a      	ldr	r2, [r3, #20]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	f022 0201 	bic.w	r2, r2, #1
 801036e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2220      	movs	r2, #32
 8010374:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8010378:	bf00      	nop
 801037a:	370c      	adds	r7, #12
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010384:	b580      	push	{r7, lr}
 8010386:	b084      	sub	sp, #16
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010390:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	2200      	movs	r2, #0
 8010396:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	2200      	movs	r2, #0
 801039c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f7ff ffc8 	bl	8010334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80103a4:	bf00      	nop
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80103ac:	b480      	push	{r7}
 80103ae:	b085      	sub	sp, #20
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	2b21      	cmp	r3, #33	; 0x21
 80103be:	d144      	bne.n	801044a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80103c8:	d11a      	bne.n	8010400 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	6a1b      	ldr	r3, [r3, #32]
 80103ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	881b      	ldrh	r3, [r3, #0]
 80103d4:	461a      	mov	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80103de:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	691b      	ldr	r3, [r3, #16]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d105      	bne.n	80103f4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6a1b      	ldr	r3, [r3, #32]
 80103ec:	1c9a      	adds	r2, r3, #2
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	621a      	str	r2, [r3, #32]
 80103f2:	e00e      	b.n	8010412 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6a1b      	ldr	r3, [r3, #32]
 80103f8:	1c5a      	adds	r2, r3, #1
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	621a      	str	r2, [r3, #32]
 80103fe:	e008      	b.n	8010412 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6a1b      	ldr	r3, [r3, #32]
 8010404:	1c59      	adds	r1, r3, #1
 8010406:	687a      	ldr	r2, [r7, #4]
 8010408:	6211      	str	r1, [r2, #32]
 801040a:	781a      	ldrb	r2, [r3, #0]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010416:	b29b      	uxth	r3, r3
 8010418:	3b01      	subs	r3, #1
 801041a:	b29b      	uxth	r3, r3
 801041c:	687a      	ldr	r2, [r7, #4]
 801041e:	4619      	mov	r1, r3
 8010420:	84d1      	strh	r1, [r2, #38]	; 0x26
 8010422:	2b00      	cmp	r3, #0
 8010424:	d10f      	bne.n	8010446 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	68da      	ldr	r2, [r3, #12]
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010434:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	68da      	ldr	r2, [r3, #12]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010444:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010446:	2300      	movs	r3, #0
 8010448:	e000      	b.n	801044c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801044a:	2302      	movs	r3, #2
  }
}
 801044c:	4618      	mov	r0, r3
 801044e:	3714      	adds	r7, #20
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr

08010458 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	68da      	ldr	r2, [r3, #12]
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801046e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2220      	movs	r2, #32
 8010474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	f7fa ff79 	bl	800b370 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 801047e:	2300      	movs	r3, #0
}
 8010480:	4618      	mov	r0, r3
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010496:	b2db      	uxtb	r3, r3
 8010498:	2b22      	cmp	r3, #34	; 0x22
 801049a:	d171      	bne.n	8010580 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	689b      	ldr	r3, [r3, #8]
 80104a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80104a4:	d123      	bne.n	80104ee <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104aa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	691b      	ldr	r3, [r3, #16]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d10e      	bne.n	80104d2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	685b      	ldr	r3, [r3, #4]
 80104ba:	b29b      	uxth	r3, r3
 80104bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104c0:	b29a      	uxth	r2, r3
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104ca:	1c9a      	adds	r2, r3, #2
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	629a      	str	r2, [r3, #40]	; 0x28
 80104d0:	e029      	b.n	8010526 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	685b      	ldr	r3, [r3, #4]
 80104d8:	b29b      	uxth	r3, r3
 80104da:	b2db      	uxtb	r3, r3
 80104dc:	b29a      	uxth	r2, r3
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104e6:	1c5a      	adds	r2, r3, #1
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	629a      	str	r2, [r3, #40]	; 0x28
 80104ec:	e01b      	b.n	8010526 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	691b      	ldr	r3, [r3, #16]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d10a      	bne.n	801050c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	6858      	ldr	r0, [r3, #4]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010500:	1c59      	adds	r1, r3, #1
 8010502:	687a      	ldr	r2, [r7, #4]
 8010504:	6291      	str	r1, [r2, #40]	; 0x28
 8010506:	b2c2      	uxtb	r2, r0
 8010508:	701a      	strb	r2, [r3, #0]
 801050a:	e00c      	b.n	8010526 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	b2da      	uxtb	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010518:	1c58      	adds	r0, r3, #1
 801051a:	6879      	ldr	r1, [r7, #4]
 801051c:	6288      	str	r0, [r1, #40]	; 0x28
 801051e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8010522:	b2d2      	uxtb	r2, r2
 8010524:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 801052a:	b29b      	uxth	r3, r3
 801052c:	3b01      	subs	r3, #1
 801052e:	b29b      	uxth	r3, r3
 8010530:	687a      	ldr	r2, [r7, #4]
 8010532:	4619      	mov	r1, r3
 8010534:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010536:	2b00      	cmp	r3, #0
 8010538:	d120      	bne.n	801057c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	68da      	ldr	r2, [r3, #12]
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f022 0220 	bic.w	r2, r2, #32
 8010548:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	68da      	ldr	r2, [r3, #12]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010558:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	695a      	ldr	r2, [r3, #20]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	f022 0201 	bic.w	r2, r2, #1
 8010568:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2220      	movs	r2, #32
 801056e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f7fa fed6 	bl	800b324 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8010578:	2300      	movs	r3, #0
 801057a:	e002      	b.n	8010582 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 801057c:	2300      	movs	r3, #0
 801057e:	e000      	b.n	8010582 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8010580:	2302      	movs	r3, #2
  }
}
 8010582:	4618      	mov	r0, r3
 8010584:	3710      	adds	r7, #16
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
	...

0801058c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801058c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010590:	b085      	sub	sp, #20
 8010592:	af00      	add	r7, sp, #0
 8010594:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	691b      	ldr	r3, [r3, #16]
 801059c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	68da      	ldr	r2, [r3, #12]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	430a      	orrs	r2, r1
 80105aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	689a      	ldr	r2, [r3, #8]
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	691b      	ldr	r3, [r3, #16]
 80105b4:	431a      	orrs	r2, r3
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	695b      	ldr	r3, [r3, #20]
 80105ba:	431a      	orrs	r2, r3
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	69db      	ldr	r3, [r3, #28]
 80105c0:	4313      	orrs	r3, r2
 80105c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80105ce:	f023 030c 	bic.w	r3, r3, #12
 80105d2:	687a      	ldr	r2, [r7, #4]
 80105d4:	6812      	ldr	r2, [r2, #0]
 80105d6:	68f9      	ldr	r1, [r7, #12]
 80105d8:	430b      	orrs	r3, r1
 80105da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	695b      	ldr	r3, [r3, #20]
 80105e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	699a      	ldr	r2, [r3, #24]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	430a      	orrs	r2, r1
 80105f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	69db      	ldr	r3, [r3, #28]
 80105f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80105fa:	f040 818b 	bne.w	8010914 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4ac1      	ldr	r2, [pc, #772]	; (8010908 <UART_SetConfig+0x37c>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d005      	beq.n	8010614 <UART_SetConfig+0x88>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	4abf      	ldr	r2, [pc, #764]	; (801090c <UART_SetConfig+0x380>)
 801060e:	4293      	cmp	r3, r2
 8010610:	f040 80bd 	bne.w	801078e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010614:	f7fd fc40 	bl	800de98 <HAL_RCC_GetPCLK2Freq>
 8010618:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801061a:	68bb      	ldr	r3, [r7, #8]
 801061c:	461d      	mov	r5, r3
 801061e:	f04f 0600 	mov.w	r6, #0
 8010622:	46a8      	mov	r8, r5
 8010624:	46b1      	mov	r9, r6
 8010626:	eb18 0308 	adds.w	r3, r8, r8
 801062a:	eb49 0409 	adc.w	r4, r9, r9
 801062e:	4698      	mov	r8, r3
 8010630:	46a1      	mov	r9, r4
 8010632:	eb18 0805 	adds.w	r8, r8, r5
 8010636:	eb49 0906 	adc.w	r9, r9, r6
 801063a:	f04f 0100 	mov.w	r1, #0
 801063e:	f04f 0200 	mov.w	r2, #0
 8010642:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010646:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801064a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801064e:	4688      	mov	r8, r1
 8010650:	4691      	mov	r9, r2
 8010652:	eb18 0005 	adds.w	r0, r8, r5
 8010656:	eb49 0106 	adc.w	r1, r9, r6
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	685b      	ldr	r3, [r3, #4]
 801065e:	461d      	mov	r5, r3
 8010660:	f04f 0600 	mov.w	r6, #0
 8010664:	196b      	adds	r3, r5, r5
 8010666:	eb46 0406 	adc.w	r4, r6, r6
 801066a:	461a      	mov	r2, r3
 801066c:	4623      	mov	r3, r4
 801066e:	f7f0 f9f9 	bl	8000a64 <__aeabi_uldivmod>
 8010672:	4603      	mov	r3, r0
 8010674:	460c      	mov	r4, r1
 8010676:	461a      	mov	r2, r3
 8010678:	4ba5      	ldr	r3, [pc, #660]	; (8010910 <UART_SetConfig+0x384>)
 801067a:	fba3 2302 	umull	r2, r3, r3, r2
 801067e:	095b      	lsrs	r3, r3, #5
 8010680:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010684:	68bb      	ldr	r3, [r7, #8]
 8010686:	461d      	mov	r5, r3
 8010688:	f04f 0600 	mov.w	r6, #0
 801068c:	46a9      	mov	r9, r5
 801068e:	46b2      	mov	sl, r6
 8010690:	eb19 0309 	adds.w	r3, r9, r9
 8010694:	eb4a 040a 	adc.w	r4, sl, sl
 8010698:	4699      	mov	r9, r3
 801069a:	46a2      	mov	sl, r4
 801069c:	eb19 0905 	adds.w	r9, r9, r5
 80106a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80106a4:	f04f 0100 	mov.w	r1, #0
 80106a8:	f04f 0200 	mov.w	r2, #0
 80106ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80106b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80106b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80106b8:	4689      	mov	r9, r1
 80106ba:	4692      	mov	sl, r2
 80106bc:	eb19 0005 	adds.w	r0, r9, r5
 80106c0:	eb4a 0106 	adc.w	r1, sl, r6
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	685b      	ldr	r3, [r3, #4]
 80106c8:	461d      	mov	r5, r3
 80106ca:	f04f 0600 	mov.w	r6, #0
 80106ce:	196b      	adds	r3, r5, r5
 80106d0:	eb46 0406 	adc.w	r4, r6, r6
 80106d4:	461a      	mov	r2, r3
 80106d6:	4623      	mov	r3, r4
 80106d8:	f7f0 f9c4 	bl	8000a64 <__aeabi_uldivmod>
 80106dc:	4603      	mov	r3, r0
 80106de:	460c      	mov	r4, r1
 80106e0:	461a      	mov	r2, r3
 80106e2:	4b8b      	ldr	r3, [pc, #556]	; (8010910 <UART_SetConfig+0x384>)
 80106e4:	fba3 1302 	umull	r1, r3, r3, r2
 80106e8:	095b      	lsrs	r3, r3, #5
 80106ea:	2164      	movs	r1, #100	; 0x64
 80106ec:	fb01 f303 	mul.w	r3, r1, r3
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	00db      	lsls	r3, r3, #3
 80106f4:	3332      	adds	r3, #50	; 0x32
 80106f6:	4a86      	ldr	r2, [pc, #536]	; (8010910 <UART_SetConfig+0x384>)
 80106f8:	fba2 2303 	umull	r2, r3, r2, r3
 80106fc:	095b      	lsrs	r3, r3, #5
 80106fe:	005b      	lsls	r3, r3, #1
 8010700:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010704:	4498      	add	r8, r3
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	461d      	mov	r5, r3
 801070a:	f04f 0600 	mov.w	r6, #0
 801070e:	46a9      	mov	r9, r5
 8010710:	46b2      	mov	sl, r6
 8010712:	eb19 0309 	adds.w	r3, r9, r9
 8010716:	eb4a 040a 	adc.w	r4, sl, sl
 801071a:	4699      	mov	r9, r3
 801071c:	46a2      	mov	sl, r4
 801071e:	eb19 0905 	adds.w	r9, r9, r5
 8010722:	eb4a 0a06 	adc.w	sl, sl, r6
 8010726:	f04f 0100 	mov.w	r1, #0
 801072a:	f04f 0200 	mov.w	r2, #0
 801072e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010732:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010736:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801073a:	4689      	mov	r9, r1
 801073c:	4692      	mov	sl, r2
 801073e:	eb19 0005 	adds.w	r0, r9, r5
 8010742:	eb4a 0106 	adc.w	r1, sl, r6
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	461d      	mov	r5, r3
 801074c:	f04f 0600 	mov.w	r6, #0
 8010750:	196b      	adds	r3, r5, r5
 8010752:	eb46 0406 	adc.w	r4, r6, r6
 8010756:	461a      	mov	r2, r3
 8010758:	4623      	mov	r3, r4
 801075a:	f7f0 f983 	bl	8000a64 <__aeabi_uldivmod>
 801075e:	4603      	mov	r3, r0
 8010760:	460c      	mov	r4, r1
 8010762:	461a      	mov	r2, r3
 8010764:	4b6a      	ldr	r3, [pc, #424]	; (8010910 <UART_SetConfig+0x384>)
 8010766:	fba3 1302 	umull	r1, r3, r3, r2
 801076a:	095b      	lsrs	r3, r3, #5
 801076c:	2164      	movs	r1, #100	; 0x64
 801076e:	fb01 f303 	mul.w	r3, r1, r3
 8010772:	1ad3      	subs	r3, r2, r3
 8010774:	00db      	lsls	r3, r3, #3
 8010776:	3332      	adds	r3, #50	; 0x32
 8010778:	4a65      	ldr	r2, [pc, #404]	; (8010910 <UART_SetConfig+0x384>)
 801077a:	fba2 2303 	umull	r2, r3, r2, r3
 801077e:	095b      	lsrs	r3, r3, #5
 8010780:	f003 0207 	and.w	r2, r3, #7
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	4442      	add	r2, r8
 801078a:	609a      	str	r2, [r3, #8]
 801078c:	e26f      	b.n	8010c6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801078e:	f7fd fb6f 	bl	800de70 <HAL_RCC_GetPCLK1Freq>
 8010792:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	461d      	mov	r5, r3
 8010798:	f04f 0600 	mov.w	r6, #0
 801079c:	46a8      	mov	r8, r5
 801079e:	46b1      	mov	r9, r6
 80107a0:	eb18 0308 	adds.w	r3, r8, r8
 80107a4:	eb49 0409 	adc.w	r4, r9, r9
 80107a8:	4698      	mov	r8, r3
 80107aa:	46a1      	mov	r9, r4
 80107ac:	eb18 0805 	adds.w	r8, r8, r5
 80107b0:	eb49 0906 	adc.w	r9, r9, r6
 80107b4:	f04f 0100 	mov.w	r1, #0
 80107b8:	f04f 0200 	mov.w	r2, #0
 80107bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80107c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80107c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80107c8:	4688      	mov	r8, r1
 80107ca:	4691      	mov	r9, r2
 80107cc:	eb18 0005 	adds.w	r0, r8, r5
 80107d0:	eb49 0106 	adc.w	r1, r9, r6
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	461d      	mov	r5, r3
 80107da:	f04f 0600 	mov.w	r6, #0
 80107de:	196b      	adds	r3, r5, r5
 80107e0:	eb46 0406 	adc.w	r4, r6, r6
 80107e4:	461a      	mov	r2, r3
 80107e6:	4623      	mov	r3, r4
 80107e8:	f7f0 f93c 	bl	8000a64 <__aeabi_uldivmod>
 80107ec:	4603      	mov	r3, r0
 80107ee:	460c      	mov	r4, r1
 80107f0:	461a      	mov	r2, r3
 80107f2:	4b47      	ldr	r3, [pc, #284]	; (8010910 <UART_SetConfig+0x384>)
 80107f4:	fba3 2302 	umull	r2, r3, r3, r2
 80107f8:	095b      	lsrs	r3, r3, #5
 80107fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	461d      	mov	r5, r3
 8010802:	f04f 0600 	mov.w	r6, #0
 8010806:	46a9      	mov	r9, r5
 8010808:	46b2      	mov	sl, r6
 801080a:	eb19 0309 	adds.w	r3, r9, r9
 801080e:	eb4a 040a 	adc.w	r4, sl, sl
 8010812:	4699      	mov	r9, r3
 8010814:	46a2      	mov	sl, r4
 8010816:	eb19 0905 	adds.w	r9, r9, r5
 801081a:	eb4a 0a06 	adc.w	sl, sl, r6
 801081e:	f04f 0100 	mov.w	r1, #0
 8010822:	f04f 0200 	mov.w	r2, #0
 8010826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801082a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801082e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010832:	4689      	mov	r9, r1
 8010834:	4692      	mov	sl, r2
 8010836:	eb19 0005 	adds.w	r0, r9, r5
 801083a:	eb4a 0106 	adc.w	r1, sl, r6
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	461d      	mov	r5, r3
 8010844:	f04f 0600 	mov.w	r6, #0
 8010848:	196b      	adds	r3, r5, r5
 801084a:	eb46 0406 	adc.w	r4, r6, r6
 801084e:	461a      	mov	r2, r3
 8010850:	4623      	mov	r3, r4
 8010852:	f7f0 f907 	bl	8000a64 <__aeabi_uldivmod>
 8010856:	4603      	mov	r3, r0
 8010858:	460c      	mov	r4, r1
 801085a:	461a      	mov	r2, r3
 801085c:	4b2c      	ldr	r3, [pc, #176]	; (8010910 <UART_SetConfig+0x384>)
 801085e:	fba3 1302 	umull	r1, r3, r3, r2
 8010862:	095b      	lsrs	r3, r3, #5
 8010864:	2164      	movs	r1, #100	; 0x64
 8010866:	fb01 f303 	mul.w	r3, r1, r3
 801086a:	1ad3      	subs	r3, r2, r3
 801086c:	00db      	lsls	r3, r3, #3
 801086e:	3332      	adds	r3, #50	; 0x32
 8010870:	4a27      	ldr	r2, [pc, #156]	; (8010910 <UART_SetConfig+0x384>)
 8010872:	fba2 2303 	umull	r2, r3, r2, r3
 8010876:	095b      	lsrs	r3, r3, #5
 8010878:	005b      	lsls	r3, r3, #1
 801087a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801087e:	4498      	add	r8, r3
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	461d      	mov	r5, r3
 8010884:	f04f 0600 	mov.w	r6, #0
 8010888:	46a9      	mov	r9, r5
 801088a:	46b2      	mov	sl, r6
 801088c:	eb19 0309 	adds.w	r3, r9, r9
 8010890:	eb4a 040a 	adc.w	r4, sl, sl
 8010894:	4699      	mov	r9, r3
 8010896:	46a2      	mov	sl, r4
 8010898:	eb19 0905 	adds.w	r9, r9, r5
 801089c:	eb4a 0a06 	adc.w	sl, sl, r6
 80108a0:	f04f 0100 	mov.w	r1, #0
 80108a4:	f04f 0200 	mov.w	r2, #0
 80108a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80108ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80108b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80108b4:	4689      	mov	r9, r1
 80108b6:	4692      	mov	sl, r2
 80108b8:	eb19 0005 	adds.w	r0, r9, r5
 80108bc:	eb4a 0106 	adc.w	r1, sl, r6
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	461d      	mov	r5, r3
 80108c6:	f04f 0600 	mov.w	r6, #0
 80108ca:	196b      	adds	r3, r5, r5
 80108cc:	eb46 0406 	adc.w	r4, r6, r6
 80108d0:	461a      	mov	r2, r3
 80108d2:	4623      	mov	r3, r4
 80108d4:	f7f0 f8c6 	bl	8000a64 <__aeabi_uldivmod>
 80108d8:	4603      	mov	r3, r0
 80108da:	460c      	mov	r4, r1
 80108dc:	461a      	mov	r2, r3
 80108de:	4b0c      	ldr	r3, [pc, #48]	; (8010910 <UART_SetConfig+0x384>)
 80108e0:	fba3 1302 	umull	r1, r3, r3, r2
 80108e4:	095b      	lsrs	r3, r3, #5
 80108e6:	2164      	movs	r1, #100	; 0x64
 80108e8:	fb01 f303 	mul.w	r3, r1, r3
 80108ec:	1ad3      	subs	r3, r2, r3
 80108ee:	00db      	lsls	r3, r3, #3
 80108f0:	3332      	adds	r3, #50	; 0x32
 80108f2:	4a07      	ldr	r2, [pc, #28]	; (8010910 <UART_SetConfig+0x384>)
 80108f4:	fba2 2303 	umull	r2, r3, r2, r3
 80108f8:	095b      	lsrs	r3, r3, #5
 80108fa:	f003 0207 	and.w	r2, r3, #7
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	4442      	add	r2, r8
 8010904:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8010906:	e1b2      	b.n	8010c6e <UART_SetConfig+0x6e2>
 8010908:	40011000 	.word	0x40011000
 801090c:	40011400 	.word	0x40011400
 8010910:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	4ad7      	ldr	r2, [pc, #860]	; (8010c78 <UART_SetConfig+0x6ec>)
 801091a:	4293      	cmp	r3, r2
 801091c:	d005      	beq.n	801092a <UART_SetConfig+0x39e>
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	4ad6      	ldr	r2, [pc, #856]	; (8010c7c <UART_SetConfig+0x6f0>)
 8010924:	4293      	cmp	r3, r2
 8010926:	f040 80d1 	bne.w	8010acc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801092a:	f7fd fab5 	bl	800de98 <HAL_RCC_GetPCLK2Freq>
 801092e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	469a      	mov	sl, r3
 8010934:	f04f 0b00 	mov.w	fp, #0
 8010938:	46d0      	mov	r8, sl
 801093a:	46d9      	mov	r9, fp
 801093c:	eb18 0308 	adds.w	r3, r8, r8
 8010940:	eb49 0409 	adc.w	r4, r9, r9
 8010944:	4698      	mov	r8, r3
 8010946:	46a1      	mov	r9, r4
 8010948:	eb18 080a 	adds.w	r8, r8, sl
 801094c:	eb49 090b 	adc.w	r9, r9, fp
 8010950:	f04f 0100 	mov.w	r1, #0
 8010954:	f04f 0200 	mov.w	r2, #0
 8010958:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801095c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010960:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010964:	4688      	mov	r8, r1
 8010966:	4691      	mov	r9, r2
 8010968:	eb1a 0508 	adds.w	r5, sl, r8
 801096c:	eb4b 0609 	adc.w	r6, fp, r9
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	4619      	mov	r1, r3
 8010976:	f04f 0200 	mov.w	r2, #0
 801097a:	f04f 0300 	mov.w	r3, #0
 801097e:	f04f 0400 	mov.w	r4, #0
 8010982:	0094      	lsls	r4, r2, #2
 8010984:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010988:	008b      	lsls	r3, r1, #2
 801098a:	461a      	mov	r2, r3
 801098c:	4623      	mov	r3, r4
 801098e:	4628      	mov	r0, r5
 8010990:	4631      	mov	r1, r6
 8010992:	f7f0 f867 	bl	8000a64 <__aeabi_uldivmod>
 8010996:	4603      	mov	r3, r0
 8010998:	460c      	mov	r4, r1
 801099a:	461a      	mov	r2, r3
 801099c:	4bb8      	ldr	r3, [pc, #736]	; (8010c80 <UART_SetConfig+0x6f4>)
 801099e:	fba3 2302 	umull	r2, r3, r3, r2
 80109a2:	095b      	lsrs	r3, r3, #5
 80109a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	469b      	mov	fp, r3
 80109ac:	f04f 0c00 	mov.w	ip, #0
 80109b0:	46d9      	mov	r9, fp
 80109b2:	46e2      	mov	sl, ip
 80109b4:	eb19 0309 	adds.w	r3, r9, r9
 80109b8:	eb4a 040a 	adc.w	r4, sl, sl
 80109bc:	4699      	mov	r9, r3
 80109be:	46a2      	mov	sl, r4
 80109c0:	eb19 090b 	adds.w	r9, r9, fp
 80109c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80109c8:	f04f 0100 	mov.w	r1, #0
 80109cc:	f04f 0200 	mov.w	r2, #0
 80109d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80109d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80109d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80109dc:	4689      	mov	r9, r1
 80109de:	4692      	mov	sl, r2
 80109e0:	eb1b 0509 	adds.w	r5, fp, r9
 80109e4:	eb4c 060a 	adc.w	r6, ip, sl
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	685b      	ldr	r3, [r3, #4]
 80109ec:	4619      	mov	r1, r3
 80109ee:	f04f 0200 	mov.w	r2, #0
 80109f2:	f04f 0300 	mov.w	r3, #0
 80109f6:	f04f 0400 	mov.w	r4, #0
 80109fa:	0094      	lsls	r4, r2, #2
 80109fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010a00:	008b      	lsls	r3, r1, #2
 8010a02:	461a      	mov	r2, r3
 8010a04:	4623      	mov	r3, r4
 8010a06:	4628      	mov	r0, r5
 8010a08:	4631      	mov	r1, r6
 8010a0a:	f7f0 f82b 	bl	8000a64 <__aeabi_uldivmod>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	460c      	mov	r4, r1
 8010a12:	461a      	mov	r2, r3
 8010a14:	4b9a      	ldr	r3, [pc, #616]	; (8010c80 <UART_SetConfig+0x6f4>)
 8010a16:	fba3 1302 	umull	r1, r3, r3, r2
 8010a1a:	095b      	lsrs	r3, r3, #5
 8010a1c:	2164      	movs	r1, #100	; 0x64
 8010a1e:	fb01 f303 	mul.w	r3, r1, r3
 8010a22:	1ad3      	subs	r3, r2, r3
 8010a24:	011b      	lsls	r3, r3, #4
 8010a26:	3332      	adds	r3, #50	; 0x32
 8010a28:	4a95      	ldr	r2, [pc, #596]	; (8010c80 <UART_SetConfig+0x6f4>)
 8010a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8010a2e:	095b      	lsrs	r3, r3, #5
 8010a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a34:	4498      	add	r8, r3
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	469b      	mov	fp, r3
 8010a3a:	f04f 0c00 	mov.w	ip, #0
 8010a3e:	46d9      	mov	r9, fp
 8010a40:	46e2      	mov	sl, ip
 8010a42:	eb19 0309 	adds.w	r3, r9, r9
 8010a46:	eb4a 040a 	adc.w	r4, sl, sl
 8010a4a:	4699      	mov	r9, r3
 8010a4c:	46a2      	mov	sl, r4
 8010a4e:	eb19 090b 	adds.w	r9, r9, fp
 8010a52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010a56:	f04f 0100 	mov.w	r1, #0
 8010a5a:	f04f 0200 	mov.w	r2, #0
 8010a5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010a62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010a66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010a6a:	4689      	mov	r9, r1
 8010a6c:	4692      	mov	sl, r2
 8010a6e:	eb1b 0509 	adds.w	r5, fp, r9
 8010a72:	eb4c 060a 	adc.w	r6, ip, sl
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	685b      	ldr	r3, [r3, #4]
 8010a7a:	4619      	mov	r1, r3
 8010a7c:	f04f 0200 	mov.w	r2, #0
 8010a80:	f04f 0300 	mov.w	r3, #0
 8010a84:	f04f 0400 	mov.w	r4, #0
 8010a88:	0094      	lsls	r4, r2, #2
 8010a8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010a8e:	008b      	lsls	r3, r1, #2
 8010a90:	461a      	mov	r2, r3
 8010a92:	4623      	mov	r3, r4
 8010a94:	4628      	mov	r0, r5
 8010a96:	4631      	mov	r1, r6
 8010a98:	f7ef ffe4 	bl	8000a64 <__aeabi_uldivmod>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	460c      	mov	r4, r1
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	4b77      	ldr	r3, [pc, #476]	; (8010c80 <UART_SetConfig+0x6f4>)
 8010aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8010aa8:	095b      	lsrs	r3, r3, #5
 8010aaa:	2164      	movs	r1, #100	; 0x64
 8010aac:	fb01 f303 	mul.w	r3, r1, r3
 8010ab0:	1ad3      	subs	r3, r2, r3
 8010ab2:	011b      	lsls	r3, r3, #4
 8010ab4:	3332      	adds	r3, #50	; 0x32
 8010ab6:	4a72      	ldr	r2, [pc, #456]	; (8010c80 <UART_SetConfig+0x6f4>)
 8010ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8010abc:	095b      	lsrs	r3, r3, #5
 8010abe:	f003 020f 	and.w	r2, r3, #15
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	4442      	add	r2, r8
 8010ac8:	609a      	str	r2, [r3, #8]
 8010aca:	e0d0      	b.n	8010c6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010acc:	f7fd f9d0 	bl	800de70 <HAL_RCC_GetPCLK1Freq>
 8010ad0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010ad2:	68bb      	ldr	r3, [r7, #8]
 8010ad4:	469a      	mov	sl, r3
 8010ad6:	f04f 0b00 	mov.w	fp, #0
 8010ada:	46d0      	mov	r8, sl
 8010adc:	46d9      	mov	r9, fp
 8010ade:	eb18 0308 	adds.w	r3, r8, r8
 8010ae2:	eb49 0409 	adc.w	r4, r9, r9
 8010ae6:	4698      	mov	r8, r3
 8010ae8:	46a1      	mov	r9, r4
 8010aea:	eb18 080a 	adds.w	r8, r8, sl
 8010aee:	eb49 090b 	adc.w	r9, r9, fp
 8010af2:	f04f 0100 	mov.w	r1, #0
 8010af6:	f04f 0200 	mov.w	r2, #0
 8010afa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010afe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010b02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010b06:	4688      	mov	r8, r1
 8010b08:	4691      	mov	r9, r2
 8010b0a:	eb1a 0508 	adds.w	r5, sl, r8
 8010b0e:	eb4b 0609 	adc.w	r6, fp, r9
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	4619      	mov	r1, r3
 8010b18:	f04f 0200 	mov.w	r2, #0
 8010b1c:	f04f 0300 	mov.w	r3, #0
 8010b20:	f04f 0400 	mov.w	r4, #0
 8010b24:	0094      	lsls	r4, r2, #2
 8010b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010b2a:	008b      	lsls	r3, r1, #2
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	4623      	mov	r3, r4
 8010b30:	4628      	mov	r0, r5
 8010b32:	4631      	mov	r1, r6
 8010b34:	f7ef ff96 	bl	8000a64 <__aeabi_uldivmod>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	460c      	mov	r4, r1
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	4b50      	ldr	r3, [pc, #320]	; (8010c80 <UART_SetConfig+0x6f4>)
 8010b40:	fba3 2302 	umull	r2, r3, r3, r2
 8010b44:	095b      	lsrs	r3, r3, #5
 8010b46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	469b      	mov	fp, r3
 8010b4e:	f04f 0c00 	mov.w	ip, #0
 8010b52:	46d9      	mov	r9, fp
 8010b54:	46e2      	mov	sl, ip
 8010b56:	eb19 0309 	adds.w	r3, r9, r9
 8010b5a:	eb4a 040a 	adc.w	r4, sl, sl
 8010b5e:	4699      	mov	r9, r3
 8010b60:	46a2      	mov	sl, r4
 8010b62:	eb19 090b 	adds.w	r9, r9, fp
 8010b66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010b6a:	f04f 0100 	mov.w	r1, #0
 8010b6e:	f04f 0200 	mov.w	r2, #0
 8010b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010b76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010b7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010b7e:	4689      	mov	r9, r1
 8010b80:	4692      	mov	sl, r2
 8010b82:	eb1b 0509 	adds.w	r5, fp, r9
 8010b86:	eb4c 060a 	adc.w	r6, ip, sl
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	685b      	ldr	r3, [r3, #4]
 8010b8e:	4619      	mov	r1, r3
 8010b90:	f04f 0200 	mov.w	r2, #0
 8010b94:	f04f 0300 	mov.w	r3, #0
 8010b98:	f04f 0400 	mov.w	r4, #0
 8010b9c:	0094      	lsls	r4, r2, #2
 8010b9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010ba2:	008b      	lsls	r3, r1, #2
 8010ba4:	461a      	mov	r2, r3
 8010ba6:	4623      	mov	r3, r4
 8010ba8:	4628      	mov	r0, r5
 8010baa:	4631      	mov	r1, r6
 8010bac:	f7ef ff5a 	bl	8000a64 <__aeabi_uldivmod>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	460c      	mov	r4, r1
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	4b32      	ldr	r3, [pc, #200]	; (8010c80 <UART_SetConfig+0x6f4>)
 8010bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8010bbc:	095b      	lsrs	r3, r3, #5
 8010bbe:	2164      	movs	r1, #100	; 0x64
 8010bc0:	fb01 f303 	mul.w	r3, r1, r3
 8010bc4:	1ad3      	subs	r3, r2, r3
 8010bc6:	011b      	lsls	r3, r3, #4
 8010bc8:	3332      	adds	r3, #50	; 0x32
 8010bca:	4a2d      	ldr	r2, [pc, #180]	; (8010c80 <UART_SetConfig+0x6f4>)
 8010bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8010bd0:	095b      	lsrs	r3, r3, #5
 8010bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bd6:	4498      	add	r8, r3
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	469b      	mov	fp, r3
 8010bdc:	f04f 0c00 	mov.w	ip, #0
 8010be0:	46d9      	mov	r9, fp
 8010be2:	46e2      	mov	sl, ip
 8010be4:	eb19 0309 	adds.w	r3, r9, r9
 8010be8:	eb4a 040a 	adc.w	r4, sl, sl
 8010bec:	4699      	mov	r9, r3
 8010bee:	46a2      	mov	sl, r4
 8010bf0:	eb19 090b 	adds.w	r9, r9, fp
 8010bf4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010bf8:	f04f 0100 	mov.w	r1, #0
 8010bfc:	f04f 0200 	mov.w	r2, #0
 8010c00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010c04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010c08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010c0c:	4689      	mov	r9, r1
 8010c0e:	4692      	mov	sl, r2
 8010c10:	eb1b 0509 	adds.w	r5, fp, r9
 8010c14:	eb4c 060a 	adc.w	r6, ip, sl
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	f04f 0200 	mov.w	r2, #0
 8010c22:	f04f 0300 	mov.w	r3, #0
 8010c26:	f04f 0400 	mov.w	r4, #0
 8010c2a:	0094      	lsls	r4, r2, #2
 8010c2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010c30:	008b      	lsls	r3, r1, #2
 8010c32:	461a      	mov	r2, r3
 8010c34:	4623      	mov	r3, r4
 8010c36:	4628      	mov	r0, r5
 8010c38:	4631      	mov	r1, r6
 8010c3a:	f7ef ff13 	bl	8000a64 <__aeabi_uldivmod>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	460c      	mov	r4, r1
 8010c42:	461a      	mov	r2, r3
 8010c44:	4b0e      	ldr	r3, [pc, #56]	; (8010c80 <UART_SetConfig+0x6f4>)
 8010c46:	fba3 1302 	umull	r1, r3, r3, r2
 8010c4a:	095b      	lsrs	r3, r3, #5
 8010c4c:	2164      	movs	r1, #100	; 0x64
 8010c4e:	fb01 f303 	mul.w	r3, r1, r3
 8010c52:	1ad3      	subs	r3, r2, r3
 8010c54:	011b      	lsls	r3, r3, #4
 8010c56:	3332      	adds	r3, #50	; 0x32
 8010c58:	4a09      	ldr	r2, [pc, #36]	; (8010c80 <UART_SetConfig+0x6f4>)
 8010c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8010c5e:	095b      	lsrs	r3, r3, #5
 8010c60:	f003 020f 	and.w	r2, r3, #15
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4442      	add	r2, r8
 8010c6a:	609a      	str	r2, [r3, #8]
}
 8010c6c:	e7ff      	b.n	8010c6e <UART_SetConfig+0x6e2>
 8010c6e:	bf00      	nop
 8010c70:	3714      	adds	r7, #20
 8010c72:	46bd      	mov	sp, r7
 8010c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c78:	40011000 	.word	0x40011000
 8010c7c:	40011400 	.word	0x40011400
 8010c80:	51eb851f 	.word	0x51eb851f

08010c84 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010c84:	b084      	sub	sp, #16
 8010c86:	b480      	push	{r7}
 8010c88:	b085      	sub	sp, #20
 8010c8a:	af00      	add	r7, sp, #0
 8010c8c:	6078      	str	r0, [r7, #4]
 8010c8e:	f107 001c 	add.w	r0, r7, #28
 8010c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010c96:	2300      	movs	r3, #0
 8010c98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010c9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010c9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010c9e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8010ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8010ca2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010ca6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010caa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010cae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010cb0:	68fa      	ldr	r2, [r7, #12]
 8010cb2:	4313      	orrs	r3, r2
 8010cb4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	685b      	ldr	r3, [r3, #4]
 8010cba:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010cbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010cc2:	68fa      	ldr	r2, [r7, #12]
 8010cc4:	431a      	orrs	r2, r3
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010cca:	2300      	movs	r3, #0
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3714      	adds	r7, #20
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd6:	b004      	add	sp, #16
 8010cd8:	4770      	bx	lr

08010cda <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8010cda:	b480      	push	{r7}
 8010cdc:	b083      	sub	sp, #12
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010ce8:	4618      	mov	r0, r3
 8010cea:	370c      	adds	r7, #12
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr

08010cf4 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010cf4:	b480      	push	{r7}
 8010cf6:	b083      	sub	sp, #12
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	681a      	ldr	r2, [r3, #0]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010d08:	2300      	movs	r3, #0
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	370c      	adds	r7, #12
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d14:	4770      	bx	lr

08010d16 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8010d16:	b580      	push	{r7, lr}
 8010d18:	b082      	sub	sp, #8
 8010d1a:	af00      	add	r7, sp, #0
 8010d1c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2203      	movs	r2, #3
 8010d22:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010d24:	2002      	movs	r0, #2
 8010d26:	f7fa fe37 	bl	800b998 <HAL_Delay>
  
  return HAL_OK;
 8010d2a:	2300      	movs	r3, #0
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010d34:	b480      	push	{r7}
 8010d36:	b083      	sub	sp, #12
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	f003 0303 	and.w	r3, r3, #3
}
 8010d44:	4618      	mov	r0, r3
 8010d46:	370c      	adds	r7, #12
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr

08010d50 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010d50:	b480      	push	{r7}
 8010d52:	b085      	sub	sp, #20
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	6078      	str	r0, [r7, #4]
 8010d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	681a      	ldr	r2, [r3, #0]
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010d6e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010d74:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010d7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010d7c:	68fa      	ldr	r2, [r7, #12]
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	68db      	ldr	r3, [r3, #12]
 8010d86:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010d8a:	f023 030f 	bic.w	r3, r3, #15
 8010d8e:	68fa      	ldr	r2, [r7, #12]
 8010d90:	431a      	orrs	r2, r3
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010d96:	2300      	movs	r3, #0
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	3714      	adds	r7, #20
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	691b      	ldr	r3, [r3, #16]
 8010db0:	b2db      	uxtb	r3, r3
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	370c      	adds	r7, #12
 8010db6:	46bd      	mov	sp, r7
 8010db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbc:	4770      	bx	lr

08010dbe <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010dbe:	b480      	push	{r7}
 8010dc0:	b085      	sub	sp, #20
 8010dc2:	af00      	add	r7, sp, #0
 8010dc4:	6078      	str	r0, [r7, #4]
 8010dc6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	3314      	adds	r3, #20
 8010dcc:	461a      	mov	r2, r3
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	4413      	add	r3, r2
 8010dd2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	681b      	ldr	r3, [r3, #0]
}  
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3714      	adds	r7, #20
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr

08010de4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010de4:	b480      	push	{r7}
 8010de6:	b085      	sub	sp, #20
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010dee:	2300      	movs	r3, #0
 8010df0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	681a      	ldr	r2, [r3, #0]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	685a      	ldr	r2, [r3, #4]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010e0a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010e10:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010e12:	683b      	ldr	r3, [r7, #0]
 8010e14:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8010e16:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010e18:	68fa      	ldr	r2, [r7, #12]
 8010e1a:	4313      	orrs	r3, r2
 8010e1c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e22:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	431a      	orrs	r2, r3
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010e2e:	2300      	movs	r3, #0

}
 8010e30:	4618      	mov	r0, r3
 8010e32:	3714      	adds	r7, #20
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b088      	sub	sp, #32
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	6078      	str	r0, [r7, #4]
 8010e44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010e4a:	2310      	movs	r3, #16
 8010e4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010e4e:	2340      	movs	r3, #64	; 0x40
 8010e50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010e52:	2300      	movs	r3, #0
 8010e54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010e5c:	f107 0308 	add.w	r3, r7, #8
 8010e60:	4619      	mov	r1, r3
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f7ff ff74 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e6c:	2110      	movs	r1, #16
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f000 f9fe 	bl	8011270 <SDMMC_GetCmdResp1>
 8010e74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e76:	69fb      	ldr	r3, [r7, #28]
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3720      	adds	r7, #32
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b088      	sub	sp, #32
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010e8e:	2311      	movs	r3, #17
 8010e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010e92:	2340      	movs	r3, #64	; 0x40
 8010e94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010e96:	2300      	movs	r3, #0
 8010e98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ea0:	f107 0308 	add.w	r3, r7, #8
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f7ff ff52 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8010eb0:	2111      	movs	r1, #17
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f000 f9dc 	bl	8011270 <SDMMC_GetCmdResp1>
 8010eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010eba:	69fb      	ldr	r3, [r7, #28]
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3720      	adds	r7, #32
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b088      	sub	sp, #32
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010ed2:	2312      	movs	r3, #18
 8010ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ed6:	2340      	movs	r3, #64	; 0x40
 8010ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010eda:	2300      	movs	r3, #0
 8010edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ee2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ee4:	f107 0308 	add.w	r3, r7, #8
 8010ee8:	4619      	mov	r1, r3
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f7ff ff30 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ef4:	2112      	movs	r1, #18
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 f9ba 	bl	8011270 <SDMMC_GetCmdResp1>
 8010efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010efe:	69fb      	ldr	r3, [r7, #28]
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3720      	adds	r7, #32
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b088      	sub	sp, #32
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
 8010f10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010f16:	2318      	movs	r3, #24
 8010f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010f1a:	2340      	movs	r3, #64	; 0x40
 8010f1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010f1e:	2300      	movs	r3, #0
 8010f20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010f28:	f107 0308 	add.w	r3, r7, #8
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f7ff ff0e 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f38:	2118      	movs	r1, #24
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f000 f998 	bl	8011270 <SDMMC_GetCmdResp1>
 8010f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f42:	69fb      	ldr	r3, [r7, #28]
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3720      	adds	r7, #32
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b088      	sub	sp, #32
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010f5a:	2319      	movs	r3, #25
 8010f5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010f5e:	2340      	movs	r3, #64	; 0x40
 8010f60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010f62:	2300      	movs	r3, #0
 8010f64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010f66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010f6c:	f107 0308 	add.w	r3, r7, #8
 8010f70:	4619      	mov	r1, r3
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f7ff feec 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f7c:	2119      	movs	r1, #25
 8010f7e:	6878      	ldr	r0, [r7, #4]
 8010f80:	f000 f976 	bl	8011270 <SDMMC_GetCmdResp1>
 8010f84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010f86:	69fb      	ldr	r3, [r7, #28]
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3720      	adds	r7, #32
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b088      	sub	sp, #32
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010f9c:	230c      	movs	r3, #12
 8010f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010fa0:	2340      	movs	r3, #64	; 0x40
 8010fa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010fae:	f107 0308 	add.w	r3, r7, #8
 8010fb2:	4619      	mov	r1, r3
 8010fb4:	6878      	ldr	r0, [r7, #4]
 8010fb6:	f7ff fecb 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010fba:	4a05      	ldr	r2, [pc, #20]	; (8010fd0 <SDMMC_CmdStopTransfer+0x40>)
 8010fbc:	210c      	movs	r1, #12
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f000 f956 	bl	8011270 <SDMMC_GetCmdResp1>
 8010fc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010fc6:	69fb      	ldr	r3, [r7, #28]
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3720      	adds	r7, #32
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	05f5e100 	.word	0x05f5e100

08010fd4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b08a      	sub	sp, #40	; 0x28
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	60f8      	str	r0, [r7, #12]
 8010fdc:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010fe4:	2307      	movs	r3, #7
 8010fe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010fe8:	2340      	movs	r3, #64	; 0x40
 8010fea:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010fec:	2300      	movs	r3, #0
 8010fee:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ff4:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ff6:	f107 0310 	add.w	r3, r7, #16
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	68f8      	ldr	r0, [r7, #12]
 8010ffe:	f7ff fea7 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8011002:	f241 3288 	movw	r2, #5000	; 0x1388
 8011006:	2107      	movs	r1, #7
 8011008:	68f8      	ldr	r0, [r7, #12]
 801100a:	f000 f931 	bl	8011270 <SDMMC_GetCmdResp1>
 801100e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011012:	4618      	mov	r0, r3
 8011014:	3728      	adds	r7, #40	; 0x28
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}

0801101a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801101a:	b580      	push	{r7, lr}
 801101c:	b088      	sub	sp, #32
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8011022:	2300      	movs	r3, #0
 8011024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011026:	2300      	movs	r3, #0
 8011028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801102a:	2300      	movs	r3, #0
 801102c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801102e:	2300      	movs	r3, #0
 8011030:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011036:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011038:	f107 0308 	add.w	r3, r7, #8
 801103c:	4619      	mov	r1, r3
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f7ff fe86 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 f8eb 	bl	8011220 <SDMMC_GetCmdError>
 801104a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801104c:	69fb      	ldr	r3, [r7, #28]
}
 801104e:	4618      	mov	r0, r3
 8011050:	3720      	adds	r7, #32
 8011052:	46bd      	mov	sp, r7
 8011054:	bd80      	pop	{r7, pc}

08011056 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8011056:	b580      	push	{r7, lr}
 8011058:	b088      	sub	sp, #32
 801105a:	af00      	add	r7, sp, #0
 801105c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801105e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011062:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011064:	2308      	movs	r3, #8
 8011066:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8011068:	2340      	movs	r3, #64	; 0x40
 801106a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801106c:	2300      	movs	r3, #0
 801106e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011074:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011076:	f107 0308 	add.w	r3, r7, #8
 801107a:	4619      	mov	r1, r3
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f7ff fe67 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f000 fad4 	bl	8011630 <SDMMC_GetCmdResp7>
 8011088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801108a:	69fb      	ldr	r3, [r7, #28]
}
 801108c:	4618      	mov	r0, r3
 801108e:	3720      	adds	r7, #32
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}

08011094 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b088      	sub	sp, #32
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80110a2:	2337      	movs	r3, #55	; 0x37
 80110a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80110a6:	2340      	movs	r3, #64	; 0x40
 80110a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80110aa:	2300      	movs	r3, #0
 80110ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80110ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80110b4:	f107 0308 	add.w	r3, r7, #8
 80110b8:	4619      	mov	r1, r3
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f7ff fe48 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80110c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80110c4:	2137      	movs	r1, #55	; 0x37
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f000 f8d2 	bl	8011270 <SDMMC_GetCmdResp1>
 80110cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80110ce:	69fb      	ldr	r3, [r7, #28]
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3720      	adds	r7, #32
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}

080110d8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b088      	sub	sp, #32
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80110e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80110ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80110ee:	2329      	movs	r3, #41	; 0x29
 80110f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80110f2:	2340      	movs	r3, #64	; 0x40
 80110f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80110f6:	2300      	movs	r3, #0
 80110f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80110fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8011100:	f107 0308 	add.w	r3, r7, #8
 8011104:	4619      	mov	r1, r3
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f7ff fe22 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f000 f9e1 	bl	80114d4 <SDMMC_GetCmdResp3>
 8011112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011114:	69fb      	ldr	r3, [r7, #28]
}
 8011116:	4618      	mov	r0, r3
 8011118:	3720      	adds	r7, #32
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}

0801111e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 801111e:	b580      	push	{r7, lr}
 8011120:	b088      	sub	sp, #32
 8011122:	af00      	add	r7, sp, #0
 8011124:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011126:	2300      	movs	r3, #0
 8011128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801112a:	2302      	movs	r3, #2
 801112c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801112e:	23c0      	movs	r3, #192	; 0xc0
 8011130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011132:	2300      	movs	r3, #0
 8011134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801113a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801113c:	f107 0308 	add.w	r3, r7, #8
 8011140:	4619      	mov	r1, r3
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f7ff fe04 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f000 f97d 	bl	8011448 <SDMMC_GetCmdResp2>
 801114e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011150:	69fb      	ldr	r3, [r7, #28]
}
 8011152:	4618      	mov	r0, r3
 8011154:	3720      	adds	r7, #32
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}

0801115a <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801115a:	b580      	push	{r7, lr}
 801115c:	b088      	sub	sp, #32
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
 8011162:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011168:	2309      	movs	r3, #9
 801116a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801116c:	23c0      	movs	r3, #192	; 0xc0
 801116e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8011170:	2300      	movs	r3, #0
 8011172:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8011174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011178:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801117a:	f107 0308 	add.w	r3, r7, #8
 801117e:	4619      	mov	r1, r3
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f7ff fde5 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 f95e 	bl	8011448 <SDMMC_GetCmdResp2>
 801118c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801118e:	69fb      	ldr	r3, [r7, #28]
}
 8011190:	4618      	mov	r0, r3
 8011192:	3720      	adds	r7, #32
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}

08011198 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b088      	sub	sp, #32
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80111a2:	2300      	movs	r3, #0
 80111a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80111a6:	2303      	movs	r3, #3
 80111a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80111aa:	2340      	movs	r3, #64	; 0x40
 80111ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80111ae:	2300      	movs	r3, #0
 80111b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80111b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80111b8:	f107 0308 	add.w	r3, r7, #8
 80111bc:	4619      	mov	r1, r3
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f7ff fdc6 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80111c4:	683a      	ldr	r2, [r7, #0]
 80111c6:	2103      	movs	r1, #3
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f000 f9bd 	bl	8011548 <SDMMC_GetCmdResp6>
 80111ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111d0:	69fb      	ldr	r3, [r7, #28]
}
 80111d2:	4618      	mov	r0, r3
 80111d4:	3720      	adds	r7, #32
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}

080111da <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b088      	sub	sp, #32
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
 80111e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80111e8:	230d      	movs	r3, #13
 80111ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80111ec:	2340      	movs	r3, #64	; 0x40
 80111ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80111f0:	2300      	movs	r3, #0
 80111f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80111f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80111f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80111fa:	f107 0308 	add.w	r3, r7, #8
 80111fe:	4619      	mov	r1, r3
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f7ff fda5 	bl	8010d50 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8011206:	f241 3288 	movw	r2, #5000	; 0x1388
 801120a:	210d      	movs	r1, #13
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f000 f82f 	bl	8011270 <SDMMC_GetCmdResp1>
 8011212:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011214:	69fb      	ldr	r3, [r7, #28]
}
 8011216:	4618      	mov	r0, r3
 8011218:	3720      	adds	r7, #32
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
	...

08011220 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8011220:	b490      	push	{r4, r7}
 8011222:	b082      	sub	sp, #8
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011228:	4b0f      	ldr	r3, [pc, #60]	; (8011268 <SDMMC_GetCmdError+0x48>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	4a0f      	ldr	r2, [pc, #60]	; (801126c <SDMMC_GetCmdError+0x4c>)
 801122e:	fba2 2303 	umull	r2, r3, r2, r3
 8011232:	0a5b      	lsrs	r3, r3, #9
 8011234:	f241 3288 	movw	r2, #5000	; 0x1388
 8011238:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801123c:	4623      	mov	r3, r4
 801123e:	1e5c      	subs	r4, r3, #1
 8011240:	2b00      	cmp	r3, #0
 8011242:	d102      	bne.n	801124a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011244:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011248:	e009      	b.n	801125e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011252:	2b00      	cmp	r3, #0
 8011254:	d0f2      	beq.n	801123c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	22c5      	movs	r2, #197	; 0xc5
 801125a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 801125c:	2300      	movs	r3, #0
}
 801125e:	4618      	mov	r0, r3
 8011260:	3708      	adds	r7, #8
 8011262:	46bd      	mov	sp, r7
 8011264:	bc90      	pop	{r4, r7}
 8011266:	4770      	bx	lr
 8011268:	20000074 	.word	0x20000074
 801126c:	10624dd3 	.word	0x10624dd3

08011270 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011270:	b590      	push	{r4, r7, lr}
 8011272:	b087      	sub	sp, #28
 8011274:	af00      	add	r7, sp, #0
 8011276:	60f8      	str	r0, [r7, #12]
 8011278:	460b      	mov	r3, r1
 801127a:	607a      	str	r2, [r7, #4]
 801127c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801127e:	4b6f      	ldr	r3, [pc, #444]	; (801143c <SDMMC_GetCmdResp1+0x1cc>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	4a6f      	ldr	r2, [pc, #444]	; (8011440 <SDMMC_GetCmdResp1+0x1d0>)
 8011284:	fba2 2303 	umull	r2, r3, r2, r3
 8011288:	0a5b      	lsrs	r3, r3, #9
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011290:	4623      	mov	r3, r4
 8011292:	1e5c      	subs	r4, r3, #1
 8011294:	2b00      	cmp	r3, #0
 8011296:	d102      	bne.n	801129e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011298:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801129c:	e0c9      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112a2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d0f0      	beq.n	8011290 <SDMMC_GetCmdResp1+0x20>
 80112ae:	697b      	ldr	r3, [r7, #20]
 80112b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d1eb      	bne.n	8011290 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112bc:	f003 0304 	and.w	r3, r3, #4
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d004      	beq.n	80112ce <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	2204      	movs	r2, #4
 80112c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80112ca:	2304      	movs	r3, #4
 80112cc:	e0b1      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112d2:	f003 0301 	and.w	r3, r3, #1
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d004      	beq.n	80112e4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2201      	movs	r2, #1
 80112de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112e0:	2301      	movs	r3, #1
 80112e2:	e0a6      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80112e4:	68fb      	ldr	r3, [r7, #12]
 80112e6:	22c5      	movs	r2, #197	; 0xc5
 80112e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80112ea:	68f8      	ldr	r0, [r7, #12]
 80112ec:	f7ff fd5a 	bl	8010da4 <SDIO_GetCommandResponse>
 80112f0:	4603      	mov	r3, r0
 80112f2:	461a      	mov	r2, r3
 80112f4:	7afb      	ldrb	r3, [r7, #11]
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d001      	beq.n	80112fe <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112fa:	2301      	movs	r3, #1
 80112fc:	e099      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80112fe:	2100      	movs	r1, #0
 8011300:	68f8      	ldr	r0, [r7, #12]
 8011302:	f7ff fd5c 	bl	8010dbe <SDIO_GetResponse>
 8011306:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011308:	693a      	ldr	r2, [r7, #16]
 801130a:	4b4e      	ldr	r3, [pc, #312]	; (8011444 <SDMMC_GetCmdResp1+0x1d4>)
 801130c:	4013      	ands	r3, r2
 801130e:	2b00      	cmp	r3, #0
 8011310:	d101      	bne.n	8011316 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8011312:	2300      	movs	r3, #0
 8011314:	e08d      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011316:	693b      	ldr	r3, [r7, #16]
 8011318:	2b00      	cmp	r3, #0
 801131a:	da02      	bge.n	8011322 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801131c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011320:	e087      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011328:	2b00      	cmp	r3, #0
 801132a:	d001      	beq.n	8011330 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801132c:	2340      	movs	r3, #64	; 0x40
 801132e:	e080      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011336:	2b00      	cmp	r3, #0
 8011338:	d001      	beq.n	801133e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801133a:	2380      	movs	r3, #128	; 0x80
 801133c:	e079      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011344:	2b00      	cmp	r3, #0
 8011346:	d002      	beq.n	801134e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011348:	f44f 7380 	mov.w	r3, #256	; 0x100
 801134c:	e071      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801134e:	693b      	ldr	r3, [r7, #16]
 8011350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011354:	2b00      	cmp	r3, #0
 8011356:	d002      	beq.n	801135e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011358:	f44f 7300 	mov.w	r3, #512	; 0x200
 801135c:	e069      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011364:	2b00      	cmp	r3, #0
 8011366:	d002      	beq.n	801136e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801136c:	e061      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011374:	2b00      	cmp	r3, #0
 8011376:	d002      	beq.n	801137e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011378:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801137c:	e059      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011384:	2b00      	cmp	r3, #0
 8011386:	d002      	beq.n	801138e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801138c:	e051      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011394:	2b00      	cmp	r3, #0
 8011396:	d002      	beq.n	801139e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801139c:	e049      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d002      	beq.n	80113ae <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80113a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80113ac:	e041      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80113ae:	693b      	ldr	r3, [r7, #16]
 80113b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d002      	beq.n	80113be <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80113b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80113bc:	e039      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80113be:	693b      	ldr	r3, [r7, #16]
 80113c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d002      	beq.n	80113ce <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80113c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80113cc:	e031      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d002      	beq.n	80113de <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80113d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80113dc:	e029      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d002      	beq.n	80113ee <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80113e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80113ec:	e021      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d002      	beq.n	80113fe <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80113f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80113fc:	e019      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011404:	2b00      	cmp	r3, #0
 8011406:	d002      	beq.n	801140e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011408:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801140c:	e011      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801140e:	693b      	ldr	r3, [r7, #16]
 8011410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011414:	2b00      	cmp	r3, #0
 8011416:	d002      	beq.n	801141e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011418:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801141c:	e009      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	f003 0308 	and.w	r3, r3, #8
 8011424:	2b00      	cmp	r3, #0
 8011426:	d002      	beq.n	801142e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011428:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801142c:	e001      	b.n	8011432 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801142e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011432:	4618      	mov	r0, r3
 8011434:	371c      	adds	r7, #28
 8011436:	46bd      	mov	sp, r7
 8011438:	bd90      	pop	{r4, r7, pc}
 801143a:	bf00      	nop
 801143c:	20000074 	.word	0x20000074
 8011440:	10624dd3 	.word	0x10624dd3
 8011444:	fdffe008 	.word	0xfdffe008

08011448 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8011448:	b490      	push	{r4, r7}
 801144a:	b084      	sub	sp, #16
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011450:	4b1e      	ldr	r3, [pc, #120]	; (80114cc <SDMMC_GetCmdResp2+0x84>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4a1e      	ldr	r2, [pc, #120]	; (80114d0 <SDMMC_GetCmdResp2+0x88>)
 8011456:	fba2 2303 	umull	r2, r3, r2, r3
 801145a:	0a5b      	lsrs	r3, r3, #9
 801145c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011460:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011464:	4623      	mov	r3, r4
 8011466:	1e5c      	subs	r4, r3, #1
 8011468:	2b00      	cmp	r3, #0
 801146a:	d102      	bne.n	8011472 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801146c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011470:	e026      	b.n	80114c0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011476:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801147e:	2b00      	cmp	r3, #0
 8011480:	d0f0      	beq.n	8011464 <SDMMC_GetCmdResp2+0x1c>
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011488:	2b00      	cmp	r3, #0
 801148a:	d1eb      	bne.n	8011464 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011490:	f003 0304 	and.w	r3, r3, #4
 8011494:	2b00      	cmp	r3, #0
 8011496:	d004      	beq.n	80114a2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2204      	movs	r2, #4
 801149c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801149e:	2304      	movs	r3, #4
 80114a0:	e00e      	b.n	80114c0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114a6:	f003 0301 	and.w	r3, r3, #1
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d004      	beq.n	80114b8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2201      	movs	r2, #1
 80114b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80114b4:	2301      	movs	r3, #1
 80114b6:	e003      	b.n	80114c0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	22c5      	movs	r2, #197	; 0xc5
 80114bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80114be:	2300      	movs	r3, #0
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	3710      	adds	r7, #16
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bc90      	pop	{r4, r7}
 80114c8:	4770      	bx	lr
 80114ca:	bf00      	nop
 80114cc:	20000074 	.word	0x20000074
 80114d0:	10624dd3 	.word	0x10624dd3

080114d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80114d4:	b490      	push	{r4, r7}
 80114d6:	b084      	sub	sp, #16
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80114dc:	4b18      	ldr	r3, [pc, #96]	; (8011540 <SDMMC_GetCmdResp3+0x6c>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	4a18      	ldr	r2, [pc, #96]	; (8011544 <SDMMC_GetCmdResp3+0x70>)
 80114e2:	fba2 2303 	umull	r2, r3, r2, r3
 80114e6:	0a5b      	lsrs	r3, r3, #9
 80114e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80114ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80114f0:	4623      	mov	r3, r4
 80114f2:	1e5c      	subs	r4, r3, #1
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d102      	bne.n	80114fe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80114f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80114fc:	e01b      	b.n	8011536 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011502:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801150a:	2b00      	cmp	r3, #0
 801150c:	d0f0      	beq.n	80114f0 <SDMMC_GetCmdResp3+0x1c>
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011514:	2b00      	cmp	r3, #0
 8011516:	d1eb      	bne.n	80114f0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801151c:	f003 0304 	and.w	r3, r3, #4
 8011520:	2b00      	cmp	r3, #0
 8011522:	d004      	beq.n	801152e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2204      	movs	r2, #4
 8011528:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801152a:	2304      	movs	r3, #4
 801152c:	e003      	b.n	8011536 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	22c5      	movs	r2, #197	; 0xc5
 8011532:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8011534:	2300      	movs	r3, #0
}
 8011536:	4618      	mov	r0, r3
 8011538:	3710      	adds	r7, #16
 801153a:	46bd      	mov	sp, r7
 801153c:	bc90      	pop	{r4, r7}
 801153e:	4770      	bx	lr
 8011540:	20000074 	.word	0x20000074
 8011544:	10624dd3 	.word	0x10624dd3

08011548 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011548:	b590      	push	{r4, r7, lr}
 801154a:	b087      	sub	sp, #28
 801154c:	af00      	add	r7, sp, #0
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	460b      	mov	r3, r1
 8011552:	607a      	str	r2, [r7, #4]
 8011554:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011556:	4b34      	ldr	r3, [pc, #208]	; (8011628 <SDMMC_GetCmdResp6+0xe0>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	4a34      	ldr	r2, [pc, #208]	; (801162c <SDMMC_GetCmdResp6+0xe4>)
 801155c:	fba2 2303 	umull	r2, r3, r2, r3
 8011560:	0a5b      	lsrs	r3, r3, #9
 8011562:	f241 3288 	movw	r2, #5000	; 0x1388
 8011566:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801156a:	4623      	mov	r3, r4
 801156c:	1e5c      	subs	r4, r3, #1
 801156e:	2b00      	cmp	r3, #0
 8011570:	d102      	bne.n	8011578 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011572:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011576:	e052      	b.n	801161e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801157c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011584:	2b00      	cmp	r3, #0
 8011586:	d0f0      	beq.n	801156a <SDMMC_GetCmdResp6+0x22>
 8011588:	697b      	ldr	r3, [r7, #20]
 801158a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801158e:	2b00      	cmp	r3, #0
 8011590:	d1eb      	bne.n	801156a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011596:	f003 0304 	and.w	r3, r3, #4
 801159a:	2b00      	cmp	r3, #0
 801159c:	d004      	beq.n	80115a8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	2204      	movs	r2, #4
 80115a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80115a4:	2304      	movs	r3, #4
 80115a6:	e03a      	b.n	801161e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115ac:	f003 0301 	and.w	r3, r3, #1
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d004      	beq.n	80115be <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2201      	movs	r2, #1
 80115b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115ba:	2301      	movs	r3, #1
 80115bc:	e02f      	b.n	801161e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	f7ff fbf0 	bl	8010da4 <SDIO_GetCommandResponse>
 80115c4:	4603      	mov	r3, r0
 80115c6:	461a      	mov	r2, r3
 80115c8:	7afb      	ldrb	r3, [r7, #11]
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d001      	beq.n	80115d2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80115ce:	2301      	movs	r3, #1
 80115d0:	e025      	b.n	801161e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	22c5      	movs	r2, #197	; 0xc5
 80115d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80115d8:	2100      	movs	r1, #0
 80115da:	68f8      	ldr	r0, [r7, #12]
 80115dc:	f7ff fbef 	bl	8010dbe <SDIO_GetResponse>
 80115e0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80115e2:	693b      	ldr	r3, [r7, #16]
 80115e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d106      	bne.n	80115fa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	0c1b      	lsrs	r3, r3, #16
 80115f0:	b29a      	uxth	r2, r3
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80115f6:	2300      	movs	r3, #0
 80115f8:	e011      	b.n	801161e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011600:	2b00      	cmp	r3, #0
 8011602:	d002      	beq.n	801160a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011608:	e009      	b.n	801161e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011610:	2b00      	cmp	r3, #0
 8011612:	d002      	beq.n	801161a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011618:	e001      	b.n	801161e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801161a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801161e:	4618      	mov	r0, r3
 8011620:	371c      	adds	r7, #28
 8011622:	46bd      	mov	sp, r7
 8011624:	bd90      	pop	{r4, r7, pc}
 8011626:	bf00      	nop
 8011628:	20000074 	.word	0x20000074
 801162c:	10624dd3 	.word	0x10624dd3

08011630 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011630:	b490      	push	{r4, r7}
 8011632:	b084      	sub	sp, #16
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011638:	4b21      	ldr	r3, [pc, #132]	; (80116c0 <SDMMC_GetCmdResp7+0x90>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	4a21      	ldr	r2, [pc, #132]	; (80116c4 <SDMMC_GetCmdResp7+0x94>)
 801163e:	fba2 2303 	umull	r2, r3, r2, r3
 8011642:	0a5b      	lsrs	r3, r3, #9
 8011644:	f241 3288 	movw	r2, #5000	; 0x1388
 8011648:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801164c:	4623      	mov	r3, r4
 801164e:	1e5c      	subs	r4, r3, #1
 8011650:	2b00      	cmp	r3, #0
 8011652:	d102      	bne.n	801165a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011654:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011658:	e02c      	b.n	80116b4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801165e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8011666:	2b00      	cmp	r3, #0
 8011668:	d0f0      	beq.n	801164c <SDMMC_GetCmdResp7+0x1c>
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011670:	2b00      	cmp	r3, #0
 8011672:	d1eb      	bne.n	801164c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011678:	f003 0304 	and.w	r3, r3, #4
 801167c:	2b00      	cmp	r3, #0
 801167e:	d004      	beq.n	801168a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2204      	movs	r2, #4
 8011684:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011686:	2304      	movs	r3, #4
 8011688:	e014      	b.n	80116b4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801168e:	f003 0301 	and.w	r3, r3, #1
 8011692:	2b00      	cmp	r3, #0
 8011694:	d004      	beq.n	80116a0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2201      	movs	r2, #1
 801169a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801169c:	2301      	movs	r3, #1
 801169e:	e009      	b.n	80116b4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d002      	beq.n	80116b2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2240      	movs	r2, #64	; 0x40
 80116b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80116b2:	2300      	movs	r3, #0
  
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3710      	adds	r7, #16
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bc90      	pop	{r4, r7}
 80116bc:	4770      	bx	lr
 80116be:	bf00      	nop
 80116c0:	20000074 	.word	0x20000074
 80116c4:	10624dd3 	.word	0x10624dd3

080116c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80116cc:	4904      	ldr	r1, [pc, #16]	; (80116e0 <MX_FATFS_Init+0x18>)
 80116ce:	4805      	ldr	r0, [pc, #20]	; (80116e4 <MX_FATFS_Init+0x1c>)
 80116d0:	f000 f9d6 	bl	8011a80 <FATFS_LinkDriver>
 80116d4:	4603      	mov	r3, r0
 80116d6:	461a      	mov	r2, r3
 80116d8:	4b03      	ldr	r3, [pc, #12]	; (80116e8 <MX_FATFS_Init+0x20>)
 80116da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80116dc:	bf00      	nop
 80116de:	bd80      	pop	{r7, pc}
 80116e0:	20007468 	.word	0x20007468
 80116e4:	08012200 	.word	0x08012200
 80116e8:	20007464 	.word	0x20007464

080116ec <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80116f2:	2300      	movs	r3, #0
 80116f4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80116f6:	f000 f86b 	bl	80117d0 <BSP_SD_IsDetected>
 80116fa:	4603      	mov	r3, r0
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	d001      	beq.n	8011704 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8011700:	2301      	movs	r3, #1
 8011702:	e005      	b.n	8011710 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011704:	4804      	ldr	r0, [pc, #16]	; (8011718 <BSP_SD_Init+0x2c>)
 8011706:	f7fc fbdb 	bl	800dec0 <HAL_SD_Init>
 801170a:	4603      	mov	r3, r0
 801170c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 801170e:	79fb      	ldrb	r3, [r7, #7]
}
 8011710:	4618      	mov	r0, r3
 8011712:	3708      	adds	r7, #8
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	20006dc4 	.word	0x20006dc4

0801171c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b088      	sub	sp, #32
 8011720:	af02      	add	r7, sp, #8
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	607a      	str	r2, [r7, #4]
 8011728:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 801172a:	2300      	movs	r3, #0
 801172c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	9300      	str	r3, [sp, #0]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	68ba      	ldr	r2, [r7, #8]
 8011736:	68f9      	ldr	r1, [r7, #12]
 8011738:	4806      	ldr	r0, [pc, #24]	; (8011754 <BSP_SD_ReadBlocks+0x38>)
 801173a:	f7fc fc51 	bl	800dfe0 <HAL_SD_ReadBlocks>
 801173e:	4603      	mov	r3, r0
 8011740:	2b00      	cmp	r3, #0
 8011742:	d001      	beq.n	8011748 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011744:	2301      	movs	r3, #1
 8011746:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011748:	7dfb      	ldrb	r3, [r7, #23]
}
 801174a:	4618      	mov	r0, r3
 801174c:	3718      	adds	r7, #24
 801174e:	46bd      	mov	sp, r7
 8011750:	bd80      	pop	{r7, pc}
 8011752:	bf00      	nop
 8011754:	20006dc4 	.word	0x20006dc4

08011758 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b088      	sub	sp, #32
 801175c:	af02      	add	r7, sp, #8
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	607a      	str	r2, [r7, #4]
 8011764:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8011766:	2300      	movs	r3, #0
 8011768:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	9300      	str	r3, [sp, #0]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	68ba      	ldr	r2, [r7, #8]
 8011772:	68f9      	ldr	r1, [r7, #12]
 8011774:	4806      	ldr	r0, [pc, #24]	; (8011790 <BSP_SD_WriteBlocks+0x38>)
 8011776:	f7fc fe2d 	bl	800e3d4 <HAL_SD_WriteBlocks>
 801177a:	4603      	mov	r3, r0
 801177c:	2b00      	cmp	r3, #0
 801177e:	d001      	beq.n	8011784 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011780:	2301      	movs	r3, #1
 8011782:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011784:	7dfb      	ldrb	r3, [r7, #23]
}
 8011786:	4618      	mov	r0, r3
 8011788:	3718      	adds	r7, #24
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	20006dc4 	.word	0x20006dc4

08011794 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011798:	4805      	ldr	r0, [pc, #20]	; (80117b0 <BSP_SD_GetCardState+0x1c>)
 801179a:	f7fd f98d 	bl	800eab8 <HAL_SD_GetCardState>
 801179e:	4603      	mov	r3, r0
 80117a0:	2b04      	cmp	r3, #4
 80117a2:	bf14      	ite	ne
 80117a4:	2301      	movne	r3, #1
 80117a6:	2300      	moveq	r3, #0
 80117a8:	b2db      	uxtb	r3, r3
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	bd80      	pop	{r7, pc}
 80117ae:	bf00      	nop
 80117b0:	20006dc4 	.word	0x20006dc4

080117b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80117bc:	6879      	ldr	r1, [r7, #4]
 80117be:	4803      	ldr	r0, [pc, #12]	; (80117cc <BSP_SD_GetCardInfo+0x18>)
 80117c0:	f7fd f94e 	bl	800ea60 <HAL_SD_GetCardInfo>
}
 80117c4:	bf00      	nop
 80117c6:	3708      	adds	r7, #8
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}
 80117cc:	20006dc4 	.word	0x20006dc4

080117d0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80117d6:	2301      	movs	r3, #1
 80117d8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80117da:	f000 f80b 	bl	80117f4 <BSP_PlatformIsDetected>
 80117de:	4603      	mov	r3, r0
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d101      	bne.n	80117e8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80117e4:	2300      	movs	r3, #0
 80117e6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80117e8:	79fb      	ldrb	r3, [r7, #7]
 80117ea:	b2db      	uxtb	r3, r3
}
 80117ec:	4618      	mov	r0, r3
 80117ee:	3708      	adds	r7, #8
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80117fa:	2301      	movs	r3, #1
 80117fc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80117fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011802:	4806      	ldr	r0, [pc, #24]	; (801181c <BSP_PlatformIsDetected+0x28>)
 8011804:	f7fb fb10 	bl	800ce28 <HAL_GPIO_ReadPin>
 8011808:	4603      	mov	r3, r0
 801180a:	2b00      	cmp	r3, #0
 801180c:	d001      	beq.n	8011812 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801180e:	2300      	movs	r3, #0
 8011810:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011812:	79fb      	ldrb	r3, [r7, #7]
}
 8011814:	4618      	mov	r0, r3
 8011816:	3708      	adds	r7, #8
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}
 801181c:	40021000 	.word	0x40021000

08011820 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
 8011826:	4603      	mov	r3, r0
 8011828:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801182a:	4b0b      	ldr	r3, [pc, #44]	; (8011858 <SD_CheckStatus+0x38>)
 801182c:	2201      	movs	r2, #1
 801182e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011830:	f7ff ffb0 	bl	8011794 <BSP_SD_GetCardState>
 8011834:	4603      	mov	r3, r0
 8011836:	2b00      	cmp	r3, #0
 8011838:	d107      	bne.n	801184a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801183a:	4b07      	ldr	r3, [pc, #28]	; (8011858 <SD_CheckStatus+0x38>)
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	b2db      	uxtb	r3, r3
 8011840:	f023 0301 	bic.w	r3, r3, #1
 8011844:	b2da      	uxtb	r2, r3
 8011846:	4b04      	ldr	r3, [pc, #16]	; (8011858 <SD_CheckStatus+0x38>)
 8011848:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801184a:	4b03      	ldr	r3, [pc, #12]	; (8011858 <SD_CheckStatus+0x38>)
 801184c:	781b      	ldrb	r3, [r3, #0]
 801184e:	b2db      	uxtb	r3, r3
}
 8011850:	4618      	mov	r0, r3
 8011852:	3708      	adds	r7, #8
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	200000a5 	.word	0x200000a5

0801185c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b082      	sub	sp, #8
 8011860:	af00      	add	r7, sp, #0
 8011862:	4603      	mov	r3, r0
 8011864:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8011866:	4b0b      	ldr	r3, [pc, #44]	; (8011894 <SD_initialize+0x38>)
 8011868:	2201      	movs	r2, #1
 801186a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801186c:	f7ff ff3e 	bl	80116ec <BSP_SD_Init>
 8011870:	4603      	mov	r3, r0
 8011872:	2b00      	cmp	r3, #0
 8011874:	d107      	bne.n	8011886 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8011876:	79fb      	ldrb	r3, [r7, #7]
 8011878:	4618      	mov	r0, r3
 801187a:	f7ff ffd1 	bl	8011820 <SD_CheckStatus>
 801187e:	4603      	mov	r3, r0
 8011880:	461a      	mov	r2, r3
 8011882:	4b04      	ldr	r3, [pc, #16]	; (8011894 <SD_initialize+0x38>)
 8011884:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011886:	4b03      	ldr	r3, [pc, #12]	; (8011894 <SD_initialize+0x38>)
 8011888:	781b      	ldrb	r3, [r3, #0]
 801188a:	b2db      	uxtb	r3, r3
}
 801188c:	4618      	mov	r0, r3
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	200000a5 	.word	0x200000a5

08011898 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	b082      	sub	sp, #8
 801189c:	af00      	add	r7, sp, #0
 801189e:	4603      	mov	r3, r0
 80118a0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80118a2:	79fb      	ldrb	r3, [r7, #7]
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7ff ffbb 	bl	8011820 <SD_CheckStatus>
 80118aa:	4603      	mov	r3, r0
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3708      	adds	r7, #8
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b086      	sub	sp, #24
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	60b9      	str	r1, [r7, #8]
 80118bc:	607a      	str	r2, [r7, #4]
 80118be:	603b      	str	r3, [r7, #0]
 80118c0:	4603      	mov	r3, r0
 80118c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80118c4:	2301      	movs	r3, #1
 80118c6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80118c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118cc:	683a      	ldr	r2, [r7, #0]
 80118ce:	6879      	ldr	r1, [r7, #4]
 80118d0:	68b8      	ldr	r0, [r7, #8]
 80118d2:	f7ff ff23 	bl	801171c <BSP_SD_ReadBlocks>
 80118d6:	4603      	mov	r3, r0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d107      	bne.n	80118ec <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80118dc:	bf00      	nop
 80118de:	f7ff ff59 	bl	8011794 <BSP_SD_GetCardState>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d1fa      	bne.n	80118de <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80118e8:	2300      	movs	r3, #0
 80118ea:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80118ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3718      	adds	r7, #24
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}

080118f6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80118f6:	b580      	push	{r7, lr}
 80118f8:	b086      	sub	sp, #24
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	60b9      	str	r1, [r7, #8]
 80118fe:	607a      	str	r2, [r7, #4]
 8011900:	603b      	str	r3, [r7, #0]
 8011902:	4603      	mov	r3, r0
 8011904:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011906:	2301      	movs	r3, #1
 8011908:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 801190a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801190e:	683a      	ldr	r2, [r7, #0]
 8011910:	6879      	ldr	r1, [r7, #4]
 8011912:	68b8      	ldr	r0, [r7, #8]
 8011914:	f7ff ff20 	bl	8011758 <BSP_SD_WriteBlocks>
 8011918:	4603      	mov	r3, r0
 801191a:	2b00      	cmp	r3, #0
 801191c:	d107      	bne.n	801192e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 801191e:	bf00      	nop
 8011920:	f7ff ff38 	bl	8011794 <BSP_SD_GetCardState>
 8011924:	4603      	mov	r3, r0
 8011926:	2b00      	cmp	r3, #0
 8011928:	d1fa      	bne.n	8011920 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 801192a:	2300      	movs	r3, #0
 801192c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 801192e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011930:	4618      	mov	r0, r3
 8011932:	3718      	adds	r7, #24
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b08c      	sub	sp, #48	; 0x30
 801193c:	af00      	add	r7, sp, #0
 801193e:	4603      	mov	r3, r0
 8011940:	603a      	str	r2, [r7, #0]
 8011942:	71fb      	strb	r3, [r7, #7]
 8011944:	460b      	mov	r3, r1
 8011946:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011948:	2301      	movs	r3, #1
 801194a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801194e:	4b25      	ldr	r3, [pc, #148]	; (80119e4 <SD_ioctl+0xac>)
 8011950:	781b      	ldrb	r3, [r3, #0]
 8011952:	b2db      	uxtb	r3, r3
 8011954:	f003 0301 	and.w	r3, r3, #1
 8011958:	2b00      	cmp	r3, #0
 801195a:	d001      	beq.n	8011960 <SD_ioctl+0x28>
 801195c:	2303      	movs	r3, #3
 801195e:	e03c      	b.n	80119da <SD_ioctl+0xa2>

  switch (cmd)
 8011960:	79bb      	ldrb	r3, [r7, #6]
 8011962:	2b03      	cmp	r3, #3
 8011964:	d834      	bhi.n	80119d0 <SD_ioctl+0x98>
 8011966:	a201      	add	r2, pc, #4	; (adr r2, 801196c <SD_ioctl+0x34>)
 8011968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801196c:	0801197d 	.word	0x0801197d
 8011970:	08011985 	.word	0x08011985
 8011974:	0801199d 	.word	0x0801199d
 8011978:	080119b7 	.word	0x080119b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801197c:	2300      	movs	r3, #0
 801197e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011982:	e028      	b.n	80119d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011984:	f107 030c 	add.w	r3, r7, #12
 8011988:	4618      	mov	r0, r3
 801198a:	f7ff ff13 	bl	80117b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801198e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011994:	2300      	movs	r3, #0
 8011996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801199a:	e01c      	b.n	80119d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801199c:	f107 030c 	add.w	r3, r7, #12
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7ff ff07 	bl	80117b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80119a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80119ae:	2300      	movs	r3, #0
 80119b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80119b4:	e00f      	b.n	80119d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80119b6:	f107 030c 	add.w	r3, r7, #12
 80119ba:	4618      	mov	r0, r3
 80119bc:	f7ff fefa 	bl	80117b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80119c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c2:	0a5a      	lsrs	r2, r3, #9
 80119c4:	683b      	ldr	r3, [r7, #0]
 80119c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80119c8:	2300      	movs	r3, #0
 80119ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80119ce:	e002      	b.n	80119d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80119d0:	2304      	movs	r3, #4
 80119d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80119d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3730      	adds	r7, #48	; 0x30
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}
 80119e2:	bf00      	nop
 80119e4:	200000a5 	.word	0x200000a5

080119e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80119e8:	b480      	push	{r7}
 80119ea:	b087      	sub	sp, #28
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	60f8      	str	r0, [r7, #12]
 80119f0:	60b9      	str	r1, [r7, #8]
 80119f2:	4613      	mov	r3, r2
 80119f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80119f6:	2301      	movs	r3, #1
 80119f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80119fa:	2300      	movs	r3, #0
 80119fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80119fe:	4b1f      	ldr	r3, [pc, #124]	; (8011a7c <FATFS_LinkDriverEx+0x94>)
 8011a00:	7a5b      	ldrb	r3, [r3, #9]
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d131      	bne.n	8011a6c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011a08:	4b1c      	ldr	r3, [pc, #112]	; (8011a7c <FATFS_LinkDriverEx+0x94>)
 8011a0a:	7a5b      	ldrb	r3, [r3, #9]
 8011a0c:	b2db      	uxtb	r3, r3
 8011a0e:	461a      	mov	r2, r3
 8011a10:	4b1a      	ldr	r3, [pc, #104]	; (8011a7c <FATFS_LinkDriverEx+0x94>)
 8011a12:	2100      	movs	r1, #0
 8011a14:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011a16:	4b19      	ldr	r3, [pc, #100]	; (8011a7c <FATFS_LinkDriverEx+0x94>)
 8011a18:	7a5b      	ldrb	r3, [r3, #9]
 8011a1a:	b2db      	uxtb	r3, r3
 8011a1c:	4a17      	ldr	r2, [pc, #92]	; (8011a7c <FATFS_LinkDriverEx+0x94>)
 8011a1e:	009b      	lsls	r3, r3, #2
 8011a20:	4413      	add	r3, r2
 8011a22:	68fa      	ldr	r2, [r7, #12]
 8011a24:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011a26:	4b15      	ldr	r3, [pc, #84]	; (8011a7c <FATFS_LinkDriverEx+0x94>)
 8011a28:	7a5b      	ldrb	r3, [r3, #9]
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	461a      	mov	r2, r3
 8011a2e:	4b13      	ldr	r3, [pc, #76]	; (8011a7c <FATFS_LinkDriverEx+0x94>)
 8011a30:	4413      	add	r3, r2
 8011a32:	79fa      	ldrb	r2, [r7, #7]
 8011a34:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011a36:	4b11      	ldr	r3, [pc, #68]	; (8011a7c <FATFS_LinkDriverEx+0x94>)
 8011a38:	7a5b      	ldrb	r3, [r3, #9]
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	1c5a      	adds	r2, r3, #1
 8011a3e:	b2d1      	uxtb	r1, r2
 8011a40:	4a0e      	ldr	r2, [pc, #56]	; (8011a7c <FATFS_LinkDriverEx+0x94>)
 8011a42:	7251      	strb	r1, [r2, #9]
 8011a44:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011a46:	7dbb      	ldrb	r3, [r7, #22]
 8011a48:	3330      	adds	r3, #48	; 0x30
 8011a4a:	b2da      	uxtb	r2, r3
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	3301      	adds	r3, #1
 8011a54:	223a      	movs	r2, #58	; 0x3a
 8011a56:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	3302      	adds	r3, #2
 8011a5c:	222f      	movs	r2, #47	; 0x2f
 8011a5e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	3303      	adds	r3, #3
 8011a64:	2200      	movs	r2, #0
 8011a66:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	371c      	adds	r7, #28
 8011a72:	46bd      	mov	sp, r7
 8011a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a78:	4770      	bx	lr
 8011a7a:	bf00      	nop
 8011a7c:	200018b8 	.word	0x200018b8

08011a80 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	6839      	ldr	r1, [r7, #0]
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f7ff ffaa 	bl	80119e8 <FATFS_LinkDriverEx>
 8011a94:	4603      	mov	r3, r0
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3708      	adds	r7, #8
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <atoi>:
 8011a9e:	220a      	movs	r2, #10
 8011aa0:	2100      	movs	r1, #0
 8011aa2:	f000 b8dd 	b.w	8011c60 <strtol>
	...

08011aa8 <__libc_init_array>:
 8011aa8:	b570      	push	{r4, r5, r6, lr}
 8011aaa:	4e0d      	ldr	r6, [pc, #52]	; (8011ae0 <__libc_init_array+0x38>)
 8011aac:	4c0d      	ldr	r4, [pc, #52]	; (8011ae4 <__libc_init_array+0x3c>)
 8011aae:	1ba4      	subs	r4, r4, r6
 8011ab0:	10a4      	asrs	r4, r4, #2
 8011ab2:	2500      	movs	r5, #0
 8011ab4:	42a5      	cmp	r5, r4
 8011ab6:	d109      	bne.n	8011acc <__libc_init_array+0x24>
 8011ab8:	4e0b      	ldr	r6, [pc, #44]	; (8011ae8 <__libc_init_array+0x40>)
 8011aba:	4c0c      	ldr	r4, [pc, #48]	; (8011aec <__libc_init_array+0x44>)
 8011abc:	f000 f946 	bl	8011d4c <_init>
 8011ac0:	1ba4      	subs	r4, r4, r6
 8011ac2:	10a4      	asrs	r4, r4, #2
 8011ac4:	2500      	movs	r5, #0
 8011ac6:	42a5      	cmp	r5, r4
 8011ac8:	d105      	bne.n	8011ad6 <__libc_init_array+0x2e>
 8011aca:	bd70      	pop	{r4, r5, r6, pc}
 8011acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011ad0:	4798      	blx	r3
 8011ad2:	3501      	adds	r5, #1
 8011ad4:	e7ee      	b.n	8011ab4 <__libc_init_array+0xc>
 8011ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011ada:	4798      	blx	r3
 8011adc:	3501      	adds	r5, #1
 8011ade:	e7f2      	b.n	8011ac6 <__libc_init_array+0x1e>
 8011ae0:	0801234c 	.word	0x0801234c
 8011ae4:	0801234c 	.word	0x0801234c
 8011ae8:	0801234c 	.word	0x0801234c
 8011aec:	08012350 	.word	0x08012350

08011af0 <__itoa>:
 8011af0:	1e93      	subs	r3, r2, #2
 8011af2:	2b22      	cmp	r3, #34	; 0x22
 8011af4:	b510      	push	{r4, lr}
 8011af6:	460c      	mov	r4, r1
 8011af8:	d904      	bls.n	8011b04 <__itoa+0x14>
 8011afa:	2300      	movs	r3, #0
 8011afc:	700b      	strb	r3, [r1, #0]
 8011afe:	461c      	mov	r4, r3
 8011b00:	4620      	mov	r0, r4
 8011b02:	bd10      	pop	{r4, pc}
 8011b04:	2a0a      	cmp	r2, #10
 8011b06:	d109      	bne.n	8011b1c <__itoa+0x2c>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	da07      	bge.n	8011b1c <__itoa+0x2c>
 8011b0c:	232d      	movs	r3, #45	; 0x2d
 8011b0e:	700b      	strb	r3, [r1, #0]
 8011b10:	4240      	negs	r0, r0
 8011b12:	2101      	movs	r1, #1
 8011b14:	4421      	add	r1, r4
 8011b16:	f000 f8b9 	bl	8011c8c <__utoa>
 8011b1a:	e7f1      	b.n	8011b00 <__itoa+0x10>
 8011b1c:	2100      	movs	r1, #0
 8011b1e:	e7f9      	b.n	8011b14 <__itoa+0x24>

08011b20 <itoa>:
 8011b20:	f7ff bfe6 	b.w	8011af0 <__itoa>

08011b24 <memcpy>:
 8011b24:	b510      	push	{r4, lr}
 8011b26:	1e43      	subs	r3, r0, #1
 8011b28:	440a      	add	r2, r1
 8011b2a:	4291      	cmp	r1, r2
 8011b2c:	d100      	bne.n	8011b30 <memcpy+0xc>
 8011b2e:	bd10      	pop	{r4, pc}
 8011b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b38:	e7f7      	b.n	8011b2a <memcpy+0x6>

08011b3a <memset>:
 8011b3a:	4402      	add	r2, r0
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	d100      	bne.n	8011b44 <memset+0xa>
 8011b42:	4770      	bx	lr
 8011b44:	f803 1b01 	strb.w	r1, [r3], #1
 8011b48:	e7f9      	b.n	8011b3e <memset+0x4>

08011b4a <strcat>:
 8011b4a:	b510      	push	{r4, lr}
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	781a      	ldrb	r2, [r3, #0]
 8011b50:	1c5c      	adds	r4, r3, #1
 8011b52:	b93a      	cbnz	r2, 8011b64 <strcat+0x1a>
 8011b54:	3b01      	subs	r3, #1
 8011b56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011b5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011b5e:	2a00      	cmp	r2, #0
 8011b60:	d1f9      	bne.n	8011b56 <strcat+0xc>
 8011b62:	bd10      	pop	{r4, pc}
 8011b64:	4623      	mov	r3, r4
 8011b66:	e7f2      	b.n	8011b4e <strcat+0x4>

08011b68 <_strtol_l.isra.0>:
 8011b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b6c:	4680      	mov	r8, r0
 8011b6e:	4689      	mov	r9, r1
 8011b70:	4692      	mov	sl, r2
 8011b72:	461e      	mov	r6, r3
 8011b74:	460f      	mov	r7, r1
 8011b76:	463d      	mov	r5, r7
 8011b78:	9808      	ldr	r0, [sp, #32]
 8011b7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b7e:	f000 f8c3 	bl	8011d08 <__locale_ctype_ptr_l>
 8011b82:	4420      	add	r0, r4
 8011b84:	7843      	ldrb	r3, [r0, #1]
 8011b86:	f013 0308 	ands.w	r3, r3, #8
 8011b8a:	d132      	bne.n	8011bf2 <_strtol_l.isra.0+0x8a>
 8011b8c:	2c2d      	cmp	r4, #45	; 0x2d
 8011b8e:	d132      	bne.n	8011bf6 <_strtol_l.isra.0+0x8e>
 8011b90:	787c      	ldrb	r4, [r7, #1]
 8011b92:	1cbd      	adds	r5, r7, #2
 8011b94:	2201      	movs	r2, #1
 8011b96:	2e00      	cmp	r6, #0
 8011b98:	d05d      	beq.n	8011c56 <_strtol_l.isra.0+0xee>
 8011b9a:	2e10      	cmp	r6, #16
 8011b9c:	d109      	bne.n	8011bb2 <_strtol_l.isra.0+0x4a>
 8011b9e:	2c30      	cmp	r4, #48	; 0x30
 8011ba0:	d107      	bne.n	8011bb2 <_strtol_l.isra.0+0x4a>
 8011ba2:	782b      	ldrb	r3, [r5, #0]
 8011ba4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011ba8:	2b58      	cmp	r3, #88	; 0x58
 8011baa:	d14f      	bne.n	8011c4c <_strtol_l.isra.0+0xe4>
 8011bac:	786c      	ldrb	r4, [r5, #1]
 8011bae:	2610      	movs	r6, #16
 8011bb0:	3502      	adds	r5, #2
 8011bb2:	2a00      	cmp	r2, #0
 8011bb4:	bf14      	ite	ne
 8011bb6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8011bba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8011bbe:	2700      	movs	r7, #0
 8011bc0:	fbb1 fcf6 	udiv	ip, r1, r6
 8011bc4:	4638      	mov	r0, r7
 8011bc6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8011bca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8011bce:	2b09      	cmp	r3, #9
 8011bd0:	d817      	bhi.n	8011c02 <_strtol_l.isra.0+0x9a>
 8011bd2:	461c      	mov	r4, r3
 8011bd4:	42a6      	cmp	r6, r4
 8011bd6:	dd23      	ble.n	8011c20 <_strtol_l.isra.0+0xb8>
 8011bd8:	1c7b      	adds	r3, r7, #1
 8011bda:	d007      	beq.n	8011bec <_strtol_l.isra.0+0x84>
 8011bdc:	4584      	cmp	ip, r0
 8011bde:	d31c      	bcc.n	8011c1a <_strtol_l.isra.0+0xb2>
 8011be0:	d101      	bne.n	8011be6 <_strtol_l.isra.0+0x7e>
 8011be2:	45a6      	cmp	lr, r4
 8011be4:	db19      	blt.n	8011c1a <_strtol_l.isra.0+0xb2>
 8011be6:	fb00 4006 	mla	r0, r0, r6, r4
 8011bea:	2701      	movs	r7, #1
 8011bec:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011bf0:	e7eb      	b.n	8011bca <_strtol_l.isra.0+0x62>
 8011bf2:	462f      	mov	r7, r5
 8011bf4:	e7bf      	b.n	8011b76 <_strtol_l.isra.0+0xe>
 8011bf6:	2c2b      	cmp	r4, #43	; 0x2b
 8011bf8:	bf04      	itt	eq
 8011bfa:	1cbd      	addeq	r5, r7, #2
 8011bfc:	787c      	ldrbeq	r4, [r7, #1]
 8011bfe:	461a      	mov	r2, r3
 8011c00:	e7c9      	b.n	8011b96 <_strtol_l.isra.0+0x2e>
 8011c02:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8011c06:	2b19      	cmp	r3, #25
 8011c08:	d801      	bhi.n	8011c0e <_strtol_l.isra.0+0xa6>
 8011c0a:	3c37      	subs	r4, #55	; 0x37
 8011c0c:	e7e2      	b.n	8011bd4 <_strtol_l.isra.0+0x6c>
 8011c0e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8011c12:	2b19      	cmp	r3, #25
 8011c14:	d804      	bhi.n	8011c20 <_strtol_l.isra.0+0xb8>
 8011c16:	3c57      	subs	r4, #87	; 0x57
 8011c18:	e7dc      	b.n	8011bd4 <_strtol_l.isra.0+0x6c>
 8011c1a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011c1e:	e7e5      	b.n	8011bec <_strtol_l.isra.0+0x84>
 8011c20:	1c7b      	adds	r3, r7, #1
 8011c22:	d108      	bne.n	8011c36 <_strtol_l.isra.0+0xce>
 8011c24:	2322      	movs	r3, #34	; 0x22
 8011c26:	f8c8 3000 	str.w	r3, [r8]
 8011c2a:	4608      	mov	r0, r1
 8011c2c:	f1ba 0f00 	cmp.w	sl, #0
 8011c30:	d107      	bne.n	8011c42 <_strtol_l.isra.0+0xda>
 8011c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c36:	b102      	cbz	r2, 8011c3a <_strtol_l.isra.0+0xd2>
 8011c38:	4240      	negs	r0, r0
 8011c3a:	f1ba 0f00 	cmp.w	sl, #0
 8011c3e:	d0f8      	beq.n	8011c32 <_strtol_l.isra.0+0xca>
 8011c40:	b10f      	cbz	r7, 8011c46 <_strtol_l.isra.0+0xde>
 8011c42:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8011c46:	f8ca 9000 	str.w	r9, [sl]
 8011c4a:	e7f2      	b.n	8011c32 <_strtol_l.isra.0+0xca>
 8011c4c:	2430      	movs	r4, #48	; 0x30
 8011c4e:	2e00      	cmp	r6, #0
 8011c50:	d1af      	bne.n	8011bb2 <_strtol_l.isra.0+0x4a>
 8011c52:	2608      	movs	r6, #8
 8011c54:	e7ad      	b.n	8011bb2 <_strtol_l.isra.0+0x4a>
 8011c56:	2c30      	cmp	r4, #48	; 0x30
 8011c58:	d0a3      	beq.n	8011ba2 <_strtol_l.isra.0+0x3a>
 8011c5a:	260a      	movs	r6, #10
 8011c5c:	e7a9      	b.n	8011bb2 <_strtol_l.isra.0+0x4a>
	...

08011c60 <strtol>:
 8011c60:	4b08      	ldr	r3, [pc, #32]	; (8011c84 <strtol+0x24>)
 8011c62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c64:	681c      	ldr	r4, [r3, #0]
 8011c66:	4d08      	ldr	r5, [pc, #32]	; (8011c88 <strtol+0x28>)
 8011c68:	6a23      	ldr	r3, [r4, #32]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	bf08      	it	eq
 8011c6e:	462b      	moveq	r3, r5
 8011c70:	9300      	str	r3, [sp, #0]
 8011c72:	4613      	mov	r3, r2
 8011c74:	460a      	mov	r2, r1
 8011c76:	4601      	mov	r1, r0
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f7ff ff75 	bl	8011b68 <_strtol_l.isra.0>
 8011c7e:	b003      	add	sp, #12
 8011c80:	bd30      	pop	{r4, r5, pc}
 8011c82:	bf00      	nop
 8011c84:	200000a8 	.word	0x200000a8
 8011c88:	2000010c 	.word	0x2000010c

08011c8c <__utoa>:
 8011c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c8e:	4b1d      	ldr	r3, [pc, #116]	; (8011d04 <__utoa+0x78>)
 8011c90:	b08b      	sub	sp, #44	; 0x2c
 8011c92:	4605      	mov	r5, r0
 8011c94:	460c      	mov	r4, r1
 8011c96:	466e      	mov	r6, sp
 8011c98:	f103 0c20 	add.w	ip, r3, #32
 8011c9c:	6818      	ldr	r0, [r3, #0]
 8011c9e:	6859      	ldr	r1, [r3, #4]
 8011ca0:	4637      	mov	r7, r6
 8011ca2:	c703      	stmia	r7!, {r0, r1}
 8011ca4:	3308      	adds	r3, #8
 8011ca6:	4563      	cmp	r3, ip
 8011ca8:	463e      	mov	r6, r7
 8011caa:	d1f7      	bne.n	8011c9c <__utoa+0x10>
 8011cac:	6818      	ldr	r0, [r3, #0]
 8011cae:	791b      	ldrb	r3, [r3, #4]
 8011cb0:	713b      	strb	r3, [r7, #4]
 8011cb2:	1e93      	subs	r3, r2, #2
 8011cb4:	2b22      	cmp	r3, #34	; 0x22
 8011cb6:	6038      	str	r0, [r7, #0]
 8011cb8:	f04f 0300 	mov.w	r3, #0
 8011cbc:	d904      	bls.n	8011cc8 <__utoa+0x3c>
 8011cbe:	7023      	strb	r3, [r4, #0]
 8011cc0:	461c      	mov	r4, r3
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	b00b      	add	sp, #44	; 0x2c
 8011cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011cc8:	1e66      	subs	r6, r4, #1
 8011cca:	fbb5 f0f2 	udiv	r0, r5, r2
 8011cce:	af0a      	add	r7, sp, #40	; 0x28
 8011cd0:	fb02 5510 	mls	r5, r2, r0, r5
 8011cd4:	443d      	add	r5, r7
 8011cd6:	1c59      	adds	r1, r3, #1
 8011cd8:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8011cdc:	f806 5f01 	strb.w	r5, [r6, #1]!
 8011ce0:	4605      	mov	r5, r0
 8011ce2:	b968      	cbnz	r0, 8011d00 <__utoa+0x74>
 8011ce4:	5460      	strb	r0, [r4, r1]
 8011ce6:	4423      	add	r3, r4
 8011ce8:	4622      	mov	r2, r4
 8011cea:	1b19      	subs	r1, r3, r4
 8011cec:	1b10      	subs	r0, r2, r4
 8011cee:	4281      	cmp	r1, r0
 8011cf0:	dde7      	ble.n	8011cc2 <__utoa+0x36>
 8011cf2:	7811      	ldrb	r1, [r2, #0]
 8011cf4:	7818      	ldrb	r0, [r3, #0]
 8011cf6:	f802 0b01 	strb.w	r0, [r2], #1
 8011cfa:	f803 1901 	strb.w	r1, [r3], #-1
 8011cfe:	e7f4      	b.n	8011cea <__utoa+0x5e>
 8011d00:	460b      	mov	r3, r1
 8011d02:	e7e2      	b.n	8011cca <__utoa+0x3e>
 8011d04:	08012214 	.word	0x08012214

08011d08 <__locale_ctype_ptr_l>:
 8011d08:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011d0c:	4770      	bx	lr

08011d0e <__ascii_mbtowc>:
 8011d0e:	b082      	sub	sp, #8
 8011d10:	b901      	cbnz	r1, 8011d14 <__ascii_mbtowc+0x6>
 8011d12:	a901      	add	r1, sp, #4
 8011d14:	b142      	cbz	r2, 8011d28 <__ascii_mbtowc+0x1a>
 8011d16:	b14b      	cbz	r3, 8011d2c <__ascii_mbtowc+0x1e>
 8011d18:	7813      	ldrb	r3, [r2, #0]
 8011d1a:	600b      	str	r3, [r1, #0]
 8011d1c:	7812      	ldrb	r2, [r2, #0]
 8011d1e:	1c10      	adds	r0, r2, #0
 8011d20:	bf18      	it	ne
 8011d22:	2001      	movne	r0, #1
 8011d24:	b002      	add	sp, #8
 8011d26:	4770      	bx	lr
 8011d28:	4610      	mov	r0, r2
 8011d2a:	e7fb      	b.n	8011d24 <__ascii_mbtowc+0x16>
 8011d2c:	f06f 0001 	mvn.w	r0, #1
 8011d30:	e7f8      	b.n	8011d24 <__ascii_mbtowc+0x16>

08011d32 <__ascii_wctomb>:
 8011d32:	b149      	cbz	r1, 8011d48 <__ascii_wctomb+0x16>
 8011d34:	2aff      	cmp	r2, #255	; 0xff
 8011d36:	bf85      	ittet	hi
 8011d38:	238a      	movhi	r3, #138	; 0x8a
 8011d3a:	6003      	strhi	r3, [r0, #0]
 8011d3c:	700a      	strbls	r2, [r1, #0]
 8011d3e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011d42:	bf98      	it	ls
 8011d44:	2001      	movls	r0, #1
 8011d46:	4770      	bx	lr
 8011d48:	4608      	mov	r0, r1
 8011d4a:	4770      	bx	lr

08011d4c <_init>:
 8011d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d4e:	bf00      	nop
 8011d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d52:	bc08      	pop	{r3}
 8011d54:	469e      	mov	lr, r3
 8011d56:	4770      	bx	lr

08011d58 <_fini>:
 8011d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d5a:	bf00      	nop
 8011d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d5e:	bc08      	pop	{r3}
 8011d60:	469e      	mov	lr, r3
 8011d62:	4770      	bx	lr
